(function ($hx_exports) { "use strict";
$hx_exports.lime = $hx_exports.lime || {};
$hx_exports.openfl = $hx_exports.openfl || {};
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new lime.app.Application();
	app.create(ApplicationMain.config);
	openfl.Lib.application = app;
	var stage = new openfl.display.Stage(app.windows[0].__width,app.windows[0].__height,ApplicationMain.config.background);
	stage.addChild(openfl.Lib.current);
	app.addModule(stage);
	var display = new NMEPreloader();
	ApplicationMain.preloader = new openfl.display.Preloader(display);
	ApplicationMain.preloader.onComplete = ApplicationMain.init;
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("Oxygen Bold");
	types.push("FONT");
	urls.push("Oxygen Regular");
	types.push("FONT");
	urls.push("assets/styles/default/circle.png");
	types.push("IMAGE");
	urls.push("assets/styles/default/collapse.png");
	types.push("IMAGE");
	urls.push("assets/styles/default/cross.png");
	types.push("IMAGE");
	urls.push("assets/styles/default/expand.png");
	types.push("IMAGE");
	urls.push("assets/styles/default/up_down.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_down.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_down_dark.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_down_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_left.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_left_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_right.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_right2.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_right_dark.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_right_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_up.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_up_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/circle_dark.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/cross_dark.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/cross_dark_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/cross_light_small.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/gradient.css");
	types.push("TEXT");
	urls.push("assets/styles/gradient/gradient.min.css");
	types.push("TEXT");
	urls.push("assets/styles/gradient/gradient_mobile.css");
	types.push("TEXT");
	urls.push("assets/styles/gradient/gradient_mobile.min.css");
	types.push("TEXT");
	urls.push("assets/styles/gradient/gripper_horizontal.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/gripper_horizontal_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/gripper_vertical.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/gripper_vertical_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/hsplitter_gripper.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/vsplitter_gripper.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/accordion.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/accordion.min.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/button.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/buttons.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/buttons.min.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/calendar.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/checkbox.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/container.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/down_arrow.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/hscroll_thumb_gripper_down.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/hscroll_thumb_gripper_over.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/hscroll_thumb_gripper_up.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/left_arrow.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/right_arrow.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/up_arrow.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/vscroll_thumb_gripper_down.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/vscroll_thumb_gripper_over.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/vscroll_thumb_gripper_up.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/hprogress.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/hscroll.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/listview.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/listview.min.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/listview.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/menus.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/optionbox.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/popup.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/popups.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/rtf.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/scrolls.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/scrolls.min.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/sliders.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/tab.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/tabs.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/textinput.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/vprogress.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/vscroll.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/windows.css");
	types.push("TEXT");
	urls.push("styles/default/circle.png");
	types.push("IMAGE");
	urls.push("styles/default/collapse.png");
	types.push("IMAGE");
	urls.push("styles/default/cross.png");
	types.push("IMAGE");
	urls.push("styles/default/expand.png");
	types.push("IMAGE");
	urls.push("styles/default/up_down.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_down.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_down_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_down_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_left.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_left_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right2.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_up.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_up_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/circle_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/cross_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/cross_dark_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/cross_light_small.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gradient.css");
	types.push("TEXT");
	urls.push("styles/gradient/gradient.min.css");
	types.push("TEXT");
	urls.push("styles/gradient/gradient_mobile.css");
	types.push("TEXT");
	urls.push("styles/gradient/gradient_mobile.min.css");
	types.push("TEXT");
	urls.push("styles/gradient/gripper_horizontal.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gripper_horizontal_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gripper_vertical.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gripper_vertical_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/hsplitter_gripper.png");
	types.push("IMAGE");
	urls.push("styles/gradient/vsplitter_gripper.png");
	types.push("IMAGE");
	urls.push("styles/windows/accordion.css");
	types.push("TEXT");
	urls.push("styles/windows/accordion.min.css");
	types.push("TEXT");
	urls.push("styles/windows/button.png");
	types.push("IMAGE");
	urls.push("styles/windows/buttons.css");
	types.push("TEXT");
	urls.push("styles/windows/buttons.min.css");
	types.push("TEXT");
	urls.push("styles/windows/calendar.css");
	types.push("TEXT");
	urls.push("styles/windows/checkbox.png");
	types.push("IMAGE");
	urls.push("styles/windows/container.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/down_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/hscroll_thumb_gripper_down.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/hscroll_thumb_gripper_over.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/hscroll_thumb_gripper_up.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/left_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/right_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/up_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/vscroll_thumb_gripper_down.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/vscroll_thumb_gripper_over.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/vscroll_thumb_gripper_up.png");
	types.push("IMAGE");
	urls.push("styles/windows/hprogress.png");
	types.push("IMAGE");
	urls.push("styles/windows/hscroll.png");
	types.push("IMAGE");
	urls.push("styles/windows/listview.css");
	types.push("TEXT");
	urls.push("styles/windows/listview.min.css");
	types.push("TEXT");
	urls.push("styles/windows/listview.png");
	types.push("IMAGE");
	urls.push("styles/windows/menus.css");
	types.push("TEXT");
	urls.push("styles/windows/optionbox.png");
	types.push("IMAGE");
	urls.push("styles/windows/popup.png");
	types.push("IMAGE");
	urls.push("styles/windows/popups.css");
	types.push("TEXT");
	urls.push("styles/windows/rtf.css");
	types.push("TEXT");
	urls.push("styles/windows/scrolls.css");
	types.push("TEXT");
	urls.push("styles/windows/scrolls.min.css");
	types.push("TEXT");
	urls.push("styles/windows/sliders.css");
	types.push("TEXT");
	urls.push("styles/windows/tab.png");
	types.push("IMAGE");
	urls.push("styles/windows/tabs.css");
	types.push("TEXT");
	urls.push("styles/windows/textinput.png");
	types.push("IMAGE");
	urls.push("styles/windows/vprogress.png");
	types.push("IMAGE");
	urls.push("styles/windows/vscroll.png");
	types.push("IMAGE");
	urls.push("styles/windows/windows.css");
	types.push("TEXT");
	urls.push("Oxygen Bold");
	types.push("FONT");
	urls.push("Oxygen Regular");
	types.push("FONT");
	urls.push("libraries/swfsrc/swfsrc.dat");
	types.push("TEXT");
	urls.push("libraries/swfsrc.json");
	types.push("TEXT");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(loaded == total) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { antialiasing : 0, background : 0, borderless : false, company : "vic", depthBuffer : false, file : "TestOpenFL3", fps : 60, fullscreen : false, hardware : true, height : 480, orientation : "", packageName : "TestOpenFL3", resizable : true, stencilBuffer : true, title : "TestOpenFL3", version : "1.0.0", vsync : false, width : 800};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime.Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	openfl.Lib.current.stage.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE,false,false));
};
var openfl = {};
openfl.events = {};
openfl.events.IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl.events.IEventDispatcher;
openfl.events.IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl.events.IEventDispatcher.prototype = {
	__class__: openfl.events.IEventDispatcher
};
openfl.events.EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl.events.EventDispatcher;
openfl.events.EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl.events.EventDispatcher.__interfaces__ = [openfl.events.IEventDispatcher];
openfl.events.EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl.events.EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) this.__eventMap = new haxe.ds.StringMap();
		if(!this.__eventMap.exists(type)) {
			var list = new Array();
			list.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			list1.sort(openfl.events.EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var list = this.__eventMap.get(event.type);
		if(list == null) return false;
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl.events.EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) return true;
			}
			if(listener == list[index]) index++;
		}
		return true;
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,capture) {
		if(capture == null) capture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,capture)) {
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) this.__eventMap.remove(type);
		if(!this.__eventMap.iterator().hasNext()) this.__eventMap = null;
	}
	,toString: function() {
		var full = Type.getClassName(Type.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__class__: openfl.events.EventDispatcher
};
openfl.display = {};
openfl.display.IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl.display.IBitmapDrawable;
openfl.display.IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl.display.IBitmapDrawable.prototype = {
	__class__: openfl.display.IBitmapDrawable
};
openfl.display.DisplayObject = function() {
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl.events.EventDispatcher.call(this);
	this.__alpha = 1;
	this.__rotation = 0;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__visible = true;
	this.__x = 0;
	this.__y = 0;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl.geom.Matrix();
	this.__rotationCache = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__worldColorTransform = new openfl.geom.ColorTransform();
	this.set_name("instance" + ++openfl.display.DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl.display.DisplayObject;
openfl.display.DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl.display.DisplayObject.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.DisplayObject.__super__ = openfl.events.EventDispatcher;
openfl.display.DisplayObject.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	dispatchEvent: function(event) {
		var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl.events.EventPhase.BUBBLING_PHASE;
			this.parent.dispatchEvent(event);
		}
		return result;
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = this.__getTransform();
		if(targetCoordinateSpace != null) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			matrix.concat(targetCoordinateSpace.__worldTransform.clone().invert());
		}
		var bounds = new openfl.geom.Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__getTransform().clone().invert().transformPoint(pos);
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var bounds = new openfl.geom.Rectangle();
			this.__getBounds(bounds,this.__getTransform());
			return bounds.containsPoint(new openfl.geom.Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getTransform();
		this.__getBounds(rect,new openfl.geom.Matrix());
	}
	,__getTransform: function() {
		if(this.__transformDirty || openfl.display.DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(this.__graphics != null) {
			if(this.get_visible() && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
				if(!interactiveOnly) stack.push(this);
				return true;
			}
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.cairo.CairoShape.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.cairo.CairoGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasShape.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.dom.DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.render(this,renderSession);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl.display.DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(this.get_rotation() != this.__rotationCache) {
			this.__rotationCache = this.get_rotation();
			var radians = this.get_rotation() * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
		}
		if(this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var a00 = this.__rotationCosine * this.get_scaleX();
			var a01 = this.__rotationSine * this.get_scaleX();
			var a10 = -this.__rotationSine * this.get_scaleY();
			var a11 = this.__rotationCosine * this.get_scaleY();
			var b00 = parentTransform.a;
			var b01 = parentTransform.b;
			var b10 = parentTransform.c;
			var b11 = parentTransform.d;
			if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
			this.__worldTransform.a = a00 * b00 + a01 * b10;
			this.__worldTransform.b = a00 * b01 + a01 * b11;
			this.__worldTransform.c = a10 * b00 + a11 * b10;
			this.__worldTransform.d = a10 * b01 + a11 * b11;
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x() * b00 + this.get_y() * b10 + parentTransform.tx;
				this.__worldTransform.ty = this.get_x() * b01 + this.get_y() * b11 + parentTransform.ty;
			} else {
				this.__worldTransform.tx = (this.get_x() - this.get_scrollRect().x) * b00 + (this.get_y() - this.get_scrollRect().y) * b10 + parentTransform.tx;
				this.__worldTransform.ty = (this.get_x() - this.get_scrollRect().x) * b01 + (this.get_y() - this.get_scrollRect().y) * b11 + parentTransform.ty;
			}
			if(this.__isMask) this.__maskCached = false;
		} else {
			this.__worldTransform.a = this.__rotationCosine * this.get_scaleX();
			this.__worldTransform.c = -this.__rotationSine * this.get_scaleY();
			this.__worldTransform.b = this.__rotationSine * this.get_scaleX();
			this.__worldTransform.d = this.__rotationCosine * this.get_scaleY();
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x();
				this.__worldTransform.ty = this.get_y();
			} else {
				this.__worldTransform.tx = this.get_y() - this.get_scrollRect().x;
				this.__worldTransform.ty = this.get_y() - this.get_scrollRect().y;
			}
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl.display.Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
			} else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.push(openfl.display.DrawCommand.OverrideMatrix(this.__worldTransform));
			maskGraphics.__commands = maskGraphics.__commands.concat(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl.geom.Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl.geom.Matrix.__identity);
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return new Array(); else return this.__filters.slice();
	}
	,set_filters: function(value) {
		return value;
	}
	,get_height: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.height * this.get_scaleY();
	}
	,set_height: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
			this.__maskGraphics = null;
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(this.stage.__mouseX,0)).x;
		return 0;
	}
	,get_mouseY: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(0,this.stage.__mouseY)).y;
		return 0;
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl.Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__rotation = value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleX = value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(this.__scaleY != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleY = value;
	}
	,get_scrollRect: function() {
		return this.__scrollRect;
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		return this.__transform;
	}
	,set_transform: function(value) {
		if(value == null) throw new openfl.errors.TypeError("Parameter transform must be non-null.");
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
		this.__transform.set_matrix(value.get_matrix().clone());
		this.__transform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__transform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.width * this.get_scaleX();
	}
	,set_width: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(value != this.__x) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__x = value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(value != this.__y) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__y = value;
	}
	,__class__: openfl.display.DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
openfl.display.InteractiveObject = function() {
	openfl.display.DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.tabEnabled = true;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl.display.InteractiveObject;
openfl.display.InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl.display.InteractiveObject.__super__ = openfl.display.DisplayObject;
openfl.display.InteractiveObject.prototype = $extend(openfl.display.DisplayObject.prototype,{
	requestSoftKeyboard: function() {
		openfl.Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__class__: openfl.display.InteractiveObject
});
openfl.display.DisplayObjectContainer = function() {
	openfl.display.InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = new Array();
	this.__removedChildren = new Array();
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl.display.DisplayObjectContainer;
openfl.display.DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl.display.DisplayObjectContainer.__super__ = openfl.display.InteractiveObject;
openfl.display.DisplayObjectContainer.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl.events.Event(openfl.events.Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw "Invalid index position " + index;
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl.events.Event(openfl.events.Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		point = this.localToGlobal(point);
		var stack = new Array();
		this.__hitTest(point.x,point.y,false,stack,false);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED,true));
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new openfl.errors.RangeError("The supplied index is out of bounds.");
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		var result = openfl.display.InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCancelled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return result;
	}
	,__getBounds: function(rect,matrix) {
		openfl.display.InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		var matrixCache = null;
		if(matrix != null) {
			matrixCache = this.__worldTransform;
			this.__worldTransform = matrix;
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.__renderable) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__worldTransform = matrixCache;
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true)) {
					if(stack != null) stack.push(this);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true)) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,this);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false);
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl.display.InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.cairo.CairoGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		renderSession.cairo.rectangle(0,0,bounds.width,bounds.height);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl.display.InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popMask();
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl.display.InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		var masked = this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.length > 0;
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.pushMask(this);
			renderSession.spriteBatch.start();
		}
		openfl.display.InteractiveObject.prototype.__renderGL.call(this,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.popMask();
			renderSession.spriteBatch.start();
		}
		this.__removedChildren = [];
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl.display.InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl.display.InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl.display.DisplayObjectContainer
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
openfl.display.Sprite = function() {
	openfl.display.DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl.display.LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl.display.Sprite;
openfl.display.Sprite.__name__ = ["openfl","display","Sprite"];
openfl.display.Sprite.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Sprite.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime.ui.MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var length = 0;
		if(stack != null) length = stack.length;
		if(openfl.display.DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly)) return interactiveOnly; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl.display.Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl.display.Sprite
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	openfl.display.Sprite.call(this);
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.added));
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	openfl.Lib.current.stage.align = openfl.display.StageAlign.TOP_LEFT;
	openfl.Lib.current.stage.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	openfl.Lib.current.addChild(new Main());
};
Main.__super__ = openfl.display.Sprite;
Main.prototype = $extend(openfl.display.Sprite.prototype,{
	resize: function(e) {
		if(!this.inited) this.init();
	}
	,init: function() {
		if(this.inited) return;
		this.inited = true;
		this.testBox2d();
	}
	,testHaxeUI: function() {
		haxe.ui.toolkit.core.Toolkit.init();
		haxe.ui.toolkit.core.Toolkit.openFullscreen(function(root) {
			var button = new haxe.ui.toolkit.controls.Button();
			button.set_text("Click Me!");
			button.set_x(100);
			button.set_y(100);
			button.set_onClick(function(e) {
				e.get_component().set_text("You clicked me!");
			});
			root.addChild(button);
		});
		openfl.Lib.current.stage.set_color(16777215);
	}
	,testAway3d: function() {
		var _g = this;
		var v3d = new away3d.containers.View3D();
		this.addChild(v3d);
		var p = new away3d.entities.Mesh(new away3d.primitives.CubeGeometry());
		p.set_rotationX(30);
		p.set_rotationY(30);
		v3d.get_scene().addChild(p);
		this.addEventListener(openfl.events.Event.ENTER_FRAME,function(e) {
			v3d.render();
			var _g1 = p;
			var _g11 = _g1.get_rotationX();
			_g1.set_rotationX(_g11 + 1);
			_g11;
			var _g2 = p;
			var _g12 = _g2.get_rotationY();
			_g2.set_rotationY(_g12 + 1);
			_g12;
		});
		var snapShotView3d = function(v3d1) {
			var view3dBitmapData = new openfl.display.BitmapData(1000,800);
			v3d1.get_stage3DProxy().get_context3D().drawToBitmapData(view3dBitmapData);
			_g.addChild(new openfl.display.Bitmap(view3dBitmapData));
			var b = new lime.utils.ByteArray();
			var c = view3dBitmapData.encode(new openfl.geom.Rectangle(0,0,1000,800),new openfl.display.JPEGEncoderOptions(),b);
			haxe.Log.trace(b,{ fileName : "Main.hx", lineNumber : 135, className : "Main", methodName : "testAway3d", customParams : [c]});
		};
		var snapshot = function() {
			snapShotView3d(v3d);
		};
		Reflect.setField(window,"snapshot",snapshot);
	}
	,testBox2d: function() {
		var _g = this;
		var scale = 30;
		var helper = org.vic.box2d.Box2dHelper.inst;
		var b2w = helper.createWorld(new box2D.common.math.B2Vec2(0,0));
		var s = helper.createSphereBody(b2w,scale);
		s.setLinearDamping(5);
		s.setAngularDamping(5);
		s.getFixtureList().setRestitution(1);
		var ary_cube = [helper.createBoxBody(b2w,scale),helper.createBoxBody(b2w,scale),helper.createBoxBody(b2w,scale)];
		ary_cube.map(function(body) {
			body.setLinearDamping(10);
			body.setAngularDamping(10);
			body.setPosition(new box2D.common.math.B2Vec2(Math.random() * 500 / scale,Math.random() * 500 / scale));
		});
		this.addChild(helper.createDebugDraw(b2w,scale,new openfl.display.Sprite()));
		var acc = new box2D.common.math.B2Vec2();
		var speed = 5;
		this.addEventListener(openfl.events.Event.ENTER_FRAME,function(e) {
			s.getLinearVelocity().add(acc);
			helper.updateB2w(b2w);
		});
		openfl.Lib.current.stage.addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,function(e1) {
			s.setAwake(true);
			var _g1 = e1.keyCode;
			switch(_g1) {
			case 38:
				acc.y = -speed;
				break;
			case 40:
				acc.y = speed;
				break;
			case 37:
				acc.x = -speed;
				break;
			case 39:
				acc.x = speed;
				break;
			}
		});
		openfl.Lib.current.stage.addEventListener(openfl.events.KeyboardEvent.KEY_UP,function(e2) {
			var _g2 = e2.keyCode;
			switch(_g2) {
			case 38:
				acc.y = 0;
				break;
			case 40:
				acc.y = 0;
				break;
			case 37:
				acc.x = 0;
				break;
			case 39:
				acc.x = 0;
				break;
			}
		});
		var aa;
		var pointT;
		var ary_point = [];
		openfl.Assets.loadLibrary("swfsrc",function(lib) {
			aa = openfl.Assets.getMovieClip("swfsrc:mc_a");
			_g.addChild(aa);
			var testani = openfl.Assets.getMovieClip("swfsrc:mc_ani");
			testani.set_x(300);
			testani.set_y(300);
			testani.set_rotation(50);
			_g.addChild(testani);
			pointT = openfl.Assets.getMovieClip("swfsrc:pointT");
			var _g21 = 0;
			var _g11 = pointT.get_numChildren();
			while(_g21 < _g11) {
				var i = _g21++;
				var disobj = pointT.getChildAt(i);
				ary_point.push({ id : disobj.get_name().split("_")[1], x : disobj.get_x(), y : disobj.get_y()});
			}
			ary_point.sort(function(a,b) {
				var ai = Math.floor(a.id);
				var bi = Math.floor(b.id);
				if(ai > bi) return 1;
				return -1;
			});
			var at = ary_point.map(function(obj) {
				haxe.Log.trace(obj.id,{ fileName : "Main.hx", lineNumber : 235, className : "Main", methodName : "testBox2d"});
				return new box2D.common.math.B2Vec2(obj.x / scale,obj.y / scale);
			});
			helper.createCustomBody(b2w,scale,at);
		});
		var createRandomBody = function() {
			helper.createBoxBody(b2w,scale,2,Math.floor(Math.random() * 300),Math.floor(Math.random() * 300));
		};
		Reflect.setField(window,"createRandomBody",createRandomBody);
	}
	,added: function(e) {
		this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.added));
		this.stage.addEventListener(openfl.events.Event.RESIZE,$bind(this,this.resize));
		this.init();
	}
	,__class__: Main
});
var DocumentClass = function() {
	openfl.Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = ["DateTools"];
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "C":
		return StringTools.lpad(Std.string(Std["int"](d.getFullYear() / 100)),"0",2);
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H"?"0":" ",2);
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0?12:hour),e == "I"?"0":" ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) return "PM"; else return "AM";
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "s":
		return Std.string(Std["int"](d.getTime() / 1000));
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "t":
		return "\t";
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "u":
		var t = d.getDay();
		if(t == 0) return "7"; else if(t == null) return "null"; else return "" + t;
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	case "Y":
		return Std.string(d.getFullYear());
	default:
		throw "Date.format %" + e + "- not implemented yet.";
	}
};
DateTools.__format = function(d,f) {
	var r = new StringBuf();
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) break;
		r.addSub(f,p,np - p);
		r.add(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	r.addSub(f,p,f.length - p);
	return r.b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var lime = {};
lime.AssetLibrary = function() {
};
$hxClasses["lime.AssetLibrary"] = lime.AssetLibrary;
lime.AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime.AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function(handler) {
		handler(this);
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: lime.AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe.ds.StringMap();
	this.path = new haxe.ds.StringMap();
	this.className = new haxe.ds.StringMap();
	lime.AssetLibrary.call(this);
	var id;
	id = "assets/fonts/Oxygen-Bold.ttf";
	this.className.set(id,__ASSET__assets_fonts_oxygen_bold_ttf);
	this.type.set(id,"FONT");
	id = "assets/fonts/Oxygen.ttf";
	this.className.set(id,__ASSET__assets_fonts_oxygen_ttf);
	this.type.set(id,"FONT");
	id = "assets/styles/default/circle.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/default/collapse.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/default/cross.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/default/expand.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/default/up_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_down_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_down_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_left.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_left_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_right.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_right2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_right_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_right_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_up_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/circle_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/cross_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/cross_dark_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/cross_light_small.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/gradient.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/gradient/gradient.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/gradient/gradient_mobile.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/gradient/gradient_mobile.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/gradient/gripper_horizontal.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/gripper_horizontal_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/gripper_vertical.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/gripper_vertical_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/hsplitter_gripper.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/vsplitter_gripper.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/accordion.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/accordion.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/button.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/buttons.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/buttons.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/calendar.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/checkbox.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/container.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/down_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/hscroll_thumb_gripper_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/hscroll_thumb_gripper_over.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/hscroll_thumb_gripper_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/left_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/right_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/up_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/vscroll_thumb_gripper_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/vscroll_thumb_gripper_over.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/vscroll_thumb_gripper_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/hprogress.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/hscroll.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/listview.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/listview.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/listview.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/menus.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/optionbox.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/popup.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/popups.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/rtf.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/scrolls.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/scrolls.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/sliders.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/tab.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/tabs.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/textinput.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/vprogress.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/vscroll.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/windows.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/default/circle.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/collapse.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/cross.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/expand.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/up_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_down_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_down_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_left.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_left_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_up_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/circle_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/cross_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/cross_dark_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/cross_light_small.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gradient.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/gradient.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/gradient_mobile.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/gradient_mobile.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/gripper_horizontal.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gripper_horizontal_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gripper_vertical.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gripper_vertical_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/hsplitter_gripper.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/vsplitter_gripper.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/accordion.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/accordion.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/button.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/buttons.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/buttons.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/calendar.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/checkbox.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/container.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/down_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/hscroll_thumb_gripper_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/hscroll_thumb_gripper_over.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/hscroll_thumb_gripper_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/left_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/right_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/up_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/vscroll_thumb_gripper_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/vscroll_thumb_gripper_over.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/vscroll_thumb_gripper_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/hprogress.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/hscroll.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/listview.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/listview.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/listview.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/menus.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/optionbox.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/popup.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/popups.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/rtf.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/scrolls.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/scrolls.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/sliders.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/tab.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/tabs.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/textinput.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/vprogress.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/vscroll.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/windows.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "fonts/Oxygen-Bold.ttf";
	this.className.set(id,__ASSET__fonts_oxygen_bold_ttf);
	this.type.set(id,"FONT");
	id = "fonts/Oxygen.ttf";
	this.className.set(id,__ASSET__fonts_oxygen_ttf);
	this.type.set(id,"FONT");
	id = "libraries/swfsrc/swfsrc.dat";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "libraries/swfsrc.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	var assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime.AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime.AssetLibrary.prototype,{
	exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") {
			bytes = new lime.utils.ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js.Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime.text.Font);
	}
	,getImage: function(id) {
		return lime.graphics.Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") return data; else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: DefaultAssetLibrary
});
lime.text = {};
lime.text.Font = function(name) {
	this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime.text.Font;
lime.text.Font.__name__ = ["lime","text","Font"];
lime.text.Font.fromBytes = function(bytes) {
	var font = new lime.text.Font();
	font.__fromBytes(bytes);
	return font;
};
lime.text.Font.fromFile = function(path) {
	var font = new lime.text.Font();
	font.__fromFile(path);
	return font;
};
lime.text.Font.prototype = {
	decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime.text.Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var __ASSET__assets_fonts_oxygen_bold_ttf = function() {
	lime.text.Font.call(this);
	this.name = "Oxygen Bold";
};
$hxClasses["__ASSET__assets_fonts_oxygen_bold_ttf"] = __ASSET__assets_fonts_oxygen_bold_ttf;
__ASSET__assets_fonts_oxygen_bold_ttf.__name__ = ["__ASSET__assets_fonts_oxygen_bold_ttf"];
__ASSET__assets_fonts_oxygen_bold_ttf.__super__ = lime.text.Font;
__ASSET__assets_fonts_oxygen_bold_ttf.prototype = $extend(lime.text.Font.prototype,{
	__class__: __ASSET__assets_fonts_oxygen_bold_ttf
});
var __ASSET__assets_fonts_oxygen_ttf = function() {
	lime.text.Font.call(this);
	this.name = "Oxygen Regular";
};
$hxClasses["__ASSET__assets_fonts_oxygen_ttf"] = __ASSET__assets_fonts_oxygen_ttf;
__ASSET__assets_fonts_oxygen_ttf.__name__ = ["__ASSET__assets_fonts_oxygen_ttf"];
__ASSET__assets_fonts_oxygen_ttf.__super__ = lime.text.Font;
__ASSET__assets_fonts_oxygen_ttf.prototype = $extend(lime.text.Font.prototype,{
	__class__: __ASSET__assets_fonts_oxygen_ttf
});
var __ASSET__fonts_oxygen_bold_ttf = function() {
	lime.text.Font.call(this);
	this.name = "Oxygen Bold";
};
$hxClasses["__ASSET__fonts_oxygen_bold_ttf"] = __ASSET__fonts_oxygen_bold_ttf;
__ASSET__fonts_oxygen_bold_ttf.__name__ = ["__ASSET__fonts_oxygen_bold_ttf"];
__ASSET__fonts_oxygen_bold_ttf.__super__ = lime.text.Font;
__ASSET__fonts_oxygen_bold_ttf.prototype = $extend(lime.text.Font.prototype,{
	__class__: __ASSET__fonts_oxygen_bold_ttf
});
var __ASSET__fonts_oxygen_ttf = function() {
	lime.text.Font.call(this);
	this.name = "Oxygen Regular";
};
$hxClasses["__ASSET__fonts_oxygen_ttf"] = __ASSET__fonts_oxygen_ttf;
__ASSET__fonts_oxygen_ttf.__name__ = ["__ASSET__fonts_oxygen_ttf"];
__ASSET__fonts_oxygen_ttf.__super__ = lime.text.Font;
__ASSET__fonts_oxygen_ttf.prototype = $extend(lime.text.Font.prototype,{
	__class__: __ASSET__fonts_oxygen_ttf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,matchedRight: function() {
		if(this.r.m == null) throw "No string matched";
		var sz = this.r.m.index + this.r.m[0].length;
		return this.r.s.substr(sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) throw "No string matched";
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10?"0" + m:"" + m) + "-" + (d < 10?"0" + d:"" + d) + " " + (h < 10?"0" + h:"" + h) + ":" + (mi < 10?"0" + mi:"" + mi) + ":" + (s < 10?"0" + s:"" + s);
};
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw "Invalid date format : " + s;
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.mapi = function(it,f) {
	var l = new List();
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		l.add(f(i++,x));
	}
	return l;
};
Lambda.foreach = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!f(x)) return false;
	}
	return true;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var v2 = $it0.next();
		if(v == v2) return i;
		i++;
	}
	return -1;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,first: function() {
		if(this.h == null) return null; else return this.h[0];
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,iterator: function() {
		return { h : this.h, hasNext : function() {
			return this.h != null;
		}, next : function() {
			if(this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			return x;
		}};
	}
	,__class__: List
};
var IMap = function() { };
$hxClasses["IMap"] = IMap;
IMap.__name__ = ["IMap"];
IMap.prototype = {
	__class__: IMap
};
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl.display.Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl.display.Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl.display.Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl.display.Sprite;
NMEPreloader.prototype = $extend(openfl.display.Sprite.prototype,{
	getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		var height = 480;
		if(height > 0) return height; else return openfl.Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 800;
		if(width > 0) return width; else return openfl.Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js.Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) return 0; else return Math.floor(Math.random() * x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split("\"").join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = c + s;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	return js.Boot.getClass(o);
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw "Too many arguments";
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw "No such constructor " + constr;
	if(Reflect.isFunction(f)) {
		if(params == null) throw "Constructor " + constr + " need parameters";
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) throw "Constructor " + constr + " does not need parameters";
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) throw index + " is not a valid enum constructor index";
	return Type.createEnum(e,c,params);
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js.Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		return false;
	}
	return true;
};
var XmlType = $hxClasses["XmlType"] = { __ename__ : ["XmlType"], __constructs__ : [] };
var Xml = function() {
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.Element = null;
Xml.PCData = null;
Xml.CData = null;
Xml.Comment = null;
Xml.DocType = null;
Xml.ProcessingInstruction = null;
Xml.Document = null;
Xml.parse = function(str) {
	return haxe.xml.Parser.parse(str);
};
Xml.createElement = function(name) {
	var r = new Xml();
	r.nodeType = Xml.Element;
	r._children = new Array();
	r._attributes = new haxe.ds.StringMap();
	r.set_nodeName(name);
	return r;
};
Xml.createPCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.PCData;
	r.set_nodeValue(data);
	return r;
};
Xml.createCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.CData;
	r.set_nodeValue(data);
	return r;
};
Xml.createComment = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Comment;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocType = function(data) {
	var r = new Xml();
	r.nodeType = Xml.DocType;
	r.set_nodeValue(data);
	return r;
};
Xml.createProcessingInstruction = function(data) {
	var r = new Xml();
	r.nodeType = Xml.ProcessingInstruction;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocument = function() {
	var r = new Xml();
	r.nodeType = Xml.Document;
	r._children = new Array();
	return r;
};
Xml.prototype = {
	get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName;
	}
	,set_nodeName: function(n) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName = n;
	}
	,get_nodeValue: function() {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue = v;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.exists(att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.keys();
	}
	,iterator: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			return this.cur < this.x.length;
		}, next : function() {
			return this.x[this.cur++];
		}};
	}
	,elements: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				if(this.x[k].nodeType == Xml.Element) break;
				k += 1;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k1 = this.cur;
			var l1 = this.x.length;
			while(k1 < l1) {
				var n = this.x[k1];
				k1 += 1;
				if(n.nodeType == Xml.Element) {
					this.cur = k1;
					return n;
				}
			}
			return null;
		}};
	}
	,firstChild: function() {
		if(this._children == null) throw "bad nodetype";
		return this._children[0];
	}
	,firstElement: function() {
		if(this._children == null) throw "bad nodetype";
		var cur = 0;
		var l = this._children.length;
		while(cur < l) {
			var n = this._children[cur];
			if(n.nodeType == Xml.Element) return n;
			cur++;
		}
		return null;
	}
	,addChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.push(x);
	}
	,toString: function() {
		if(this.nodeType == Xml.PCData) return StringTools.htmlEscape(this._nodeValue);
		if(this.nodeType == Xml.CData) return "<![CDATA[" + this._nodeValue + "]]>";
		if(this.nodeType == Xml.Comment) return "<!--" + this._nodeValue + "-->";
		if(this.nodeType == Xml.DocType) return "<!DOCTYPE " + this._nodeValue + ">";
		if(this.nodeType == Xml.ProcessingInstruction) return "<?" + this._nodeValue + "?>";
		var s = new StringBuf();
		if(this.nodeType == Xml.Element) {
			s.b += "<";
			s.b += Std.string(this._nodeName);
			var $it0 = this._attributes.keys();
			while( $it0.hasNext() ) {
				var k = $it0.next();
				s.b += " ";
				if(k == null) s.b += "null"; else s.b += "" + k;
				s.b += "=\"";
				s.add(this._attributes.get(k));
				s.b += "\"";
			}
			if(this._children.length == 0) {
				s.b += "/>";
				return s.b;
			}
			s.b += ">";
		}
		var $it1 = this.iterator();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			s.add(x.toString());
		}
		if(this.nodeType == Xml.Element) {
			s.b += "</";
			s.b += Std.string(this._nodeName);
			s.b += ">";
		}
		return s.b;
	}
	,__class__: Xml
	,__properties__: {set_nodeValue:"set_nodeValue",get_nodeValue:"get_nodeValue",set_nodeName:"set_nodeName",get_nodeName:"get_nodeName"}
};
var away3d = {};
away3d.Away3D = function() { };
$hxClasses["away3d.Away3D"] = away3d.Away3D;
away3d.Away3D.__name__ = ["away3d","Away3D"];
away3d.animators = {};
away3d.animators.IAnimationSet = function() { };
$hxClasses["away3d.animators.IAnimationSet"] = away3d.animators.IAnimationSet;
away3d.animators.IAnimationSet.__name__ = ["away3d","animators","IAnimationSet"];
away3d.animators.IAnimationSet.prototype = {
	__class__: away3d.animators.IAnimationSet
	,__properties__: {get_usesCPU:"get_usesCPU"}
};
away3d.animators.IAnimator = function() { };
$hxClasses["away3d.animators.IAnimator"] = away3d.animators.IAnimator;
away3d.animators.IAnimator.__name__ = ["away3d","animators","IAnimator"];
away3d.animators.IAnimator.prototype = {
	__class__: away3d.animators.IAnimator
	,__properties__: {get_animationSet:"get_animationSet"}
};
away3d.materials = {};
away3d.materials.compilation = {};
away3d.materials.compilation.ShaderRegisterCache = function(profile) {
	this._profile = profile;
};
$hxClasses["away3d.materials.compilation.ShaderRegisterCache"] = away3d.materials.compilation.ShaderRegisterCache;
away3d.materials.compilation.ShaderRegisterCache.__name__ = ["away3d","materials","compilation","ShaderRegisterCache"];
away3d.materials.compilation.ShaderRegisterCache.prototype = {
	reset: function() {
		this._fragmentTempCache = new away3d.materials.compilation.RegisterPool("ft",8,false);
		this._vertexTempCache = new away3d.materials.compilation.RegisterPool("vt",8,false);
		this._varyingCache = new away3d.materials.compilation.RegisterPool("v",8);
		this._textureCache = new away3d.materials.compilation.RegisterPool("fs",8);
		this._vertexAttributesCache = new away3d.materials.compilation.RegisterPool("va",8);
		this._fragmentConstantsCache = new away3d.materials.compilation.RegisterPool("fc",28);
		this._vertexConstantsCache = new away3d.materials.compilation.RegisterPool("vc",128);
		this._fragmentOutputRegister = new away3d.materials.compilation.ShaderRegisterElement("oc",-1);
		this._vertexOutputRegister = new away3d.materials.compilation.ShaderRegisterElement("op",-1);
		this._numUsedVertexConstants = 0;
		this._numUsedStreams = 0;
		this._numUsedTextures = 0;
		this._numUsedVaryings = 0;
		this._numUsedFragmentConstants = 0;
		var i;
		i = 0;
		while(i < this._vertexAttributesOffset) {
			this.getFreeVertexAttribute();
			++i;
		}
		i = 0;
		while(i < this._vertexConstantOffset) {
			this.getFreeVertexConstant();
			++i;
		}
		i = 0;
		while(i < this._varyingsOffset) {
			this.getFreeVarying();
			++i;
		}
		i = 0;
		while(i < this._fragmentConstantOffset) {
			this.getFreeFragmentConstant();
			++i;
		}
	}
	,dispose: function() {
		this._fragmentTempCache.dispose();
		this._vertexTempCache.dispose();
		this._varyingCache.dispose();
		this._fragmentConstantsCache.dispose();
		this._vertexAttributesCache.dispose();
		this._fragmentTempCache = null;
		this._vertexTempCache = null;
		this._varyingCache = null;
		this._fragmentConstantsCache = null;
		this._vertexAttributesCache = null;
		this._fragmentOutputRegister = null;
		this._vertexOutputRegister = null;
	}
	,addFragmentTempUsages: function(register,usageCount) {
		this._fragmentTempCache.addUsage(register,usageCount);
	}
	,removeFragmentTempUsage: function(register) {
		this._fragmentTempCache.removeUsage(register);
	}
	,addVertexTempUsages: function(register,usageCount) {
		this._vertexTempCache.addUsage(register,usageCount);
	}
	,removeVertexTempUsage: function(register) {
		this._vertexTempCache.removeUsage(register);
	}
	,getFreeFragmentVectorTemp: function() {
		return this._fragmentTempCache.requestFreeVectorReg();
	}
	,getFreeFragmentSingleTemp: function() {
		return this._fragmentTempCache.requestFreeRegComponent();
	}
	,getFreeVarying: function() {
		++this._numUsedVaryings;
		return this._varyingCache.requestFreeVectorReg();
	}
	,getFreeFragmentConstant: function() {
		++this._numUsedFragmentConstants;
		return this._fragmentConstantsCache.requestFreeVectorReg();
	}
	,getFreeVertexConstant: function() {
		++this._numUsedVertexConstants;
		return this._vertexConstantsCache.requestFreeVectorReg();
	}
	,getFreeVertexVectorTemp: function() {
		return this._vertexTempCache.requestFreeVectorReg();
	}
	,getFreeVertexSingleTemp: function() {
		return this._vertexTempCache.requestFreeRegComponent();
	}
	,getFreeVertexAttribute: function() {
		++this._numUsedStreams;
		return this._vertexAttributesCache.requestFreeVectorReg();
	}
	,getFreeTextureReg: function() {
		++this._numUsedTextures;
		return this._textureCache.requestFreeVectorReg();
	}
	,get_vertexConstantOffset: function() {
		return this._vertexConstantOffset;
	}
	,set_vertexConstantOffset: function(vertexConstantOffset) {
		this._vertexConstantOffset = vertexConstantOffset;
		return vertexConstantOffset;
	}
	,get_vertexAttributesOffset: function() {
		return this._vertexAttributesOffset;
	}
	,set_vertexAttributesOffset: function(value) {
		this._vertexAttributesOffset = value;
		return value;
	}
	,get_varyingsOffset: function() {
		return this._varyingsOffset;
	}
	,set_varyingsOffset: function(value) {
		this._varyingsOffset = value;
		return value;
	}
	,get_fragmentConstantOffset: function() {
		return this._fragmentConstantOffset;
	}
	,set_fragmentConstantOffset: function(value) {
		this._fragmentConstantOffset = value;
		return value;
	}
	,get_fragmentOutputRegister: function() {
		return this._fragmentOutputRegister;
	}
	,get_numUsedVertexConstants: function() {
		return this._numUsedVertexConstants;
	}
	,get_numUsedFragmentConstants: function() {
		return this._numUsedFragmentConstants;
	}
	,get_numUsedStreams: function() {
		return this._numUsedStreams;
	}
	,get_numUsedTextures: function() {
		return this._numUsedTextures;
	}
	,get_numUsedVaryings: function() {
		return this._numUsedVaryings;
	}
	,__class__: away3d.materials.compilation.ShaderRegisterCache
	,__properties__: {get_numUsedVaryings:"get_numUsedVaryings",get_numUsedTextures:"get_numUsedTextures",get_numUsedStreams:"get_numUsedStreams",get_numUsedFragmentConstants:"get_numUsedFragmentConstants",get_numUsedVertexConstants:"get_numUsedVertexConstants",get_fragmentOutputRegister:"get_fragmentOutputRegister",set_fragmentConstantOffset:"set_fragmentConstantOffset",get_fragmentConstantOffset:"get_fragmentConstantOffset",set_varyingsOffset:"set_varyingsOffset",get_varyingsOffset:"get_varyingsOffset",set_vertexAttributesOffset:"set_vertexAttributesOffset",get_vertexAttributesOffset:"get_vertexAttributesOffset",set_vertexConstantOffset:"set_vertexConstantOffset",get_vertexConstantOffset:"get_vertexConstantOffset"}
};
away3d.animators.data = {};
away3d.animators.data.AnimationRegisterCache = function(profile) {
	away3d.materials.compilation.ShaderRegisterCache.call(this,profile);
	this.indexDictionary = new haxe.ds.ObjectMap();
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.vertexConstantData = this1;
	var this3;
	this3 = new openfl.VectorData();
	var this4;
	this4 = new Array(0);
	this3.data = this4;
	this3.length = 0;
	this3.fixed = false;
	this.fragmentConstantData = this3;
};
$hxClasses["away3d.animators.data.AnimationRegisterCache"] = away3d.animators.data.AnimationRegisterCache;
away3d.animators.data.AnimationRegisterCache.__name__ = ["away3d","animators","data","AnimationRegisterCache"];
away3d.animators.data.AnimationRegisterCache.__super__ = away3d.materials.compilation.ShaderRegisterCache;
away3d.animators.data.AnimationRegisterCache.prototype = $extend(away3d.materials.compilation.ShaderRegisterCache.prototype,{
	reset: function() {
		away3d.materials.compilation.ShaderRegisterCache.prototype.reset.call(this);
		this.rotationRegisters = new Array();
		this.positionAttribute = this.getRegisterFromString(this.sourceRegisters[0]);
		this.scaleAndRotateTarget = this.getRegisterFromString(this.targetRegisters[0]);
		this.addVertexTempUsages(this.scaleAndRotateTarget,1);
		var i = 1;
		while(i < this.targetRegisters.length) {
			this.rotationRegisters.push(this.getRegisterFromString(this.targetRegisters[i]));
			this.addVertexTempUsages(this.rotationRegisters[i - 1],1);
			i++;
		}
		this.scaleAndRotateTarget = new away3d.materials.compilation.ShaderRegisterElement(this.scaleAndRotateTarget.get_regName(),this.scaleAndRotateTarget.get_index());
		this.vertexZeroConst = this.getFreeVertexConstant();
		this.vertexZeroConst = new away3d.materials.compilation.ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),0);
		this.vertexOneConst = new away3d.materials.compilation.ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),1);
		this.vertexTwoConst = new away3d.materials.compilation.ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),2);
		this.positionTarget = this.getFreeVertexVectorTemp();
		this.addVertexTempUsages(this.positionTarget,1);
		this.positionTarget = new away3d.materials.compilation.ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index());
		if(this.needVelocity) {
			this.velocityTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.velocityTarget,1);
			this.velocityTarget = new away3d.materials.compilation.ShaderRegisterElement(this.velocityTarget.get_regName(),this.velocityTarget.get_index());
			this.vertexTime = new away3d.materials.compilation.ShaderRegisterElement(this.velocityTarget.get_regName(),this.velocityTarget.get_index(),3);
			this.vertexLife = new away3d.materials.compilation.ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index(),3);
		} else {
			var tempTime = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(tempTime,1);
			this.vertexTime = new away3d.materials.compilation.ShaderRegisterElement(tempTime.get_regName(),tempTime.get_index(),0);
			this.vertexLife = new away3d.materials.compilation.ShaderRegisterElement(tempTime.get_regName(),tempTime.get_index(),1);
		}
	}
	,setUVSourceAndTarget: function(UVAttribute,UVVaring) {
		this.uvVar = this.getRegisterFromString(UVVaring);
		this.uvAttribute = this.getRegisterFromString(UVAttribute);
		this.uvTarget = new away3d.materials.compilation.ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index());
	}
	,setRegisterIndex: function(node,parameterIndex,registerIndex) {
		var aNode;
		if(this.indexDictionary.h.__keys__[node.__id__] != null) aNode = this.indexDictionary.h[node.__id__]; else aNode = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8,0);
		aNode[parameterIndex] = registerIndex;
		this.indexDictionary.set(node,aNode);
	}
	,getRegisterIndex: function(node,parameterIndex) {
		return this.indexDictionary.h[node.__id__][parameterIndex];
	}
	,getInitCode: function() {
		var len = this.sourceRegisters.length;
		var code = "";
		var i = 0;
		while(i < len) {
			code += "mov " + this.targetRegisters[i] + "," + this.sourceRegisters[i] + "\n";
			i++;
		}
		code += "mov " + Std.string(this.positionTarget) + ".xyz," + this.vertexZeroConst.toString() + "\n";
		if(this.needVelocity) code += "mov " + Std.string(this.velocityTarget) + ".xyz," + this.vertexZeroConst.toString() + "\n";
		return code;
	}
	,getCombinationCode: function() {
		return "add " + Std.string(this.scaleAndRotateTarget) + ".xyz," + Std.string(this.scaleAndRotateTarget) + ".xyz," + Std.string(this.positionTarget) + ".xyz\n";
	}
	,initColorRegisters: function() {
		var code = "";
		if(this.hasColorMulNode) {
			this.colorMulTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.colorMulTarget,1);
			this.colorMulVary = this.getFreeVarying();
			code += "mov " + Std.string(this.colorMulTarget) + "," + Std.string(this.vertexOneConst) + "\n";
		}
		if(this.hasColorAddNode) {
			this.colorAddTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.colorAddTarget,1);
			this.colorAddVary = this.getFreeVarying();
			code += "mov " + Std.string(this.colorAddTarget) + "," + Std.string(this.vertexZeroConst) + "\n";
		}
		return code;
	}
	,getColorPassCode: function() {
		var code = "";
		if(this.needFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {
			if(this.hasColorMulNode) code += "mov " + Std.string(this.colorMulVary) + "," + Std.string(this.colorMulTarget) + "\n";
			if(this.hasColorAddNode) code += "mov " + Std.string(this.colorAddVary) + "," + Std.string(this.colorAddTarget) + "\n";
		}
		return code;
	}
	,getColorCombinationCode: function(shadedTarget) {
		var code = "";
		if(this.needFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {
			var colorTarget = this.getRegisterFromString(shadedTarget);
			this.addFragmentTempUsages(colorTarget,1);
			if(this.hasColorMulNode) code += "mul " + Std.string(colorTarget) + "," + Std.string(colorTarget) + "," + Std.string(this.colorMulVary) + "\n";
			if(this.hasColorAddNode) code += "add " + Std.string(colorTarget) + "," + Std.string(colorTarget) + "," + Std.string(this.colorAddVary) + "\n";
		}
		return code;
	}
	,getRegisterFromString: function(code) {
		var er = new EReg("([a-z]+)([\\d]+)","");
		er.match(code);
		return new away3d.materials.compilation.ShaderRegisterElement(er.matched(1),Std.parseInt(er.matched(2)));
	}
	,get_numVertexConstant: function() {
		return this._numVertexConstant;
	}
	,get_numFragmentConstant: function() {
		return this._numFragmentConstant;
	}
	,setDataLength: function() {
		this._numVertexConstant = this._numUsedVertexConstants - this._vertexConstantOffset;
		this._numFragmentConstant = this._numUsedFragmentConstants - this._fragmentConstantOffset;
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this.vertexConstantData),this._numVertexConstant * 4);
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this.fragmentConstantData),this._numFragmentConstant * 4);
	}
	,setVertexConst: function(index,x,y,z,w) {
		if(w == null) w = 0;
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		var _index = (index - this._vertexConstantOffset) * 4;
		var this1 = this.vertexConstantData;
		var key = _index++;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = x;
		var this3 = this.vertexConstantData;
		var key1 = _index++;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = y;
		var this5 = this.vertexConstantData;
		var key2 = _index++;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = z;
		var this7 = this.vertexConstantData;
		if(!this7.fixed) {
			if(_index >= this7.length) this7.length = _index + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[_index] = w;
	}
	,setVertexConstFromVector: function(index,data) {
		var _index = (index - this._vertexConstantOffset) * 4;
		var i = 0;
		while(i < data.length) {
			var this1 = this.vertexConstantData;
			var key = _index++;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data1;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data1,0,this1.data.length);
					this1.data = data1;
				}
			}
			this1.data[key] = data[i];
			i++;
		}
	}
	,setVertexConstFromMatrix: function(index,matrix) {
		var rawData = matrix.rawData;
		var _index = (index - this._vertexConstantOffset) * 4;
		var this1 = this.vertexConstantData;
		var key = _index++;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = rawData.data[0];
		var this3 = this.vertexConstantData;
		var key1 = _index++;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = rawData.data[4];
		var this5 = this.vertexConstantData;
		var key2 = _index++;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = rawData.data[8];
		var this7 = this.vertexConstantData;
		var key3 = _index++;
		if(!this7.fixed) {
			if(key3 >= this7.length) this7.length = key3 + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[key3] = rawData.data[12];
		var this9 = this.vertexConstantData;
		var key4 = _index++;
		if(!this9.fixed) {
			if(key4 >= this9.length) this9.length = key4 + 1;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[key4] = rawData.data[1];
		var this11 = this.vertexConstantData;
		var key5 = _index++;
		if(!this11.fixed) {
			if(key5 >= this11.length) this11.length = key5 + 1;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[key5] = rawData.data[5];
		var this13 = this.vertexConstantData;
		var key6 = _index++;
		if(!this13.fixed) {
			if(key6 >= this13.length) this13.length = key6 + 1;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[key6] = rawData.data[9];
		var this15 = this.vertexConstantData;
		var key7 = _index++;
		if(!this15.fixed) {
			if(key7 >= this15.length) this15.length = key7 + 1;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[key7] = rawData.data[13];
		var this17 = this.vertexConstantData;
		var key8 = _index++;
		if(!this17.fixed) {
			if(key8 >= this17.length) this17.length = key8 + 1;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[key8] = rawData.data[2];
		var this19 = this.vertexConstantData;
		var key9 = _index++;
		if(!this19.fixed) {
			if(key9 >= this19.length) this19.length = key9 + 1;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[key9] = rawData.data[6];
		var this21 = this.vertexConstantData;
		var key10 = _index++;
		if(!this21.fixed) {
			if(key10 >= this21.length) this21.length = key10 + 1;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[key10] = rawData.data[10];
		var this23 = this.vertexConstantData;
		var key11 = _index++;
		if(!this23.fixed) {
			if(key11 >= this23.length) this23.length = key11 + 1;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[key11] = rawData.data[14];
		var this25 = this.vertexConstantData;
		var key12 = _index++;
		if(!this25.fixed) {
			if(key12 >= this25.length) this25.length = key12 + 1;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[key12] = rawData.data[3];
		var this27 = this.vertexConstantData;
		var key13 = _index++;
		if(!this27.fixed) {
			if(key13 >= this27.length) this27.length = key13 + 1;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[key13] = rawData.data[7];
		var this29 = this.vertexConstantData;
		var key14 = _index++;
		if(!this29.fixed) {
			if(key14 >= this29.length) this29.length = key14 + 1;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[key14] = rawData.data[11];
		var this31 = this.vertexConstantData;
		if(!this31.fixed) {
			if(_index >= this31.length) this31.length = _index + 1;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[_index] = rawData.data[15];
	}
	,setFragmentConst: function(index,x,y,z,w) {
		if(w == null) w = 0;
		if(z == null) z = 0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		var _index = (index - this._fragmentConstantOffset) * 4;
		var this1 = this.fragmentConstantData;
		var key = _index++;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = x;
		var this3 = this.fragmentConstantData;
		var key1 = _index++;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = y;
		var this5 = this.fragmentConstantData;
		var key2 = _index++;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = z;
		var this7 = this.fragmentConstantData;
		if(!this7.fixed) {
			if(_index >= this7.length) this7.length = _index + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[_index] = w;
	}
	,__class__: away3d.animators.data.AnimationRegisterCache
	,__properties__: $extend(away3d.materials.compilation.ShaderRegisterCache.prototype.__properties__,{get_numFragmentConstant:"get_numFragmentConstant",get_numVertexConstant:"get_numVertexConstant"})
});
away3d.animators.data.AnimationSubGeometry = function() {
	this._vertexBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8);
	this._bufferContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),8);
	this._bufferDirty = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this5;
		this5 = new openfl.VectorData();
		{
			var this6;
			this6 = new Array(0);
			this5.data = this6;
		}
		this5.length = 0;
		this5.fixed = false;
		$r = this5;
		return $r;
	}(this))),8);
	this.numProcessedVertices = 0;
	this.previousTime = Math.NEGATIVE_INFINITY;
	var this7;
	this7 = new openfl.VectorData();
	var this8;
	this8 = new Array(0);
	this7.data = this8;
	this7.length = 0;
	this7.fixed = false;
	this.animationParticles = this7;
	var i = 0;
	while(i < 8) {
		var this9 = this._bufferDirty;
		if(!this9.fixed) {
			if(i >= this9.length) this9.length = i + 1;
			if(this9.data.length < this9.length) {
				var data;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data,0,this9.data.length);
				this9.data = data;
			}
		}
		this9.data[i] = true;
		i++;
	}
};
$hxClasses["away3d.animators.data.AnimationSubGeometry"] = away3d.animators.data.AnimationSubGeometry;
away3d.animators.data.AnimationSubGeometry.__name__ = ["away3d","animators","data","AnimationSubGeometry"];
away3d.animators.data.AnimationSubGeometry.prototype = {
	createVertexData: function(numVertices,totalLenOfOneVertex) {
		this._numVertices = numVertices;
		this._totalLenOfOneVertex = totalLenOfOneVertex;
		this._vertexData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),numVertices * totalLenOfOneVertex,0);
	}
	,activateVertexBuffer: function(index,bufferOffset,stage3DProxy,format) {
		var contextIndex = stage3DProxy.get_stage3DIndex();
		var context = stage3DProxy.get_context3D();
		var buffer = this._vertexBuffer.data[contextIndex];
		if(buffer == null || this._bufferContext.data[contextIndex] != context) {
			var this1 = this._vertexBuffer;
			var value = context.createVertexBuffer(this._numVertices,this._totalLenOfOneVertex);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			buffer = this1.data[contextIndex] = value;
			var this3 = this._bufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._bufferDirty;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._bufferDirty.data[contextIndex]) {
			buffer.uploadFromVector(this._vertexData,0,this._numVertices);
			var this7 = this._bufferDirty;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,buffer,bufferOffset,format);
	}
	,dispose: function() {
		while(this._vertexBuffer.length > 0) {
			var vertexBuffer;
			var this1 = this._vertexBuffer;
			var value = null;
			if(!this1.fixed) {
				if(this1.length > 0) {
					this1.length--;
					value = this1.data[this1.length];
				}
			}
			vertexBuffer = value;
			if(vertexBuffer != null) vertexBuffer.dispose();
		}
	}
	,invalidateBuffer: function() {
		var i = 0;
		while(i < 8) {
			var this1 = this._bufferDirty;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = true;
			i++;
		}
	}
	,get_vertexData: function() {
		return this._vertexData;
	}
	,get_numVertices: function() {
		return this._numVertices;
	}
	,get_totalLenOfOneVertex: function() {
		return this._totalLenOfOneVertex;
	}
	,__class__: away3d.animators.data.AnimationSubGeometry
	,__properties__: {get_totalLenOfOneVertex:"get_totalLenOfOneVertex",get_numVertices:"get_numVertices",get_vertexData:"get_vertexData"}
};
away3d.animators.data.ParticleAnimationData = function(index,startTime,duration,delay,particle) {
	this.index = index;
	this.startTime = startTime;
	this.totalTime = duration + delay;
	this.duration = duration;
	this.delay = delay;
	this.startVertexIndex = particle.startVertexIndex;
	this.numVertices = particle.numVertices;
};
$hxClasses["away3d.animators.data.ParticleAnimationData"] = away3d.animators.data.ParticleAnimationData;
away3d.animators.data.ParticleAnimationData.__name__ = ["away3d","animators","data","ParticleAnimationData"];
away3d.animators.data.ParticleAnimationData.prototype = {
	__class__: away3d.animators.data.ParticleAnimationData
};
away3d.library = {};
away3d.library.assets = {};
away3d.library.assets.NamedAssetBase = function(name) {
	if(name == null) name = "null";
	this._name = name;
	this._originalName = name;
	this.updateFullPath();
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.library.assets.NamedAssetBase"] = away3d.library.assets.NamedAssetBase;
away3d.library.assets.NamedAssetBase.__name__ = ["away3d","library","assets","NamedAssetBase"];
away3d.library.assets.NamedAssetBase.__super__ = openfl.events.EventDispatcher;
away3d.library.assets.NamedAssetBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_originalName: function() {
		return this._originalName;
	}
	,get_id: function() {
		return this._id;
	}
	,set_id: function(newID) {
		this._id = newID;
		return newID;
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(val) {
		var prev;
		prev = this._name;
		this._name = val;
		if(this._name == null) this._name = "null";
		this.updateFullPath();
		if(this.hasEventListener(away3d.events.Asset3DEvent.ASSET_RENAME)) this.dispatchEvent(new away3d.events.Asset3DEvent(away3d.events.Asset3DEvent.ASSET_RENAME,js.Boot.__cast(this , away3d.library.assets.IAsset),prev));
		return val;
	}
	,get_assetNamespace: function() {
		return this._namespace;
	}
	,get_assetFullPath: function() {
		return this._full_path;
	}
	,assetPathEquals: function(name,ns) {
		return this._name == name && (ns == null || this._namespace == ns);
	}
	,resetAssetPath: function(name,ns,overrideOriginal) {
		if(overrideOriginal == null) overrideOriginal = true;
		if(name != null) this._name = name; else this._name = "null";
		if(ns != null) this._namespace = ns; else this._namespace = away3d.library.assets.NamedAssetBase.DEFAULT_NAMESPACE;
		if(overrideOriginal) this._originalName = this._name;
		this.updateFullPath();
	}
	,updateFullPath: function() {
		this._full_path = [this._namespace,this._name];
	}
	,__class__: away3d.library.assets.NamedAssetBase
	,__properties__: {get_assetFullPath:"get_assetFullPath",get_assetNamespace:"get_assetNamespace",set_name:"set_name",get_name:"get_name",set_id:"set_id",get_id:"get_id",get_originalName:"get_originalName"}
});
away3d.library.assets.IAsset = function() { };
$hxClasses["away3d.library.assets.IAsset"] = away3d.library.assets.IAsset;
away3d.library.assets.IAsset.__name__ = ["away3d","library","assets","IAsset"];
away3d.library.assets.IAsset.__interfaces__ = [openfl.events.IEventDispatcher];
away3d.library.assets.IAsset.prototype = {
	__class__: away3d.library.assets.IAsset
	,__properties__: {get_assetFullPath:"get_assetFullPath",get_assetType:"get_assetType",get_assetNamespace:"get_assetNamespace",set_id:"set_id",get_id:"get_id",set_name:"set_name",get_name:"get_name"}
};
away3d.animators.nodes = {};
away3d.animators.nodes.AnimationNodeBase = function() {
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.animators.nodes.AnimationNodeBase"] = away3d.animators.nodes.AnimationNodeBase;
away3d.animators.nodes.AnimationNodeBase.__name__ = ["away3d","animators","nodes","AnimationNodeBase"];
away3d.animators.nodes.AnimationNodeBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.animators.nodes.AnimationNodeBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.animators.nodes.AnimationNodeBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	get_stateClass: function() {
		return this._stateClass;
	}
	,dispose: function() {
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.ANIMATION_NODE;
	}
	,__class__: away3d.animators.nodes.AnimationNodeBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_assetType:"get_assetType",get_stateClass:"get_stateClass"})
});
away3d.animators.states = {};
away3d.animators.states.IAnimationState = function() { };
$hxClasses["away3d.animators.states.IAnimationState"] = away3d.animators.states.IAnimationState;
away3d.animators.states.IAnimationState.__name__ = ["away3d","animators","states","IAnimationState"];
away3d.animators.states.IAnimationState.prototype = {
	__class__: away3d.animators.states.IAnimationState
	,__properties__: {get_positionDelta:"get_positionDelta"}
};
away3d.animators.states.AnimationStateBase = function(animator,animationNode) {
	this._time = this._startTime = 0;
	this._rootDelta = new openfl.geom.Vector3D();
	this._positionDeltaDirty = true;
	this._animator = animator;
	this._animationNode = animationNode;
};
$hxClasses["away3d.animators.states.AnimationStateBase"] = away3d.animators.states.AnimationStateBase;
away3d.animators.states.AnimationStateBase.__name__ = ["away3d","animators","states","AnimationStateBase"];
away3d.animators.states.AnimationStateBase.__interfaces__ = [away3d.animators.states.IAnimationState];
away3d.animators.states.AnimationStateBase.prototype = {
	get_positionDelta: function() {
		if(this._positionDeltaDirty) this.updatePositionDelta();
		return this._rootDelta;
	}
	,offset: function(startTime) {
		this._startTime = startTime;
		this._positionDeltaDirty = true;
	}
	,update: function(time) {
		if(this._time == time - this._startTime) return;
		this.updateTime(time);
	}
	,phase: function(value) {
	}
	,updateTime: function(time) {
		this._time = time - this._startTime;
		this._positionDeltaDirty = true;
	}
	,updatePositionDelta: function() {
	}
	,__class__: away3d.animators.states.AnimationStateBase
	,__properties__: {get_positionDelta:"get_positionDelta"}
};
away3d.bounds = {};
away3d.bounds.BoundingVolumeBase = function() {
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._aabbPoints = this1;
	this._aabbPointsDirty = true;
	this._min = new openfl.geom.Vector3D();
	this._max = new openfl.geom.Vector3D();
};
$hxClasses["away3d.bounds.BoundingVolumeBase"] = away3d.bounds.BoundingVolumeBase;
away3d.bounds.BoundingVolumeBase.__name__ = ["away3d","bounds","BoundingVolumeBase"];
away3d.bounds.BoundingVolumeBase.prototype = {
	get_max: function() {
		return this._max;
	}
	,get_min: function() {
		return this._min;
	}
	,get_aabbPoints: function() {
		if(this._aabbPointsDirty) this.updateAABBPoints();
		return this._aabbPoints;
	}
	,get_boundingRenderable: function() {
		if(this._boundingRenderable == null) {
			this._boundingRenderable = this.createBoundingRenderable();
			this.updateBoundingRenderable();
		}
		return this._boundingRenderable;
	}
	,nullify: function() {
		this._min.x = this._min.y = this._min.z = 0;
		this._max.x = this._max.y = this._max.z = 0;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) this.updateBoundingRenderable();
	}
	,disposeRenderable: function() {
		if(this._boundingRenderable != null) this._boundingRenderable.dispose();
		this._boundingRenderable = null;
	}
	,fromVertices: function(vertices) {
		var i = 0;
		var len = vertices.length;
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		if(len == 0) {
			this.nullify();
			return;
		}
		var v;
		minX = (function($this) {
			var $r;
			var index = i++;
			$r = maxX = vertices.data[index];
			return $r;
		}(this));
		minY = (function($this) {
			var $r;
			var index1 = i++;
			$r = maxY = vertices.data[index1];
			return $r;
		}(this));
		minZ = (function($this) {
			var $r;
			var index2 = i++;
			$r = maxZ = vertices.data[index2];
			return $r;
		}(this));
		while(i < len) {
			var index3 = i++;
			v = vertices.data[index3];
			if(v < minX) minX = v; else if(v > maxX) maxX = v;
			var index4 = i++;
			v = vertices.data[index4];
			if(v < minY) minY = v; else if(v > maxY) maxY = v;
			var index5 = i++;
			v = vertices.data[index5];
			if(v < minZ) minZ = v; else if(v > maxZ) maxZ = v;
		}
		this.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ);
	}
	,fromGeometry: function(geometry) {
		var subGeoms = geometry.get_subGeometries();
		var numSubGeoms = subGeoms.length;
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		if(numSubGeoms > 0) {
			var j = 0;
			minX = minY = minZ = Math.POSITIVE_INFINITY;
			maxX = maxY = maxZ = Math.NEGATIVE_INFINITY;
			while(j < numSubGeoms) {
				var subGeom;
				var index = j++;
				subGeom = subGeoms.data[index];
				var vertices = subGeom.get_vertexData();
				var vertexDataLen = vertices.length;
				var i = subGeom.get_vertexOffset();
				var stride = subGeom.get_vertexStride();
				while(i < vertexDataLen) {
					var v = vertices.data[i];
					if(v < minX) minX = v; else if(v > maxX) maxX = v;
					v = vertices.data[i + 1];
					if(v < minY) minY = v; else if(v > maxY) maxY = v;
					v = vertices.data[i + 2];
					if(v < minZ) minZ = v; else if(v > maxZ) maxZ = v;
					i += stride;
				}
			}
			this.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ);
		} else this.fromExtremes(0,0,0,0,0,0);
	}
	,fromSphere: function(center,radius) {
		this.fromExtremes(center.x - radius,center.y - radius,center.z - radius,center.x + radius,center.y + radius,center.z + radius);
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._min.x = minX;
		this._min.y = minY;
		this._min.z = minZ;
		this._max.x = maxX;
		this._max.y = maxY;
		this._max.z = maxZ;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) this.updateBoundingRenderable();
	}
	,isInFrustum: function(planes,numPlanes) {
		throw new away3d.errors.AbstractMethodError();
		return false;
	}
	,overlaps: function(bounds) {
		var min = bounds._min;
		var max = bounds._max;
		return this._max.x > min.x && this._min.x < max.x && this._max.y > min.y && this._min.y < max.y && this._max.z > min.z && this._min.z < max.z;
	}
	,clone: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		return -1;
	}
	,containsPoint: function(position) {
		return false;
	}
	,updateAABBPoints: function() {
		var maxX = this._max.x;
		var maxY = this._max.y;
		var maxZ = this._max.z;
		var minX = this._min.x;
		var minY = this._min.y;
		var minZ = this._min.z;
		var this1 = this._aabbPoints;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = minX;
		var this3 = this._aabbPoints;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = minY;
		var this5 = this._aabbPoints;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = minZ;
		var this7 = this._aabbPoints;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = maxX;
		var this9 = this._aabbPoints;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = minY;
		var this11 = this._aabbPoints;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = minZ;
		var this13 = this._aabbPoints;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = minX;
		var this15 = this._aabbPoints;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = maxY;
		var this17 = this._aabbPoints;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = minZ;
		var this19 = this._aabbPoints;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = maxX;
		var this21 = this._aabbPoints;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = maxY;
		var this23 = this._aabbPoints;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = minZ;
		var this25 = this._aabbPoints;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = minX;
		var this27 = this._aabbPoints;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = minY;
		var this29 = this._aabbPoints;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = maxZ;
		var this31 = this._aabbPoints;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = maxX;
		var this33 = this._aabbPoints;
		if(!this33.fixed) {
			if(16 >= this33.length) this33.length = 17;
			if(this33.data.length < this33.length) {
				var data16;
				var this34;
				this34 = new Array(this33.data.length + 10);
				data16 = this34;
				haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
				this33.data = data16;
			}
		}
		this33.data[16] = minY;
		var this35 = this._aabbPoints;
		if(!this35.fixed) {
			if(17 >= this35.length) this35.length = 18;
			if(this35.data.length < this35.length) {
				var data17;
				var this36;
				this36 = new Array(this35.data.length + 10);
				data17 = this36;
				haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
				this35.data = data17;
			}
		}
		this35.data[17] = maxZ;
		var this37 = this._aabbPoints;
		if(!this37.fixed) {
			if(18 >= this37.length) this37.length = 19;
			if(this37.data.length < this37.length) {
				var data18;
				var this38;
				this38 = new Array(this37.data.length + 10);
				data18 = this38;
				haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
				this37.data = data18;
			}
		}
		this37.data[18] = minX;
		var this39 = this._aabbPoints;
		if(!this39.fixed) {
			if(19 >= this39.length) this39.length = 20;
			if(this39.data.length < this39.length) {
				var data19;
				var this40;
				this40 = new Array(this39.data.length + 10);
				data19 = this40;
				haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
				this39.data = data19;
			}
		}
		this39.data[19] = maxY;
		var this41 = this._aabbPoints;
		if(!this41.fixed) {
			if(20 >= this41.length) this41.length = 21;
			if(this41.data.length < this41.length) {
				var data20;
				var this42;
				this42 = new Array(this41.data.length + 10);
				data20 = this42;
				haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
				this41.data = data20;
			}
		}
		this41.data[20] = maxZ;
		var this43 = this._aabbPoints;
		if(!this43.fixed) {
			if(21 >= this43.length) this43.length = 22;
			if(this43.data.length < this43.length) {
				var data21;
				var this44;
				this44 = new Array(this43.data.length + 10);
				data21 = this44;
				haxe.ds._Vector.Vector_Impl_.blit(this43.data,0,data21,0,this43.data.length);
				this43.data = data21;
			}
		}
		this43.data[21] = maxX;
		var this45 = this._aabbPoints;
		if(!this45.fixed) {
			if(22 >= this45.length) this45.length = 23;
			if(this45.data.length < this45.length) {
				var data22;
				var this46;
				this46 = new Array(this45.data.length + 10);
				data22 = this46;
				haxe.ds._Vector.Vector_Impl_.blit(this45.data,0,data22,0,this45.data.length);
				this45.data = data22;
			}
		}
		this45.data[22] = maxY;
		var this47 = this._aabbPoints;
		if(!this47.fixed) {
			if(23 >= this47.length) this47.length = 24;
			if(this47.data.length < this47.length) {
				var data23;
				var this48;
				this48 = new Array(this47.data.length + 10);
				data23 = this48;
				haxe.ds._Vector.Vector_Impl_.blit(this47.data,0,data23,0,this47.data.length);
				this47.data = data23;
			}
		}
		this47.data[23] = maxZ;
		this._aabbPointsDirty = false;
	}
	,updateBoundingRenderable: function() {
		throw new away3d.errors.AbstractMethodError();
	}
	,createBoundingRenderable: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,classifyToPlane: function(plane) {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,transformFrom: function(bounds,matrix) {
		throw new away3d.errors.AbstractMethodError();
	}
	,__class__: away3d.bounds.BoundingVolumeBase
	,__properties__: {get_boundingRenderable:"get_boundingRenderable",get_aabbPoints:"get_aabbPoints",get_min:"get_min",get_max:"get_max"}
};
away3d.bounds.AxisAlignedBoundingBox = function() {
	this._centerX = 0;
	this._centerY = 0;
	this._centerZ = 0;
	this._halfExtentsX = 0;
	this._halfExtentsY = 0;
	this._halfExtentsZ = 0;
	away3d.bounds.BoundingVolumeBase.call(this);
};
$hxClasses["away3d.bounds.AxisAlignedBoundingBox"] = away3d.bounds.AxisAlignedBoundingBox;
away3d.bounds.AxisAlignedBoundingBox.__name__ = ["away3d","bounds","AxisAlignedBoundingBox"];
away3d.bounds.AxisAlignedBoundingBox.__super__ = away3d.bounds.BoundingVolumeBase;
away3d.bounds.AxisAlignedBoundingBox.prototype = $extend(away3d.bounds.BoundingVolumeBase.prototype,{
	nullify: function() {
		away3d.bounds.BoundingVolumeBase.prototype.nullify.call(this);
		this._centerX = this._centerY = this._centerZ = 0;
		this._halfExtentsX = this._halfExtentsY = this._halfExtentsZ = 0;
	}
	,isInFrustum: function(planes,numPlanes) {
		var i = 0;
		while(i < numPlanes) {
			var plane = planes.data[i];
			var a = plane.a;
			var b = plane.b;
			var c = plane.c;
			var flippedExtentX;
			if(a < 0) flippedExtentX = -this._halfExtentsX; else flippedExtentX = this._halfExtentsX;
			var flippedExtentY;
			if(b < 0) flippedExtentY = -this._halfExtentsY; else flippedExtentY = this._halfExtentsY;
			var flippedExtentZ;
			if(c < 0) flippedExtentZ = -this._halfExtentsZ; else flippedExtentZ = this._halfExtentsZ;
			var projDist = a * (this._centerX + flippedExtentX) + b * (this._centerY + flippedExtentY) + c * (this._centerZ + flippedExtentZ) - plane.d;
			if(projDist < 0) return false;
			++i;
		}
		return true;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		if(this.containsPoint(position)) return 0;
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var vx = direction.x;
		var vy = direction.y;
		var vz = direction.z;
		var ix;
		var iy;
		var iz;
		var rayEntryDistance = 0;
		var intersects = false;
		if(vx < 0) {
			rayEntryDistance = (this._halfExtentsX - px) / vx;
			if(rayEntryDistance > 0) {
				iy = py + rayEntryDistance * vy;
				iz = pz + rayEntryDistance * vz;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 1;
					targetNormal.y = 0;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vx > 0) {
			rayEntryDistance = (-this._halfExtentsX - px) / vx;
			if(rayEntryDistance > 0) {
				iy = py + rayEntryDistance * vy;
				iz = pz + rayEntryDistance * vz;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = -1;
					targetNormal.y = 0;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vy < 0) {
			rayEntryDistance = (this._halfExtentsY - py) / vy;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iz = pz + rayEntryDistance * vz;
				if(ix > -this._halfExtentsX && ix < this._halfExtentsX && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 0;
					targetNormal.y = 1;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vy > 0) {
			rayEntryDistance = (-this._halfExtentsY - py) / vy;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iz = pz + rayEntryDistance * vz;
				if(ix > -this._halfExtentsX && ix < this._halfExtentsX && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 0;
					targetNormal.y = -1;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vz < 0) {
			rayEntryDistance = (this._halfExtentsZ - pz) / vz;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iy = py + rayEntryDistance * vy;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && ix > -this._halfExtentsX && ix < this._halfExtentsX) {
					targetNormal.x = 0;
					targetNormal.y = 0;
					targetNormal.z = 1;
					intersects = true;
				}
			}
		}
		if(!intersects && vz > 0) {
			rayEntryDistance = (-this._halfExtentsZ - pz) / vz;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iy = py + rayEntryDistance * vy;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && ix > -this._halfExtentsX && ix < this._halfExtentsX) {
					targetNormal.x = 0;
					targetNormal.y = 0;
					targetNormal.z = -1;
					intersects = true;
				}
			}
		}
		if(intersects) return rayEntryDistance; else return -1;
	}
	,containsPoint: function(position) {
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		return px <= this._halfExtentsX && px >= -this._halfExtentsX && py <= this._halfExtentsY && py >= -this._halfExtentsY && pz <= this._halfExtentsZ && pz >= -this._halfExtentsZ;
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._centerX = (maxX + minX) * .5;
		this._centerY = (maxY + minY) * .5;
		this._centerZ = (maxZ + minZ) * .5;
		this._halfExtentsX = (maxX - minX) * .5;
		this._halfExtentsY = (maxY - minY) * .5;
		this._halfExtentsZ = (maxZ - minZ) * .5;
		away3d.bounds.BoundingVolumeBase.prototype.fromExtremes.call(this,minX,minY,minZ,maxX,maxY,maxZ);
	}
	,clone: function() {
		var clone = new away3d.bounds.AxisAlignedBoundingBox();
		clone.fromExtremes(this._min.x,this._min.y,this._min.z,this._max.x,this._max.y,this._max.z);
		return clone;
	}
	,get_halfExtentsX: function() {
		return this._halfExtentsX;
	}
	,get_halfExtentsY: function() {
		return this._halfExtentsY;
	}
	,get_halfExtentsZ: function() {
		return this._halfExtentsZ;
	}
	,closestPointToPoint: function(point,target) {
		var p;
		if(target == null) target = new openfl.geom.Vector3D();
		p = point.x;
		if(p < this._min.x) p = this._min.x;
		if(p > this._max.x) p = this._max.x;
		target.x = p;
		p = point.y;
		if(p < this._min.y) p = this._min.y;
		if(p > this._max.y) p = this._max.y;
		target.y = p;
		p = point.z;
		if(p < this._min.z) p = this._min.z;
		if(p > this._max.z) p = this._max.z;
		target.z = p;
		return target;
	}
	,updateBoundingRenderable: function() {
		this._boundingRenderable.set_scaleX(Math.max(this._halfExtentsX * 2,0.001));
		this._boundingRenderable.set_scaleY(Math.max(this._halfExtentsY * 2,0.001));
		this._boundingRenderable.set_scaleZ(Math.max(this._halfExtentsZ * 2,0.001));
		this._boundingRenderable.set_x(this._centerX);
		this._boundingRenderable.set_y(this._centerY);
		this._boundingRenderable.set_z(this._centerZ);
	}
	,createBoundingRenderable: function() {
		return new away3d.primitives.WireframeCube(1,1,1,16777215,0.5);
	}
	,classifyToPlane: function(plane) {
		var a = plane.a;
		var b = plane.b;
		var c = plane.c;
		var centerDistance = a * this._centerX + b * this._centerY + c * this._centerZ - plane.d;
		if(a < 0) a = -a;
		if(b < 0) b = -b;
		if(c < 0) c = -c;
		var boundOffset = a * this._halfExtentsX + b * this._halfExtentsY + c * this._halfExtentsZ;
		if(centerDistance > boundOffset) return away3d.core.math.PlaneClassification.FRONT; else if(centerDistance < -boundOffset) return away3d.core.math.PlaneClassification.BACK; else return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,transformFrom: function(bounds,matrix) {
		var aabb;
		aabb = js.Boot.__cast(bounds , away3d.bounds.AxisAlignedBoundingBox);
		var cx = aabb._centerX;
		var cy = aabb._centerY;
		var cz = aabb._centerZ;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		matrix.copyRawDataTo(raw);
		var m11 = raw.data[0];
		var m12 = raw.data[4];
		var m13 = raw.data[8];
		var m14 = raw.data[12];
		var m21 = raw.data[1];
		var m22 = raw.data[5];
		var m23 = raw.data[9];
		var m24 = raw.data[13];
		var m31 = raw.data[2];
		var m32 = raw.data[6];
		var m33 = raw.data[10];
		var m34 = raw.data[14];
		this._centerX = cx * m11 + cy * m12 + cz * m13 + m14;
		this._centerY = cx * m21 + cy * m22 + cz * m23 + m24;
		this._centerZ = cx * m31 + cy * m32 + cz * m33 + m34;
		if(m11 < 0) m11 = -m11;
		if(m12 < 0) m12 = -m12;
		if(m13 < 0) m13 = -m13;
		if(m21 < 0) m21 = -m21;
		if(m22 < 0) m22 = -m22;
		if(m23 < 0) m23 = -m23;
		if(m31 < 0) m31 = -m31;
		if(m32 < 0) m32 = -m32;
		if(m33 < 0) m33 = -m33;
		var hx = aabb._halfExtentsX;
		var hy = aabb._halfExtentsY;
		var hz = aabb._halfExtentsZ;
		this._halfExtentsX = hx * m11 + hy * m12 + hz * m13;
		this._halfExtentsY = hx * m21 + hy * m22 + hz * m23;
		this._halfExtentsZ = hx * m31 + hy * m32 + hz * m33;
		this._min.x = this._centerX - this._halfExtentsX;
		this._min.y = this._centerY - this._halfExtentsY;
		this._min.z = this._centerZ - this._halfExtentsZ;
		this._max.x = this._centerX + this._halfExtentsX;
		this._max.y = this._centerY + this._halfExtentsY;
		this._max.z = this._centerZ + this._halfExtentsZ;
	}
	,__class__: away3d.bounds.AxisAlignedBoundingBox
	,__properties__: $extend(away3d.bounds.BoundingVolumeBase.prototype.__properties__,{get_halfExtentsZ:"get_halfExtentsZ",get_halfExtentsY:"get_halfExtentsY",get_halfExtentsX:"get_halfExtentsX"})
});
away3d.bounds.BoundingSphere = function() {
	this._radius = 0;
	this._centerX = 0;
	this._centerY = 0;
	this._centerZ = 0;
	away3d.bounds.BoundingVolumeBase.call(this);
};
$hxClasses["away3d.bounds.BoundingSphere"] = away3d.bounds.BoundingSphere;
away3d.bounds.BoundingSphere.__name__ = ["away3d","bounds","BoundingSphere"];
away3d.bounds.BoundingSphere.__super__ = away3d.bounds.BoundingVolumeBase;
away3d.bounds.BoundingSphere.prototype = $extend(away3d.bounds.BoundingVolumeBase.prototype,{
	get_radius: function() {
		return this._radius;
	}
	,nullify: function() {
		away3d.bounds.BoundingVolumeBase.prototype.nullify.call(this);
		this._centerX = this._centerY = this._centerZ = 0;
		this._radius = 0;
	}
	,isInFrustum: function(planes,numPlanes) {
		var i = 0;
		while(i < numPlanes) {
			var plane = planes.data[i];
			var flippedExtentX;
			if(plane.a < 0) flippedExtentX = -this._radius; else flippedExtentX = this._radius;
			var flippedExtentY;
			if(plane.b < 0) flippedExtentY = -this._radius; else flippedExtentY = this._radius;
			var flippedExtentZ;
			if(plane.c < 0) flippedExtentZ = -this._radius; else flippedExtentZ = this._radius;
			var projDist = plane.a * (this._centerX + flippedExtentX) + plane.b * (this._centerY + flippedExtentY) + plane.c * (this._centerZ + flippedExtentZ) - plane.d;
			if(projDist < 0) return false;
			++i;
		}
		return true;
	}
	,fromSphere: function(center,radius) {
		this._centerX = center.x;
		this._centerY = center.y;
		this._centerZ = center.z;
		this._radius = radius;
		this._max.x = this._centerX + radius;
		this._max.y = this._centerY + radius;
		this._max.z = this._centerZ + radius;
		this._min.x = this._centerX - radius;
		this._min.y = this._centerY - radius;
		this._min.z = this._centerZ - radius;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) this.updateBoundingRenderable();
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._centerX = (maxX + minX) * .5;
		this._centerY = (maxY + minY) * .5;
		this._centerZ = (maxZ + minZ) * .5;
		var d = maxX - minX;
		var y = maxY - minY;
		var z = maxZ - minZ;
		if(y > d) d = y;
		if(z > d) d = z;
		this._radius = d * Math.sqrt(.5);
		away3d.bounds.BoundingVolumeBase.prototype.fromExtremes.call(this,minX,minY,minZ,maxX,maxY,maxZ);
	}
	,clone: function() {
		var clone = new away3d.bounds.BoundingSphere();
		clone.fromSphere(new openfl.geom.Vector3D(this._centerX,this._centerY,this._centerZ),this._radius);
		return clone;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		if(this.containsPoint(position)) return 0;
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var vx = direction.x;
		var vy = direction.y;
		var vz = direction.z;
		var rayEntryDistance;
		var a = vx * vx + vy * vy + vz * vz;
		var b = 2 * (px * vx + py * vy + pz * vz);
		var c = px * px + py * py + pz * pz - this._radius * this._radius;
		var det = b * b - 4 * a * c;
		if(det >= 0) {
			var sqrtDet = Math.sqrt(det);
			rayEntryDistance = (-b - sqrtDet) / (2 * a);
			if(rayEntryDistance >= 0) {
				targetNormal.x = px + rayEntryDistance * vx;
				targetNormal.y = py + rayEntryDistance * vy;
				targetNormal.z = pz + rayEntryDistance * vz;
				targetNormal.normalize();
				return rayEntryDistance;
			}
		}
		return -1;
	}
	,containsPoint: function(position) {
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var distance = Math.sqrt(px * px + py * py + pz * pz);
		return distance <= this._radius;
	}
	,updateBoundingRenderable: function() {
		var sc = this._radius;
		if(sc == 0) sc = 0.001;
		this._boundingRenderable.set_scaleX(sc);
		this._boundingRenderable.set_scaleY(sc);
		this._boundingRenderable.set_scaleZ(sc);
		this._boundingRenderable.set_x(this._centerX);
		this._boundingRenderable.set_y(this._centerY);
		this._boundingRenderable.set_z(this._centerZ);
	}
	,createBoundingRenderable: function() {
		return new away3d.primitives.WireframeSphere(1,16,12,16777215,0.5);
	}
	,classifyToPlane: function(plane) {
		var a = plane.a;
		var b = plane.b;
		var c = plane.c;
		var dd = a * this._centerX + b * this._centerY + c * this._centerZ - plane.d;
		if(a < 0) a = -a;
		if(b < 0) b = -b;
		if(c < 0) c = -c;
		var rr = (a + b + c) * this._radius;
		if(dd > rr) return away3d.core.math.PlaneClassification.FRONT; else if(dd < -rr) return away3d.core.math.PlaneClassification.BACK; else return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,transformFrom: function(bounds,matrix) {
		var sphere;
		sphere = js.Boot.__cast(bounds , away3d.bounds.BoundingSphere);
		var cx = sphere._centerX;
		var cy = sphere._centerY;
		var cz = sphere._centerZ;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		matrix.copyRawDataTo(raw);
		var m11 = raw.data[0];
		var m12 = raw.data[4];
		var m13 = raw.data[8];
		var m14 = raw.data[12];
		var m21 = raw.data[1];
		var m22 = raw.data[5];
		var m23 = raw.data[9];
		var m24 = raw.data[13];
		var m31 = raw.data[2];
		var m32 = raw.data[6];
		var m33 = raw.data[10];
		var m34 = raw.data[14];
		this._centerX = cx * m11 + cy * m12 + cz * m13 + m14;
		this._centerY = cx * m21 + cy * m22 + cz * m23 + m24;
		this._centerZ = cx * m31 + cy * m32 + cz * m33 + m34;
		if(m11 < 0) m11 = -m11;
		if(m12 < 0) m12 = -m12;
		if(m13 < 0) m13 = -m13;
		if(m21 < 0) m21 = -m21;
		if(m22 < 0) m22 = -m22;
		if(m23 < 0) m23 = -m23;
		if(m31 < 0) m31 = -m31;
		if(m32 < 0) m32 = -m32;
		if(m33 < 0) m33 = -m33;
		var r = sphere._radius;
		var rx = m11 + m12 + m13;
		var ry = m21 + m22 + m23;
		var rz = m31 + m32 + m33;
		this._radius = r * Math.sqrt(rx * rx + ry * ry + rz * rz);
		this._min.x = this._centerX - this._radius;
		this._min.y = this._centerY - this._radius;
		this._min.z = this._centerZ - this._radius;
		this._max.x = this._centerX + this._radius;
		this._max.y = this._centerY + this._radius;
		this._max.z = this._centerZ + this._radius;
	}
	,__class__: away3d.bounds.BoundingSphere
	,__properties__: $extend(away3d.bounds.BoundingVolumeBase.prototype.__properties__,{get_radius:"get_radius"})
});
away3d.bounds.NullBounds = function(alwaysIn,renderable) {
	if(alwaysIn == null) alwaysIn = true;
	away3d.bounds.BoundingVolumeBase.call(this);
	this._alwaysIn = alwaysIn;
	this._renderable = renderable;
	this._max.x = this._max.y = this._max.z = Math.POSITIVE_INFINITY;
	this._min.x = this._min.y = this._alwaysIn?this._min.z = Math.NEGATIVE_INFINITY:this._min.z = Math.POSITIVE_INFINITY;
};
$hxClasses["away3d.bounds.NullBounds"] = away3d.bounds.NullBounds;
away3d.bounds.NullBounds.__name__ = ["away3d","bounds","NullBounds"];
away3d.bounds.NullBounds.__super__ = away3d.bounds.BoundingVolumeBase;
away3d.bounds.NullBounds.prototype = $extend(away3d.bounds.BoundingVolumeBase.prototype,{
	clone: function() {
		return new away3d.bounds.NullBounds(this._alwaysIn);
	}
	,createBoundingRenderable: function() {
		if(this._renderable != null) return this._renderable; else return new away3d.primitives.WireframeSphere(100,16,12,16777215,0.5);
	}
	,isInFrustum: function(planes,numPlanes) {
		return this._alwaysIn;
	}
	,fromGeometry: function(geometry) {
	}
	,fromSphere: function(center,radius) {
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
	}
	,classifyToPlane: function(plane) {
		return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,transformFrom: function(bounds,matrix) {
		this._alwaysIn = (js.Boot.__cast(bounds , away3d.bounds.NullBounds))._alwaysIn;
	}
	,__class__: away3d.bounds.NullBounds
});
away3d.core = {};
away3d.core.base = {};
away3d.core.base.Object3D = function() {
	this._smallestNumber = 0.0000000000000000000001;
	this._transformDirty = true;
	this._rotationX = 0;
	this._rotationY = 0;
	this._rotationZ = 0;
	this._eulers = new openfl.geom.Vector3D();
	this._flipY = new openfl.geom.Matrix3D();
	this._zOffset = 0;
	this._transform = new openfl.geom.Matrix3D();
	this._scaleX = 1;
	this._scaleY = 1;
	this._scaleZ = 1;
	this._x = 0;
	this._y = 0;
	this._z = 0;
	this._pivotPoint = new openfl.geom.Vector3D();
	this._pivotZero = true;
	this._pos = new openfl.geom.Vector3D();
	this._rot = new openfl.geom.Vector3D();
	this._sca = new openfl.geom.Vector3D();
	this._transformComponents = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(3);
			this1.data = this2;
		}
		this1.length = 3;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),3);
	var this3 = this._transformComponents;
	if(!this3.fixed) {
		if(0 >= this3.length) this3.length = 1;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
	}
	this3.data[0] = this._pos;
	var this5 = this._transformComponents;
	if(!this5.fixed) {
		if(1 >= this5.length) this5.length = 2;
		if(this5.data.length < this5.length) {
			var data1;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data1 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
			this5.data = data1;
		}
	}
	this5.data[1] = this._rot;
	var this7 = this._transformComponents;
	if(!this7.fixed) {
		if(2 >= this7.length) this7.length = 3;
		if(this7.data.length < this7.length) {
			var data2;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data2 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
			this7.data = data2;
		}
	}
	this7.data[2] = this._sca;
	this._transform.identity();
	this._flipY.appendScale(1,-1,1);
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.core.base.Object3D"] = away3d.core.base.Object3D;
away3d.core.base.Object3D.__name__ = ["away3d","core","base","Object3D"];
away3d.core.base.Object3D.__super__ = away3d.library.assets.NamedAssetBase;
away3d.core.base.Object3D.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	invalidatePivot: function() {
		this._pivotZero = this._pivotPoint.x == 0 && this._pivotPoint.y == 0 && this._pivotPoint.z == 0;
		this.invalidateTransform();
	}
	,invalidatePosition: function() {
		if(this._positionDirty) return;
		this._positionDirty = true;
		this.invalidateTransform();
		if(this._listenToPositionChanged) this.notifyPositionChanged();
	}
	,notifyPositionChanged: function() {
		if(this._positionChanged == null) this._positionChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.POSITION_CHANGED,this);
		this.dispatchEvent(this._positionChanged);
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		away3d.library.assets.NamedAssetBase.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		switch(type) {
		case away3d.events.Object3DEvent.POSITION_CHANGED:
			this._listenToPositionChanged = true;
			break;
		case away3d.events.Object3DEvent.ROTATION_CHANGED:
			this._listenToRotationChanged = true;
			break;
		case away3d.events.Object3DEvent.SCALE_CHANGED:
			this._listenToRotationChanged = true;
			break;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		away3d.library.assets.NamedAssetBase.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(this.hasEventListener(type)) return;
		switch(type) {
		case away3d.events.Object3DEvent.POSITION_CHANGED:
			this._listenToPositionChanged = false;
			break;
		case away3d.events.Object3DEvent.ROTATION_CHANGED:
			this._listenToRotationChanged = false;
			break;
		case away3d.events.Object3DEvent.SCALE_CHANGED:
			this._listenToScaleChanged = false;
			break;
		}
	}
	,invalidateRotation: function() {
		if(this._rotationDirty) return;
		this._rotationDirty = true;
		this.invalidateTransform();
		if(this._listenToRotationChanged) this.notifyRotationChanged();
	}
	,notifyRotationChanged: function() {
		if(this._rotationChanged == null) this._rotationChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.ROTATION_CHANGED,this);
		this.dispatchEvent(this._rotationChanged);
	}
	,invalidateScale: function() {
		if(this._scaleDirty) return;
		this._scaleDirty = true;
		this.invalidateTransform();
		if(this._listenToScaleChanged) this.notifyScaleChanged();
	}
	,notifyScaleChanged: function() {
		if(this._scaleChanged == null) this._scaleChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.SCALE_CHANGED,this);
		this.dispatchEvent(this._scaleChanged);
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._x == val) return val;
		this._x = val;
		this.invalidatePosition();
		return val;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._y == val) return val;
		this._y = val;
		this.invalidatePosition();
		return val;
	}
	,get_z: function() {
		return this._z;
	}
	,set_z: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._z == val) return val;
		this._z = val;
		this.invalidatePosition();
		return val;
	}
	,get_rotationX: function() {
		return this._rotationX * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationX: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this.get_rotationX() == val) return val;
		this._rotationX = val * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_rotationY: function() {
		return this._rotationY * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationY: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this.get_rotationY() == val) return val;
		this._rotationY = val * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_rotationZ: function() {
		return this._rotationZ * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationZ: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this.get_rotationZ() == val) return val;
		this._rotationZ = val * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_scaleX: function() {
		return this._scaleX;
	}
	,set_scaleX: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._scaleX == val) return val;
		this._scaleX = val;
		this.invalidateScale();
		return val;
	}
	,get_scaleY: function() {
		return this._scaleY;
	}
	,set_scaleY: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._scaleY == val) return val;
		this._scaleY = val;
		this.invalidateScale();
		return val;
	}
	,get_scaleZ: function() {
		return this._scaleZ;
	}
	,set_scaleZ: function(val) {
		if(Math.isNaN(val)) val = 0;
		if(this._scaleZ == val) return val;
		this._scaleZ = val;
		this.invalidateScale();
		return val;
	}
	,get_eulers: function() {
		this._eulers.x = this._rotationX * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
		this._eulers.y = this._rotationY * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
		this._eulers.z = this._rotationZ * away3d.core.math.MathConsts.RADIANS_TO_DEGREES;
		return this._eulers;
	}
	,set_eulers: function(value) {
		this._rotationX = value.x * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationY = value.y * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationZ = value.z * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return value;
	}
	,get_transform: function() {
		if(this._transformDirty) this.updateTransform();
		return this._transform;
	}
	,set_transform: function(val) {
		if(val.rawData.data[0] == 0) {
			var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
			val.copyRawDataTo(raw);
			if(!raw.fixed) {
				if(0 >= raw.length) raw.length = 1;
				if(raw.data.length < raw.length) {
					var data;
					var this1;
					this1 = new Array(raw.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
					raw.data = data;
				}
			}
			raw.data[0] = this._smallestNumber;
			val.copyRawDataFrom(raw);
		}
		var elements = val.decompose();
		var vec;
		vec = elements.data[0];
		if(this._x != vec.x || this._y != vec.y || this._z != vec.z) {
			this._x = vec.x;
			this._y = vec.y;
			this._z = vec.z;
			this.invalidatePosition();
		}
		vec = elements.data[1];
		if(this._rotationX != vec.x || this._rotationY != vec.y || this._rotationZ != vec.z) {
			this._rotationX = vec.x;
			this._rotationY = vec.y;
			this._rotationZ = vec.z;
			this.invalidateRotation();
		}
		vec = elements.data[2];
		if(this._scaleX != vec.x || this._scaleY != vec.y || this._scaleZ != vec.z) {
			this._scaleX = vec.x;
			this._scaleY = vec.y;
			this._scaleZ = vec.z;
			this.invalidateScale();
		}
		return val;
	}
	,get_pivotPoint: function() {
		return this._pivotPoint;
	}
	,set_pivotPoint: function(pivot) {
		this._pivotPoint = new openfl.geom.Vector3D(pivot.x,pivot.y,pivot.z,pivot.w);
		this.invalidatePivot();
		return pivot;
	}
	,get_position: function() {
		this.get_transform().copyColumnTo(3,this._pos);
		return this._pos.clone();
	}
	,set_position: function(value) {
		this._x = value.x;
		this._y = value.y;
		this._z = value.z;
		this.invalidatePosition();
		return value;
	}
	,get_forwardVector: function() {
		return away3d.core.math.Matrix3DUtils.getForward(this.get_transform());
	}
	,get_rightVector: function() {
		return away3d.core.math.Matrix3DUtils.getRight(this.get_transform());
	}
	,get_upVector: function() {
		return away3d.core.math.Matrix3DUtils.getUp(this.get_transform());
	}
	,get_backVector: function() {
		var director = away3d.core.math.Matrix3DUtils.getForward(this.get_transform());
		director.x *= -1;
		director.y *= -1;
		director.z *= -1;
		return director;
	}
	,get_leftVector: function() {
		var director = away3d.core.math.Matrix3DUtils.getRight(this.get_transform());
		director.x *= -1;
		director.y *= -1;
		director.z *= -1;
		return director;
	}
	,get_downVector: function() {
		var director = away3d.core.math.Matrix3DUtils.getUp(this.get_transform());
		director.x *= -1;
		director.y *= -1;
		director.z *= -1;
		return director;
	}
	,scale: function(value) {
		this._scaleX *= value;
		this._scaleY *= value;
		this._scaleZ *= value;
		this.invalidateScale();
	}
	,moveForward: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,0,1),distance);
	}
	,moveBackward: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,0,1),-distance);
	}
	,moveLeft: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(1,0,0),-distance);
	}
	,moveRight: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(1,0,0),distance);
	}
	,moveUp: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,1,0),distance);
	}
	,moveDown: function(distance) {
		this.translateLocal(new openfl.geom.Vector3D(0,1,0),-distance);
	}
	,moveTo: function(dx,dy,dz) {
		if(this._x == dx && this._y == dy && this._z == dz) return;
		this._x = dx;
		this._y = dy;
		this._z = dz;
		this.invalidatePosition();
	}
	,movePivot: function(dx,dy,dz) {
		if(this._pivotPoint == null) this._pivotPoint = new openfl.geom.Vector3D();
		this._pivotPoint.x += dx;
		this._pivotPoint.y += dy;
		this._pivotPoint.z += dz;
		this.invalidatePivot();
	}
	,translate: function(axis,distance) {
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var len = distance / Math.sqrt(x * x + y * y + z * z);
		this._x += x * len;
		this._y += y * len;
		this._z += z * len;
		this.invalidatePosition();
	}
	,translateLocal: function(axis,distance) {
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var len = distance / Math.sqrt(x * x + y * y + z * z);
		this.get_transform().prependTranslation(x * len,y * len,z * len);
		this._transform.copyColumnTo(3,this._pos);
		this._x = this._pos.x;
		this._y = this._pos.y;
		this._z = this._pos.z;
		this.invalidatePosition();
	}
	,pitch: function(angle) {
		this.rotate(new openfl.geom.Vector3D(1,0,0),angle);
	}
	,yaw: function(angle) {
		this.rotate(new openfl.geom.Vector3D(0,1,0),angle);
	}
	,roll: function(angle) {
		this.rotate(new openfl.geom.Vector3D(0,0,1),angle);
	}
	,clone: function() {
		var clone = new away3d.core.base.Object3D();
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_transform(this.get_transform());
		clone.set_name(this.get_name());
		return clone;
	}
	,rotateTo: function(ax,ay,az) {
		this._rotationX = ax * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationY = ay * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this._rotationZ = az * away3d.core.math.MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
	}
	,rotate: function(axis,angle) {
		var m = new openfl.geom.Matrix3D();
		m.prependRotation(angle,axis,null);
		var vec;
		var this1 = m.decompose();
		vec = this1.data[1];
		this._rotationX += vec.x;
		this._rotationY += vec.y;
		this._rotationZ += vec.z;
		this.invalidateRotation();
	}
	,lookAt: function(target,upAxis) {
		var yAxis;
		var zAxis;
		var xAxis;
		var raw;
		if(upAxis == null) upAxis = new openfl.geom.Vector3D(0,1,0);
		zAxis = target.subtract(this.get_position());
		zAxis.normalize();
		xAxis = new openfl.geom.Vector3D(upAxis.y * zAxis.z - upAxis.z * zAxis.y,upAxis.z * zAxis.x - upAxis.x * zAxis.z,upAxis.x * zAxis.y - upAxis.y * zAxis.x,1);
		xAxis.normalize();
		if(Math.sqrt(xAxis.x * xAxis.x + xAxis.y * xAxis.y + xAxis.z * xAxis.z) < .05) xAxis = upAxis.crossProduct(new openfl.geom.Vector3D(0,0,1));
		yAxis = new openfl.geom.Vector3D(zAxis.y * xAxis.z - zAxis.z * xAxis.y,zAxis.z * xAxis.x - zAxis.x * xAxis.z,zAxis.x * xAxis.y - zAxis.y * xAxis.x,1);
		raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		if(!raw.fixed) {
			if(0 >= raw.length) raw.length = 1;
			if(raw.data.length < raw.length) {
				var data;
				var this1;
				this1 = new Array(raw.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
				raw.data = data;
			}
		}
		raw.data[0] = this._scaleX * xAxis.x;
		if(!raw.fixed) {
			if(1 >= raw.length) raw.length = 2;
			if(raw.data.length < raw.length) {
				var data1;
				var this2;
				this2 = new Array(raw.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
				raw.data = data1;
			}
		}
		raw.data[1] = this._scaleX * xAxis.y;
		if(!raw.fixed) {
			if(2 >= raw.length) raw.length = 3;
			if(raw.data.length < raw.length) {
				var data2;
				var this3;
				this3 = new Array(raw.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
				raw.data = data2;
			}
		}
		raw.data[2] = this._scaleX * xAxis.z;
		if(!raw.fixed) {
			if(3 >= raw.length) raw.length = 4;
			if(raw.data.length < raw.length) {
				var data3;
				var this4;
				this4 = new Array(raw.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
				raw.data = data3;
			}
		}
		raw.data[3] = 0;
		if(!raw.fixed) {
			if(4 >= raw.length) raw.length = 5;
			if(raw.data.length < raw.length) {
				var data4;
				var this5;
				this5 = new Array(raw.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
				raw.data = data4;
			}
		}
		raw.data[4] = this._scaleY * yAxis.x;
		if(!raw.fixed) {
			if(5 >= raw.length) raw.length = 6;
			if(raw.data.length < raw.length) {
				var data5;
				var this6;
				this6 = new Array(raw.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
				raw.data = data5;
			}
		}
		raw.data[5] = this._scaleY * yAxis.y;
		if(!raw.fixed) {
			if(6 >= raw.length) raw.length = 7;
			if(raw.data.length < raw.length) {
				var data6;
				var this7;
				this7 = new Array(raw.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
				raw.data = data6;
			}
		}
		raw.data[6] = this._scaleY * yAxis.z;
		if(!raw.fixed) {
			if(7 >= raw.length) raw.length = 8;
			if(raw.data.length < raw.length) {
				var data7;
				var this8;
				this8 = new Array(raw.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
				raw.data = data7;
			}
		}
		raw.data[7] = 0;
		if(!raw.fixed) {
			if(8 >= raw.length) raw.length = 9;
			if(raw.data.length < raw.length) {
				var data8;
				var this9;
				this9 = new Array(raw.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
				raw.data = data8;
			}
		}
		raw.data[8] = this._scaleZ * zAxis.x;
		if(!raw.fixed) {
			if(9 >= raw.length) raw.length = 10;
			if(raw.data.length < raw.length) {
				var data9;
				var this10;
				this10 = new Array(raw.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
				raw.data = data9;
			}
		}
		raw.data[9] = this._scaleZ * zAxis.y;
		if(!raw.fixed) {
			if(10 >= raw.length) raw.length = 11;
			if(raw.data.length < raw.length) {
				var data10;
				var this11;
				this11 = new Array(raw.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
				raw.data = data10;
			}
		}
		raw.data[10] = this._scaleZ * zAxis.z;
		if(!raw.fixed) {
			if(11 >= raw.length) raw.length = 12;
			if(raw.data.length < raw.length) {
				var data11;
				var this12;
				this12 = new Array(raw.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
				raw.data = data11;
			}
		}
		raw.data[11] = 0;
		if(!raw.fixed) {
			if(12 >= raw.length) raw.length = 13;
			if(raw.data.length < raw.length) {
				var data12;
				var this13;
				this13 = new Array(raw.data.length + 10);
				data12 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
				raw.data = data12;
			}
		}
		raw.data[12] = this._x;
		if(!raw.fixed) {
			if(13 >= raw.length) raw.length = 14;
			if(raw.data.length < raw.length) {
				var data13;
				var this14;
				this14 = new Array(raw.data.length + 10);
				data13 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
				raw.data = data13;
			}
		}
		raw.data[13] = this._y;
		if(!raw.fixed) {
			if(14 >= raw.length) raw.length = 15;
			if(raw.data.length < raw.length) {
				var data14;
				var this15;
				this15 = new Array(raw.data.length + 10);
				data14 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
				raw.data = data14;
			}
		}
		raw.data[14] = this._z;
		if(!raw.fixed) {
			if(15 >= raw.length) raw.length = 16;
			if(raw.data.length < raw.length) {
				var data15;
				var this16;
				this16 = new Array(raw.data.length + 10);
				data15 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
				raw.data = data15;
			}
		}
		raw.data[15] = 1;
		this._transform.copyRawDataFrom(raw);
		this.set_transform(this.get_transform());
		if(zAxis.z < 0) {
			this.set_rotationY(180 - this.get_rotationY());
			var _g = this;
			_g.set_rotationX(_g.get_rotationX() - 180);
			var _g1 = this;
			_g1.set_rotationZ(_g1.get_rotationZ() - 180);
		}
	}
	,dispose: function() {
	}
	,disposeAsset: function() {
		this.dispose();
	}
	,invalidateTransform: function() {
		this._transformDirty = true;
	}
	,updateTransform: function() {
		this._pos.x = this._x;
		this._pos.y = this._y;
		this._pos.z = this._z;
		this._rot.x = this._rotationX;
		this._rot.y = this._rotationY;
		this._rot.z = this._rotationZ;
		this._sca.x = this._scaleX;
		this._sca.y = this._scaleY;
		this._sca.z = this._scaleZ;
		this._transform.recompose(this._transformComponents);
		if(!this._pivotZero) {
			this._transform.prependTranslation(-this._pivotPoint.x,-this._pivotPoint.y,-this._pivotPoint.z);
			this._transform.appendTranslation(this._pivotPoint.x,this._pivotPoint.y,this._pivotPoint.z);
		}
		this._transformDirty = false;
		this._positionDirty = false;
		this._rotationDirty = false;
		this._scaleDirty = false;
	}
	,get_zOffset: function() {
		return this._zOffset;
	}
	,set_zOffset: function(value) {
		this._zOffset = value;
		return value;
	}
	,__class__: away3d.core.base.Object3D
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{set_zOffset:"set_zOffset",get_zOffset:"get_zOffset",get_downVector:"get_downVector",get_leftVector:"get_leftVector",get_backVector:"get_backVector",get_upVector:"get_upVector",get_rightVector:"get_rightVector",get_forwardVector:"get_forwardVector",set_position:"set_position",get_position:"get_position",set_pivotPoint:"set_pivotPoint",get_pivotPoint:"get_pivotPoint",set_transform:"set_transform",get_transform:"get_transform",set_eulers:"set_eulers",get_eulers:"get_eulers",set_scaleZ:"set_scaleZ",get_scaleZ:"get_scaleZ",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
away3d.containers = {};
away3d.containers.ObjectContainer3D = function() {
	this._sceneTransform = new openfl.geom.Matrix3D();
	this._sceneTransformDirty = true;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._children = this1;
	this._mouseChildren = true;
	this._inverseSceneTransform = new openfl.geom.Matrix3D();
	this._inverseSceneTransformDirty = true;
	this._scenePosition = new openfl.geom.Vector3D();
	this._scenePositionDirty = true;
	this._explicitVisibility = true;
	this._implicitVisibility = true;
	this._ignoreTransform = false;
	away3d.core.base.Object3D.call(this);
};
$hxClasses["away3d.containers.ObjectContainer3D"] = away3d.containers.ObjectContainer3D;
away3d.containers.ObjectContainer3D.__name__ = ["away3d","containers","ObjectContainer3D"];
away3d.containers.ObjectContainer3D.__interfaces__ = [away3d.library.assets.IAsset];
away3d.containers.ObjectContainer3D.__super__ = away3d.core.base.Object3D;
away3d.containers.ObjectContainer3D.prototype = $extend(away3d.core.base.Object3D.prototype,{
	get_ignoreTransform: function() {
		return this._ignoreTransform;
	}
	,set_ignoreTransform: function(value) {
		this._ignoreTransform = value;
		this._sceneTransformDirty = !value;
		this._inverseSceneTransformDirty = !value;
		this._scenePositionDirty = !value;
		if(!value) {
			this._sceneTransform.identity();
			this._scenePosition.x = 0;
			this._scenePosition.y = 0;
			this._scenePosition.z = 0;
		}
		return value;
	}
	,get_implicitPartition: function() {
		return this._implicitPartition;
	}
	,set_implicitPartition: function(value) {
		if(value == this._implicitPartition) return value;
		var i = 0;
		var len = this._children.length;
		var child;
		this._implicitPartition = value;
		while(i < len) {
			var index = i++;
			child = this._children.data[index];
			if(child._explicitPartition == null) child.set_implicitPartition(value);
		}
		return value;
	}
	,get_isVisible: function() {
		return this._implicitVisibility && this._explicitVisibility;
	}
	,setParent: function(value) {
		this._parent = value;
		this.updateMouseChildren();
		if(value == null) {
			this.set_scene(null);
			return;
		}
		this.notifySceneTransformChange();
		this.notifySceneChange();
	}
	,notifySceneTransformChange: function() {
		if(this._sceneTransformDirty || this._ignoreTransform) return;
		this.invalidateSceneTransform();
		var i = 0;
		var len = this._children.length;
		while(i < len) ((function($this) {
			var $r;
			var index = i++;
			$r = $this._children.data[index];
			return $r;
		}(this))).notifySceneTransformChange();
		if(this._listenToSceneTransformChanged) {
			if(this._sceneTransformChanged == null) this._sceneTransformChanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED,this);
			this.dispatchEvent(this._sceneTransformChanged);
		}
	}
	,notifySceneChange: function() {
		this.notifySceneTransformChange();
		var i = 0;
		var len = this._children.length;
		while(i < len) ((function($this) {
			var $r;
			var index = i++;
			$r = $this._children.data[index];
			return $r;
		}(this))).notifySceneChange();
		if(this._listenToSceneChanged) {
			if(this._scenechanged == null) this._scenechanged = new away3d.events.Object3DEvent(away3d.events.Object3DEvent.SCENE_CHANGED,this);
			this.dispatchEvent(this._scenechanged);
		}
	}
	,updateMouseChildren: function() {
		if(this._parent != null && !this._parent._isRoot) this._ancestorsAllowMouseEnabled = this.get_parent()._ancestorsAllowMouseEnabled && this._parent.get_mouseChildren(); else this._ancestorsAllowMouseEnabled = this.get_mouseChildren();
		var len = this._children.length;
		var i = 0;
		while(i < len) {
			this._children.data[i].updateMouseChildren();
			++i;
		}
	}
	,get_mouseEnabled: function() {
		return this._mouseEnabled;
	}
	,set_mouseEnabled: function(value) {
		this._mouseEnabled = value;
		this.updateMouseChildren();
		return value;
	}
	,invalidateTransform: function() {
		away3d.core.base.Object3D.prototype.invalidateTransform.call(this);
		this.notifySceneTransformChange();
	}
	,invalidateSceneTransform: function() {
		this._sceneTransformDirty = !this._ignoreTransform;
		this._inverseSceneTransformDirty = !this._ignoreTransform;
		this._scenePositionDirty = !this._ignoreTransform;
	}
	,updateSceneTransform: function() {
		if(this._parent != null && !this._parent._isRoot) {
			this._sceneTransform.copyFrom(this._parent.get_sceneTransform());
			this._sceneTransform.prepend(this.get_transform());
		} else this._sceneTransform.copyFrom(this.get_transform());
		this._sceneTransformDirty = false;
	}
	,get_mouseChildren: function() {
		return this._mouseChildren;
	}
	,set_mouseChildren: function(value) {
		this._mouseChildren = value;
		this.updateMouseChildren();
		return value;
	}
	,get_visible: function() {
		return this._explicitVisibility;
	}
	,set_visible: function(value) {
		var len = this._children.length;
		this._explicitVisibility = value;
		var i = 0;
		while(i < len) {
			this._children.data[i].updateImplicitVisibility();
			++i;
		}
		return value;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.CONTAINER;
	}
	,get_scenePosition: function() {
		if(this._scenePositionDirty) {
			this.get_sceneTransform().copyColumnTo(3,this._scenePosition);
			this._scenePositionDirty = false;
		}
		return this._scenePosition;
	}
	,get_minX: function() {
		var i = 0;
		var len = this._children.length;
		var min = Math.POSITIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_minX() + child.get_x();
			if(m < min) min = m;
		}
		return min;
	}
	,get_minY: function() {
		var i = 0;
		var len = this._children.length;
		var min = Math.POSITIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_minY() + child.get_y();
			if(m < min) min = m;
		}
		return min;
	}
	,get_minZ: function() {
		var i = 0;
		var len = this._children.length;
		var min = Math.POSITIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_minZ() + child.get_z();
			if(m < min) min = m;
		}
		return min;
	}
	,get_maxX: function() {
		var i = 0;
		var len = this._children.length;
		var max = Math.NEGATIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_maxX() + child.get_x();
			if(m > max) max = m;
		}
		return max;
	}
	,get_maxY: function() {
		var i = 0;
		var len = this._children.length;
		var max = Math.NEGATIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_maxY() + child.get_y();
			if(m > max) max = m;
		}
		return max;
	}
	,get_maxZ: function() {
		var i = 0;
		var len = this._children.length;
		var max = Math.NEGATIVE_INFINITY;
		var m;
		while(i < len) {
			var child;
			var index = i++;
			child = this._children.data[index];
			m = child.get_maxZ() + child.get_z();
			if(m > max) max = m;
		}
		return max;
	}
	,get_partition: function() {
		return this._explicitPartition;
	}
	,set_partition: function(value) {
		this._explicitPartition = value;
		this.set_implicitPartition(value != null?value:this._parent != null?this._parent.get_implicitPartition():null);
		return value;
	}
	,get_sceneTransform: function() {
		if(this._sceneTransformDirty) this.updateSceneTransform();
		return this._sceneTransform;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(value) {
		var i = 0;
		var len = this._children.length;
		while(i < len) ((function($this) {
			var $r;
			var index = i++;
			$r = $this._children.data[index];
			return $r;
		}(this))).set_scene(value);
		if(this._scene == value) return value;
		if(value == null) this._oldScene = this._scene;
		if(this._explicitPartition != null && this._oldScene != null && this._oldScene != this._scene) this.set_partition(null);
		if(value != null) this._oldScene = null;
		this._scene = value;
		if(this._scene != null) this._scene.dispatchEvent(new away3d.events.Scene3DEvent(away3d.events.Scene3DEvent.ADDED_TO_SCENE,this)); else if(this._oldScene != null) this._oldScene.dispatchEvent(new away3d.events.Scene3DEvent(away3d.events.Scene3DEvent.REMOVED_FROM_SCENE,this));
		return value;
	}
	,get_inverseSceneTransform: function() {
		if(this._inverseSceneTransformDirty) {
			this._inverseSceneTransform.copyFrom(this.get_sceneTransform());
			this._inverseSceneTransform.invert();
			this._inverseSceneTransformDirty = false;
		}
		return this._inverseSceneTransform;
	}
	,get_parent: function() {
		return this._parent;
	}
	,contains: function(child) {
		return (function($this) {
			var $r;
			var this1 = $this._children;
			var value = -1;
			{
				var _g1 = 0;
				var _g = this1.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this1.data[i] == child) {
						value = i;
						break;
					}
				}
			}
			$r = value;
			return $r;
		}(this)) >= 0;
	}
	,addChild: function(child) {
		if(child == null) throw new openfl.errors.Error("Parameter child cannot be null.");
		if(child._parent != null) child._parent.removeChild(child);
		if(child._explicitPartition == null) child.set_implicitPartition(this._implicitPartition);
		child.setParent(this);
		child.set_scene(this._scene);
		child.notifySceneTransformChange();
		child.updateMouseChildren();
		child.updateImplicitVisibility();
		var this1 = this._children;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = child;
		}
		this1.length;
		return child;
	}
	,addChildren: function(childarray) {
		var _g = 0;
		while(_g < childarray.length) {
			var child = childarray.data[_g];
			++_g;
			this.addChild(child);
		}
	}
	,removeChild: function(child) {
		if(child == null) throw new openfl.errors.Error("Parameter child cannot be null");
		var childIndex;
		var this1 = this._children;
		var value = -1;
		var _g1 = 0;
		var _g = this1.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this1.data[i] == child) {
				value = i;
				break;
			}
		}
		childIndex = value;
		if(childIndex == -1) throw new openfl.errors.Error("Parameter is not a child of the caller");
		this.removeChildInternal(childIndex,child);
	}
	,removeChildAt: function(index) {
		var child = this._children.data[index];
		this.removeChildInternal(index,child);
	}
	,removeChildInternal: function(childIndex,child) {
		var this1 = this._children;
		var pos = childIndex;
		var len = 1;
		if(pos < 0) pos += this1.length;
		if(pos + len > this1.length) len = this1.length - pos;
		if(len < 0) len = 0;
		var vectorData = new openfl.VectorData();
		vectorData.length = len;
		vectorData.fixed = false;
		var this2;
		this2 = new Array(len);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
		if(len > 0) {
			this1.length -= len;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
		}
		vectorData;
		child.setParent(null);
		if(child._explicitPartition == null) child.set_implicitPartition(null);
	}
	,getChildAt: function(index) {
		return this._children.data[index];
	}
	,get_numChildren: function() {
		return this._children.length;
	}
	,lookAt: function(target,upAxis) {
		away3d.core.base.Object3D.prototype.lookAt.call(this,target,upAxis);
		this.notifySceneTransformChange();
	}
	,translateLocal: function(axis,distance) {
		away3d.core.base.Object3D.prototype.translateLocal.call(this,axis,distance);
		this.notifySceneTransformChange();
	}
	,dispose: function() {
		if(this.get_parent() != null) this.get_parent().removeChild(this);
	}
	,disposeWithChildren: function() {
		this.dispose();
		while(this.get_numChildren() > 0) this.getChildAt(0).dispose();
	}
	,clone: function() {
		var clone = new away3d.containers.ObjectContainer3D();
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_transform(this.get_transform());
		clone.set_partition(this.get_partition());
		clone.set_name(this.get_name());
		var len = this._children.length;
		var i = 0;
		while(i < len) {
			clone.addChild(js.Boot.__cast(this._children.data[i].clone() , away3d.containers.ObjectContainer3D));
			++i;
		}
		return clone;
	}
	,rotate: function(axis,angle) {
		away3d.core.base.Object3D.prototype.rotate.call(this,axis,angle);
		this.notifySceneTransformChange();
	}
	,dispatchEvent: function(event) {
		var ret = away3d.core.base.Object3D.prototype.dispatchEvent.call(this,event);
		if(event.bubbles) {
			if(this._parent != null) this._parent.dispatchEvent(event); else if(this._scene != null) this._scene.dispatchEvent(event);
		}
		return ret;
	}
	,updateImplicitVisibility: function() {
		var len = this._children.length;
		this._implicitVisibility = this._parent._explicitVisibility && this._parent._implicitVisibility;
		var i = 0;
		while(i < len) {
			this._children.data[i].updateImplicitVisibility();
			++i;
		}
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		away3d.core.base.Object3D.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		switch(type) {
		case away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED:
			this._listenToSceneTransformChanged = true;
			break;
		case away3d.events.Object3DEvent.SCENE_CHANGED:
			this._listenToSceneChanged = true;
			break;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		away3d.core.base.Object3D.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(this.hasEventListener(type)) return;
		switch(type) {
		case away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED:
			this._listenToSceneTransformChanged = false;
			break;
		case away3d.events.Object3DEvent.SCENE_CHANGED:
			this._listenToSceneChanged = false;
			break;
		}
	}
	,__class__: away3d.containers.ObjectContainer3D
	,__properties__: $extend(away3d.core.base.Object3D.prototype.__properties__,{get_numChildren:"get_numChildren",get_parent:"get_parent",get_inverseSceneTransform:"get_inverseSceneTransform",set_scene:"set_scene",get_scene:"get_scene",get_sceneTransform:"get_sceneTransform",set_partition:"set_partition",get_partition:"get_partition",get_maxZ:"get_maxZ",get_maxY:"get_maxY",get_maxX:"get_maxX",get_minZ:"get_minZ",get_minY:"get_minY",get_minX:"get_minX",get_scenePosition:"get_scenePosition",get_assetType:"get_assetType",set_visible:"set_visible",get_visible:"get_visible",set_mouseChildren:"set_mouseChildren",get_mouseChildren:"get_mouseChildren",set_mouseEnabled:"set_mouseEnabled",get_mouseEnabled:"get_mouseEnabled",get_isVisible:"get_isVisible",set_implicitPartition:"set_implicitPartition",get_implicitPartition:"get_implicitPartition",set_ignoreTransform:"set_ignoreTransform",get_ignoreTransform:"get_ignoreTransform"})
});
away3d.entities = {};
away3d.entities.Entity = function() {
	this._boundsIsShown = false;
	this._boundsInvalid = true;
	this._worldBoundsInvalid = true;
	away3d.containers.ObjectContainer3D.call(this);
	this._bounds = this.getDefaultBoundingVolume();
	this._worldBounds = this.getDefaultBoundingVolume();
};
$hxClasses["away3d.entities.Entity"] = away3d.entities.Entity;
away3d.entities.Entity.__name__ = ["away3d","entities","Entity"];
away3d.entities.Entity.__super__ = away3d.containers.ObjectContainer3D;
away3d.entities.Entity.prototype = $extend(away3d.containers.ObjectContainer3D.prototype,{
	set_ignoreTransform: function(value) {
		if(this._scene != null) this._scene.invalidateEntityBounds(this);
		away3d.containers.ObjectContainer3D.prototype.set_ignoreTransform.call(this,value);
		return value;
	}
	,get_shaderPickingDetails: function() {
		return this._shaderPickingDetails;
	}
	,set_shaderPickingDetails: function(value) {
		this._shaderPickingDetails = value;
		return value;
	}
	,get_staticNode: function() {
		return this._staticNode;
	}
	,set_staticNode: function(value) {
		this._staticNode = value;
		return value;
	}
	,get_pickingCollisionVO: function() {
		if(this._pickingCollisionVO == null) this._pickingCollisionVO = new away3d.core.pick.PickingCollisionVO(this);
		return this._pickingCollisionVO;
	}
	,collidesBefore: function(shortestCollisionDistance,findClosest) {
		return true;
	}
	,get_showBounds: function() {
		return this._showBounds;
	}
	,set_showBounds: function(value) {
		if(value == this._showBounds) return value;
		this._showBounds = value;
		if(this._showBounds) this.addBounds(); else this.removeBounds();
		return value;
	}
	,get_minX: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_min().x;
	}
	,get_minY: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_min().y;
	}
	,get_minZ: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_min().z;
	}
	,get_maxX: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_max().x;
	}
	,get_maxY: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_max().y;
	}
	,get_maxZ: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds.get_max().z;
	}
	,get_bounds: function() {
		if(this._boundsInvalid) this.updateBounds();
		return this._bounds;
	}
	,set_bounds: function(value) {
		this.removeBounds();
		this._bounds = value;
		this._worldBounds = value.clone();
		this.invalidateBounds();
		if(this._showBounds) this.addBounds();
		return value;
	}
	,get_worldBounds: function() {
		if(this._worldBoundsInvalid) this.updateWorldBounds();
		return this._worldBounds;
	}
	,updateWorldBounds: function() {
		this._worldBounds.transformFrom(this.get_bounds(),this.get_sceneTransform());
		this._worldBoundsInvalid = false;
	}
	,set_implicitPartition: function(value) {
		if(value == this._implicitPartition) return value;
		if(this._implicitPartition != null) this.notifyPartitionUnassigned();
		away3d.containers.ObjectContainer3D.prototype.set_implicitPartition.call(this,value);
		this.notifyPartitionAssigned();
		return value;
	}
	,set_scene: function(value) {
		if(value == this._scene) return value;
		if(this._scene != null) this._scene.unregisterEntity(this);
		if(value != null) value.registerEntity(this);
		away3d.containers.ObjectContainer3D.prototype.set_scene.call(this,value);
		return value;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.ENTITY;
	}
	,get_pickingCollider: function() {
		return this._pickingCollider;
	}
	,set_pickingCollider: function(value) {
		this._pickingCollider = value;
		return value;
	}
	,getEntityPartitionNode: function() {
		if(this._partitionNode == null) this._partitionNode = this.createEntityPartitionNode();
		return this._partitionNode;
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		var localRayPosition = this.get_inverseSceneTransform().transformVector(rayPosition);
		var localRayDirection = this.get_inverseSceneTransform().deltaTransformVector(rayDirection);
		if(this.get_pickingCollisionVO().localNormal == null) this.get_pickingCollisionVO().localNormal = new openfl.geom.Vector3D();
		var rayEntryDistance = this.get_bounds().rayIntersection(localRayPosition,localRayDirection,this.get_pickingCollisionVO().localNormal);
		if(rayEntryDistance < 0) return false;
		this.get_pickingCollisionVO().rayEntryDistance = rayEntryDistance;
		this.get_pickingCollisionVO().localRayPosition = localRayPosition;
		this.get_pickingCollisionVO().localRayDirection = localRayDirection;
		this.get_pickingCollisionVO().rayPosition = rayPosition;
		this.get_pickingCollisionVO().rayDirection = rayDirection;
		this.get_pickingCollisionVO().rayOriginIsInsideBounds = rayEntryDistance == 0;
		return true;
	}
	,createEntityPartitionNode: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.AxisAlignedBoundingBox();
	}
	,updateBounds: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,invalidateSceneTransform: function() {
		if(!this._ignoreTransform) {
			away3d.containers.ObjectContainer3D.prototype.invalidateSceneTransform.call(this);
			this._worldBoundsInvalid = true;
			this.notifySceneBoundsInvalid();
		}
	}
	,invalidateBounds: function() {
		this._boundsInvalid = true;
		this._worldBoundsInvalid = true;
		this.notifySceneBoundsInvalid();
	}
	,updateMouseChildren: function() {
		if(this._parent == null && this.get_pickingCollider() != null) {
			if(js.Boot.__instanceof(this._parent,away3d.entities.Entity)) {
				var collider = (js.Boot.__cast(this._parent , away3d.entities.Entity)).get_pickingCollider();
				if(collider != null) this.set_pickingCollider(collider);
			}
		}
		away3d.containers.ObjectContainer3D.prototype.updateMouseChildren.call(this);
	}
	,notifySceneBoundsInvalid: function() {
		if(this._scene != null) this._scene.invalidateEntityBounds(this);
	}
	,notifyPartitionAssigned: function() {
		if(this._scene != null) this._scene.registerPartition(this);
	}
	,notifyPartitionUnassigned: function() {
		if(this._scene != null) this._scene.unregisterPartition(this);
	}
	,addBounds: function() {
		if(!this._boundsIsShown) {
			this._boundsIsShown = true;
			this.addChild(this._bounds.get_boundingRenderable());
		}
	}
	,removeBounds: function() {
		if(this._boundsIsShown) {
			this._boundsIsShown = false;
			this.removeChild(this._bounds.get_boundingRenderable());
			this._bounds.disposeRenderable();
		}
	}
	,internalUpdate: function() {
		if(this._controller != null) this._controller.update();
	}
	,__class__: away3d.entities.Entity
	,__properties__: $extend(away3d.containers.ObjectContainer3D.prototype.__properties__,{set_pickingCollider:"set_pickingCollider",get_pickingCollider:"get_pickingCollider",get_worldBounds:"get_worldBounds",set_bounds:"set_bounds",get_bounds:"get_bounds",set_showBounds:"set_showBounds",get_showBounds:"get_showBounds",get_pickingCollisionVO:"get_pickingCollisionVO",set_staticNode:"set_staticNode",get_staticNode:"get_staticNode",set_shaderPickingDetails:"set_shaderPickingDetails",get_shaderPickingDetails:"get_shaderPickingDetails"})
});
away3d.cameras = {};
away3d.cameras.Camera3D = function(lens) {
	this._viewProjection = new openfl.geom.Matrix3D();
	this._viewProjectionDirty = true;
	this._frustumPlanesDirty = true;
	away3d.entities.Entity.call(this);
	this._lens = lens;
	if(this._lens == null) this._lens = new away3d.cameras.lenses.PerspectiveLens();
	this._lens.addEventListener(away3d.events.LensEvent.MATRIX_CHANGED,$bind(this,this.onLensMatrixChanged));
	this._frustumPlanes = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),6);
	var i = 0;
	while(i < 6) {
		var this3 = this._frustumPlanes;
		var value = new away3d.core.math.Plane3D();
		if(!this3.fixed) {
			if(i >= this3.length) this3.length = i + 1;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[i] = value;
		++i;
	}
	this.set_z(-1000);
};
$hxClasses["away3d.cameras.Camera3D"] = away3d.cameras.Camera3D;
away3d.cameras.Camera3D.__name__ = ["away3d","cameras","Camera3D"];
away3d.cameras.Camera3D.__super__ = away3d.entities.Entity;
away3d.cameras.Camera3D.prototype = $extend(away3d.entities.Entity.prototype,{
	getDefaultBoundingVolume: function() {
		return new away3d.bounds.NullBounds();
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.CAMERA;
	}
	,onLensMatrixChanged: function(event) {
		this._viewProjectionDirty = true;
		this._frustumPlanesDirty = true;
		this.dispatchEvent(event);
	}
	,get_frustumPlanes: function() {
		if(this._frustumPlanesDirty) this.updateFrustum();
		return this._frustumPlanes;
	}
	,updateFrustum: function() {
		var a;
		var b;
		var c;
		var c11;
		var c12;
		var c13;
		var c14;
		var c21;
		var c22;
		var c23;
		var c24;
		var c31;
		var c32;
		var c33;
		var c34;
		var c41;
		var c42;
		var c43;
		var c44;
		var p;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var invLen;
		this.get_viewProjection().copyRawDataTo(raw);
		c11 = raw.data[0];
		c12 = raw.data[4];
		c13 = raw.data[8];
		c14 = raw.data[12];
		c21 = raw.data[1];
		c22 = raw.data[5];
		c23 = raw.data[9];
		c24 = raw.data[13];
		c31 = raw.data[2];
		c32 = raw.data[6];
		c33 = raw.data[10];
		c34 = raw.data[14];
		c41 = raw.data[3];
		c42 = raw.data[7];
		c43 = raw.data[11];
		c44 = raw.data[15];
		p = this._frustumPlanes.data[0];
		a = c41 + c11;
		b = c42 + c12;
		c = c43 + c13;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -(c44 + c14) * invLen;
		p = this._frustumPlanes.data[1];
		a = c41 - c11;
		b = c42 - c12;
		c = c43 - c13;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c14 - c44) * invLen;
		p = this._frustumPlanes.data[2];
		a = c41 + c21;
		b = c42 + c22;
		c = c43 + c23;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -(c44 + c24) * invLen;
		p = this._frustumPlanes.data[3];
		a = c41 - c21;
		b = c42 - c22;
		c = c43 - c23;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c24 - c44) * invLen;
		p = this._frustumPlanes.data[4];
		a = c31;
		b = c32;
		c = c33;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -c34 * invLen;
		p = this._frustumPlanes.data[5];
		a = c41 - c31;
		b = c42 - c32;
		c = c43 - c33;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c34 - c44) * invLen;
		this._frustumPlanesDirty = false;
	}
	,invalidateSceneTransform: function() {
		away3d.entities.Entity.prototype.invalidateSceneTransform.call(this);
		this._viewProjectionDirty = true;
		this._frustumPlanesDirty = true;
	}
	,updateBounds: function() {
		this._bounds.nullify();
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.CameraNode(this);
	}
	,get_lens: function() {
		return this._lens;
	}
	,set_lens: function(value) {
		if(this._lens == value) return value;
		if(value == null) throw new openfl.errors.Error("Lens cannot be null!");
		this._lens.removeEventListener(away3d.events.LensEvent.MATRIX_CHANGED,$bind(this,this.onLensMatrixChanged));
		this._lens = value;
		this._lens.addEventListener(away3d.events.LensEvent.MATRIX_CHANGED,$bind(this,this.onLensMatrixChanged));
		this.dispatchEvent(new away3d.events.CameraEvent(away3d.events.CameraEvent.LENS_CHANGED,this));
		return value;
	}
	,get_viewProjection: function() {
		if(this._viewProjectionDirty) {
			this._viewProjection.copyFrom(this.get_inverseSceneTransform());
			this._viewProjection.append(this._lens.get_matrix());
			this._viewProjectionDirty = false;
		}
		return this._viewProjection;
	}
	,unproject: function(nX,nY,sZ) {
		return this.get_sceneTransform().transformVector(this.get_lens().unproject(nX,nY,sZ));
	}
	,getRay: function(nX,nY,sZ) {
		return this.get_sceneTransform().deltaTransformVector(this.get_lens().unproject(nX,nY,sZ));
	}
	,project: function(point3d) {
		return this.get_lens().project(this.get_inverseSceneTransform().transformVector(point3d));
	}
	,__class__: away3d.cameras.Camera3D
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{get_viewProjection:"get_viewProjection",set_lens:"set_lens",get_lens:"get_lens",get_frustumPlanes:"get_frustumPlanes"})
});
away3d.cameras.lenses = {};
away3d.cameras.lenses.LensBase = function() {
	openfl.events.EventDispatcher.call(this);
	this._scissorRect = new openfl.geom.Rectangle();
	this._viewPort = new openfl.geom.Rectangle();
	this._near = 20;
	this._far = 3000;
	this._aspectRatio = 1;
	this._matrixInvalid = true;
	this._frustumCorners = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),24,0);
	this._unprojectionInvalid = true;
	this._matrix = new openfl.geom.Matrix3D();
};
$hxClasses["away3d.cameras.lenses.LensBase"] = away3d.cameras.lenses.LensBase;
away3d.cameras.lenses.LensBase.__name__ = ["away3d","cameras","lenses","LensBase"];
away3d.cameras.lenses.LensBase.__super__ = openfl.events.EventDispatcher;
away3d.cameras.lenses.LensBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_frustumCorners: function() {
		return this._frustumCorners;
	}
	,set_frustumCorners: function(frustumCorners) {
		this._frustumCorners = frustumCorners;
		return frustumCorners;
	}
	,get_matrix: function() {
		if(this._matrixInvalid) {
			this.updateMatrix();
			this._matrixInvalid = false;
		}
		return this._matrix;
	}
	,set_matrix: function(value) {
		this._matrix = value;
		this.invalidateMatrix();
		return value;
	}
	,get_near: function() {
		return this._near;
	}
	,set_near: function(value) {
		if(value == this._near) return value;
		this._near = value;
		this.invalidateMatrix();
		return value;
	}
	,get_far: function() {
		return this._far;
	}
	,set_far: function(value) {
		if(value == this._far) return value;
		this._far = value;
		this.invalidateMatrix();
		return value;
	}
	,project: function(point3d) {
		var v = this.get_matrix().transformVector(point3d);
		v.x = v.x / v.w;
		v.y = -v.y / v.w;
		v.z = point3d.z;
		return v;
	}
	,get_unprojectionMatrix: function() {
		if(this._unprojectionInvalid) {
			if(this._unprojection == null) this._unprojection = new openfl.geom.Matrix3D();
			this._unprojection.copyFrom(this.get_matrix());
			this._unprojection.invert();
			this._unprojectionInvalid = false;
		}
		return this._unprojection;
	}
	,unproject: function(nX,nY,sZ) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,clone: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_aspectRatio: function() {
		return this._aspectRatio;
	}
	,set_aspectRatio: function(value) {
		if(this._aspectRatio == value || value * 0 != 0) return value;
		this._aspectRatio = value;
		this.invalidateMatrix();
		return value;
	}
	,invalidateMatrix: function() {
		this._matrixInvalid = true;
		this._unprojectionInvalid = true;
		this.dispatchEvent(new away3d.events.LensEvent(away3d.events.LensEvent.MATRIX_CHANGED,this));
	}
	,updateMatrix: function() {
		throw new away3d.errors.AbstractMethodError();
	}
	,updateScissorRect: function(x,y,width,height) {
		this._scissorRect.x = x;
		this._scissorRect.y = y;
		this._scissorRect.width = width;
		this._scissorRect.height = height;
		this.invalidateMatrix();
	}
	,updateViewport: function(x,y,width,height) {
		this._viewPort.x = x;
		this._viewPort.y = y;
		this._viewPort.width = width;
		this._viewPort.height = height;
		this.invalidateMatrix();
	}
	,__class__: away3d.cameras.lenses.LensBase
	,__properties__: {set_aspectRatio:"set_aspectRatio",get_aspectRatio:"get_aspectRatio",get_unprojectionMatrix:"get_unprojectionMatrix",set_far:"set_far",get_far:"get_far",set_near:"set_near",get_near:"get_near",set_matrix:"set_matrix",get_matrix:"get_matrix",set_frustumCorners:"set_frustumCorners",get_frustumCorners:"get_frustumCorners"}
});
away3d.cameras.lenses.FreeMatrixLens = function() {
	away3d.cameras.lenses.LensBase.call(this);
	this._matrix.copyFrom(new away3d.cameras.lenses.PerspectiveLens().get_matrix());
};
$hxClasses["away3d.cameras.lenses.FreeMatrixLens"] = away3d.cameras.lenses.FreeMatrixLens;
away3d.cameras.lenses.FreeMatrixLens.__name__ = ["away3d","cameras","lenses","FreeMatrixLens"];
away3d.cameras.lenses.FreeMatrixLens.__super__ = away3d.cameras.lenses.LensBase;
away3d.cameras.lenses.FreeMatrixLens.prototype = $extend(away3d.cameras.lenses.LensBase.prototype,{
	set_near: function(value) {
		this._near = value;
		return value;
	}
	,set_far: function(value) {
		this._far = value;
		return value;
	}
	,set_aspectRatio: function(value) {
		this._aspectRatio = value;
		return value;
	}
	,clone: function() {
		var clone = new away3d.cameras.lenses.FreeMatrixLens();
		clone._matrix.copyFrom(this._matrix);
		clone._near = this._near;
		clone._far = this._far;
		clone._aspectRatio = this._aspectRatio;
		clone.invalidateMatrix();
		return clone;
	}
	,updateMatrix: function() {
		this._matrixInvalid = false;
	}
	,__class__: away3d.cameras.lenses.FreeMatrixLens
});
away3d.cameras.lenses.PerspectiveLens = function(fieldOfView) {
	if(fieldOfView == null) fieldOfView = 60;
	away3d.cameras.lenses.LensBase.call(this);
	this.set_fieldOfView(fieldOfView);
};
$hxClasses["away3d.cameras.lenses.PerspectiveLens"] = away3d.cameras.lenses.PerspectiveLens;
away3d.cameras.lenses.PerspectiveLens.__name__ = ["away3d","cameras","lenses","PerspectiveLens"];
away3d.cameras.lenses.PerspectiveLens.__super__ = away3d.cameras.lenses.LensBase;
away3d.cameras.lenses.PerspectiveLens.prototype = $extend(away3d.cameras.lenses.LensBase.prototype,{
	get_fieldOfView: function() {
		return this._fieldOfView;
	}
	,set_fieldOfView: function(value) {
		if(value == this._fieldOfView) return value;
		this._fieldOfView = value;
		this._focalLengthInv = Math.tan(this._fieldOfView * Math.PI / 360);
		this._focalLength = 1 / this._focalLengthInv;
		this.invalidateMatrix();
		return value;
	}
	,get_focalLength: function() {
		return this._focalLength;
	}
	,set_focalLength: function(value) {
		if(value == this._focalLength) return value;
		this._focalLength = value;
		this._focalLengthInv = 1 / this._focalLength;
		this._fieldOfView = Math.atan(this._focalLengthInv) * 360 / Math.PI;
		this.invalidateMatrix();
		return value;
	}
	,unproject: function(nX,nY,sZ) {
		var v = new openfl.geom.Vector3D(nX,-nY,sZ,1.0);
		v.x *= sZ;
		v.y *= sZ;
		v = this.get_unprojectionMatrix().transformVector(v);
		v.z = sZ;
		return v;
	}
	,clone: function() {
		var clone = new away3d.cameras.lenses.PerspectiveLens(this._fieldOfView);
		clone._near = this._near;
		clone._far = this._far;
		clone._aspectRatio = this._aspectRatio;
		return clone;
	}
	,updateMatrix: function() {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		this._yMax = this._near * this._focalLengthInv;
		this._xMax = this._yMax * this._aspectRatio;
		var left;
		var right;
		var top;
		var bottom;
		if(this._scissorRect.x == 0 && this._scissorRect.y == 0 && this._scissorRect.width == this._viewPort.width && this._scissorRect.height == this._viewPort.height) {
			left = -this._xMax;
			right = this._xMax;
			top = -this._yMax;
			bottom = this._yMax;
			if(!raw.fixed) {
				if(0 >= raw.length) raw.length = 1;
				if(raw.data.length < raw.length) {
					var data;
					var this1;
					this1 = new Array(raw.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
					raw.data = data;
				}
			}
			raw.data[0] = this._near / this._xMax;
			if(!raw.fixed) {
				if(5 >= raw.length) raw.length = 6;
				if(raw.data.length < raw.length) {
					var data1;
					var this2;
					this2 = new Array(raw.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
					raw.data = data1;
				}
			}
			raw.data[5] = this._near / this._yMax;
			if(!raw.fixed) {
				if(10 >= raw.length) raw.length = 11;
				if(raw.data.length < raw.length) {
					var data2;
					var this3;
					this3 = new Array(raw.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
					raw.data = data2;
				}
			}
			raw.data[10] = this._far / (this._far - this._near);
			if(!raw.fixed) {
				if(11 >= raw.length) raw.length = 12;
				if(raw.data.length < raw.length) {
					var data3;
					var this4;
					this4 = new Array(raw.data.length + 10);
					data3 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
					raw.data = data3;
				}
			}
			raw.data[11] = 1;
			var value;
			var value1;
			var value2;
			var value3;
			var value4;
			var value5;
			var value6;
			var value7;
			var value8;
			var value9;
			if(!raw.fixed) {
				if(15 >= raw.length) raw.length = 16;
				if(raw.data.length < raw.length) {
					var data4;
					var this5;
					this5 = new Array(raw.data.length + 10);
					data4 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
					raw.data = data4;
				}
			}
			value9 = raw.data[15] = 0;
			if(!raw.fixed) {
				if(13 >= raw.length) raw.length = 14;
				if(raw.data.length < raw.length) {
					var data5;
					var this6;
					this6 = new Array(raw.data.length + 10);
					data5 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
					raw.data = data5;
				}
			}
			value8 = raw.data[13] = value9;
			if(!raw.fixed) {
				if(12 >= raw.length) raw.length = 13;
				if(raw.data.length < raw.length) {
					var data6;
					var this7;
					this7 = new Array(raw.data.length + 10);
					data6 = this7;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
					raw.data = data6;
				}
			}
			value7 = raw.data[12] = value8;
			if(!raw.fixed) {
				if(9 >= raw.length) raw.length = 10;
				if(raw.data.length < raw.length) {
					var data7;
					var this8;
					this8 = new Array(raw.data.length + 10);
					data7 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
					raw.data = data7;
				}
			}
			value6 = raw.data[9] = value7;
			if(!raw.fixed) {
				if(8 >= raw.length) raw.length = 9;
				if(raw.data.length < raw.length) {
					var data8;
					var this9;
					this9 = new Array(raw.data.length + 10);
					data8 = this9;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
					raw.data = data8;
				}
			}
			value5 = raw.data[8] = value6;
			if(!raw.fixed) {
				if(7 >= raw.length) raw.length = 8;
				if(raw.data.length < raw.length) {
					var data9;
					var this10;
					this10 = new Array(raw.data.length + 10);
					data9 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
					raw.data = data9;
				}
			}
			value4 = raw.data[7] = value5;
			if(!raw.fixed) {
				if(6 >= raw.length) raw.length = 7;
				if(raw.data.length < raw.length) {
					var data10;
					var this11;
					this11 = new Array(raw.data.length + 10);
					data10 = this11;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
					raw.data = data10;
				}
			}
			value3 = raw.data[6] = value4;
			if(!raw.fixed) {
				if(4 >= raw.length) raw.length = 5;
				if(raw.data.length < raw.length) {
					var data11;
					var this12;
					this12 = new Array(raw.data.length + 10);
					data11 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
					raw.data = data11;
				}
			}
			value2 = raw.data[4] = value3;
			if(!raw.fixed) {
				if(3 >= raw.length) raw.length = 4;
				if(raw.data.length < raw.length) {
					var data12;
					var this13;
					this13 = new Array(raw.data.length + 10);
					data12 = this13;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
					raw.data = data12;
				}
			}
			value1 = raw.data[3] = value2;
			if(!raw.fixed) {
				if(2 >= raw.length) raw.length = 3;
				if(raw.data.length < raw.length) {
					var data13;
					var this14;
					this14 = new Array(raw.data.length + 10);
					data13 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
					raw.data = data13;
				}
			}
			value = raw.data[2] = value1;
			if(!raw.fixed) {
				if(1 >= raw.length) raw.length = 2;
				if(raw.data.length < raw.length) {
					var data14;
					var this15;
					this15 = new Array(raw.data.length + 10);
					data14 = this15;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
					raw.data = data14;
				}
			}
			raw.data[1] = value;
			if(!raw.fixed) {
				if(14 >= raw.length) raw.length = 15;
				if(raw.data.length < raw.length) {
					var data15;
					var this16;
					this16 = new Array(raw.data.length + 10);
					data15 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
					raw.data = data15;
				}
			}
			raw.data[14] = -this._near * raw.data[10];
		} else {
			var xWidth = this._xMax * (this._viewPort.width / this._scissorRect.width);
			var yHgt = this._yMax * (this._viewPort.height / this._scissorRect.height);
			var center = this._xMax * (this._scissorRect.x * 2 - this._viewPort.width) / this._scissorRect.width + this._xMax;
			var middle = -this._yMax * (this._scissorRect.y * 2 - this._viewPort.height) / this._scissorRect.height - this._yMax;
			left = center - xWidth;
			right = center + xWidth;
			top = middle - yHgt;
			bottom = middle + yHgt;
			if(!raw.fixed) {
				if(0 >= raw.length) raw.length = 1;
				if(raw.data.length < raw.length) {
					var data16;
					var this17;
					this17 = new Array(raw.data.length + 10);
					data16 = this17;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data16,0,raw.data.length);
					raw.data = data16;
				}
			}
			raw.data[0] = 2 * this._near / (right - left);
			if(!raw.fixed) {
				if(5 >= raw.length) raw.length = 6;
				if(raw.data.length < raw.length) {
					var data17;
					var this18;
					this18 = new Array(raw.data.length + 10);
					data17 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data17,0,raw.data.length);
					raw.data = data17;
				}
			}
			raw.data[5] = 2 * this._near / (bottom - top);
			if(!raw.fixed) {
				if(8 >= raw.length) raw.length = 9;
				if(raw.data.length < raw.length) {
					var data18;
					var this19;
					this19 = new Array(raw.data.length + 10);
					data18 = this19;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data18,0,raw.data.length);
					raw.data = data18;
				}
			}
			raw.data[8] = (right + left) / (right - left);
			if(!raw.fixed) {
				if(9 >= raw.length) raw.length = 10;
				if(raw.data.length < raw.length) {
					var data19;
					var this20;
					this20 = new Array(raw.data.length + 10);
					data19 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data19,0,raw.data.length);
					raw.data = data19;
				}
			}
			raw.data[9] = (bottom + top) / (bottom - top);
			if(!raw.fixed) {
				if(10 >= raw.length) raw.length = 11;
				if(raw.data.length < raw.length) {
					var data20;
					var this21;
					this21 = new Array(raw.data.length + 10);
					data20 = this21;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data20,0,raw.data.length);
					raw.data = data20;
				}
			}
			raw.data[10] = (this._far + this._near) / (this._far - this._near);
			if(!raw.fixed) {
				if(11 >= raw.length) raw.length = 12;
				if(raw.data.length < raw.length) {
					var data21;
					var this22;
					this22 = new Array(raw.data.length + 10);
					data21 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data21,0,raw.data.length);
					raw.data = data21;
				}
			}
			raw.data[11] = 1;
			var value10;
			var value11;
			var value12;
			var value13;
			var value14;
			var value15;
			var value16;
			var value17;
			if(!raw.fixed) {
				if(15 >= raw.length) raw.length = 16;
				if(raw.data.length < raw.length) {
					var data22;
					var this23;
					this23 = new Array(raw.data.length + 10);
					data22 = this23;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data22,0,raw.data.length);
					raw.data = data22;
				}
			}
			value17 = raw.data[15] = 0;
			if(!raw.fixed) {
				if(13 >= raw.length) raw.length = 14;
				if(raw.data.length < raw.length) {
					var data23;
					var this24;
					this24 = new Array(raw.data.length + 10);
					data23 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data23,0,raw.data.length);
					raw.data = data23;
				}
			}
			value16 = raw.data[13] = value17;
			if(!raw.fixed) {
				if(12 >= raw.length) raw.length = 13;
				if(raw.data.length < raw.length) {
					var data24;
					var this25;
					this25 = new Array(raw.data.length + 10);
					data24 = this25;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data24,0,raw.data.length);
					raw.data = data24;
				}
			}
			value15 = raw.data[12] = value16;
			if(!raw.fixed) {
				if(7 >= raw.length) raw.length = 8;
				if(raw.data.length < raw.length) {
					var data25;
					var this26;
					this26 = new Array(raw.data.length + 10);
					data25 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data25,0,raw.data.length);
					raw.data = data25;
				}
			}
			value14 = raw.data[7] = value15;
			if(!raw.fixed) {
				if(6 >= raw.length) raw.length = 7;
				if(raw.data.length < raw.length) {
					var data26;
					var this27;
					this27 = new Array(raw.data.length + 10);
					data26 = this27;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data26,0,raw.data.length);
					raw.data = data26;
				}
			}
			value13 = raw.data[6] = value14;
			if(!raw.fixed) {
				if(4 >= raw.length) raw.length = 5;
				if(raw.data.length < raw.length) {
					var data27;
					var this28;
					this28 = new Array(raw.data.length + 10);
					data27 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data27,0,raw.data.length);
					raw.data = data27;
				}
			}
			value12 = raw.data[4] = value13;
			if(!raw.fixed) {
				if(3 >= raw.length) raw.length = 4;
				if(raw.data.length < raw.length) {
					var data28;
					var this29;
					this29 = new Array(raw.data.length + 10);
					data28 = this29;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data28,0,raw.data.length);
					raw.data = data28;
				}
			}
			value11 = raw.data[3] = value12;
			if(!raw.fixed) {
				if(2 >= raw.length) raw.length = 3;
				if(raw.data.length < raw.length) {
					var data29;
					var this30;
					this30 = new Array(raw.data.length + 10);
					data29 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data29,0,raw.data.length);
					raw.data = data29;
				}
			}
			value10 = raw.data[2] = value11;
			if(!raw.fixed) {
				if(1 >= raw.length) raw.length = 2;
				if(raw.data.length < raw.length) {
					var data30;
					var this31;
					this31 = new Array(raw.data.length + 10);
					data30 = this31;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data30,0,raw.data.length);
					raw.data = data30;
				}
			}
			raw.data[1] = value10;
			if(!raw.fixed) {
				if(14 >= raw.length) raw.length = 15;
				if(raw.data.length < raw.length) {
					var data31;
					var this32;
					this32 = new Array(raw.data.length + 10);
					data31 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data31,0,raw.data.length);
					raw.data = data31;
				}
			}
			raw.data[14] = -2 * this._far * this._near / (this._far - this._near);
		}
		this._matrix.copyRawDataFrom(raw);
		var yMaxFar = this._far * this._focalLengthInv;
		var xMaxFar = yMaxFar * this._aspectRatio;
		this._frustumCorners[0] = this._frustumCorners[9] = left;
		this._frustumCorners[3] = this._frustumCorners[6] = right;
		this._frustumCorners[1] = this._frustumCorners[4] = top;
		this._frustumCorners[7] = this._frustumCorners[10] = bottom;
		this._frustumCorners[12] = this._frustumCorners[21] = -xMaxFar;
		this._frustumCorners[15] = this._frustumCorners[18] = xMaxFar;
		this._frustumCorners[13] = this._frustumCorners[16] = -yMaxFar;
		this._frustumCorners[19] = this._frustumCorners[22] = yMaxFar;
		this._frustumCorners[2] = this._frustumCorners[5] = this._frustumCorners[8] = this._frustumCorners[11] = this._near;
		this._frustumCorners[14] = this._frustumCorners[17] = this._frustumCorners[20] = this._frustumCorners[23] = this._far;
		this._matrixInvalid = false;
	}
	,__class__: away3d.cameras.lenses.PerspectiveLens
	,__properties__: $extend(away3d.cameras.lenses.LensBase.prototype.__properties__,{set_focalLength:"set_focalLength",get_focalLength:"get_focalLength",set_fieldOfView:"set_fieldOfView",get_fieldOfView:"get_fieldOfView"})
});
away3d.containers.Scene3D = function() {
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._partitions = this1;
	this._sceneGraphRoot = new away3d.containers.ObjectContainer3D();
	this._sceneGraphRoot.set_scene(this);
	this._sceneGraphRoot._isRoot = true;
	this._sceneGraphRoot.set_partition(new away3d.core.partition.Partition3D(new away3d.core.partition.NodeBase()));
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.containers.Scene3D"] = away3d.containers.Scene3D;
away3d.containers.Scene3D.__name__ = ["away3d","containers","Scene3D"];
away3d.containers.Scene3D.__super__ = openfl.events.EventDispatcher;
away3d.containers.Scene3D.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	traversePartitions: function(traverser) {
		var i = 0;
		var len = this._partitions.length;
		traverser.scene = this;
		while(i < len) ((function($this) {
			var $r;
			var index = i++;
			$r = $this._partitions.data[index];
			return $r;
		}(this))).traverse(traverser);
	}
	,get_partition: function() {
		return this._sceneGraphRoot.get_partition();
	}
	,set_partition: function(value) {
		this._sceneGraphRoot.set_partition(value);
		this.dispatchEvent(new away3d.events.Scene3DEvent(away3d.events.Scene3DEvent.PARTITION_CHANGED,this._sceneGraphRoot));
		return value;
	}
	,contains: function(child) {
		return this._sceneGraphRoot.contains(child);
	}
	,addChild: function(child) {
		return this._sceneGraphRoot.addChild(child);
	}
	,removeChild: function(child) {
		this._sceneGraphRoot.removeChild(child);
	}
	,removeChildAt: function(index) {
		this._sceneGraphRoot.removeChildAt(index);
	}
	,getChildAt: function(index) {
		return this._sceneGraphRoot.getChildAt(index);
	}
	,get_numChildren: function() {
		return this._sceneGraphRoot.get_numChildren();
	}
	,registerEntity: function(entity) {
		var partition = entity.get_implicitPartition();
		this.addPartitionUnique(partition);
		partition.markForUpdate(entity);
	}
	,unregisterEntity: function(entity) {
		entity.get_implicitPartition().removeEntity(entity);
	}
	,invalidateEntityBounds: function(entity) {
		entity.get_implicitPartition().markForUpdate(entity);
	}
	,registerPartition: function(entity) {
		this.addPartitionUnique(entity.get_implicitPartition());
	}
	,unregisterPartition: function(entity) {
		entity.get_implicitPartition().removeEntity(entity);
	}
	,addPartitionUnique: function(partition) {
		if((function($this) {
			var $r;
			var this1 = $this._partitions;
			var value = -1;
			{
				var _g1 = 0;
				var _g = this1.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this1.data[i] == partition) {
						value = i;
						break;
					}
				}
			}
			$r = value;
			return $r;
		}(this)) == -1) {
			var this2 = this._partitions;
			if(!this2.fixed) {
				this2.length++;
				if(this2.data.length < this2.length) {
					var data;
					var this3;
					this3 = new Array(this2.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,this2.data.length);
					this2.data = data;
				}
				this2.data[this2.length - 1] = partition;
			}
			this2.length;
		}
	}
	,__class__: away3d.containers.Scene3D
	,__properties__: {get_numChildren:"get_numChildren",set_partition:"set_partition",get_partition:"get_partition"}
});
away3d.containers.View3D = function(scene,camera,renderer,forceSoftware,profile) {
	if(profile == null) profile = "baseline";
	if(forceSoftware == null) forceSoftware = false;
	this._layeredView = false;
	this._width = 0;
	this._height = 0;
	this._localPos = new openfl.geom.Point();
	this._globalPos = new openfl.geom.Point();
	openfl.display.Sprite.call(this);
	this._time = 0;
	this._backgroundColor = 0;
	this._backgroundAlpha = 1;
	this._depthTextureInvalid = true;
	this._backBufferInvalid = true;
	this._rightClickMenuEnabled = true;
	this._shareContext = false;
	this._scissorRectDirty = true;
	this._viewportDirty = true;
	this._layeredView = false;
	this._profile = profile;
	if(scene != null) this._scene = scene; else this._scene = new away3d.containers.Scene3D();
	this._scene.addEventListener(away3d.events.Scene3DEvent.PARTITION_CHANGED,$bind(this,this.onScenePartitionChanged));
	if(camera != null) this._camera = camera; else this._camera = new away3d.cameras.Camera3D();
	if(renderer != null) this._renderer = renderer; else this._renderer = new away3d.core.render.DefaultRenderer();
	this._depthRenderer = new away3d.core.render.DepthRenderer();
	this._forceSoftware = forceSoftware;
	this._entityCollector = this._renderer.createEntityCollector();
	this._entityCollector.set_camera(this._camera);
	this._scissorRect = new openfl.geom.Rectangle();
	this.initHitField();
	this._mouse3DManager = new away3d.core.managers.Mouse3DManager();
	this._mouse3DManager.enableMouseListeners(this);
	this._touch3DManager = new away3d.core.managers.Touch3DManager();
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.onAddedToStage),false,0,true);
	this.addEventListener(openfl.events.Event.ADDED,$bind(this,this.onAdded),false,0,true);
	this._camera.addEventListener(away3d.events.CameraEvent.LENS_CHANGED,$bind(this,this.onLensChanged));
	this._camera.set_partition(this._scene.get_partition());
};
$hxClasses["away3d.containers.View3D"] = away3d.containers.View3D;
away3d.containers.View3D.__name__ = ["away3d","containers","View3D"];
away3d.containers.View3D.__super__ = openfl.display.Sprite;
away3d.containers.View3D.prototype = $extend(openfl.display.Sprite.prototype,{
	get_depthPrepass: function() {
		return this._depthPrepass;
	}
	,set_depthPrepass: function(value) {
		this._depthPrepass = value;
		return value;
	}
	,onScenePartitionChanged: function(event) {
		if(this._camera != null) this._camera.set_partition(this.get_scene().get_partition());
	}
	,get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(stage3DProxy) {
		if(this._stage3DProxy != null) this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
		this._stage3DProxy = stage3DProxy;
		this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
		this._renderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(this._stage3DProxy));
		this._globalPosDirty = true;
		this._backBufferInvalid = true;
		return this._stage3DProxy;
	}
	,get_forceMouseMove: function() {
		return this._mouse3DManager.get_forceMouseMove();
	}
	,set_forceMouseMove: function(value) {
		this._mouse3DManager.set_forceMouseMove(value);
		return value;
	}
	,get_background: function() {
		return this._background;
	}
	,set_background: function(value) {
		this._background = value;
		this._renderer.set_background(this._background);
		return this._background;
	}
	,get_layeredView: function() {
		return this._layeredView;
	}
	,set_layeredView: function(value) {
		this._layeredView = value;
		return this._layeredView;
	}
	,initHitField: function() {
		this._hitField = new openfl.display.Sprite();
		this._hitField.set_alpha(0);
		this._hitField.doubleClickEnabled = true;
		this._hitField.get_graphics().beginFill(0);
		this._hitField.get_graphics().drawRect(0,0,100,100);
		this.addChild(this._hitField);
	}
	,get_filters3d: function() {
		if(this._filter3DRenderer != null) {
			var this1 = this._filter3DRenderer.get_filters();
			var value = new Array();
			var _g1 = 0;
			var _g = this1.data.length;
			while(_g1 < _g) {
				var i = _g1++;
				value.push(this1.data[i]);
			}
			return value;
		} else return null;
	}
	,set_filters3d: function(value) {
		if(value != null && value.length == 0) value = null;
		if(this._filter3DRenderer != null && value == null) {
			this._filter3DRenderer.dispose();
			this._filter3DRenderer = null;
		} else if(this._filter3DRenderer == null && value != null) {
			this._filter3DRenderer = new away3d.core.render.Filter3DRenderer(this.get_stage3DProxy());
			this._filter3DRenderer.set_filters((function($this) {
				var $r;
				var vectorData = new openfl.VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		if(this._filter3DRenderer != null) {
			this._filter3DRenderer.set_filters((function($this) {
				var $r;
				var vectorData1 = new openfl.VectorData();
				vectorData1.length = value.length;
				vectorData1.fixed = true;
				{
					var vec1;
					var this2;
					this2 = new Array(value.length);
					vec1 = this2;
					var _g11 = 0;
					var _g2 = value.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						vec1[i1] = value[i1];
					}
					vectorData1.data = vec1;
				}
				$r = vectorData1;
				return $r;
			}(this)));
			this._requireDepthRender = this._filter3DRenderer.get_requireDepthRender();
		} else {
			this._requireDepthRender = false;
			if(this._depthRender != null) {
				this._depthRender.dispose();
				this._depthRender = null;
			}
		}
		return value;
	}
	,get_renderer: function() {
		return this._renderer;
	}
	,set_renderer: function(value) {
		this._renderer.dispose();
		this._renderer = value;
		this._entityCollector = this._renderer.createEntityCollector();
		this._entityCollector.set_camera(this._camera);
		this._renderer.set_stage3DProxy(this._stage3DProxy);
		this._renderer.set_antiAlias(this._antiAlias);
		this._renderer.set_backgroundR((function($this) {
			var $r;
			var $int = $this._backgroundColor >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int1 = 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundG((function($this) {
			var $r;
			var int2 = $this._backgroundColor >> 8 & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int3 = 255;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundB((function($this) {
			var $r;
			var int4 = $this._backgroundColor & 255;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int5 = 255;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundAlpha(this._backgroundAlpha);
		this._renderer.set_viewWidth(this._width);
		this._renderer.set_viewHeight(this._height);
		this._backBufferInvalid = true;
		return this._renderer;
	}
	,get_backgroundColor: function() {
		return this._backgroundColor;
	}
	,set_backgroundColor: function(value) {
		this._backgroundColor = value;
		this._renderer.set_backgroundR((function($this) {
			var $r;
			var $int = value >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int1 = 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundG((function($this) {
			var $r;
			var int2 = value >> 8 & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int3 = 255;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)));
		this._renderer.set_backgroundB((function($this) {
			var $r;
			var int4 = value & 255;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int5 = 255;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)));
		return value;
	}
	,get_backgroundAlpha: function() {
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		if(value > 1) value = 1; else if(value < 0) value = 0;
		this._renderer.set_backgroundAlpha(value);
		this._backgroundAlpha = value;
		return value;
	}
	,get_camera: function() {
		return this._camera;
	}
	,set_camera: function(camera) {
		this._camera.removeEventListener(away3d.events.CameraEvent.LENS_CHANGED,$bind(this,this.onLensChanged));
		this._camera = camera;
		this._entityCollector.set_camera(this._camera);
		if(this._scene != null) this._camera.set_partition(this._scene.get_partition());
		this._camera.addEventListener(away3d.events.CameraEvent.LENS_CHANGED,$bind(this,this.onLensChanged));
		this._scissorRectDirty = true;
		this._viewportDirty = true;
		return camera;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(scene) {
		this._scene.removeEventListener(away3d.events.Scene3DEvent.PARTITION_CHANGED,$bind(this,this.onScenePartitionChanged));
		this._scene = scene;
		this._scene.addEventListener(away3d.events.Scene3DEvent.PARTITION_CHANGED,$bind(this,this.onScenePartitionChanged));
		if(this._camera != null) this._camera.set_partition(this._scene.get_partition());
		return this._scene;
	}
	,get_deltaTime: function() {
		return this._deltaTime;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		if(this._stage3DProxy != null && this._stage3DProxy.get_usesSoftwareRendering() && value > 2048) value = 2048;
		if(this._width == value) return value;
		if(this._rttBufferManager != null) this._rttBufferManager.set_viewWidth(value | 0);
		this._hitField.set_width(value);
		this._width = value;
		this._aspectRatio = this._width / this._height;
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		this._depthTextureInvalid = true;
		this._renderer.set_viewWidth(value);
		this._scissorRect.width = value;
		this._backBufferInvalid = true;
		this._scissorRectDirty = true;
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(this._stage3DProxy != null && this._stage3DProxy.get_usesSoftwareRendering() && value > 2048) value = 2048;
		if(this._height == value) return value;
		if(this._rttBufferManager != null) this._rttBufferManager.set_viewHeight(value | 0);
		this._hitField.set_height(value);
		this._height = value;
		this._aspectRatio = this._width / this._height;
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		this._depthTextureInvalid = true;
		this._renderer.set_viewHeight(value);
		this._scissorRect.height = value;
		this._backBufferInvalid = true;
		this._scissorRectDirty = true;
		return value;
	}
	,set_x: function(value) {
		if(this.get_x() == value) return this.get_x();
		this._localPos.x = openfl.display.Sprite.prototype.set_x.call(this,value);
		if(this.parent != null) this._globalPos.x = this.parent.localToGlobal(this._localPos).x; else this._globalPos.x = value;
		this._globalPosDirty = true;
		return this.get_x();
	}
	,set_y: function(value) {
		if(this.get_y() == value) return this.get_y();
		this._localPos.y = openfl.display.Sprite.prototype.set_y.call(this,value);
		if(this.parent != null) this._globalPos.y = this.parent.localToGlobal(this._localPos).y; else this._globalPos.y = value;
		this._globalPosDirty = true;
		return this.get_y();
	}
	,set_visible: function(value) {
		openfl.display.Sprite.prototype.set_visible.call(this,value);
		if(this._stage3DProxy != null && !this._shareContext) this._stage3DProxy.set_visible(value);
		return value;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(value) {
		this._antiAlias = value;
		this._renderer.set_antiAlias(value);
		this._backBufferInvalid = true;
		return this._antiAlias;
	}
	,get_renderedFacesCount: function() {
		return this._entityCollector.get_numTriangles();
	}
	,get_shareContext: function() {
		return this._shareContext;
	}
	,set_shareContext: function(value) {
		if(this._shareContext == value) return value;
		this._shareContext = value;
		this._globalPosDirty = true;
		return value;
	}
	,updateBackBuffer: function() {
		if(this._stage3DProxy.get_context3D() != null && !this._shareContext) {
			if(this._width > 0 && this._height > 0) {
				if(this._stage3DProxy.get_usesSoftwareRendering()) {
					if(this._width > 2048) this._width = 2048;
					if(this._height > 2048) this._height = 2048;
				}
				this._stage3DProxy.configureBackBuffer(this._width | 0,this._height | 0,this._antiAlias,true);
				this._backBufferInvalid = false;
			} else {
				this.set_width(this.stage.stageWidth);
				this.set_height(this.stage.stageHeight);
			}
		}
	}
	,setRenderCallback: function(func) {
		if(this._stage3DProxy != null) this._stage3DProxy.setRenderCallback(func);
		this._callbackMethod = func;
	}
	,render: function() {
		if(!this.get_stage3DProxy().recoverFromDisposal()) {
			this._backBufferInvalid = true;
			return;
		}
		if(this._backBufferInvalid) this.updateBackBuffer();
		if(this._shareContext && this._layeredView) this.get_stage3DProxy().clearDepthBuffer();
		if(!this._parentIsStage) {
			var globalPos = this.parent.localToGlobal(this._localPos);
			if(this._globalPos.x != globalPos.x || this._globalPos.y != globalPos.y) {
				this._globalPos = globalPos;
				this._globalPosDirty = true;
			}
		}
		if(this._globalPosDirty) this.updateGlobalPos();
		this.updateTime();
		this.updateViewSizeData();
		this._entityCollector.clear();
		this._scene.traversePartitions(this._entityCollector);
		this._mouse3DManager.updateCollider(this);
		if(this._requireDepthRender) this.renderSceneDepthToTexture(this._entityCollector);
		if(this._depthPrepass) this.renderDepthPrepass(this._entityCollector);
		this._renderer.set_clearOnRender(!this._depthPrepass);
		if(this._filter3DRenderer != null && this._stage3DProxy._context3D != null) {
			this._renderer.render(this._entityCollector,this._filter3DRenderer.getMainInputTexture(this._stage3DProxy),this._rttBufferManager.get_renderToTextureRect());
			this._filter3DRenderer.render(this._stage3DProxy,this.get_camera(),this._depthRender);
		} else {
			this._renderer.set_shareContext(this._shareContext);
			if(this._shareContext) this._renderer.render(this._entityCollector,null,this._scissorRect); else this._renderer.render(this._entityCollector);
		}
		if(!this._shareContext) {
			this.get_stage3DProxy().present();
			this._mouse3DManager.fireMouseEvents();
		}
		this._entityCollector.cleanUp();
		this.get_stage3DProxy().set_bufferClear(false);
	}
	,updateGlobalPos: function() {
		this._globalPosDirty = false;
		if(this._stage3DProxy == null) return;
		if(this._shareContext) {
			this._scissorRect.x = this._globalPos.x - this._stage3DProxy.get_x();
			this._scissorRect.y = this._globalPos.y - this._stage3DProxy.get_y();
		} else {
			this._scissorRect.x = 0;
			this._scissorRect.y = 0;
			this._stage3DProxy.set_x(this._globalPos.x);
			this._stage3DProxy.set_y(this._globalPos.y);
		}
		this._scissorRectDirty = true;
	}
	,updateTime: function() {
		var time = openfl.Lib.getTimer();
		if((function($this) {
			var $r;
			var $int = $this._time;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 0) this._time = time;
		this._deltaTime = time - this._time;
		this._time = time;
	}
	,updateViewSizeData: function() {
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		if(this._scissorRectDirty) {
			this._scissorRectDirty = false;
			this._camera.get_lens().updateScissorRect(this._scissorRect.x,this._scissorRect.y,this._scissorRect.width,this._scissorRect.height);
		}
		if(this._viewportDirty) {
			this._viewportDirty = false;
			this._camera.get_lens().updateViewport(this._stage3DProxy.get_viewPort().x,this._stage3DProxy.get_viewPort().y,this._stage3DProxy.get_viewPort().width,this._stage3DProxy.get_viewPort().height);
		}
		if(this._filter3DRenderer != null || this._renderer.get_renderToTexture()) {
			this._renderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
			this._renderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
		} else {
			this._renderer.set_textureRatioX(1);
			this._renderer.set_textureRatioY(1);
		}
	}
	,renderDepthPrepass: function(entityCollector) {
		this._depthRenderer.set_disableColor(true);
		if(this._filter3DRenderer != null || this._renderer.get_renderToTexture()) {
			this._depthRenderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
			this._depthRenderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
			this._depthRenderer.render(entityCollector,this._filter3DRenderer.getMainInputTexture(this._stage3DProxy),this._rttBufferManager.get_renderToTextureRect());
		} else {
			this._depthRenderer.set_textureRatioX(1);
			this._depthRenderer.set_textureRatioY(1);
			this._depthRenderer.render(entityCollector);
		}
		this._depthRenderer.set_disableColor(false);
	}
	,renderSceneDepthToTexture: function(entityCollector) {
		if(this._depthTextureInvalid || this._depthRender == null) this.initDepthTexture(this._stage3DProxy._context3D);
		this._depthRenderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
		this._depthRenderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
		this._depthRenderer.render(entityCollector,this._depthRender);
	}
	,initDepthTexture: function(context) {
		this._depthTextureInvalid = false;
		if(this._depthRender != null) this._depthRender.dispose();
		this._depthRender = context.createTexture(this._rttBufferManager.get_textureWidth(),this._rttBufferManager.get_textureHeight(),openfl.display3D.Context3DTextureFormat.BGRA,true);
	}
	,dispose: function() {
		this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
		if(!this.get_shareContext()) this._stage3DProxy.dispose();
		this._renderer.dispose();
		if(this._depthRender != null) this._depthRender.dispose();
		if(this._rttBufferManager != null) this._rttBufferManager.dispose();
		this._mouse3DManager.disableMouseListeners(this);
		this._mouse3DManager.dispose();
		this._rttBufferManager = null;
		this._depthRender = null;
		this._mouse3DManager = null;
		this._depthRenderer = null;
		this._stage3DProxy = null;
		this._renderer = null;
		this._entityCollector = null;
	}
	,project: function(point3d) {
		var v = this._camera.project(point3d);
		v.x = (v.x + 1.0) * this._width / 2.0;
		v.y = (v.y + 1.0) * this._height / 2.0;
		return v;
	}
	,unproject: function(sX,sY,sZ) {
		return this._camera.unproject((sX * 2 - this._width) / this._stage3DProxy.get_width(),(sY * 2 - this._height) / this._stage3DProxy.get_height(),sZ);
	}
	,getRay: function(sX,sY,sZ) {
		return this._camera.getRay((sX * 2 - this._width) / this._width,(sY * 2 - this._height) / this._height,sZ);
	}
	,get_mousePicker: function() {
		return this._mouse3DManager.get_mousePicker();
	}
	,set_mousePicker: function(value) {
		this._mouse3DManager.set_mousePicker(value);
		return value;
	}
	,get_touchPicker: function() {
		return this._touch3DManager.get_touchPicker();
	}
	,set_touchPicker: function(value) {
		this._touch3DManager.set_touchPicker(value);
		return value;
	}
	,get_entityCollector: function() {
		return this._entityCollector;
	}
	,onLensChanged: function(event) {
		this._scissorRectDirty = true;
		this._viewportDirty = true;
	}
	,onAddedToStage: function(event) {
		if(this._addedToStage) return;
		this._addedToStage = true;
		if(this._stage3DProxy == null) {
			this._stage3DProxy = away3d.core.managers.Stage3DManager.getInstance(this.stage).getFreeStage3DProxy(this._forceSoftware,this._profile);
			this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED,$bind(this,this.onViewportUpdated));
			if(this._callbackMethod != null) this._stage3DProxy.setRenderCallback(this._callbackMethod);
		}
		this._globalPosDirty = true;
		this._rttBufferManager = away3d.core.managers.RTTBufferManager.getInstance(this._stage3DProxy);
		this._renderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(this._stage3DProxy));
		if(this._width == 0) this.set_width(this.stage.stageWidth); else this._rttBufferManager.set_viewWidth(this._width | 0);
		if(this._height == 0) this.set_height(this.stage.stageHeight); else this._rttBufferManager.set_viewHeight(this._height | 0);
		if(this._shareContext) this._mouse3DManager.addViewLayer(this);
	}
	,onAdded: function(event) {
		this._parentIsStage = this.parent == this.stage;
		this._globalPos = this.parent.localToGlobal(this._localPos);
		this._globalPosDirty = true;
	}
	,onViewportUpdated: function(event) {
		if(this._shareContext) {
			this._scissorRect.x = this._globalPos.x - this._stage3DProxy.get_x();
			this._scissorRect.y = this._globalPos.y - this._stage3DProxy.get_y();
			this._scissorRectDirty = true;
		}
		this._viewportDirty = true;
	}
	,__class__: away3d.containers.View3D
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_entityCollector:"get_entityCollector",set_touchPicker:"set_touchPicker",get_touchPicker:"get_touchPicker",set_mousePicker:"set_mousePicker",get_mousePicker:"get_mousePicker",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",get_renderedFacesCount:"get_renderedFacesCount",set_antiAlias:"set_antiAlias",get_antiAlias:"get_antiAlias",get_deltaTime:"get_deltaTime",set_scene:"set_scene",get_scene:"get_scene",set_camera:"set_camera",get_camera:"get_camera",set_backgroundAlpha:"set_backgroundAlpha",get_backgroundAlpha:"get_backgroundAlpha",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_renderer:"set_renderer",get_renderer:"get_renderer",set_filters3d:"set_filters3d",get_filters3d:"get_filters3d",set_layeredView:"set_layeredView",get_layeredView:"get_layeredView",set_background:"set_background",get_background:"get_background",set_forceMouseMove:"set_forceMouseMove",get_forceMouseMove:"get_forceMouseMove",set_stage3DProxy:"set_stage3DProxy",get_stage3DProxy:"get_stage3DProxy",set_depthPrepass:"set_depthPrepass",get_depthPrepass:"get_depthPrepass"})
});
away3d.controllers = {};
away3d.controllers.ControllerBase = function(targetObject) {
	this._autoUpdate = true;
	this.set_targetObject(targetObject);
};
$hxClasses["away3d.controllers.ControllerBase"] = away3d.controllers.ControllerBase;
away3d.controllers.ControllerBase.__name__ = ["away3d","controllers","ControllerBase"];
away3d.controllers.ControllerBase.prototype = {
	notifyUpdate: function() {
		if(this._targetObject != null && this._targetObject.get_implicitPartition() != null && this._autoUpdate) this._targetObject.get_implicitPartition().markForUpdate(this._targetObject);
	}
	,get_targetObject: function() {
		return this._targetObject;
	}
	,set_targetObject: function(val) {
		if(this._targetObject == val) return val;
		if(this._targetObject != null && this._autoUpdate) this._targetObject._controller = null;
		this._targetObject = val;
		if(this._targetObject != null && this._autoUpdate) this._targetObject._controller = this;
		this.notifyUpdate();
		return val;
	}
	,get_autoUpdate: function() {
		return this._autoUpdate;
	}
	,set_autoUpdate: function(val) {
		if(this._autoUpdate == val) return val;
		this._autoUpdate = val;
		if(this._targetObject != null) {
			if(this._autoUpdate) this._targetObject._controller = this; else this._targetObject._controller = null;
		}
		return val;
	}
	,update: function(interpolate) {
		if(interpolate == null) interpolate = true;
		throw new away3d.errors.AbstractMethodError();
	}
	,__class__: away3d.controllers.ControllerBase
	,__properties__: {set_autoUpdate:"set_autoUpdate",get_autoUpdate:"get_autoUpdate",set_targetObject:"set_targetObject",get_targetObject:"get_targetObject"}
};
away3d.core.base.SubGeometryBase = function() {
	this._faceNormalsDirty = true;
	this._faceTangentsDirty = true;
	this._indexBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8);
	this._indexBufferContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),8);
	this._indicesInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this5;
		this5 = new openfl.VectorData();
		{
			var this6;
			this6 = new Array(0);
			this5.data = this6;
		}
		this5.length = 0;
		this5.fixed = false;
		$r = this5;
		return $r;
	}(this))),8);
	this._autoDeriveVertexNormals = true;
	this._autoDeriveVertexTangents = true;
	this._autoGenerateUVs = false;
	this._useFaceWeights = false;
	this._vertexNormalsDirty = true;
	this._vertexTangentsDirty = true;
	this._scaleU = 1;
	this._scaleV = 1;
	this._uvsDirty = true;
};
$hxClasses["away3d.core.base.SubGeometryBase"] = away3d.core.base.SubGeometryBase;
away3d.core.base.SubGeometryBase.__name__ = ["away3d","core","base","SubGeometryBase"];
away3d.core.base.SubGeometryBase.prototype = {
	get_autoGenerateDummyUVs: function() {
		return this._autoGenerateUVs;
	}
	,set_autoGenerateDummyUVs: function(value) {
		this._autoGenerateUVs = value;
		this._uvsDirty = value;
		return value;
	}
	,get_autoDeriveVertexNormals: function() {
		return this._autoDeriveVertexNormals;
	}
	,set_autoDeriveVertexNormals: function(value) {
		this._autoDeriveVertexNormals = value;
		this._vertexNormalsDirty = value;
		return value;
	}
	,get_useFaceWeights: function() {
		return this._useFaceWeights;
	}
	,set_useFaceWeights: function(value) {
		this._useFaceWeights = value;
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceNormalsDirty = true;
		return value;
	}
	,get_numTriangles: function() {
		return this._numTriangles;
	}
	,getIndexBuffer: function(stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._indexBuffer.data[contextIndex] == null || this._indexBufferContext.data[contextIndex] != context) {
			var this1 = this._indexBuffer;
			var value = context.createIndexBuffer(this._numIndices);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._indexBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._indicesInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._indicesInvalid.data[contextIndex]) {
			this._indexBuffer.data[contextIndex].uploadFromVector(this._indices,0,this._numIndices);
			var this7 = this._indicesInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		return this._indexBuffer.data[contextIndex];
	}
	,updateFaceTangents: function() {
		var i = 0;
		var index1;
		var index2;
		var index3;
		var len = this._indices.length;
		var ui;
		var vi;
		var v0;
		var dv1;
		var dv2;
		var denom;
		var x0;
		var y0;
		var z0;
		var dx1;
		var dy1;
		var dz1;
		var dx2;
		var dy2;
		var dz2;
		var cx;
		var cy;
		var cz;
		var vertices = this._vertexData;
		var uvs = this.get_UVData();
		var posStride = this.get_vertexStride();
		var posOffset = this.get_vertexOffset();
		var texStride = this.get_UVStride();
		var texOffset = this.get_UVOffset();
		if(this._faceTangents == null) this._faceTangents = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),this._indices.length);
		while(i < len) {
			index1 = this._indices.data[i];
			index2 = this._indices.data[i + 1];
			index3 = this._indices.data[i + 2];
			ui = texOffset + index1 * texStride + 1;
			v0 = uvs.data[ui];
			ui = texOffset + index2 * texStride + 1;
			dv1 = uvs.data[ui] - v0;
			ui = texOffset + index3 * texStride + 1;
			dv2 = uvs.data[ui] - v0;
			vi = posOffset + index1 * posStride;
			x0 = vertices.data[vi];
			y0 = vertices.data[vi + 1];
			z0 = vertices.data[vi + 2];
			vi = posOffset + index2 * posStride;
			dx1 = vertices.data[vi] - x0;
			dy1 = vertices.data[vi + 1] - y0;
			dz1 = vertices.data[vi + 2] - z0;
			vi = posOffset + index3 * posStride;
			dx2 = vertices.data[vi] - x0;
			dy2 = vertices.data[vi + 1] - y0;
			dz2 = vertices.data[vi + 2] - z0;
			cx = dv2 * dx1 - dv1 * dx2;
			cy = dv2 * dy1 - dv1 * dy2;
			cz = dv2 * dz1 - dv1 * dz2;
			denom = 1 / Math.sqrt(cx * cx + cy * cy + cz * cz);
			var this3 = this._faceTangents;
			var key = i++;
			if(!this3.fixed) {
				if(key >= this3.length) this3.length = key + 1;
				if(this3.data.length < this3.length) {
					var data;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
					this3.data = data;
				}
			}
			this3.data[key] = denom * cx;
			var this5 = this._faceTangents;
			var key1 = i++;
			if(!this5.fixed) {
				if(key1 >= this5.length) this5.length = key1 + 1;
				if(this5.data.length < this5.length) {
					var data1;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data1 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
					this5.data = data1;
				}
			}
			this5.data[key1] = denom * cy;
			var this7 = this._faceTangents;
			var key2 = i++;
			if(!this7.fixed) {
				if(key2 >= this7.length) this7.length = key2 + 1;
				if(this7.data.length < this7.length) {
					var data2;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data2 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
					this7.data = data2;
				}
			}
			this7.data[key2] = denom * cz;
		}
		this._faceTangentsDirty = false;
	}
	,updateFaceNormals: function() {
		var i = 0;
		var j = 0;
		var k = 0;
		var index;
		var len = this._indices.length;
		var x1;
		var x2;
		var x3;
		var y1;
		var y2;
		var y3;
		var z1;
		var z2;
		var z3;
		var dx1;
		var dy1;
		var dz1;
		var dx2;
		var dy2;
		var dz2;
		var cx;
		var cy;
		var cz;
		var d;
		var vertices = this._vertexData;
		var posStride = this.get_vertexStride();
		var posOffset = this.get_vertexOffset();
		if(this._faceNormals == null) this._faceNormals = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),len,0);
		if(this._faceWeights == null) this._faceWeights = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this3;
			this3 = new openfl.VectorData();
			{
				var this4;
				this4 = new Array(0);
				this3.data = this4;
			}
			this3.length = 0;
			this3.fixed = false;
			$r = this3;
			return $r;
		}(this))),len / 3 | 0,0);
		while(i < len) {
			var b;
			var a;
			var index1 = i++;
			a = this._indices.data[index1];
			b = a * posStride;
			index = posOffset + b;
			x1 = vertices.data[index];
			y1 = vertices.data[index + 1];
			z1 = vertices.data[index + 2];
			var b1;
			var a1;
			var index2 = i++;
			a1 = this._indices.data[index2];
			b1 = a1 * posStride;
			index = posOffset + b1;
			x2 = vertices.data[index];
			y2 = vertices.data[index + 1];
			z2 = vertices.data[index + 2];
			var b2;
			var a2;
			var index3 = i++;
			a2 = this._indices.data[index3];
			b2 = a2 * posStride;
			index = posOffset + b2;
			x3 = vertices.data[index];
			y3 = vertices.data[index + 1];
			z3 = vertices.data[index + 2];
			dx1 = x3 - x1;
			dy1 = y3 - y1;
			dz1 = z3 - z1;
			dx2 = x2 - x1;
			dy2 = y2 - y1;
			dz2 = z2 - z1;
			cx = dz1 * dy2 - dy1 * dz2;
			cy = dx1 * dz2 - dz1 * dx2;
			cz = dy1 * dx2 - dx1 * dy2;
			d = Math.sqrt(cx * cx + cy * cy + cz * cz);
			if(this._useFaceWeights) {
				var w = d * 10000;
				if(w < 1) w = 1;
				var this5 = this._faceWeights;
				var key = k++;
				if(!this5.fixed) {
					if(key >= this5.length) this5.length = key + 1;
					if(this5.data.length < this5.length) {
						var data;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data,0,this5.data.length);
						this5.data = data;
					}
				}
				this5.data[key] = w;
			}
			d = 1 / d;
			var this7 = this._faceNormals;
			var key1 = j++;
			if(!this7.fixed) {
				if(key1 >= this7.length) this7.length = key1 + 1;
				if(this7.data.length < this7.length) {
					var data1;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data1 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data1,0,this7.data.length);
					this7.data = data1;
				}
			}
			this7.data[key1] = cx * d;
			var this9 = this._faceNormals;
			var key2 = j++;
			if(!this9.fixed) {
				if(key2 >= this9.length) this9.length = key2 + 1;
				if(this9.data.length < this9.length) {
					var data2;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data2 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data2,0,this9.data.length);
					this9.data = data2;
				}
			}
			this9.data[key2] = cy * d;
			var this11 = this._faceNormals;
			var key3 = j++;
			if(!this11.fixed) {
				if(key3 >= this11.length) this11.length = key3 + 1;
				if(this11.data.length < this11.length) {
					var data3;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data3 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data3,0,this11.data.length);
					this11.data = data3;
				}
			}
			this11.data[key3] = cz * d;
		}
		this._faceNormalsDirty = false;
	}
	,updateVertexNormals: function(target) {
		if(this._faceNormalsDirty) this.updateFaceNormals();
		var v1;
		var f1 = 0;
		var f2 = 1;
		var f3 = 2;
		var lenV = this._vertexData.length;
		var normalStride = this.get_vertexNormalStride();
		var normalOffset = this.get_vertexNormalOffset();
		if(target == null) target = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),lenV,0);
		v1 = normalOffset;
		while(v1 < lenV) {
			if(!target.fixed) {
				if(v1 >= target.length) target.length = v1 + 1;
				if(target.data.length < target.length) {
					var data;
					var this3;
					this3 = new Array(target.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data,0,target.data.length);
					target.data = data;
				}
			}
			target.data[v1] = 0.0;
			var key = v1 + 1;
			if(!target.fixed) {
				if(key >= target.length) target.length = key + 1;
				if(target.data.length < target.length) {
					var data1;
					var this4;
					this4 = new Array(target.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data1,0,target.data.length);
					target.data = data1;
				}
			}
			target.data[key] = 0.0;
			var key1 = v1 + 2;
			if(!target.fixed) {
				if(key1 >= target.length) target.length = key1 + 1;
				if(target.data.length < target.length) {
					var data2;
					var this5;
					this5 = new Array(target.data.length + 10);
					data2 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data2,0,target.data.length);
					target.data = data2;
				}
			}
			target.data[key1] = 0.0;
			v1 += normalStride;
		}
		var i = 0;
		var k = 0;
		var lenI = this._indices.length;
		var index;
		var weight;
		while(i < lenI) {
			if(this._useFaceWeights) {
				var index1 = k++;
				weight = this._faceWeights.data[index1];
			} else weight = 1;
			var b;
			var a;
			var index2 = i++;
			a = this._indices.data[index2];
			b = a * normalStride;
			index = normalOffset + b;
			var _g = index++;
			if(!target.fixed) {
				if(_g >= target.length) target.length = _g + 1;
				if(target.data.length < target.length) {
					var data3;
					var this6;
					this6 = new Array(target.data.length + 10);
					data3 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data3,0,target.data.length);
					target.data = data3;
				}
			}
			target.data[_g] = target.data[_g] + this._faceNormals.data[f1] * weight;
			var _g1 = index++;
			if(!target.fixed) {
				if(_g1 >= target.length) target.length = _g1 + 1;
				if(target.data.length < target.length) {
					var data4;
					var this7;
					this7 = new Array(target.data.length + 10);
					data4 = this7;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data4,0,target.data.length);
					target.data = data4;
				}
			}
			target.data[_g1] = target.data[_g1] + this._faceNormals.data[f2] * weight;
			var _g2 = index;
			if(!target.fixed) {
				if(_g2 >= target.length) target.length = _g2 + 1;
				if(target.data.length < target.length) {
					var data5;
					var this8;
					this8 = new Array(target.data.length + 10);
					data5 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data5,0,target.data.length);
					target.data = data5;
				}
			}
			target.data[_g2] = target.data[_g2] + this._faceNormals.data[f3] * weight;
			var b1;
			var a1;
			var index3 = i++;
			a1 = this._indices.data[index3];
			b1 = a1 * normalStride;
			index = normalOffset + b1;
			var _g3 = index++;
			if(!target.fixed) {
				if(_g3 >= target.length) target.length = _g3 + 1;
				if(target.data.length < target.length) {
					var data6;
					var this9;
					this9 = new Array(target.data.length + 10);
					data6 = this9;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data6,0,target.data.length);
					target.data = data6;
				}
			}
			target.data[_g3] = target.data[_g3] + this._faceNormals.data[f1] * weight;
			var _g4 = index++;
			if(!target.fixed) {
				if(_g4 >= target.length) target.length = _g4 + 1;
				if(target.data.length < target.length) {
					var data7;
					var this10;
					this10 = new Array(target.data.length + 10);
					data7 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data7,0,target.data.length);
					target.data = data7;
				}
			}
			target.data[_g4] = target.data[_g4] + this._faceNormals.data[f2] * weight;
			var _g5 = index;
			if(!target.fixed) {
				if(_g5 >= target.length) target.length = _g5 + 1;
				if(target.data.length < target.length) {
					var data8;
					var this11;
					this11 = new Array(target.data.length + 10);
					data8 = this11;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data8,0,target.data.length);
					target.data = data8;
				}
			}
			target.data[_g5] = target.data[_g5] + this._faceNormals.data[f3] * weight;
			var b2;
			var a2;
			var index4 = i++;
			a2 = this._indices.data[index4];
			b2 = a2 * normalStride;
			index = normalOffset + b2;
			var _g6 = index++;
			if(!target.fixed) {
				if(_g6 >= target.length) target.length = _g6 + 1;
				if(target.data.length < target.length) {
					var data9;
					var this12;
					this12 = new Array(target.data.length + 10);
					data9 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data9,0,target.data.length);
					target.data = data9;
				}
			}
			target.data[_g6] = target.data[_g6] + this._faceNormals.data[f1] * weight;
			var _g7 = index++;
			if(!target.fixed) {
				if(_g7 >= target.length) target.length = _g7 + 1;
				if(target.data.length < target.length) {
					var data10;
					var this13;
					this13 = new Array(target.data.length + 10);
					data10 = this13;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data10,0,target.data.length);
					target.data = data10;
				}
			}
			target.data[_g7] = target.data[_g7] + this._faceNormals.data[f2] * weight;
			var _g8 = index;
			if(!target.fixed) {
				if(_g8 >= target.length) target.length = _g8 + 1;
				if(target.data.length < target.length) {
					var data11;
					var this14;
					this14 = new Array(target.data.length + 10);
					data11 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data11,0,target.data.length);
					target.data = data11;
				}
			}
			target.data[_g8] = target.data[_g8] + this._faceNormals.data[f3] * weight;
			f1 += 3;
			f2 += 3;
			f3 += 3;
		}
		v1 = normalOffset;
		while(v1 < lenV) {
			var vx = target.data[v1];
			var vy = target.data[v1 + 1];
			var vz = target.data[v1 + 2];
			var d = 1.0 / Math.sqrt(vx * vx + vy * vy + vz * vz);
			if(!target.fixed) {
				if(v1 >= target.length) target.length = v1 + 1;
				if(target.data.length < target.length) {
					var data12;
					var this15;
					this15 = new Array(target.data.length + 10);
					data12 = this15;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data12,0,target.data.length);
					target.data = data12;
				}
			}
			target.data[v1] = vx * d;
			var key2 = v1 + 1;
			if(!target.fixed) {
				if(key2 >= target.length) target.length = key2 + 1;
				if(target.data.length < target.length) {
					var data13;
					var this16;
					this16 = new Array(target.data.length + 10);
					data13 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data13,0,target.data.length);
					target.data = data13;
				}
			}
			target.data[key2] = vy * d;
			var key3 = v1 + 2;
			if(!target.fixed) {
				if(key3 >= target.length) target.length = key3 + 1;
				if(target.data.length < target.length) {
					var data14;
					var this17;
					this17 = new Array(target.data.length + 10);
					data14 = this17;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data14,0,target.data.length);
					target.data = data14;
				}
			}
			target.data[key3] = vz * d;
			v1 += normalStride;
		}
		this._vertexNormalsDirty = false;
		return target;
	}
	,updateVertexTangents: function(target) {
		if(this._faceTangentsDirty) this.updateFaceTangents();
		var i = 0;
		var lenV = this._vertexData.length;
		var tangentStride = this.get_vertexTangentStride();
		var tangentOffset = this.get_vertexTangentOffset();
		if(target == null) target = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),lenV,0);
		i = tangentOffset;
		while(i < lenV) {
			if(!target.fixed) {
				if(i >= target.length) target.length = i + 1;
				if(target.data.length < target.length) {
					var data;
					var this3;
					this3 = new Array(target.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data,0,target.data.length);
					target.data = data;
				}
			}
			target.data[i] = 0.0;
			var key = i + 1;
			if(!target.fixed) {
				if(key >= target.length) target.length = key + 1;
				if(target.data.length < target.length) {
					var data1;
					var this4;
					this4 = new Array(target.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data1,0,target.data.length);
					target.data = data1;
				}
			}
			target.data[key] = 0.0;
			var key1 = i + 2;
			if(!target.fixed) {
				if(key1 >= target.length) target.length = key1 + 1;
				if(target.data.length < target.length) {
					var data2;
					var this5;
					this5 = new Array(target.data.length + 10);
					data2 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data2,0,target.data.length);
					target.data = data2;
				}
			}
			target.data[key1] = 0.0;
			i += tangentStride;
		}
		var k = 0;
		var lenI = this._indices.length;
		var index;
		var weight;
		var f1 = 0;
		var f2 = 1;
		var f3 = 2;
		i = 0;
		while(i < lenI) {
			if(this._useFaceWeights) {
				var index1 = k++;
				weight = this._faceWeights.data[index1];
			} else weight = 1;
			var b;
			var a;
			var index2 = i++;
			a = this._indices.data[index2];
			b = a * tangentStride;
			index = tangentOffset + b;
			var _g = index++;
			if(!target.fixed) {
				if(_g >= target.length) target.length = _g + 1;
				if(target.data.length < target.length) {
					var data3;
					var this6;
					this6 = new Array(target.data.length + 10);
					data3 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data3,0,target.data.length);
					target.data = data3;
				}
			}
			target.data[_g] = target.data[_g] + this._faceTangents.data[f1] * weight;
			var _g1 = index++;
			if(!target.fixed) {
				if(_g1 >= target.length) target.length = _g1 + 1;
				if(target.data.length < target.length) {
					var data4;
					var this7;
					this7 = new Array(target.data.length + 10);
					data4 = this7;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data4,0,target.data.length);
					target.data = data4;
				}
			}
			target.data[_g1] = target.data[_g1] + this._faceTangents.data[f2] * weight;
			var _g2 = index;
			if(!target.fixed) {
				if(_g2 >= target.length) target.length = _g2 + 1;
				if(target.data.length < target.length) {
					var data5;
					var this8;
					this8 = new Array(target.data.length + 10);
					data5 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data5,0,target.data.length);
					target.data = data5;
				}
			}
			target.data[_g2] = target.data[_g2] + this._faceTangents.data[f3] * weight;
			var b1;
			var a1;
			var index3 = i++;
			a1 = this._indices.data[index3];
			b1 = a1 * tangentStride;
			index = tangentOffset + b1;
			var _g3 = index++;
			if(!target.fixed) {
				if(_g3 >= target.length) target.length = _g3 + 1;
				if(target.data.length < target.length) {
					var data6;
					var this9;
					this9 = new Array(target.data.length + 10);
					data6 = this9;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data6,0,target.data.length);
					target.data = data6;
				}
			}
			target.data[_g3] = target.data[_g3] + this._faceTangents.data[f1] * weight;
			var _g4 = index++;
			if(!target.fixed) {
				if(_g4 >= target.length) target.length = _g4 + 1;
				if(target.data.length < target.length) {
					var data7;
					var this10;
					this10 = new Array(target.data.length + 10);
					data7 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data7,0,target.data.length);
					target.data = data7;
				}
			}
			target.data[_g4] = target.data[_g4] + this._faceTangents.data[f2] * weight;
			var _g5 = index;
			if(!target.fixed) {
				if(_g5 >= target.length) target.length = _g5 + 1;
				if(target.data.length < target.length) {
					var data8;
					var this11;
					this11 = new Array(target.data.length + 10);
					data8 = this11;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data8,0,target.data.length);
					target.data = data8;
				}
			}
			target.data[_g5] = target.data[_g5] + this._faceTangents.data[f3] * weight;
			var b2;
			var a2;
			var index4 = i++;
			a2 = this._indices.data[index4];
			b2 = a2 * tangentStride;
			index = tangentOffset + b2;
			var _g6 = index++;
			if(!target.fixed) {
				if(_g6 >= target.length) target.length = _g6 + 1;
				if(target.data.length < target.length) {
					var data9;
					var this12;
					this12 = new Array(target.data.length + 10);
					data9 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data9,0,target.data.length);
					target.data = data9;
				}
			}
			target.data[_g6] = target.data[_g6] + this._faceTangents.data[f1] * weight;
			var _g7 = index++;
			if(!target.fixed) {
				if(_g7 >= target.length) target.length = _g7 + 1;
				if(target.data.length < target.length) {
					var data10;
					var this13;
					this13 = new Array(target.data.length + 10);
					data10 = this13;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data10,0,target.data.length);
					target.data = data10;
				}
			}
			target.data[_g7] = target.data[_g7] + this._faceTangents.data[f2] * weight;
			var _g8 = index;
			if(!target.fixed) {
				if(_g8 >= target.length) target.length = _g8 + 1;
				if(target.data.length < target.length) {
					var data11;
					var this14;
					this14 = new Array(target.data.length + 10);
					data11 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data11,0,target.data.length);
					target.data = data11;
				}
			}
			target.data[_g8] = target.data[_g8] + this._faceTangents.data[f3] * weight;
			f1 += 3;
			f2 += 3;
			f3 += 3;
		}
		i = tangentOffset;
		while(i < lenV) {
			var vx = target.data[i];
			var vy = target.data[i + 1];
			var vz = target.data[i + 2];
			var d = 1.0 / Math.sqrt(vx * vx + vy * vy + vz * vz);
			if(!target.fixed) {
				if(i >= target.length) target.length = i + 1;
				if(target.data.length < target.length) {
					var data12;
					var this15;
					this15 = new Array(target.data.length + 10);
					data12 = this15;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data12,0,target.data.length);
					target.data = data12;
				}
			}
			target.data[i] = vx * d;
			var key2 = i + 1;
			if(!target.fixed) {
				if(key2 >= target.length) target.length = key2 + 1;
				if(target.data.length < target.length) {
					var data13;
					var this16;
					this16 = new Array(target.data.length + 10);
					data13 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data13,0,target.data.length);
					target.data = data13;
				}
			}
			target.data[key2] = vy * d;
			var key3 = i + 2;
			if(!target.fixed) {
				if(key3 >= target.length) target.length = key3 + 1;
				if(target.data.length < target.length) {
					var data14;
					var this17;
					this17 = new Array(target.data.length + 10);
					data14 = this17;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data14,0,target.data.length);
					target.data = data14;
				}
			}
			target.data[key3] = vz * d;
			i += tangentStride;
		}
		this._vertexTangentsDirty = false;
		return target;
	}
	,dispose: function() {
		this.disposeIndexBuffers(this._indexBuffer);
		this._indices = null;
		this._indexBufferContext = null;
		this._faceNormals = null;
		this._faceWeights = null;
		this._faceTangents = null;
		this._vertexData = null;
	}
	,get_indexData: function() {
		return this._indices;
	}
	,updateIndexData: function(indices) {
		this._indices = indices;
		this._numIndices = indices.length;
		var numTriangles = this._numIndices / 3 | 0;
		if(this._numTriangles != numTriangles) this.disposeIndexBuffers(this._indexBuffer);
		this._numTriangles = numTriangles;
		this.invalidateBuffers(this._indicesInvalid);
		this._faceNormalsDirty = true;
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
	}
	,disposeIndexBuffers: function(buffers) {
		var i = 0;
		while(i < 8) {
			if(buffers.data[i] != null) {
				buffers.data[i].dispose();
				if(!buffers.fixed) {
					if(i >= buffers.length) buffers.length = i + 1;
					if(buffers.data.length < buffers.length) {
						var data;
						var this1;
						this1 = new Array(buffers.data.length + 10);
						data = this1;
						haxe.ds._Vector.Vector_Impl_.blit(buffers.data,0,data,0,buffers.data.length);
						buffers.data = data;
					}
				}
				buffers.data[i] = null;
			}
			++i;
		}
	}
	,disposeVertexBuffers: function(buffers) {
		var i = 0;
		while(i < 8) {
			if(buffers.data[i] != null) {
				buffers.data[i].dispose();
				if(!buffers.fixed) {
					if(i >= buffers.length) buffers.length = i + 1;
					if(buffers.data.length < buffers.length) {
						var data;
						var this1;
						this1 = new Array(buffers.data.length + 10);
						data = this1;
						haxe.ds._Vector.Vector_Impl_.blit(buffers.data,0,data,0,buffers.data.length);
						buffers.data = data;
					}
				}
				buffers.data[i] = null;
			}
			++i;
		}
	}
	,get_autoDeriveVertexTangents: function() {
		return this._autoDeriveVertexTangents;
	}
	,set_autoDeriveVertexTangents: function(value) {
		this._autoDeriveVertexTangents = value;
		this._vertexTangentsDirty = value;
		return value;
	}
	,get_faceNormals: function() {
		if(this._faceNormalsDirty) this.updateFaceNormals();
		return this._faceNormals;
	}
	,invalidateBuffers: function(invalid) {
		var i = 0;
		while(i < 8) {
			if(!invalid.fixed) {
				if(i >= invalid.length) invalid.length = i + 1;
				if(invalid.data.length < invalid.length) {
					var data;
					var this1;
					this1 = new Array(invalid.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(invalid.data,0,data,0,invalid.data.length);
					invalid.data = data;
				}
			}
			invalid.data[i] = true;
			++i;
		}
	}
	,get_UVStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexPositionData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexNormalData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexTangentData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_UVData: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_vertexStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexNormalStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexTangentStride: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexNormalOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_vertexTangentOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,get_UVOffset: function() {
		throw new away3d.errors.AbstractMethodError();
		return 0;
	}
	,invalidateBounds: function() {
		if(this._parentGeometry != null) this._parentGeometry.invalidateBounds(js.Boot.__cast(this , away3d.core.base.ISubGeometry));
	}
	,get_parentGeometry: function() {
		return this._parentGeometry;
	}
	,set_parentGeometry: function(value) {
		this._parentGeometry = value;
		return value;
	}
	,get_scaleU: function() {
		return this._scaleU;
	}
	,get_scaleV: function() {
		return this._scaleV;
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		var offset = this.get_UVOffset();
		var stride = this.get_UVStride();
		var uvs = this.get_UVData();
		var len = uvs.length;
		var ratioU = scaleU / this._scaleU;
		var ratioV = scaleV / this._scaleV;
		var i = offset;
		while(i < len) {
			var _g = i;
			if(!uvs.fixed) {
				if(_g >= uvs.length) uvs.length = _g + 1;
				if(uvs.data.length < uvs.length) {
					var data;
					var this1;
					this1 = new Array(uvs.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(uvs.data,0,data,0,uvs.data.length);
					uvs.data = data;
				}
			}
			uvs.data[_g] = uvs.data[_g] * ratioU;
			var _g1 = i + 1;
			if(!uvs.fixed) {
				if(_g1 >= uvs.length) uvs.length = _g1 + 1;
				if(uvs.data.length < uvs.length) {
					var data1;
					var this2;
					this2 = new Array(uvs.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(uvs.data,0,data1,0,uvs.data.length);
					uvs.data = data1;
				}
			}
			uvs.data[_g1] = uvs.data[_g1] * ratioV;
			i += stride;
		}
		this._scaleU = scaleU;
		this._scaleV = scaleV;
	}
	,scale: function(scale) {
		var vertices = this.get_UVData();
		var len = vertices.length;
		var offset = this.get_vertexOffset();
		var stride = this.get_vertexStride();
		var i = offset;
		while(i < len) {
			var _g = i;
			if(!vertices.fixed) {
				if(_g >= vertices.length) vertices.length = _g + 1;
				if(vertices.data.length < vertices.length) {
					var data;
					var this1;
					this1 = new Array(vertices.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data,0,vertices.data.length);
					vertices.data = data;
				}
			}
			vertices.data[_g] = vertices.data[_g] * scale;
			var _g1 = i + 1;
			if(!vertices.fixed) {
				if(_g1 >= vertices.length) vertices.length = _g1 + 1;
				if(vertices.data.length < vertices.length) {
					var data1;
					var this2;
					this2 = new Array(vertices.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data1,0,vertices.data.length);
					vertices.data = data1;
				}
			}
			vertices.data[_g1] = vertices.data[_g1] * scale;
			var _g2 = i + 2;
			if(!vertices.fixed) {
				if(_g2 >= vertices.length) vertices.length = _g2 + 1;
				if(vertices.data.length < vertices.length) {
					var data2;
					var this3;
					this3 = new Array(vertices.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data2,0,vertices.data.length);
					vertices.data = data2;
				}
			}
			vertices.data[_g2] = vertices.data[_g2] * scale;
			i += stride;
		}
	}
	,applyTransformation: function(transform) {
		var vertices = this._vertexData;
		var normals = this.get_vertexNormalData();
		var tangents = this.get_vertexTangentData();
		var posStride = this.get_vertexStride();
		var normalStride = this.get_vertexNormalStride();
		var tangentStride = this.get_vertexTangentStride();
		var posOffset = this.get_vertexOffset();
		var normalOffset = this.get_vertexNormalOffset();
		var tangentOffset = this.get_vertexTangentOffset();
		var len = vertices.length / posStride | 0;
		var i = 0;
		var i1;
		var i2;
		var vector = new openfl.geom.Vector3D();
		var bakeNormals = normals != null;
		var bakeTangents = tangents != null;
		var invTranspose = null;
		if(bakeNormals || bakeTangents) {
			invTranspose = transform.clone();
			invTranspose.invert();
			invTranspose.transpose();
		}
		var vi0 = posOffset;
		var ni0 = normalOffset;
		var ti0 = tangentOffset;
		i = 0;
		while(i < len) {
			i1 = vi0 + 1;
			i2 = vi0 + 2;
			vector.x = vertices.data[vi0];
			vector.y = vertices.data[i1];
			vector.z = vertices.data[i2];
			vector = transform.transformVector(vector);
			if(!vertices.fixed) {
				if(vi0 >= vertices.length) vertices.length = vi0 + 1;
				if(vertices.data.length < vertices.length) {
					var data;
					var this1;
					this1 = new Array(vertices.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data,0,vertices.data.length);
					vertices.data = data;
				}
			}
			vertices.data[vi0] = vector.x;
			if(!vertices.fixed) {
				if(i1 >= vertices.length) vertices.length = i1 + 1;
				if(vertices.data.length < vertices.length) {
					var data1;
					var this2;
					this2 = new Array(vertices.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data1,0,vertices.data.length);
					vertices.data = data1;
				}
			}
			vertices.data[i1] = vector.y;
			if(!vertices.fixed) {
				if(i2 >= vertices.length) vertices.length = i2 + 1;
				if(vertices.data.length < vertices.length) {
					var data2;
					var this3;
					this3 = new Array(vertices.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data2,0,vertices.data.length);
					vertices.data = data2;
				}
			}
			vertices.data[i2] = vector.z;
			vi0 += posStride;
			if(bakeNormals) {
				i1 = ni0 + 1;
				i2 = ni0 + 2;
				vector.x = normals.data[ni0];
				vector.y = normals.data[i1];
				vector.z = normals.data[i2];
				vector = invTranspose.deltaTransformVector(vector);
				vector.normalize();
				if(!normals.fixed) {
					if(ni0 >= normals.length) normals.length = ni0 + 1;
					if(normals.data.length < normals.length) {
						var data3;
						var this4;
						this4 = new Array(normals.data.length + 10);
						data3 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(normals.data,0,data3,0,normals.data.length);
						normals.data = data3;
					}
				}
				normals.data[ni0] = vector.x;
				if(!normals.fixed) {
					if(i1 >= normals.length) normals.length = i1 + 1;
					if(normals.data.length < normals.length) {
						var data4;
						var this5;
						this5 = new Array(normals.data.length + 10);
						data4 = this5;
						haxe.ds._Vector.Vector_Impl_.blit(normals.data,0,data4,0,normals.data.length);
						normals.data = data4;
					}
				}
				normals.data[i1] = vector.y;
				if(!normals.fixed) {
					if(i2 >= normals.length) normals.length = i2 + 1;
					if(normals.data.length < normals.length) {
						var data5;
						var this6;
						this6 = new Array(normals.data.length + 10);
						data5 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(normals.data,0,data5,0,normals.data.length);
						normals.data = data5;
					}
				}
				normals.data[i2] = vector.z;
				ni0 += normalStride;
			}
			if(bakeTangents) {
				i1 = ti0 + 1;
				i2 = ti0 + 2;
				vector.x = tangents.data[ti0];
				vector.y = tangents.data[i1];
				vector.z = tangents.data[i2];
				vector = invTranspose.deltaTransformVector(vector);
				vector.normalize();
				if(!tangents.fixed) {
					if(ti0 >= tangents.length) tangents.length = ti0 + 1;
					if(tangents.data.length < tangents.length) {
						var data6;
						var this7;
						this7 = new Array(tangents.data.length + 10);
						data6 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(tangents.data,0,data6,0,tangents.data.length);
						tangents.data = data6;
					}
				}
				tangents.data[ti0] = vector.x;
				if(!tangents.fixed) {
					if(i1 >= tangents.length) tangents.length = i1 + 1;
					if(tangents.data.length < tangents.length) {
						var data7;
						var this8;
						this8 = new Array(tangents.data.length + 10);
						data7 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(tangents.data,0,data7,0,tangents.data.length);
						tangents.data = data7;
					}
				}
				tangents.data[i1] = vector.y;
				if(!tangents.fixed) {
					if(i2 >= tangents.length) tangents.length = i2 + 1;
					if(tangents.data.length < tangents.length) {
						var data8;
						var this9;
						this9 = new Array(tangents.data.length + 10);
						data8 = this9;
						haxe.ds._Vector.Vector_Impl_.blit(tangents.data,0,data8,0,tangents.data.length);
						tangents.data = data8;
					}
				}
				tangents.data[i2] = vector.z;
				ti0 += tangentStride;
			}
			++i;
		}
	}
	,updateDummyUVs: function(target) {
		this._uvsDirty = false;
		var idx;
		var uvIdx;
		var stride = this.get_UVStride();
		var skip = stride - 2;
		var len = Std["int"](this._vertexData.length / this.get_vertexStride() * stride);
		if(target == null) {
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			target = this1;
		}
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(target),len,0);
		idx = this.get_UVOffset();
		uvIdx = 0;
		while(idx < len) {
			var key = idx++;
			if(!target.fixed) {
				if(key >= target.length) target.length = key + 1;
				if(target.data.length < target.length) {
					var data;
					var this3;
					this3 = new Array(target.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data,0,target.data.length);
					target.data = data;
				}
			}
			target.data[key] = uvIdx * .5;
			var key1 = idx++;
			if(!target.fixed) {
				if(key1 >= target.length) target.length = key1 + 1;
				if(target.data.length < target.length) {
					var data1;
					var this4;
					this4 = new Array(target.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data1,0,target.data.length);
					target.data = data1;
				}
			}
			target.data[key1] = 1.0 - (uvIdx & 1);
			idx += skip;
			if(++uvIdx == 3) uvIdx = 0;
		}
		return target;
	}
	,__class__: away3d.core.base.SubGeometryBase
	,__properties__: {get_scaleV:"get_scaleV",get_scaleU:"get_scaleU",set_parentGeometry:"set_parentGeometry",get_parentGeometry:"get_parentGeometry",get_UVOffset:"get_UVOffset",get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_vertexTangentStride:"get_vertexTangentStride",get_vertexNormalStride:"get_vertexNormalStride",get_vertexStride:"get_vertexStride",get_UVData:"get_UVData",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexPositionData:"get_vertexPositionData",get_vertexData:"get_vertexData",get_UVStride:"get_UVStride",get_faceNormals:"get_faceNormals",set_autoDeriveVertexTangents:"set_autoDeriveVertexTangents",get_autoDeriveVertexTangents:"get_autoDeriveVertexTangents",get_indexData:"get_indexData",get_numTriangles:"get_numTriangles",set_useFaceWeights:"set_useFaceWeights",get_useFaceWeights:"get_useFaceWeights",set_autoDeriveVertexNormals:"set_autoDeriveVertexNormals",get_autoDeriveVertexNormals:"get_autoDeriveVertexNormals",set_autoGenerateDummyUVs:"set_autoGenerateDummyUVs",get_autoGenerateDummyUVs:"get_autoGenerateDummyUVs"}
};
away3d.core.base.ISubGeometry = function() { };
$hxClasses["away3d.core.base.ISubGeometry"] = away3d.core.base.ISubGeometry;
away3d.core.base.ISubGeometry.__name__ = ["away3d","core","base","ISubGeometry"];
away3d.core.base.ISubGeometry.prototype = {
	__class__: away3d.core.base.ISubGeometry
	,__properties__: {get_vertexPositionData:"get_vertexPositionData",set_autoDeriveVertexTangents:"set_autoDeriveVertexTangents",get_autoDeriveVertexTangents:"get_autoDeriveVertexTangents",set_autoDeriveVertexNormals:"set_autoDeriveVertexNormals",get_autoDeriveVertexNormals:"get_autoDeriveVertexNormals",get_faceNormals:"get_faceNormals",set_parentGeometry:"set_parentGeometry",get_parentGeometry:"get_parentGeometry",get_scaleV:"get_scaleV",get_scaleU:"get_scaleU",get_UVData:"get_UVData",get_indexData:"get_indexData",get_secondaryUVOffset:"get_secondaryUVOffset",get_UVOffset:"get_UVOffset",get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexData:"get_vertexData",get_secondaryUVStride:"get_secondaryUVStride",get_UVStride:"get_UVStride",get_vertexTangentStride:"get_vertexTangentStride",get_vertexNormalStride:"get_vertexNormalStride",get_vertexStride:"get_vertexStride",get_numTriangles:"get_numTriangles",get_numVertices:"get_numVertices"}
};
away3d.core.base.CompactSubGeometry = function() {
	away3d.core.base.SubGeometryBase.call(this);
	this._vertexDataInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8,false);
	var this3;
	this3 = new openfl.VectorData();
	var this4;
	this4 = new Array(8);
	this3.data = this4;
	this3.length = 8;
	this3.fixed = false;
	this._vertexBuffer = this3;
	var this5;
	this5 = new openfl.VectorData();
	var this6;
	this6 = new Array(8);
	this5.data = this6;
	this5.length = 8;
	this5.fixed = false;
	this._bufferContext = this5;
	this._autoDeriveVertexNormals = false;
	this._autoDeriveVertexTangents = false;
};
$hxClasses["away3d.core.base.CompactSubGeometry"] = away3d.core.base.CompactSubGeometry;
away3d.core.base.CompactSubGeometry.__name__ = ["away3d","core","base","CompactSubGeometry"];
away3d.core.base.CompactSubGeometry.__interfaces__ = [away3d.core.base.ISubGeometry];
away3d.core.base.CompactSubGeometry.__super__ = away3d.core.base.SubGeometryBase;
away3d.core.base.CompactSubGeometry.prototype = $extend(away3d.core.base.SubGeometryBase.prototype,{
	get_numVertices: function() {
		return this._numVertices;
	}
	,updateData: function(data) {
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceNormalsDirty = true;
		this._faceTangentsDirty = true;
		this._isolatedVertexPositionDataDirty = true;
		this._vertexData = data;
		var numVertices = this._vertexData.length / 13 | 0;
		if(numVertices != this._numVertices) this.disposeVertexBuffers(this._vertexBuffer);
		this._numVertices = numVertices;
		if(this._numVertices == 0) throw new openfl.errors.Error("Bad data: geometry can't have zero triangles");
		this.invalidateBuffers(this._vertexDataInvalid);
		this.invalidateBounds();
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._uvsDirty && this._autoGenerateUVs) {
			this._vertexData = this.updateDummyUVs(this._vertexData);
			this.invalidateBuffers(this._vertexDataInvalid);
		}
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,9,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,11,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,uploadData: function(contextIndex) {
		this._activeBuffer.uploadFromVector(this._vertexData,0,this._numVertices);
		var this1 = this._vertexDataInvalid;
		var value = this._activeDataInvalid = false;
		if(!this1.fixed) {
			if(contextIndex >= this1.length) this1.length = contextIndex + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[contextIndex] = value;
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,3,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) this.updateActiveBuffer(contextIndex);
		if(this._activeBuffer == null || this._activeContext != context) this.createBuffer(contextIndex,context);
		if(this._activeDataInvalid) this.uploadData(contextIndex);
		context.setVertexBufferAt(index,this._activeBuffer,6,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,createBuffer: function(contextIndex,context) {
		var this1 = this._vertexBuffer;
		var value = this._activeBuffer = context.createVertexBuffer(this._numVertices,13);
		if(!this1.fixed) {
			if(contextIndex >= this1.length) this1.length = contextIndex + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[contextIndex] = value;
		var this3 = this._bufferContext;
		var value1 = this._activeContext = context;
		if(!this3.fixed) {
			if(contextIndex >= this3.length) this3.length = contextIndex + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[contextIndex] = value1;
		var this5 = this._vertexDataInvalid;
		var value2 = this._activeDataInvalid = true;
		if(!this5.fixed) {
			if(contextIndex >= this5.length) this5.length = contextIndex + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[contextIndex] = value2;
	}
	,updateActiveBuffer: function(contextIndex) {
		this._contextIndex = contextIndex;
		this._activeDataInvalid = this._vertexDataInvalid.data[contextIndex];
		this._activeBuffer = this._vertexBuffer.data[contextIndex];
		this._activeContext = this._bufferContext.data[contextIndex];
	}
	,get_vertexData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexData = this.updateVertexNormals(this._vertexData);
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) this._vertexData = this.updateVertexTangents(this._vertexData);
		if(this._uvsDirty && this._autoGenerateUVs) this._vertexData = this.updateDummyUVs(this._vertexData);
		return this._vertexData;
	}
	,updateVertexNormals: function(target) {
		this.invalidateBuffers(this._vertexDataInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexNormals.call(this,target);
	}
	,updateVertexTangents: function(target) {
		if(this._vertexNormalsDirty) this._vertexData = this.updateVertexNormals(this._vertexData);
		this.invalidateBuffers(this._vertexDataInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexTangents.call(this,target);
	}
	,get_vertexNormalData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexData = this.updateVertexNormals(this._vertexData);
		return this._vertexData;
	}
	,get_vertexTangentData: function() {
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) this._vertexData = this.updateVertexTangents(this._vertexData);
		return this._vertexData;
	}
	,get_UVData: function() {
		if(this._uvsDirty && this._autoGenerateUVs) {
			this._vertexData = this.updateDummyUVs(this._vertexData);
			this.invalidateBuffers(this._vertexDataInvalid);
		}
		return this._vertexData;
	}
	,applyTransformation: function(transform) {
		away3d.core.base.SubGeometryBase.prototype.applyTransformation.call(this,transform);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,scale: function(scale) {
		away3d.core.base.SubGeometryBase.prototype.scale.call(this,scale);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,clone: function() {
		var clone = new away3d.core.base.CompactSubGeometry();
		clone._autoDeriveVertexNormals = this._autoDeriveVertexNormals;
		clone._autoDeriveVertexTangents = this._autoDeriveVertexTangents;
		clone.updateData((function($this) {
			var $r;
			var this1 = $this._vertexData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
		clone.updateIndexData((function($this) {
			var $r;
			var this3 = $this._indices;
			var vectorData1 = new openfl.VectorData();
			vectorData1.length = this3.length;
			vectorData1.fixed = this3.fixed;
			{
				var this4;
				this4 = new Array(this3.length);
				vectorData1.data = this4;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData1.data,0,this3.length);
			$r = vectorData1;
			return $r;
		}(this)));
		return clone;
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		away3d.core.base.SubGeometryBase.prototype.scaleUV.call(this,scaleU,scaleV);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,get_vertexStride: function() {
		return 13;
	}
	,get_vertexNormalStride: function() {
		return 13;
	}
	,get_vertexTangentStride: function() {
		return 13;
	}
	,get_UVStride: function() {
		return 13;
	}
	,get_secondaryUVStride: function() {
		return 13;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 3;
	}
	,get_vertexTangentOffset: function() {
		return 6;
	}
	,get_UVOffset: function() {
		return 9;
	}
	,get_secondaryUVOffset: function() {
		return 11;
	}
	,dispose: function() {
		away3d.core.base.SubGeometryBase.prototype.dispose.call(this);
		this.disposeVertexBuffers(this._vertexBuffer);
		this._vertexBuffer = null;
	}
	,disposeVertexBuffers: function(buffers) {
		away3d.core.base.SubGeometryBase.prototype.disposeVertexBuffers.call(this,buffers);
		this._activeBuffer = null;
	}
	,invalidateBuffers: function(invalid) {
		away3d.core.base.SubGeometryBase.prototype.invalidateBuffers.call(this,invalid);
		this._activeDataInvalid = true;
	}
	,cloneWithSeperateBuffers: function() {
		var clone = new away3d.core.base.SubGeometry();
		clone.updateVertexData(this._isolatedVertexPositionData != null?this._isolatedVertexPositionData:this._isolatedVertexPositionData = this.stripBuffer(0,3));
		clone.set_autoDeriveVertexNormals(this._autoDeriveVertexNormals);
		clone.set_autoDeriveVertexTangents(this._autoDeriveVertexTangents);
		if(!this._autoDeriveVertexNormals) clone.updateVertexNormalData(this.stripBuffer(3,3));
		if(!this._autoDeriveVertexTangents) clone.updateVertexTangentData(this.stripBuffer(6,3));
		clone.updateUVData(this.stripBuffer(9,2));
		clone.updateSecondaryUVData(this.stripBuffer(11,2));
		clone.updateIndexData((function($this) {
			var $r;
			var this1 = $this.get_indexData();
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
		return clone;
	}
	,get_vertexPositionData: function() {
		if(this._isolatedVertexPositionDataDirty || this._isolatedVertexPositionData == null) {
			this._isolatedVertexPositionData = this.stripBuffer(0,3);
			this._isolatedVertexPositionDataDirty = false;
		}
		return this._isolatedVertexPositionData;
	}
	,stripBuffer: function(offset,numEntries) {
		var data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),this._numVertices * numEntries);
		var i = 0;
		var j = offset;
		var skip = 13 - numEntries;
		var v = 0;
		while(v < this._numVertices) {
			var k = 0;
			while(k < numEntries) {
				var key = i++;
				var value;
				var index = j++;
				value = this._vertexData.data[index];
				if(!data.fixed) {
					if(key >= data.length) data.length = key + 1;
					if(data.data.length < data.length) {
						var data1;
						var this3;
						this3 = new Array(data.data.length + 10);
						data1 = this3;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
						data.data = data1;
					}
				}
				data.data[key] = value;
				++k;
			}
			j += skip;
			++v;
		}
		return data;
	}
	,fromVectors: function(verts,uvs,normals,tangents) {
		var vertLen = verts.length / 3 * 13 | 0;
		var index = 0;
		var v = 0;
		var n = 0;
		var t = 0;
		var u = 0;
		var data;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(vertLen);
		this1.data = this2;
		this1.length = vertLen;
		this1.fixed = false;
		data = this1;
		while(index < vertLen) {
			var key = index++;
			var value;
			var index1 = v++;
			value = verts.data[index1];
			if(!data.fixed) {
				if(key >= data.length) data.length = key + 1;
				if(data.data.length < data.length) {
					var data1;
					var this3;
					this3 = new Array(data.data.length + 10);
					data1 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
					data.data = data1;
				}
			}
			data.data[key] = value;
			var key1 = index++;
			var value1;
			var index2 = v++;
			value1 = verts.data[index2];
			if(!data.fixed) {
				if(key1 >= data.length) data.length = key1 + 1;
				if(data.data.length < data.length) {
					var data2;
					var this4;
					this4 = new Array(data.data.length + 10);
					data2 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
					data.data = data2;
				}
			}
			data.data[key1] = value1;
			var key2 = index++;
			var value2;
			var index3 = v++;
			value2 = verts.data[index3];
			if(!data.fixed) {
				if(key2 >= data.length) data.length = key2 + 1;
				if(data.data.length < data.length) {
					var data3;
					var this5;
					this5 = new Array(data.data.length + 10);
					data3 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
					data.data = data3;
				}
			}
			data.data[key2] = value2;
			if(normals != null && normals.length > 0) {
				var key3 = index++;
				var value3;
				var index4 = n++;
				value3 = normals.data[index4];
				if(!data.fixed) {
					if(key3 >= data.length) data.length = key3 + 1;
					if(data.data.length < data.length) {
						var data4;
						var this6;
						this6 = new Array(data.data.length + 10);
						data4 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
						data.data = data4;
					}
				}
				data.data[key3] = value3;
				var key4 = index++;
				var value4;
				var index5 = n++;
				value4 = normals.data[index5];
				if(!data.fixed) {
					if(key4 >= data.length) data.length = key4 + 1;
					if(data.data.length < data.length) {
						var data5;
						var this7;
						this7 = new Array(data.data.length + 10);
						data5 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data5,0,data.data.length);
						data.data = data5;
					}
				}
				data.data[key4] = value4;
				var key5 = index++;
				var value5;
				var index6 = n++;
				value5 = normals.data[index6];
				if(!data.fixed) {
					if(key5 >= data.length) data.length = key5 + 1;
					if(data.data.length < data.length) {
						var data6;
						var this8;
						this8 = new Array(data.data.length + 10);
						data6 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data6,0,data.data.length);
						data.data = data6;
					}
				}
				data.data[key5] = value5;
			} else {
				var key6 = index++;
				if(!data.fixed) {
					if(key6 >= data.length) data.length = key6 + 1;
					if(data.data.length < data.length) {
						var data7;
						var this9;
						this9 = new Array(data.data.length + 10);
						data7 = this9;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data7,0,data.data.length);
						data.data = data7;
					}
				}
				data.data[key6] = 0;
				var key7 = index++;
				if(!data.fixed) {
					if(key7 >= data.length) data.length = key7 + 1;
					if(data.data.length < data.length) {
						var data8;
						var this10;
						this10 = new Array(data.data.length + 10);
						data8 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data8,0,data.data.length);
						data.data = data8;
					}
				}
				data.data[key7] = 0;
				var key8 = index++;
				if(!data.fixed) {
					if(key8 >= data.length) data.length = key8 + 1;
					if(data.data.length < data.length) {
						var data9;
						var this11;
						this11 = new Array(data.data.length + 10);
						data9 = this11;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data9,0,data.data.length);
						data.data = data9;
					}
				}
				data.data[key8] = 0;
			}
			if(tangents != null && tangents.length > 0) {
				var key9 = index++;
				var value6;
				var index7 = t++;
				value6 = tangents.data[index7];
				if(!data.fixed) {
					if(key9 >= data.length) data.length = key9 + 1;
					if(data.data.length < data.length) {
						var data10;
						var this12;
						this12 = new Array(data.data.length + 10);
						data10 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data10,0,data.data.length);
						data.data = data10;
					}
				}
				data.data[key9] = value6;
				var key10 = index++;
				var value7;
				var index8 = t++;
				value7 = tangents.data[index8];
				if(!data.fixed) {
					if(key10 >= data.length) data.length = key10 + 1;
					if(data.data.length < data.length) {
						var data11;
						var this13;
						this13 = new Array(data.data.length + 10);
						data11 = this13;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data11,0,data.data.length);
						data.data = data11;
					}
				}
				data.data[key10] = value7;
				var key11 = index++;
				var value8;
				var index9 = t++;
				value8 = tangents.data[index9];
				if(!data.fixed) {
					if(key11 >= data.length) data.length = key11 + 1;
					if(data.data.length < data.length) {
						var data12;
						var this14;
						this14 = new Array(data.data.length + 10);
						data12 = this14;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data12,0,data.data.length);
						data.data = data12;
					}
				}
				data.data[key11] = value8;
			} else {
				var key12 = index++;
				if(!data.fixed) {
					if(key12 >= data.length) data.length = key12 + 1;
					if(data.data.length < data.length) {
						var data13;
						var this15;
						this15 = new Array(data.data.length + 10);
						data13 = this15;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data13,0,data.data.length);
						data.data = data13;
					}
				}
				data.data[key12] = 0;
				var key13 = index++;
				if(!data.fixed) {
					if(key13 >= data.length) data.length = key13 + 1;
					if(data.data.length < data.length) {
						var data14;
						var this16;
						this16 = new Array(data.data.length + 10);
						data14 = this16;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data14,0,data.data.length);
						data.data = data14;
					}
				}
				data.data[key13] = 0;
				var key14 = index++;
				if(!data.fixed) {
					if(key14 >= data.length) data.length = key14 + 1;
					if(data.data.length < data.length) {
						var data15;
						var this17;
						this17 = new Array(data.data.length + 10);
						data15 = this17;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data15,0,data.data.length);
						data.data = data15;
					}
				}
				data.data[key14] = 0;
			}
			if(uvs != null && uvs.length > 0) {
				var key15 = index++;
				if(!data.fixed) {
					if(key15 >= data.length) data.length = key15 + 1;
					if(data.data.length < data.length) {
						var data16;
						var this18;
						this18 = new Array(data.data.length + 10);
						data16 = this18;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data16,0,data.data.length);
						data.data = data16;
					}
				}
				data.data[key15] = uvs.data[u];
				var key16 = index++;
				if(!data.fixed) {
					if(key16 >= data.length) data.length = key16 + 1;
					if(data.data.length < data.length) {
						var data17;
						var this19;
						this19 = new Array(data.data.length + 10);
						data17 = this19;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data17,0,data.data.length);
						data.data = data17;
					}
				}
				data.data[key16] = uvs.data[u + 1];
				var key17 = index++;
				var value9;
				var index10 = u++;
				value9 = uvs.data[index10];
				if(!data.fixed) {
					if(key17 >= data.length) data.length = key17 + 1;
					if(data.data.length < data.length) {
						var data18;
						var this20;
						this20 = new Array(data.data.length + 10);
						data18 = this20;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data18,0,data.data.length);
						data.data = data18;
					}
				}
				data.data[key17] = value9;
				var key18 = index++;
				var value10;
				var index11 = u++;
				value10 = uvs.data[index11];
				if(!data.fixed) {
					if(key18 >= data.length) data.length = key18 + 1;
					if(data.data.length < data.length) {
						var data19;
						var this21;
						this21 = new Array(data.data.length + 10);
						data19 = this21;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data19,0,data.data.length);
						data.data = data19;
					}
				}
				data.data[key18] = value10;
			} else {
				var key19 = index++;
				if(!data.fixed) {
					if(key19 >= data.length) data.length = key19 + 1;
					if(data.data.length < data.length) {
						var data20;
						var this22;
						this22 = new Array(data.data.length + 10);
						data20 = this22;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data20,0,data.data.length);
						data.data = data20;
					}
				}
				data.data[key19] = 0;
				var key20 = index++;
				if(!data.fixed) {
					if(key20 >= data.length) data.length = key20 + 1;
					if(data.data.length < data.length) {
						var data21;
						var this23;
						this23 = new Array(data.data.length + 10);
						data21 = this23;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data21,0,data.data.length);
						data.data = data21;
					}
				}
				data.data[key20] = 0;
				var key21 = index++;
				if(!data.fixed) {
					if(key21 >= data.length) data.length = key21 + 1;
					if(data.data.length < data.length) {
						var data22;
						var this24;
						this24 = new Array(data.data.length + 10);
						data22 = this24;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data22,0,data.data.length);
						data.data = data22;
					}
				}
				data.data[key21] = 0;
				var key22 = index++;
				if(!data.fixed) {
					if(key22 >= data.length) data.length = key22 + 1;
					if(data.data.length < data.length) {
						var data23;
						var this25;
						this25 = new Array(data.data.length + 10);
						data23 = this25;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data23,0,data.data.length);
						data.data = data23;
					}
				}
				data.data[key22] = 0;
			}
		}
		this.set_autoDeriveVertexNormals(!(normals != null && normals.length > 0));
		this.set_autoDeriveVertexTangents(!(tangents != null && tangents.length > 0));
		this.set_autoGenerateDummyUVs(!(uvs != null && uvs.length > 0));
		this.updateData(data);
	}
	,__class__: away3d.core.base.CompactSubGeometry
	,__properties__: $extend(away3d.core.base.SubGeometryBase.prototype.__properties__,{get_secondaryUVOffset:"get_secondaryUVOffset",get_secondaryUVStride:"get_secondaryUVStride",get_numVertices:"get_numVertices"})
});
away3d.core.base.Geometry = function() {
	away3d.library.assets.NamedAssetBase.call(this);
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._subGeometries = this1;
};
$hxClasses["away3d.core.base.Geometry"] = away3d.core.base.Geometry;
away3d.core.base.Geometry.__name__ = ["away3d","core","base","Geometry"];
away3d.core.base.Geometry.__interfaces__ = [away3d.library.assets.IAsset];
away3d.core.base.Geometry.__super__ = away3d.library.assets.NamedAssetBase;
away3d.core.base.Geometry.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	get_assetType: function() {
		return away3d.library.assets.Asset3DType.GEOMETRY;
	}
	,get_subGeometries: function() {
		return this._subGeometries;
	}
	,applyTransformation: function(transform) {
		var len = this._subGeometries.length;
		var i = 0;
		while(i < len) {
			this._subGeometries.data[i].applyTransformation(transform);
			++i;
		}
	}
	,addSubGeometry: function(subGeometry) {
		var this1 = this._subGeometries;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = subGeometry;
		}
		this1.length;
		subGeometry.set_parentGeometry(this);
		if(this.hasEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED)) this.dispatchEvent(new away3d.events.GeometryEvent(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED,subGeometry));
		this.invalidateBounds(subGeometry);
	}
	,removeSubGeometry: function(subGeometry) {
		var this1 = this._subGeometries;
		var pos;
		var this2 = this._subGeometries;
		var value = -1;
		var _g1 = 0;
		var _g = this2.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this2.data[i] == subGeometry) {
				value = i;
				break;
			}
		}
		pos = value;
		var len = 1;
		if(pos < 0) pos += this1.length;
		if(pos + len > this1.length) len = this1.length - pos;
		if(len < 0) len = 0;
		var vectorData = new openfl.VectorData();
		vectorData.length = len;
		vectorData.fixed = false;
		var this3;
		this3 = new Array(len);
		vectorData.data = this3;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
		if(len > 0) {
			this1.length -= len;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
		}
		vectorData;
		subGeometry.set_parentGeometry(null);
		if(this.hasEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED)) this.dispatchEvent(new away3d.events.GeometryEvent(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED,subGeometry));
		this.invalidateBounds(subGeometry);
	}
	,clone: function() {
		var clone = new away3d.core.base.Geometry();
		var len = this._subGeometries.length;
		var i = 0;
		while(i < len) {
			clone.addSubGeometry(this._subGeometries.data[i].clone());
			++i;
		}
		return clone;
	}
	,scale: function(scale) {
		var numSubGeoms = this._subGeometries.length;
		var i = 0;
		while(i < numSubGeoms) {
			this._subGeometries.data[i].scale(scale);
			++i;
		}
	}
	,dispose: function() {
		var numSubGeoms = this._subGeometries.length;
		var i = 0;
		while(i < numSubGeoms) {
			var subGeom = this._subGeometries.data[0];
			this.removeSubGeometry(subGeom);
			subGeom.dispose();
			++i;
		}
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		var numSubGeoms = this._subGeometries.length;
		var i = 0;
		while(i < numSubGeoms) {
			this._subGeometries.data[i].scaleUV(scaleU,scaleV);
			++i;
		}
	}
	,convertToSeparateBuffers: function() {
		var subGeom;
		var numSubGeoms = this._subGeometries.length;
		var _removableCompactSubGeometries;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		_removableCompactSubGeometries = this1;
		var i = 0;
		while(i < numSubGeoms) {
			subGeom = this._subGeometries.data[i];
			if(js.Boot.__instanceof(subGeom,away3d.core.base.SubGeometry)) {
				++i;
				continue;
			}
			if(!_removableCompactSubGeometries.fixed) {
				_removableCompactSubGeometries.length++;
				if(_removableCompactSubGeometries.data.length < _removableCompactSubGeometries.length) {
					var data;
					var this3;
					this3 = new Array(_removableCompactSubGeometries.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(_removableCompactSubGeometries.data,0,data,0,_removableCompactSubGeometries.data.length);
					_removableCompactSubGeometries.data = data;
				}
				_removableCompactSubGeometries.data[_removableCompactSubGeometries.length - 1] = subGeom;
			}
			_removableCompactSubGeometries.length;
			this.addSubGeometry(subGeom.cloneWithSeperateBuffers());
			++i;
		}
		var _g = 0;
		while(_g < _removableCompactSubGeometries.length) {
			var s = _removableCompactSubGeometries.data[_g];
			++_g;
			this.removeSubGeometry(s);
			s.dispose();
		}
	}
	,validate: function() {
	}
	,invalidateBounds: function(subGeom) {
		if(this.hasEventListener(away3d.events.GeometryEvent.BOUNDS_INVALID)) this.dispatchEvent(new away3d.events.GeometryEvent(away3d.events.GeometryEvent.BOUNDS_INVALID,subGeom));
	}
	,__class__: away3d.core.base.Geometry
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_subGeometries:"get_subGeometries",get_assetType:"get_assetType"})
});
away3d.core.base.IMaterialOwner = function() { };
$hxClasses["away3d.core.base.IMaterialOwner"] = away3d.core.base.IMaterialOwner;
away3d.core.base.IMaterialOwner.__name__ = ["away3d","core","base","IMaterialOwner"];
away3d.core.base.IMaterialOwner.prototype = {
	__class__: away3d.core.base.IMaterialOwner
	,__properties__: {get_animator:"get_animator",set_material:"set_material",get_material:"get_material"}
};
away3d.core.base.IRenderable = function() { };
$hxClasses["away3d.core.base.IRenderable"] = away3d.core.base.IRenderable;
away3d.core.base.IRenderable.__name__ = ["away3d","core","base","IRenderable"];
away3d.core.base.IRenderable.__interfaces__ = [away3d.core.base.IMaterialOwner];
away3d.core.base.IRenderable.prototype = {
	__class__: away3d.core.base.IRenderable
	,__properties__: {get_UVData:"get_UVData",get_indexData:"get_indexData",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexData:"get_vertexData",get_vertexStride:"get_vertexStride",get_numTriangles:"get_numTriangles",get_numVertices:"get_numVertices",get_shaderPickingDetails:"get_shaderPickingDetails",get_uvTransform:"get_uvTransform",get_castsShadows:"get_castsShadows",get_sourceEntity:"get_sourceEntity",get_mouseEnabled:"get_mouseEnabled",get_inverseSceneTransform:"get_inverseSceneTransform",get_sceneTransform:"get_sceneTransform"}
};
away3d.core.base.SkinnedSubGeometry = function(jointsPerVertex) {
	this._jointWeightsBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8);
	this._jointIndexBuffer = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),8);
	this._jointWeightsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this5;
		this5 = new openfl.VectorData();
		{
			var this6;
			this6 = new Array(0);
			this5.data = this6;
		}
		this5.length = 0;
		this5.fixed = false;
		$r = this5;
		return $r;
	}(this))),8,false);
	this._jointIndicesInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this7;
		this7 = new openfl.VectorData();
		{
			var this8;
			this8 = new Array(0);
			this7.data = this8;
		}
		this7.length = 0;
		this7.fixed = false;
		$r = this7;
		return $r;
	}(this))),8,false);
	this._jointWeightContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this9;
		this9 = new openfl.VectorData();
		{
			var this10;
			this10 = new Array(0);
			this9.data = this10;
		}
		this9.length = 0;
		this9.fixed = false;
		$r = this9;
		return $r;
	}(this))),8);
	this._jointIndexContext = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this11;
		this11 = new openfl.VectorData();
		{
			var this12;
			this12 = new Array(0);
			this11.data = this12;
		}
		this11.length = 0;
		this11.fixed = false;
		$r = this11;
		return $r;
	}(this))),8);
	away3d.core.base.CompactSubGeometry.call(this);
	this._jointsPerVertex = jointsPerVertex;
	this._bufferFormat = this.getVertexBufferFormat(this._jointsPerVertex);
};
$hxClasses["away3d.core.base.SkinnedSubGeometry"] = away3d.core.base.SkinnedSubGeometry;
away3d.core.base.SkinnedSubGeometry.__name__ = ["away3d","core","base","SkinnedSubGeometry"];
away3d.core.base.SkinnedSubGeometry.__super__ = away3d.core.base.CompactSubGeometry;
away3d.core.base.SkinnedSubGeometry.prototype = $extend(away3d.core.base.CompactSubGeometry.prototype,{
	getVertexBufferFormat: function(size) {
		switch(size) {
		case 1:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_1;
		case 2:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_2;
		case 3:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_3;
		case 4:
			return openfl.display3D.Context3DVertexBufferFormat.FLOAT_3;
		default:
			return null;
		}
	}
	,get_condensedIndexLookUp: function() {
		return this._condensedIndexLookUp;
	}
	,get_numCondensedJoints: function() {
		return this._numCondensedJoints;
	}
	,get_animatedData: function() {
		if(this._animatedData != null) return this._animatedData;
		var this1 = this._vertexData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		return vectorData;
	}
	,updateAnimatedData: function(value) {
		this._animatedData = value;
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,activateJointWeightsBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._jointWeightContext.data[contextIndex] != context || this._jointWeightsBuffer.data[contextIndex] == null) {
			var this1 = this._jointWeightsBuffer;
			var value = context.createVertexBuffer(this._numVertices,this._jointsPerVertex);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._jointWeightContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._jointWeightsInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._jointWeightsInvalid.data[contextIndex]) {
			this._jointWeightsBuffer.data[contextIndex].uploadFromVector(this._jointWeightsData,0,this._jointWeightsData.length / this._jointsPerVertex | 0);
			var this7 = this._jointWeightsInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._jointWeightsBuffer.data[contextIndex],0,this._bufferFormat);
	}
	,activateJointIndexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._jointIndexContext.data[contextIndex] != context || this._jointIndexBuffer.data[contextIndex] == null) {
			var this1 = this._jointIndexBuffer;
			var value = context.createVertexBuffer(this._numVertices,this._jointsPerVertex);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._jointIndexContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._jointIndicesInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._jointIndicesInvalid.data[contextIndex]) {
			this._jointIndexBuffer.data[contextIndex].uploadFromVector(this._numCondensedJoints > 0?this._condensedJointIndexData:this._jointIndexData,0,this._jointIndexData.length / this._jointsPerVertex | 0);
			var this7 = this._jointIndicesInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._jointIndexBuffer.data[contextIndex],0,this._bufferFormat);
	}
	,uploadData: function(contextIndex) {
		if(this._animatedData != null) {
			this._activeBuffer.uploadFromVector(this._animatedData,0,this._numVertices);
			var this1 = this._vertexDataInvalid;
			var value = this._activeDataInvalid = false;
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
		} else away3d.core.base.CompactSubGeometry.prototype.uploadData.call(this,contextIndex);
	}
	,clone: function() {
		var clone = new away3d.core.base.SkinnedSubGeometry(this._jointsPerVertex);
		clone.updateData((function($this) {
			var $r;
			var this1 = $this._vertexData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
		clone.updateIndexData((function($this) {
			var $r;
			var this3 = $this._indices;
			var vectorData1 = new openfl.VectorData();
			vectorData1.length = this3.length;
			vectorData1.fixed = this3.fixed;
			{
				var this4;
				this4 = new Array(this3.length);
				vectorData1.data = this4;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData1.data,0,this3.length);
			$r = vectorData1;
			return $r;
		}(this)));
		clone.updateJointIndexData((function($this) {
			var $r;
			var this5 = $this._jointIndexData;
			var vectorData2 = new openfl.VectorData();
			vectorData2.length = this5.length;
			vectorData2.fixed = this5.fixed;
			{
				var this6;
				this6 = new Array(this5.length);
				vectorData2.data = this6;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,vectorData2.data,0,this5.length);
			$r = vectorData2;
			return $r;
		}(this)));
		clone.updateJointWeightsData((function($this) {
			var $r;
			var this7 = $this._jointWeightsData;
			var vectorData3 = new openfl.VectorData();
			vectorData3.length = this7.length;
			vectorData3.fixed = this7.fixed;
			{
				var this8;
				this8 = new Array(this7.length);
				vectorData3.data = this8;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,vectorData3.data,0,this7.length);
			$r = vectorData3;
			return $r;
		}(this)));
		clone._autoDeriveVertexNormals = this._autoDeriveVertexNormals;
		clone._autoDeriveVertexTangents = this._autoDeriveVertexTangents;
		clone._numCondensedJoints = this._numCondensedJoints;
		clone._condensedIndexLookUp = this._condensedIndexLookUp;
		clone._condensedJointIndexData = this._condensedJointIndexData;
		return clone;
	}
	,dispose: function() {
		away3d.core.base.CompactSubGeometry.prototype.dispose.call(this);
		this.disposeVertexBuffers(this._jointWeightsBuffer);
		this.disposeVertexBuffers(this._jointIndexBuffer);
	}
	,condenseIndexData: function() {
		var len = this._jointIndexData.length;
		var oldIndex;
		var newIndex = 0;
		var dic = new haxe.ds.IntMap();
		this._condensedJointIndexData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this1;
			this1 = new openfl.VectorData();
			{
				var this2;
				this2 = new Array(0);
				this1.data = this2;
			}
			this1.length = 0;
			this1.fixed = false;
			$r = this1;
			return $r;
		}(this))),len,0);
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		this._condensedIndexLookUp = this3;
		var i = 0;
		while(i < len) {
			oldIndex = this._jointIndexData.data[i];
			if(!dic.exists(oldIndex)) {
				dic.set(oldIndex,newIndex);
				var this5 = this._condensedIndexLookUp;
				var key = newIndex++;
				if(!this5.fixed) {
					if(key >= this5.length) this5.length = key + 1;
					if(this5.data.length < this5.length) {
						var data;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data,0,this5.data.length);
						this5.data = data;
					}
				}
				this5.data[key] = oldIndex;
				var this7 = this._condensedIndexLookUp;
				var key1 = newIndex++;
				if(!this7.fixed) {
					if(key1 >= this7.length) this7.length = key1 + 1;
					if(this7.data.length < this7.length) {
						var data1;
						var this8;
						this8 = new Array(this7.data.length + 10);
						data1 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data1,0,this7.data.length);
						this7.data = data1;
					}
				}
				this7.data[key1] = oldIndex + 1;
				var this9 = this._condensedIndexLookUp;
				var key2 = newIndex++;
				if(!this9.fixed) {
					if(key2 >= this9.length) this9.length = key2 + 1;
					if(this9.data.length < this9.length) {
						var data2;
						var this10;
						this10 = new Array(this9.data.length + 10);
						data2 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data2,0,this9.data.length);
						this9.data = data2;
					}
				}
				this9.data[key2] = oldIndex + 2;
			}
			var this11 = this._condensedJointIndexData;
			var value = dic.get(oldIndex);
			if(!this11.fixed) {
				if(i >= this11.length) this11.length = i + 1;
				if(this11.data.length < this11.length) {
					var data3;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data3 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data3,0,this11.data.length);
					this11.data = data3;
				}
			}
			this11.data[i] = value;
			++i;
		}
		this._numCondensedJoints = newIndex / 3 | 0;
		this.invalidateBuffers(this._jointIndicesInvalid);
	}
	,get_jointWeightsData: function() {
		return this._jointWeightsData;
	}
	,updateJointWeightsData: function(value) {
		this._numCondensedJoints = 0;
		this._condensedIndexLookUp = null;
		this._condensedJointIndexData = null;
		this._jointWeightsData = value;
		this.invalidateBuffers(this._jointWeightsInvalid);
	}
	,get_jointIndexData: function() {
		return this._jointIndexData;
	}
	,updateJointIndexData: function(value) {
		this._jointIndexData = value;
		this.invalidateBuffers(this._jointIndicesInvalid);
	}
	,__class__: away3d.core.base.SkinnedSubGeometry
	,__properties__: $extend(away3d.core.base.CompactSubGeometry.prototype.__properties__,{get_jointIndexData:"get_jointIndexData",get_jointWeightsData:"get_jointWeightsData",get_animatedData:"get_animatedData",get_numCondensedJoints:"get_numCondensedJoints",get_condensedIndexLookUp:"get_condensedIndexLookUp"})
});
away3d.core.base.SubGeometry = function() {
	away3d.core.base.SubGeometryBase.call(this);
	this._verticesInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8);
	this._uvsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),8);
	this._secondaryUvsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this5;
		this5 = new openfl.VectorData();
		{
			var this6;
			this6 = new Array(0);
			this5.data = this6;
		}
		this5.length = 0;
		this5.fixed = false;
		$r = this5;
		return $r;
	}(this))),8);
	this._normalsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this7;
		this7 = new openfl.VectorData();
		{
			var this8;
			this8 = new Array(0);
			this7.data = this8;
		}
		this7.length = 0;
		this7.fixed = false;
		$r = this7;
		return $r;
	}(this))),8);
	this._tangentsInvalid = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this9;
		this9 = new openfl.VectorData();
		{
			var this10;
			this10 = new Array(0);
			this9.data = this10;
		}
		this9.length = 0;
		this9.fixed = false;
		$r = this9;
		return $r;
	}(this))),8);
	var this11;
	this11 = new openfl.VectorData();
	var this12;
	this12 = new Array(8);
	this11.data = this12;
	this11.length = 8;
	this11.fixed = false;
	this._vertexBuffer = this11;
	var this13;
	this13 = new openfl.VectorData();
	var this14;
	this14 = new Array(8);
	this13.data = this14;
	this13.length = 8;
	this13.fixed = false;
	this._uvBuffer = this13;
	var this15;
	this15 = new openfl.VectorData();
	var this16;
	this16 = new Array(8);
	this15.data = this16;
	this15.length = 8;
	this15.fixed = false;
	this._secondaryUvBuffer = this15;
	var this17;
	this17 = new openfl.VectorData();
	var this18;
	this18 = new Array(8);
	this17.data = this18;
	this17.length = 8;
	this17.fixed = false;
	this._vertexNormalBuffer = this17;
	var this19;
	this19 = new openfl.VectorData();
	var this20;
	this20 = new Array(8);
	this19.data = this20;
	this19.length = 8;
	this19.fixed = false;
	this._vertexTangentBuffer = this19;
	var this21;
	this21 = new openfl.VectorData();
	var this22;
	this22 = new Array(8);
	this21.data = this22;
	this21.length = 8;
	this21.fixed = false;
	this._vertexBufferContext = this21;
	var this23;
	this23 = new openfl.VectorData();
	var this24;
	this24 = new Array(8);
	this23.data = this24;
	this23.length = 8;
	this23.fixed = false;
	this._uvBufferContext = this23;
	var this25;
	this25 = new openfl.VectorData();
	var this26;
	this26 = new Array(8);
	this25.data = this26;
	this25.length = 8;
	this25.fixed = false;
	this._secondaryUvBufferContext = this25;
	var this27;
	this27 = new openfl.VectorData();
	var this28;
	this28 = new Array(8);
	this27.data = this28;
	this27.length = 8;
	this27.fixed = false;
	this._vertexNormalBufferContext = this27;
	var this29;
	this29 = new openfl.VectorData();
	var this30;
	this30 = new Array(8);
	this29.data = this30;
	this29.length = 8;
	this29.fixed = false;
	this._vertexTangentBufferContext = this29;
};
$hxClasses["away3d.core.base.SubGeometry"] = away3d.core.base.SubGeometry;
away3d.core.base.SubGeometry.__name__ = ["away3d","core","base","SubGeometry"];
away3d.core.base.SubGeometry.__interfaces__ = [away3d.core.base.ISubGeometry];
away3d.core.base.SubGeometry.__super__ = away3d.core.base.SubGeometryBase;
away3d.core.base.SubGeometry.prototype = $extend(away3d.core.base.SubGeometryBase.prototype,{
	get_numVertices: function() {
		return this._numVertices;
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._vertexBuffer.data[contextIndex] == null || this._vertexBufferContext.data[contextIndex] != context) {
			var this1 = this._vertexBuffer;
			var value = context.createVertexBuffer(this._numVertices,3);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._vertexBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._verticesInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._verticesInvalid.data[contextIndex]) {
			this._vertexBuffer.data[contextIndex].uploadFromVector(this._vertexData,0,this._numVertices);
			var this7 = this._verticesInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._vertexBuffer.data[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._autoGenerateUVs && this._uvsDirty) this._uvs = this.updateDummyUVs(this._uvs);
		if(this._uvBuffer.data[contextIndex] == null || this._uvBufferContext.data[contextIndex] != context) {
			var this1 = this._uvBuffer;
			var value = context.createVertexBuffer(this._numVertices,2);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._uvBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._uvsInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._uvsInvalid.data[contextIndex]) {
			this._uvBuffer.data[contextIndex].uploadFromVector(this._uvs,0,this._numVertices);
			var this7 = this._uvsInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._uvBuffer.data[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._secondaryUvBuffer.data[contextIndex] == null || this._secondaryUvBufferContext.data[contextIndex] != context) {
			var this1 = this._secondaryUvBuffer;
			var value = context.createVertexBuffer(this._numVertices,2);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._secondaryUvBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._secondaryUvsInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._secondaryUvsInvalid.data[contextIndex]) {
			this._secondaryUvBuffer.data[contextIndex].uploadFromVector(this._secondaryUvs,0,this._numVertices);
			var this7 = this._secondaryUvsInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._secondaryUvBuffer.data[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		if(this._vertexNormalBuffer.data[contextIndex] == null || this._vertexNormalBufferContext.data[contextIndex] != context) {
			var this1 = this._vertexNormalBuffer;
			var value = context.createVertexBuffer(this._numVertices,3);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._vertexNormalBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._normalsInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._normalsInvalid.data[contextIndex]) {
			this._vertexNormalBuffer.data[contextIndex].uploadFromVector(this._vertexNormals,0,this._numVertices);
			var this7 = this._normalsInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._vertexNormalBuffer.data[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._vertexTangentsDirty) this._vertexTangents = this.updateVertexTangents(this._vertexTangents);
		if(this._vertexTangentBuffer.data[contextIndex] == null || this._vertexTangentBufferContext.data[contextIndex] != context) {
			var this1 = this._vertexTangentBuffer;
			var value = context.createVertexBuffer(this._numVertices,3);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._vertexTangentBufferContext;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			var this5 = this._tangentsInvalid;
			if(!this5.fixed) {
				if(contextIndex >= this5.length) this5.length = contextIndex + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[contextIndex] = true;
		}
		if(this._tangentsInvalid.data[contextIndex]) {
			this._vertexTangentBuffer.data[contextIndex].uploadFromVector(this._vertexTangents,0,this._numVertices);
			var this7 = this._tangentsInvalid;
			if(!this7.fixed) {
				if(contextIndex >= this7.length) this7.length = contextIndex + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[contextIndex] = false;
		}
		context.setVertexBufferAt(index,this._vertexTangentBuffer.data[contextIndex],0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
	}
	,applyTransformation: function(transform) {
		away3d.core.base.SubGeometryBase.prototype.applyTransformation.call(this,transform);
		this.invalidateBuffers(this._verticesInvalid);
		this.invalidateBuffers(this._normalsInvalid);
		this.invalidateBuffers(this._tangentsInvalid);
	}
	,clone: function() {
		var clone = new away3d.core.base.SubGeometry();
		clone.updateVertexData((function($this) {
			var $r;
			var this1 = $this._vertexData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
		clone.updateUVData((function($this) {
			var $r;
			var this3 = $this._uvs;
			var vectorData1 = new openfl.VectorData();
			vectorData1.length = this3.length;
			vectorData1.fixed = this3.fixed;
			{
				var this4;
				this4 = new Array(this3.length);
				vectorData1.data = this4;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData1.data,0,this3.length);
			$r = vectorData1;
			return $r;
		}(this)));
		clone.updateIndexData((function($this) {
			var $r;
			var this5 = $this._indices;
			var vectorData2 = new openfl.VectorData();
			vectorData2.length = this5.length;
			vectorData2.fixed = this5.fixed;
			{
				var this6;
				this6 = new Array(this5.length);
				vectorData2.data = this6;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,vectorData2.data,0,this5.length);
			$r = vectorData2;
			return $r;
		}(this)));
		if(this._secondaryUvs != null) clone.updateSecondaryUVData((function($this) {
			var $r;
			var this7 = $this._secondaryUvs;
			var vectorData3 = new openfl.VectorData();
			vectorData3.length = this7.length;
			vectorData3.fixed = this7.fixed;
			{
				var this8;
				this8 = new Array(this7.length);
				vectorData3.data = this8;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,vectorData3.data,0,this7.length);
			$r = vectorData3;
			return $r;
		}(this)));
		if(!this._autoDeriveVertexNormals) clone.updateVertexNormalData((function($this) {
			var $r;
			var this9 = $this._vertexNormals;
			var vectorData4 = new openfl.VectorData();
			vectorData4.length = this9.length;
			vectorData4.fixed = this9.fixed;
			{
				var this10;
				this10 = new Array(this9.length);
				vectorData4.data = this10;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,vectorData4.data,0,this9.length);
			$r = vectorData4;
			return $r;
		}(this)));
		if(!this._autoDeriveVertexTangents) clone.updateVertexTangentData((function($this) {
			var $r;
			var this11 = $this._vertexTangents;
			var vectorData5 = new openfl.VectorData();
			vectorData5.length = this11.length;
			vectorData5.fixed = this11.fixed;
			{
				var this12;
				this12 = new Array(this11.length);
				vectorData5.data = this12;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,vectorData5.data,0,this11.length);
			$r = vectorData5;
			return $r;
		}(this)));
		return clone;
	}
	,scale: function(scale) {
		away3d.core.base.SubGeometryBase.prototype.scale.call(this,scale);
		this.invalidateBuffers(this._verticesInvalid);
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		away3d.core.base.SubGeometryBase.prototype.scaleUV.call(this,scaleU,scaleV);
		this.invalidateBuffers(this._uvsInvalid);
	}
	,dispose: function() {
		away3d.core.base.SubGeometryBase.prototype.dispose.call(this);
		this.disposeAllVertexBuffers();
		this._vertexBuffer = null;
		this._vertexNormalBuffer = null;
		this._uvBuffer = null;
		this._secondaryUvBuffer = null;
		this._vertexTangentBuffer = null;
		this._indexBuffer = null;
		this._uvs = null;
		this._secondaryUvs = null;
		this._vertexNormals = null;
		this._vertexTangents = null;
		this._vertexBufferContext = null;
		this._uvBufferContext = null;
		this._secondaryUvBufferContext = null;
		this._vertexNormalBufferContext = null;
		this._vertexTangentBufferContext = null;
	}
	,disposeAllVertexBuffers: function() {
		this.disposeVertexBuffers(this._vertexBuffer);
		this.disposeVertexBuffers(this._vertexNormalBuffer);
		this.disposeVertexBuffers(this._uvBuffer);
		this.disposeVertexBuffers(this._secondaryUvBuffer);
		this.disposeVertexBuffers(this._vertexTangentBuffer);
	}
	,get_vertexData: function() {
		return this._vertexData;
	}
	,get_vertexPositionData: function() {
		return this._vertexData;
	}
	,updateVertexData: function(vertices) {
		if(this._autoDeriveVertexNormals) this._vertexNormalsDirty = true;
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceNormalsDirty = true;
		this._vertexData = vertices;
		var numVertices = vertices.length / 3 | 0;
		if(numVertices != this._numVertices) this.disposeAllVertexBuffers();
		this._numVertices = numVertices;
		this.invalidateBuffers(this._verticesInvalid);
		this.invalidateBounds();
	}
	,get_UVData: function() {
		if(this._uvsDirty && this._autoGenerateUVs) this._uvs = this.updateDummyUVs(this._uvs);
		return this._uvs;
	}
	,get_secondaryUVData: function() {
		return this._secondaryUvs;
	}
	,updateUVData: function(uvs) {
		if(this._autoDeriveVertexTangents) this._vertexTangentsDirty = true;
		this._faceTangentsDirty = true;
		this._uvs = uvs;
		this.invalidateBuffers(this._uvsInvalid);
	}
	,updateSecondaryUVData: function(uvs) {
		this._secondaryUvs = uvs;
		this.invalidateBuffers(this._secondaryUvsInvalid);
	}
	,get_vertexNormalData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		return this._vertexNormals;
	}
	,updateVertexNormalData: function(vertexNormals) {
		this._vertexNormalsDirty = false;
		this._autoDeriveVertexNormals = vertexNormals == null;
		this._vertexNormals = vertexNormals;
		this.invalidateBuffers(this._normalsInvalid);
	}
	,get_vertexTangentData: function() {
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) this._vertexTangents = this.updateVertexTangents(this._vertexTangents);
		return this._vertexTangents;
	}
	,updateVertexTangentData: function(vertexTangents) {
		this._vertexTangentsDirty = false;
		this._autoDeriveVertexTangents = vertexTangents == null;
		this._vertexTangents = vertexTangents;
		this.invalidateBuffers(this._tangentsInvalid);
	}
	,fromVectors: function(vertices,uvs,normals,tangents) {
		this.updateVertexData(vertices);
		this.updateUVData(uvs);
		this.updateVertexNormalData(normals);
		this.updateVertexTangentData(tangents);
	}
	,updateVertexNormals: function(target) {
		this.invalidateBuffers(this._normalsInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexNormals.call(this,target);
	}
	,updateVertexTangents: function(target) {
		if(this._vertexNormalsDirty) this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		this.invalidateBuffers(this._tangentsInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateVertexTangents.call(this,target);
	}
	,updateDummyUVs: function(target) {
		this.invalidateBuffers(this._uvsInvalid);
		return away3d.core.base.SubGeometryBase.prototype.updateDummyUVs.call(this,target);
	}
	,disposeForStage3D: function(stage3DProxy) {
		var index = stage3DProxy._stage3DIndex;
		if(this._vertexBuffer.data[index] != null) {
			this._vertexBuffer.data[index].dispose();
			var this1 = this._vertexBuffer;
			if(!this1.fixed) {
				if(index >= this1.length) this1.length = index + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[index] = null;
		}
		if(this._uvBuffer.data[index] != null) {
			this._uvBuffer.data[index].dispose();
			var this3 = this._uvBuffer;
			if(!this3.fixed) {
				if(index >= this3.length) this3.length = index + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[index] = null;
		}
		if(this._secondaryUvBuffer.data[index] != null) {
			this._secondaryUvBuffer.data[index].dispose();
			var this5 = this._secondaryUvBuffer;
			if(!this5.fixed) {
				if(index >= this5.length) this5.length = index + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[index] = null;
		}
		if(this._vertexNormalBuffer.data[index] != null) {
			this._vertexNormalBuffer.data[index].dispose();
			var this7 = this._vertexNormalBuffer;
			if(!this7.fixed) {
				if(index >= this7.length) this7.length = index + 1;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[index] = null;
		}
		if(this._vertexTangentBuffer.data[index] != null) {
			this._vertexTangentBuffer.data[index].dispose();
			var this9 = this._vertexTangentBuffer;
			if(!this9.fixed) {
				if(index >= this9.length) this9.length = index + 1;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[index] = null;
		}
		if(this._indexBuffer.data[index] != null) {
			this._indexBuffer.data[index].dispose();
			var this11 = this._indexBuffer;
			if(!this11.fixed) {
				if(index >= this11.length) this11.length = index + 1;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[index] = null;
		}
	}
	,get_vertexStride: function() {
		return 3;
	}
	,get_vertexTangentStride: function() {
		return 3;
	}
	,get_vertexNormalStride: function() {
		return 3;
	}
	,get_UVStride: function() {
		return 2;
	}
	,get_secondaryUVStride: function() {
		return 2;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 0;
	}
	,get_vertexTangentOffset: function() {
		return 0;
	}
	,get_UVOffset: function() {
		return 0;
	}
	,get_secondaryUVOffset: function() {
		return 0;
	}
	,cloneWithSeperateBuffers: function() {
		return js.Boot.__cast(this.clone() , away3d.core.base.SubGeometry);
	}
	,__class__: away3d.core.base.SubGeometry
	,__properties__: $extend(away3d.core.base.SubGeometryBase.prototype.__properties__,{get_secondaryUVOffset:"get_secondaryUVOffset",get_secondaryUVStride:"get_secondaryUVStride",get_secondaryUVData:"get_secondaryUVData",get_numVertices:"get_numVertices"})
});
away3d.core.base.SubMesh = function(subGeometry,parentMesh,material) {
	this._uvRotation = 0;
	this._scaleU = 1;
	this._scaleV = 1;
	this._offsetU = 0;
	this._offsetV = 0;
	this._parentMesh = parentMesh;
	this._subGeometry = subGeometry;
	this.set_material(material);
};
$hxClasses["away3d.core.base.SubMesh"] = away3d.core.base.SubMesh;
away3d.core.base.SubMesh.__name__ = ["away3d","core","base","SubMesh"];
away3d.core.base.SubMesh.__interfaces__ = [away3d.core.base.IRenderable];
away3d.core.base.SubMesh.prototype = {
	get_shaderPickingDetails: function() {
		return this.get_sourceEntity().get_shaderPickingDetails();
	}
	,get_offsetU: function() {
		return this._offsetU;
	}
	,set_offsetU: function(value) {
		if(value == this._offsetU) return value;
		this._offsetU = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_offsetV: function() {
		return this._offsetV;
	}
	,set_offsetV: function(value) {
		if(value == this._offsetV) return value;
		this._offsetV = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_scaleU: function() {
		return this._scaleU;
	}
	,set_scaleU: function(value) {
		if(value == this._scaleU) return value;
		this._scaleU = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_scaleV: function() {
		return this._scaleV;
	}
	,set_scaleV: function(value) {
		if(value == this._scaleV) return value;
		this._scaleV = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_uvRotation: function() {
		return this._uvRotation;
	}
	,set_uvRotation: function(value) {
		if(value == this._uvRotation) return value;
		this._uvRotation = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_sourceEntity: function() {
		return this._parentMesh;
	}
	,get_subGeometry: function() {
		return this._subGeometry;
	}
	,set_subGeometry: function(value) {
		this._subGeometry = value;
		return value;
	}
	,get_material: function() {
		if(this._material != null) return this._material;
		return this._parentMesh.get_material();
	}
	,set_material: function(value) {
		if(this._material != null) this._material.removeOwner(this);
		this._material = value;
		if(this._material != null) this._material.addOwner(this);
		return value;
	}
	,get_sceneTransform: function() {
		return this._parentMesh.get_sceneTransform();
	}
	,get_inverseSceneTransform: function() {
		return this._parentMesh.get_inverseSceneTransform();
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexBuffer(index,stage3DProxy);
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexNormalBuffer(index,stage3DProxy);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexTangentBuffer(index,stage3DProxy);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateUVBuffer(index,stage3DProxy);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateSecondaryUVBuffer(index,stage3DProxy);
	}
	,getIndexBuffer: function(stage3DProxy) {
		return this._subGeometry.getIndexBuffer(stage3DProxy);
	}
	,get_numTriangles: function() {
		return this._subGeometry.get_numTriangles();
	}
	,get_animator: function() {
		return this._parentMesh.get_animator();
	}
	,get_mouseEnabled: function() {
		return this._parentMesh.get_mouseEnabled() || this._parentMesh._ancestorsAllowMouseEnabled;
	}
	,get_castsShadows: function() {
		return this._parentMesh.get_castsShadows();
	}
	,get_parentMesh: function() {
		return this._parentMesh;
	}
	,set_parentMesh: function(value) {
		this._parentMesh = value;
		return value;
	}
	,get_uvTransform: function() {
		if(this._uvTransformDirty) this.updateUVTransform();
		return this._uvTransform;
	}
	,updateUVTransform: function() {
		if(this._uvTransform == null) this._uvTransform = new openfl.geom.Matrix();
		this._uvTransform.identity();
		if(this._uvRotation != 0) this._uvTransform.rotate(this._uvRotation);
		if(this._scaleU != 1 || this._scaleV != 1) this._uvTransform.scale(this._scaleU,this._scaleV);
		this._uvTransform.translate(this._offsetU,this._offsetV);
		this._uvTransformDirty = false;
	}
	,dispose: function() {
		this.set_material(null);
	}
	,get_vertexData: function() {
		return this._subGeometry.get_vertexData();
	}
	,get_indexData: function() {
		return this._subGeometry.get_indexData();
	}
	,get_UVData: function() {
		return this._subGeometry.get_UVData();
	}
	,get_bounds: function() {
		return this._parentMesh.get_bounds();
	}
	,get_visible: function() {
		return this._parentMesh.get_visible();
	}
	,get_numVertices: function() {
		return this._subGeometry.get_numVertices();
	}
	,get_vertexStride: function() {
		return this._subGeometry.get_vertexStride();
	}
	,get_UVStride: function() {
		return this._subGeometry.get_UVStride();
	}
	,get_vertexNormalData: function() {
		return this._subGeometry.get_vertexNormalData();
	}
	,get_vertexTangentData: function() {
		return this._subGeometry.get_vertexTangentData();
	}
	,get_UVOffset: function() {
		return this._subGeometry.get_UVOffset();
	}
	,get_vertexOffset: function() {
		return this._subGeometry.get_vertexOffset();
	}
	,get_vertexNormalOffset: function() {
		return this._subGeometry.get_vertexNormalOffset();
	}
	,get_vertexTangentOffset: function() {
		return this._subGeometry.get_vertexTangentOffset();
	}
	,getRenderSceneTransform: function(camera) {
		return this._parentMesh.get_sceneTransform();
	}
	,__class__: away3d.core.base.SubMesh
	,__properties__: {get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_UVOffset:"get_UVOffset",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_UVStride:"get_UVStride",get_vertexStride:"get_vertexStride",get_numVertices:"get_numVertices",get_visible:"get_visible",get_bounds:"get_bounds",get_UVData:"get_UVData",get_indexData:"get_indexData",get_vertexData:"get_vertexData",get_uvTransform:"get_uvTransform",set_parentMesh:"set_parentMesh",get_parentMesh:"get_parentMesh",get_castsShadows:"get_castsShadows",get_mouseEnabled:"get_mouseEnabled",get_animator:"get_animator",get_numTriangles:"get_numTriangles",get_inverseSceneTransform:"get_inverseSceneTransform",get_sceneTransform:"get_sceneTransform",set_material:"set_material",get_material:"get_material",set_subGeometry:"set_subGeometry",get_subGeometry:"get_subGeometry",get_sourceEntity:"get_sourceEntity",set_uvRotation:"set_uvRotation",get_uvRotation:"get_uvRotation",set_scaleV:"set_scaleV",get_scaleV:"get_scaleV",set_scaleU:"set_scaleU",get_scaleU:"get_scaleU",set_offsetV:"set_offsetV",get_offsetV:"get_offsetV",set_offsetU:"set_offsetU",get_offsetU:"get_offsetU",get_shaderPickingDetails:"get_shaderPickingDetails"}
};
away3d.core.base.data = {};
away3d.core.base.data.ParticleData = function() {
};
$hxClasses["away3d.core.base.data.ParticleData"] = away3d.core.base.data.ParticleData;
away3d.core.base.data.ParticleData.__name__ = ["away3d","core","base","data","ParticleData"];
away3d.core.base.data.ParticleData.prototype = {
	__class__: away3d.core.base.data.ParticleData
};
away3d.core.data = {};
away3d.core.data.EntityListItem = function() {
};
$hxClasses["away3d.core.data.EntityListItem"] = away3d.core.data.EntityListItem;
away3d.core.data.EntityListItem.__name__ = ["away3d","core","data","EntityListItem"];
away3d.core.data.EntityListItem.prototype = {
	__class__: away3d.core.data.EntityListItem
};
away3d.core.data.EntityListItemPool = function() {
	this._index = 0;
	this._poolSize = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._pool = this1;
};
$hxClasses["away3d.core.data.EntityListItemPool"] = away3d.core.data.EntityListItemPool;
away3d.core.data.EntityListItemPool.__name__ = ["away3d","core","data","EntityListItemPool"];
away3d.core.data.EntityListItemPool.prototype = {
	getItem: function() {
		var item;
		if(this._index == this._poolSize) {
			item = new away3d.core.data.EntityListItem();
			var this1 = this._pool;
			var key = this._index++;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = item;
			++this._poolSize;
		} else {
			var index = this._index++;
			item = this._pool.data[index];
		}
		return item;
	}
	,freeAll: function() {
		this._index = 0;
	}
	,dispose: function() {
		var value = [];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this._pool = vectorData;
	}
	,__class__: away3d.core.data.EntityListItemPool
};
away3d.core.data.RenderableListItem = function() {
};
$hxClasses["away3d.core.data.RenderableListItem"] = away3d.core.data.RenderableListItem;
away3d.core.data.RenderableListItem.__name__ = ["away3d","core","data","RenderableListItem"];
away3d.core.data.RenderableListItem.prototype = {
	__class__: away3d.core.data.RenderableListItem
};
away3d.core.data.RenderableListItemPool = function() {
	this._index = 0;
	this._poolSize = 0;
	this._pool = new Array();
};
$hxClasses["away3d.core.data.RenderableListItemPool"] = away3d.core.data.RenderableListItemPool;
away3d.core.data.RenderableListItemPool.__name__ = ["away3d","core","data","RenderableListItemPool"];
away3d.core.data.RenderableListItemPool.prototype = {
	getItem: function() {
		if(this._index == this._poolSize) {
			var item = new away3d.core.data.RenderableListItem();
			this._pool[this._index++] = item;
			++this._poolSize;
			return item;
		} else return this._pool[this._index++];
	}
	,freeAll: function() {
		this._index = 0;
	}
	,dispose: function() {
		this._pool = [];
	}
	,__class__: away3d.core.data.RenderableListItemPool
};
away3d.core.managers = {};
away3d.core.managers.AGALProgram3DCache = function(stage3DProxy) {
	this._stage3DProxy = stage3DProxy;
	this._program3Ds = new haxe.ds.StringMap();
	this._ids = new haxe.ds.StringMap();
	this._usages = [];
	this._keys = [];
};
$hxClasses["away3d.core.managers.AGALProgram3DCache"] = away3d.core.managers.AGALProgram3DCache;
away3d.core.managers.AGALProgram3DCache.__name__ = ["away3d","core","managers","AGALProgram3DCache"];
away3d.core.managers.AGALProgram3DCache._instances = null;
away3d.core.managers.AGALProgram3DCache.getInstance = function(stage3DProxy) {
	var index = stage3DProxy.get_stage3DIndex();
	if(away3d.core.managers.AGALProgram3DCache._instances == null) away3d.core.managers.AGALProgram3DCache._instances = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	if(away3d.core.managers.AGALProgram3DCache._instances[index] == null) {
		away3d.core.managers.AGALProgram3DCache._instances[index] = new away3d.core.managers.AGALProgram3DCache(stage3DProxy);
		stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed,false,0,true);
		stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed,false,0,true);
		stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed,false,0,true);
	}
	return away3d.core.managers.AGALProgram3DCache._instances[index];
};
away3d.core.managers.AGALProgram3DCache.getInstanceFromIndex = function(index) {
	if(away3d.core.managers.AGALProgram3DCache._instances[index] == null) throw new openfl.errors.Error("Instance not created yet!");
	return away3d.core.managers.AGALProgram3DCache._instances[index];
};
away3d.core.managers.AGALProgram3DCache.onContext3DDisposed = function(event) {
	var stage3DProxy;
	stage3DProxy = js.Boot.__cast(event.target , away3d.core.managers.Stage3DProxy);
	var index = stage3DProxy.get_stage3DIndex();
	away3d.core.managers.AGALProgram3DCache._instances[index].dispose();
	away3d.core.managers.AGALProgram3DCache._instances[index] = null;
	stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed);
	stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed);
	stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,away3d.core.managers.AGALProgram3DCache.onContext3DDisposed);
};
away3d.core.managers.AGALProgram3DCache.prototype = {
	dispose: function() {
		var keys = this._program3Ds.keys();
		while( keys.hasNext() ) {
			var key = keys.next();
			this.destroyProgram(key);
		}
		this._keys = null;
		this._program3Ds = null;
		this._usages = null;
	}
	,setProgram3D: function(pass,vertexCode,fragmentCode) {
		var stageIndex = this._stage3DProxy.get_stage3DIndex();
		var program;
		var key = vertexCode + "---" + fragmentCode;
		if(!this._program3Ds.exists(key)) {
			this._keys[away3d.core.managers.AGALProgram3DCache._currentId] = key;
			this._usages[away3d.core.managers.AGALProgram3DCache._currentId] = 0;
			this._ids.set(key,away3d.core.managers.AGALProgram3DCache._currentId);
			++away3d.core.managers.AGALProgram3DCache._currentId;
			program = this._stage3DProxy.get_context3D().createProgram();
			var vertexByteCode = openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexCode);
			var fragmentByteCode = openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentCode);
			program.upload(vertexByteCode,fragmentByteCode);
			this._program3Ds.set(key,program);
		}
		var oldId = pass._program3Dids[stageIndex];
		var newId = this._ids.get(key);
		if(oldId != newId) {
			if(oldId >= 0) this.freeProgram3D(oldId);
			this._usages[newId]++;
		}
		pass._program3Dids[stageIndex] = newId;
		pass._program3Ds[stageIndex] = this._program3Ds.get(key);
	}
	,freeProgram3D: function(programId) {
		this._usages[programId]--;
		if(this._usages[programId] == 0) this.destroyProgram(this._keys[programId]);
	}
	,destroyProgram: function(key) {
		this._program3Ds.get(key).dispose();
		this._program3Ds.remove(key);
		this._ids.set(key,-1);
	}
	,getKey: function(vertexCode,fragmentCode) {
		return vertexCode + "---" + fragmentCode;
	}
	,__class__: away3d.core.managers.AGALProgram3DCache
};
away3d.core.managers.AGALProgram3DCacheSingletonEnforcer = function() {
};
$hxClasses["away3d.core.managers.AGALProgram3DCacheSingletonEnforcer"] = away3d.core.managers.AGALProgram3DCacheSingletonEnforcer;
away3d.core.managers.AGALProgram3DCacheSingletonEnforcer.__name__ = ["away3d","core","managers","AGALProgram3DCacheSingletonEnforcer"];
away3d.core.managers.AGALProgram3DCacheSingletonEnforcer.prototype = {
	__class__: away3d.core.managers.AGALProgram3DCacheSingletonEnforcer
};
openfl.events.Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl.events.EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl.events.Event;
openfl.events.Event.__name__ = ["openfl","events","Event"];
openfl.events.Event.prototype = {
	clone: function() {
		var event = new openfl.events.Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) this.__preventDefault = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return "[Event type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,__class__: openfl.events.Event
};
away3d.events = {};
away3d.events.MouseEvent3D = function(type) {
	this._allowedToPropagate = true;
	openfl.events.Event.call(this,type,true,true);
};
$hxClasses["away3d.events.MouseEvent3D"] = away3d.events.MouseEvent3D;
away3d.events.MouseEvent3D.__name__ = ["away3d","events","MouseEvent3D"];
away3d.events.MouseEvent3D.__super__ = openfl.events.Event;
away3d.events.MouseEvent3D.prototype = $extend(openfl.events.Event.prototype,{
	stopPropagation: function() {
		openfl.events.Event.prototype.stopPropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent.stopPropagation();
	}
	,stopImmediatePropagation: function() {
		openfl.events.Event.prototype.stopImmediatePropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent.stopImmediatePropagation();
	}
	,clone: function() {
		var result = new away3d.events.MouseEvent3D(this.type);
		result.screenX = this.screenX;
		result.screenY = this.screenY;
		result.view = this.view;
		result.object = this.object;
		result.renderable = this.renderable;
		result.material = this.material;
		result.uv = this.uv;
		result.localPosition = this.localPosition;
		result.localNormal = this.localNormal;
		result.index = this.index;
		result.subGeometryIndex = this.subGeometryIndex;
		result.delta = this.delta;
		result.ctrlKey = this.ctrlKey;
		result.shiftKey = this.shiftKey;
		result._parentEvent = this;
		result._allowedToPropagate = this._allowedToPropagate;
		return result;
	}
	,get_scenePosition: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) return (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().transformVector(this.localPosition); else return this.localPosition;
	}
	,get_sceneNormal: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) {
			var sceneNormal = (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().deltaTransformVector(this.localNormal);
			sceneNormal.normalize();
			return sceneNormal;
		} else return this.localNormal;
	}
	,__class__: away3d.events.MouseEvent3D
	,__properties__: {get_sceneNormal:"get_sceneNormal",get_scenePosition:"get_scenePosition"}
});
openfl.events.EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : ["openfl","events","EventPhase"], __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl.events.EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl.events.EventPhase.CAPTURING_PHASE.toString = $estr;
openfl.events.EventPhase.CAPTURING_PHASE.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl.events.EventPhase.AT_TARGET.toString = $estr;
openfl.events.EventPhase.AT_TARGET.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl.events.EventPhase.BUBBLING_PHASE.toString = $estr;
openfl.events.EventPhase.BUBBLING_PHASE.__enum__ = openfl.events.EventPhase;
away3d.core.managers.Mouse3DManager = function() {
	this._updateDirty = true;
	this._nullVector = new openfl.geom.Vector3D();
	this._mouseMoveEvent = new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_MOVE);
	this._mousePicker = away3d.core.pick.PickingType.RAYCAST_FIRST_ENCOUNTERED;
	this._childDepth = 0;
	if(away3d.core.managers.Mouse3DManager._view3Ds == null) {
		away3d.core.managers.Mouse3DManager._view3Ds = new haxe.ds.ObjectMap();
		away3d.core.managers.Mouse3DManager._view3DLookup = new Array();
	}
};
$hxClasses["away3d.core.managers.Mouse3DManager"] = away3d.core.managers.Mouse3DManager;
away3d.core.managers.Mouse3DManager.__name__ = ["away3d","core","managers","Mouse3DManager"];
away3d.core.managers.Mouse3DManager._view3Ds = null;
away3d.core.managers.Mouse3DManager._view3DLookup = null;
away3d.core.managers.Mouse3DManager._collidingObject = null;
away3d.core.managers.Mouse3DManager._previousCollidingObject = null;
away3d.core.managers.Mouse3DManager._collidingViewObjects = null;
away3d.core.managers.Mouse3DManager.prototype = {
	updateCollider: function(view) {
		away3d.core.managers.Mouse3DManager._previousCollidingView = away3d.core.managers.Mouse3DManager._collidingView;
		if(view != null) {
			if(view.get_stage3DProxy().get_bufferClear()) away3d.core.managers.Mouse3DManager._collidingViewObjects = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),away3d.core.managers.Mouse3DManager._viewCount);
			if(!view.get_shareContext()) {
				if(view == this._activeView && (this._forceMouseMove || this._updateDirty)) away3d.core.managers.Mouse3DManager._collidingObject = this._mousePicker.getViewCollision(view.get_mouseX(),view.get_mouseY(),view);
			} else if(view.parent.getBounds(null).contains(view.get_mouseX() + view.get_x(),view.get_mouseY() + view.get_y())) {
				if(away3d.core.managers.Mouse3DManager._collidingViewObjects == null) away3d.core.managers.Mouse3DManager._collidingViewObjects = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),away3d.core.managers.Mouse3DManager._viewCount);
				away3d.core.managers.Mouse3DManager._collidingObject = away3d.core.managers.Mouse3DManager._collidingViewObjects[away3d.core.managers.Mouse3DManager._view3Ds.h[view.__id__]] = this._mousePicker.getViewCollision(view.get_mouseX(),view.get_mouseY(),view);
			}
		}
	}
	,fireMouseEvents: function() {
		var i = 0;
		var len;
		var event;
		var dispatcher;
		if(away3d.core.managers.Mouse3DManager._collidingViewObjects != null) {
			away3d.core.managers.Mouse3DManager._collidingObject = null;
			var distance = Math.POSITIVE_INFINITY;
			var view;
			var v = away3d.core.managers.Mouse3DManager._viewCount - 1;
			while(v >= 0) {
				view = away3d.core.managers.Mouse3DManager._view3DLookup[v];
				if(away3d.core.managers.Mouse3DManager._collidingViewObjects[v] != null && (view.get_layeredView() || away3d.core.managers.Mouse3DManager._collidingViewObjects[v].rayEntryDistance < distance)) {
					distance = away3d.core.managers.Mouse3DManager._collidingViewObjects[v].rayEntryDistance;
					away3d.core.managers.Mouse3DManager._collidingObject = away3d.core.managers.Mouse3DManager._collidingViewObjects[v];
					if(view.get_layeredView()) break;
				}
				v--;
			}
		}
		if(away3d.core.managers.Mouse3DManager._collidingObject != away3d.core.managers.Mouse3DManager._previousCollidingObject) {
			if(away3d.core.managers.Mouse3DManager._previousCollidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOut,this._mouseMoveEvent,away3d.core.managers.Mouse3DManager._previousCollidingObject);
			if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOver,this._mouseMoveEvent,away3d.core.managers.Mouse3DManager._collidingObject);
		}
		if(this._forceMouseMove && away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseMove,this._mouseMoveEvent,away3d.core.managers.Mouse3DManager._collidingObject);
		len = away3d.core.managers.Mouse3DManager._queuedEvents.length;
		i = 0;
		while(i < len) {
			event = away3d.core.managers.Mouse3DManager._queuedEvents[i];
			dispatcher = event.object;
			while(dispatcher != null && !dispatcher._ancestorsAllowMouseEnabled) dispatcher = dispatcher.get_parent();
			if(dispatcher != null) dispatcher.dispatchEvent(event);
			++i;
		}
		away3d.core.managers.Mouse3DManager._queuedEvents = [];
		this._updateDirty = false;
		away3d.core.managers.Mouse3DManager._previousCollidingObject = away3d.core.managers.Mouse3DManager._collidingObject;
	}
	,addViewLayer: function(view) {
		var stg = view.stage;
		if(view.get_stage3DProxy().get_mouse3DManager() == null) view.get_stage3DProxy().set_mouse3DManager(this);
		if(!this.hasKey(view)) away3d.core.managers.Mouse3DManager._view3Ds.set(view,0);
		this._childDepth = 0;
		this.traverseDisplayObjects(stg);
		away3d.core.managers.Mouse3DManager._viewCount = this._childDepth;
	}
	,enableMouseListeners: function(view) {
		view.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.onClick));
		view.addEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.onDoubleClick));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
		view.addEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	}
	,disableMouseListeners: function(view) {
		view.removeEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.onClick));
		view.removeEventListener(openfl.events.MouseEvent.DOUBLE_CLICK,$bind(this,this.onDoubleClick));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
		view.removeEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	}
	,dispose: function() {
		this._mousePicker.dispose();
	}
	,queueDispatch: function(event,sourceEvent,collider) {
		event.ctrlKey = sourceEvent.ctrlKey;
		event.altKey = sourceEvent.altKey;
		event.shiftKey = sourceEvent.shiftKey;
		event.delta = sourceEvent.delta;
		event.screenX = sourceEvent.localX;
		event.screenY = sourceEvent.localY;
		if(collider == null) collider = away3d.core.managers.Mouse3DManager._collidingObject;
		if(collider != null) {
			event.object = collider.entity;
			event.renderable = collider.renderable;
			event.uv = collider.uv;
			if(collider.localPosition != null) event.localPosition = collider.localPosition.clone(); else event.localPosition = null;
			if(collider.localNormal != null) event.localNormal = collider.localNormal.clone(); else event.localNormal = null;
			event.index = collider.index;
			event.subGeometryIndex = collider.subGeometryIndex;
		} else {
			event.uv = null;
			event.object = null;
			event.localPosition = this._nullVector;
			event.localNormal = this._nullVector;
			event.index = 0;
			event.subGeometryIndex = 0;
		}
		away3d.core.managers.Mouse3DManager._queuedEvents.push(event);
	}
	,reThrowEvent: function(event) {
		if(this._activeView == null || this._activeView != null && !this._activeView.get_shareContext()) return;
		var keys = away3d.core.managers.Mouse3DManager._view3Ds.keys();
		while( keys.hasNext() ) {
			var v = keys.next();
			if(v != this._activeView && away3d.core.managers.Mouse3DManager._view3Ds.h[v.__id__] < away3d.core.managers.Mouse3DManager._view3Ds.h[this._activeView.__id__]) v.dispatchEvent(event);
		}
	}
	,hasKey: function(view) {
		var keys = away3d.core.managers.Mouse3DManager._view3Ds.keys();
		while( keys.hasNext() ) {
			var v = keys.next();
			if(v == view) return true;
		}
		return false;
	}
	,traverseDisplayObjects: function(container) {
	}
	,onMouseMove: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseMove,this._mouseMoveEvent = event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseOut: function(event) {
		this._activeView = null;
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOut,event,away3d.core.managers.Mouse3DManager._collidingObject);
		this._updateDirty = true;
	}
	,onMouseOver: function(event) {
		this._activeView = js.Boot.__cast(event.currentTarget , away3d.containers.View3D);
		if(away3d.core.managers.Mouse3DManager._collidingObject != null && away3d.core.managers.Mouse3DManager._previousCollidingObject != away3d.core.managers.Mouse3DManager._collidingObject) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseOver,event,away3d.core.managers.Mouse3DManager._collidingObject); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onClick: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseClick,event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onDoubleClick: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseDoubleClick,event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseDown: function(event) {
		this._activeView = js.Boot.__cast(event.currentTarget , away3d.containers.View3D);
		this.updateCollider(this._activeView);
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseDown,event);
			away3d.core.managers.Mouse3DManager._previousCollidingObject = away3d.core.managers.Mouse3DManager._collidingObject;
		} else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseUp: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseUp,event);
			away3d.core.managers.Mouse3DManager._previousCollidingObject = away3d.core.managers.Mouse3DManager._collidingObject;
		} else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,onMouseWheel: function(event) {
		if(away3d.core.managers.Mouse3DManager._collidingObject != null) this.queueDispatch(away3d.core.managers.Mouse3DManager._mouseWheel,event); else this.reThrowEvent(event);
		this._updateDirty = true;
	}
	,get_forceMouseMove: function() {
		return this._forceMouseMove;
	}
	,set_forceMouseMove: function(value) {
		this._forceMouseMove = value;
		return value;
	}
	,get_mousePicker: function() {
		return this._mousePicker;
	}
	,set_mousePicker: function(value) {
		this._mousePicker = value;
		return value;
	}
	,__class__: away3d.core.managers.Mouse3DManager
	,__properties__: {set_mousePicker:"set_mousePicker",get_mousePicker:"get_mousePicker",set_forceMouseMove:"set_forceMouseMove",get_forceMouseMove:"get_forceMouseMove"}
};
away3d.core.managers.RTTBufferManager = function(se,stage3DProxy) {
	this._viewWidth = -1;
	this._viewHeight = -1;
	this._textureWidth = -1;
	this._textureHeight = -1;
	this._buffersInvalid = true;
	if(se == null) throw new openfl.errors.Error("No cheating the multiton!");
	this._renderToTextureRect = new openfl.geom.Rectangle();
	this._stage3DProxy = stage3DProxy;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.core.managers.RTTBufferManager"] = away3d.core.managers.RTTBufferManager;
away3d.core.managers.RTTBufferManager.__name__ = ["away3d","core","managers","RTTBufferManager"];
away3d.core.managers.RTTBufferManager._instances = null;
away3d.core.managers.RTTBufferManager.getInstance = function(stage3DProxy) {
	if(stage3DProxy == null) throw new openfl.errors.Error("stage3DProxy key cannot be null!");
	if(away3d.core.managers.RTTBufferManager._instances == null) away3d.core.managers.RTTBufferManager._instances = new haxe.ds.ObjectMap();
	var rttb = away3d.core.managers.RTTBufferManager._instances.h[stage3DProxy.__id__];
	if(rttb == null) {
		rttb = new away3d.core.managers.RTTBufferManager(new away3d.core.managers.SingletonEnforcer(),stage3DProxy);
		away3d.core.managers.RTTBufferManager._instances.set(stage3DProxy,rttb);
	}
	return rttb;
};
away3d.core.managers.RTTBufferManager.__super__ = openfl.events.EventDispatcher;
away3d.core.managers.RTTBufferManager.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_textureRatioX: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._textureRatioX;
	}
	,get_textureRatioY: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._textureRatioY;
	}
	,get_viewWidth: function() {
		return this._viewWidth;
	}
	,set_viewWidth: function(value) {
		if(value == this._viewWidth) return value;
		this._viewWidth = value;
		this._buffersInvalid = true;
		this._textureWidth = away3d.tools.utils.TextureUtils.getBestPowerOf2(this._viewWidth);
		if(this._textureWidth > this._viewWidth) {
			this._renderToTextureRect.x = (this._textureWidth - this._viewWidth) * .5 | 0;
			this._renderToTextureRect.width = this._viewWidth;
		} else {
			this._renderToTextureRect.x = 0;
			this._renderToTextureRect.width = this._textureWidth;
		}
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE));
		return value;
	}
	,get_viewHeight: function() {
		return this._viewHeight;
	}
	,set_viewHeight: function(value) {
		if(value == this._viewHeight) return value;
		this._viewHeight = value;
		this._buffersInvalid = true;
		this._textureHeight = away3d.tools.utils.TextureUtils.getBestPowerOf2(this._viewHeight);
		if(this._textureHeight > this._viewHeight) {
			this._renderToTextureRect.y = (this._textureHeight - this._viewHeight) * .5 | 0;
			this._renderToTextureRect.height = this._viewHeight;
		} else {
			this._renderToTextureRect.y = 0;
			this._renderToTextureRect.height = this._textureHeight;
		}
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE));
		return value;
	}
	,get_renderToTextureVertexBuffer: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._renderToTextureVertexBuffer;
	}
	,get_renderToScreenVertexBuffer: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._renderToScreenVertexBuffer;
	}
	,get_indexBuffer: function() {
		return this._indexBuffer;
	}
	,get_renderToTextureRect: function() {
		if(this._buffersInvalid) this.updateRTTBuffers();
		return this._renderToTextureRect;
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,dispose: function() {
		away3d.core.managers.RTTBufferManager._instances.remove(this._stage3DProxy);
		if(this._indexBuffer != null) {
			this._indexBuffer.dispose();
			this._renderToScreenVertexBuffer.dispose();
			this._renderToTextureVertexBuffer.dispose();
			this._renderToScreenVertexBuffer = null;
			this._renderToTextureVertexBuffer = null;
			this._indexBuffer = null;
		}
	}
	,updateRTTBuffers: function() {
		var context = this._stage3DProxy.get_context3D();
		var textureVerts;
		var screenVerts;
		var x;
		var y;
		if(this._renderToTextureVertexBuffer == null) this._renderToTextureVertexBuffer = context.createVertexBuffer(4,5);
		if(this._renderToScreenVertexBuffer == null) this._renderToScreenVertexBuffer = context.createVertexBuffer(4,5);
		if(this._indexBuffer == null) {
			this._indexBuffer = context.createIndexBuffer(6);
			var tmp_data;
			var a = [2,1,0,3,2,0];
			var vectorData = new openfl.VectorData();
			vectorData.length = a.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(a.length);
			vec = this1;
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = a[i];
			}
			vectorData.data = vec;
			tmp_data = vectorData;
			this._indexBuffer.uploadFromVector(tmp_data,0,6);
		}
		this._textureRatioX = x = Math.min(this._viewWidth / this._textureWidth,1);
		this._textureRatioY = y = Math.min(this._viewHeight / this._textureHeight,1);
		var u1 = (1 - x) * .5;
		var u2 = (x + 1) * .5;
		var v1 = (y + 1) * .5;
		var v2 = (1 - y) * .5;
		var a1 = [-x,-y,u1,v1,0,x,-y,u2,v1,1,x,y,u2,v2,2,-x,y,u1,v2,3];
		var vectorData1 = new openfl.VectorData();
		vectorData1.length = a1.length;
		vectorData1.fixed = true;
		var vec1;
		var this2;
		this2 = new Array(a1.length);
		vec1 = this2;
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vec1[i1] = a1[i1];
		}
		vectorData1.data = vec1;
		textureVerts = vectorData1;
		var a2 = [-1,-1,u1,v1,0,1,-1,u2,v1,1,1,1,u2,v2,2,-1,1,u1,v2,3];
		var vectorData2 = new openfl.VectorData();
		vectorData2.length = a2.length;
		vectorData2.fixed = true;
		var vec2;
		var this3;
		this3 = new Array(a2.length);
		vec2 = this3;
		var _g12 = 0;
		var _g3 = a2.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			vec2[i2] = a2[i2];
		}
		vectorData2.data = vec2;
		screenVerts = vectorData2;
		this._renderToTextureVertexBuffer.uploadFromVector(textureVerts,0,4);
		this._renderToScreenVertexBuffer.uploadFromVector(screenVerts,0,4);
		this._buffersInvalid = false;
	}
	,__class__: away3d.core.managers.RTTBufferManager
	,__properties__: {get_textureHeight:"get_textureHeight",get_textureWidth:"get_textureWidth",get_renderToTextureRect:"get_renderToTextureRect",get_indexBuffer:"get_indexBuffer",get_renderToScreenVertexBuffer:"get_renderToScreenVertexBuffer",get_renderToTextureVertexBuffer:"get_renderToTextureVertexBuffer",set_viewHeight:"set_viewHeight",get_viewHeight:"get_viewHeight",set_viewWidth:"set_viewWidth",get_viewWidth:"get_viewWidth",get_textureRatioY:"get_textureRatioY",get_textureRatioX:"get_textureRatioX"}
});
away3d.core.managers.SingletonEnforcer = function() {
};
$hxClasses["away3d.core.managers.SingletonEnforcer"] = away3d.core.managers.SingletonEnforcer;
away3d.core.managers.SingletonEnforcer.__name__ = ["away3d","core","managers","SingletonEnforcer"];
away3d.core.managers.SingletonEnforcer.prototype = {
	__class__: away3d.core.managers.SingletonEnforcer
};
away3d.core.managers.Stage3DManager = function(stage,Stage3DManagerSingletonEnforcer) {
	if(Stage3DManagerSingletonEnforcer == null) throw new openfl.errors.Error("This class is a multiton and cannot be instantiated manually. Use Stage3DManager.getInstance instead.");
	this._stage = stage;
	this.stage3DsLength = 1;
	if(away3d.core.managers.Stage3DManager._stageProxies == null) away3d.core.managers.Stage3DManager._stageProxies = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),this.stage3DsLength);
};
$hxClasses["away3d.core.managers.Stage3DManager"] = away3d.core.managers.Stage3DManager;
away3d.core.managers.Stage3DManager.__name__ = ["away3d","core","managers","Stage3DManager"];
away3d.core.managers.Stage3DManager._instances = null;
away3d.core.managers.Stage3DManager._stageProxies = null;
away3d.core.managers.Stage3DManager.getInstance = function(stage) {
	if(away3d.core.managers.Stage3DManager._instances == null) away3d.core.managers.Stage3DManager._instances = new haxe.ds.ObjectMap();
	var manager = away3d.core.managers.Stage3DManager._instances.h[stage.__id__];
	if(manager == null) {
		manager = new away3d.core.managers.Stage3DManager(stage,new away3d.core.managers.Stage3DManagerSingletonEnforcer());
		away3d.core.managers.Stage3DManager._instances.set(stage,manager);
	}
	return manager;
};
away3d.core.managers.Stage3DManager.prototype = {
	getStage3DProxy: function(index,forceSoftware,profile) {
		if(profile == null) profile = "baseline";
		if(forceSoftware == null) forceSoftware = false;
		if(away3d.core.managers.Stage3DManager._stageProxies.data[index] == null) {
			away3d.core.managers.Stage3DManager._numStageProxies++;
			var this1 = away3d.core.managers.Stage3DManager._stageProxies;
			var value = new away3d.core.managers.Stage3DProxy(index,this._stage.stage3Ds.data[index],this,forceSoftware,profile);
			if(!this1.fixed) {
				if(index >= this1.length) this1.length = index + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[index] = value;
		}
		return away3d.core.managers.Stage3DManager._stageProxies.data[index];
	}
	,removeStage3DProxy: function(stage3DProxy) {
		away3d.core.managers.Stage3DManager._numStageProxies--;
		var this1 = away3d.core.managers.Stage3DManager._stageProxies;
		var key = stage3DProxy.get_stage3DIndex();
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = null;
	}
	,getFreeStage3DProxy: function(forceSoftware,profile) {
		if(profile == null) profile = "baseline";
		if(forceSoftware == null) forceSoftware = false;
		var i = 0;
		var len = this.stage3DsLength;
		while(i < len) {
			if(away3d.core.managers.Stage3DManager._stageProxies.data[i] == null) {
				this.getStage3DProxy(i,forceSoftware,profile);
				away3d.core.managers.Stage3DManager._stageProxies.data[i].set_width(this._stage.stageWidth);
				away3d.core.managers.Stage3DManager._stageProxies.data[i].set_height(this._stage.stageHeight);
				return away3d.core.managers.Stage3DManager._stageProxies.data[i];
			}
			++i;
		}
		throw new openfl.errors.Error("Too many Stage3D instances used!");
		return null;
	}
	,get_hasFreeStage3DProxy: function() {
		if((away3d.core.managers.Stage3DManager._numStageProxies | 0) < away3d.core.managers.Stage3DManager._stageProxies.length) return true; else return false;
	}
	,get_numProxySlotsFree: function() {
		return away3d.core.managers.Stage3DManager._stageProxies.length - away3d.core.managers.Stage3DManager._numStageProxies;
	}
	,get_numProxySlotsUsed: function() {
		return away3d.core.managers.Stage3DManager._numStageProxies;
	}
	,get_numProxySlotsTotal: function() {
		return away3d.core.managers.Stage3DManager._stageProxies.length;
	}
	,__class__: away3d.core.managers.Stage3DManager
	,__properties__: {get_numProxySlotsTotal:"get_numProxySlotsTotal",get_numProxySlotsUsed:"get_numProxySlotsUsed",get_numProxySlotsFree:"get_numProxySlotsFree",get_hasFreeStage3DProxy:"get_hasFreeStage3DProxy"}
};
away3d.core.managers.Stage3DManagerSingletonEnforcer = function() {
};
$hxClasses["away3d.core.managers.Stage3DManagerSingletonEnforcer"] = away3d.core.managers.Stage3DManagerSingletonEnforcer;
away3d.core.managers.Stage3DManagerSingletonEnforcer.__name__ = ["away3d","core","managers","Stage3DManagerSingletonEnforcer"];
away3d.core.managers.Stage3DManagerSingletonEnforcer.prototype = {
	__class__: away3d.core.managers.Stage3DManagerSingletonEnforcer
};
openfl.display.Shape = function() {
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl.display.Shape;
openfl.display.Shape.__name__ = ["openfl","display","Shape"];
openfl.display.Shape.__super__ = openfl.display.DisplayObject;
openfl.display.Shape.prototype = $extend(openfl.display.DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl.display.Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl.display.Shape
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
openfl.geom = {};
openfl.geom.Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
	this.__array = new Float32Array([a,b,c,d,tx,ty,0,0,1]);
};
$hxClasses["openfl.geom.Matrix"] = openfl.geom.Matrix;
openfl.geom.Matrix.__name__ = ["openfl","geom","Matrix"];
openfl.geom.Matrix.prototype = {
	clone: function() {
		return new openfl.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl.geom.Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new openfl.geom.Matrix();
		result.a = this.a * m.a + this.b * m.c;
		result.b = this.a * m.b + this.b * m.d;
		result.c = this.c * m.a + this.d * m.c;
		result.d = this.c * m.b + this.d * m.d;
		result.tx = this.tx * m.a + this.ty * m.c + m.tx;
		result.ty = this.tx * m.b + this.ty * m.d + m.ty;
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl.geom.Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new openfl.geom.Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		return new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: openfl.geom.Matrix
};
openfl.geom.ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl.geom.ColorTransform;
openfl.geom.ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl.geom.ColorTransform.prototype = {
	concat: function(second) {
		this.redMultiplier += second.redMultiplier;
		this.greenMultiplier += second.greenMultiplier;
		this.blueMultiplier += second.blueMultiplier;
		this.alphaMultiplier += second.alphaMultiplier;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__clone: function() {
		return new openfl.geom.ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return new Float32Array([this.redMultiplier,0,0,0,this.redOffset / 255,0,this.greenMultiplier,0,0,this.greenOffset / 255,0,0,this.blueMultiplier,0,this.blueOffset / 255,0,0,0,this.alphaMultiplier,this.alphaOffset / 255]);
	}
	,__class__: openfl.geom.ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
away3d.core.managers.Stage3DProxy = function(stage3DIndex,stage3D,stage3DManager,forceSoftware,profile) {
	if(profile == null) profile = "baseline";
	if(forceSoftware == null) forceSoftware = false;
	this._stage3DIndex = -1;
	this._stage3DIndex = stage3DIndex;
	this._stage3D = stage3D;
	this._stage3D.x = 0;
	this._stage3D.y = 0;
	this._stage3D.visible = true;
	this._stage3DManager = stage3DManager;
	this._viewPort = new openfl.geom.Rectangle();
	this._enableDepthAndStencil = true;
	openfl.events.EventDispatcher.call(this);
	this._stage3D.addEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContext3DUpdate),false,1000,false);
	this.forceSoftware = forceSoftware;
	this._profile = profile;
	this.requestContext(forceSoftware,this._profile);
};
$hxClasses["away3d.core.managers.Stage3DProxy"] = away3d.core.managers.Stage3DProxy;
away3d.core.managers.Stage3DProxy.__name__ = ["away3d","core","managers","Stage3DProxy"];
away3d.core.managers.Stage3DProxy.__super__ = openfl.events.EventDispatcher;
away3d.core.managers.Stage3DProxy.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	notifyViewportUpdated: function() {
		if(this._viewportDirty) return;
		this._viewportDirty = true;
		if(!this.hasEventListener(away3d.events.Stage3DEvent.VIEWPORT_UPDATED)) return;
		this._viewportUpdated = new away3d.events.Stage3DEvent(away3d.events.Stage3DEvent.VIEWPORT_UPDATED);
		this.dispatchEvent(this._viewportUpdated);
	}
	,notifyEnterFrame: function() {
		if(!this.hasEventListener(openfl.events.Event.ENTER_FRAME)) return;
		if(this._enterFrame == null) this._enterFrame = new openfl.events.Event(openfl.events.Event.ENTER_FRAME);
		this.dispatchEvent(this._enterFrame);
	}
	,get_profile: function() {
		return this._profile;
	}
	,dispose: function() {
		this._stage3DManager.removeStage3DProxy(this);
		this._stage3D.removeEventListener(openfl.events.Event.CONTEXT3D_CREATE,$bind(this,this.onContext3DUpdate));
		this.freeContext3D();
		this._stage3D = null;
		this._stage3DManager = null;
		this._stage3DIndex = -1;
	}
	,setRenderCallback: function(func) {
		if(this._context3D != null) {
			if(this._callbackMethod != null) this._context3D.removeRenderMethod(func);
			if(func != null) this._context3D.setRenderMethod(func);
		}
		this._callbackMethod = func;
	}
	,configureBackBuffer: function(backBufferWidth,backBufferHeight,antiAlias,enableDepthAndStencil) {
		var oldWidth = this._backBufferWidth;
		var oldHeight = this._backBufferHeight;
		this._viewPort.width = this._backBufferWidth = backBufferWidth;
		this._viewPort.height = this._backBufferHeight = backBufferHeight;
		if(oldWidth != this._backBufferWidth || oldHeight != this._backBufferHeight) this.notifyViewportUpdated();
		this._antiAlias = antiAlias;
		this._enableDepthAndStencil = enableDepthAndStencil;
		if(this._context3D != null) this._context3D.configureBackBuffer(backBufferWidth,backBufferHeight,antiAlias,enableDepthAndStencil);
	}
	,get_enableDepthAndStencil: function() {
		return this._enableDepthAndStencil;
	}
	,set_enableDepthAndStencil: function(enableDepthAndStencil) {
		this._enableDepthAndStencil = enableDepthAndStencil;
		this._backBufferDirty = true;
		return enableDepthAndStencil;
	}
	,get_renderTarget: function() {
		return this._renderTarget;
	}
	,get_renderSurfaceSelector: function() {
		return this._renderSurfaceSelector;
	}
	,setRenderTarget: function(target,enableDepthAndStencil,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this._renderTarget == target && surfaceSelector == this._renderSurfaceSelector && this._enableDepthAndStencil == enableDepthAndStencil) return;
		this._renderTarget = target;
		this._renderSurfaceSelector = surfaceSelector;
		this._enableDepthAndStencil = enableDepthAndStencil;
		if(target != null) this._context3D.setRenderToTexture(target,enableDepthAndStencil,this._antiAlias,surfaceSelector); else {
			this._context3D.setRenderToBackBuffer();
			this._context3D.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
		}
	}
	,clear: function() {
		if(this._context3D == null) return;
		if(this._backBufferDirty) {
			this.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
			this._backBufferDirty = false;
		}
		this._context3D.clear((this._color >> 16 & 255) / 255.0,(this._color >> 8 & 255) / 255.0,(this._color & 255) / 255.0,(this._color >> 24 & 255) / 255.0);
		this._bufferClear = true;
	}
	,present: function() {
		if(this._context3D == null) return;
		this._context3D.present();
		this._activeProgram3D = null;
		if(this._mouse3DManager != null) this._mouse3DManager.fireMouseEvents();
	}
	,get_scissorRect: function() {
		return this._scissorRect;
	}
	,set_scissorRect: function(value) {
		this._scissorRect = value;
		this._context3D.setScissorRectangle(this._scissorRect);
		return value;
	}
	,get_stage3DIndex: function() {
		return this._stage3DIndex;
	}
	,get_stage3D: function() {
		return this._stage3D;
	}
	,get_context3D: function() {
		return this._context3D;
	}
	,get_driverInfo: function() {
		if(this._context3D != null) return this._context3D.driverInfo; else return null;
	}
	,get_usesSoftwareRendering: function() {
		return this._usesSoftwareRendering;
	}
	,get_x: function() {
		return this._stage3D.x;
	}
	,set_x: function(value) {
		if(this._viewPort.x == value) return value;
		this._stage3D.x = this._viewPort.x = value;
		this.notifyViewportUpdated();
		return value;
	}
	,get_y: function() {
		return this._stage3D.y;
	}
	,set_y: function(value) {
		if(this._viewPort.y == value) return value;
		this._stage3D.y = this._viewPort.y = value;
		this.notifyViewportUpdated();
		return value;
	}
	,get_width: function() {
		return this._backBufferWidth;
	}
	,set_width: function(width) {
		if(this._viewPort.width == width) return width;
		this._viewPort.width = this._backBufferWidth = width;
		this._backBufferDirty = true;
		this.notifyViewportUpdated();
		return width;
	}
	,get_height: function() {
		return this._backBufferHeight;
	}
	,set_height: function(height) {
		if(this._viewPort.height == height) return height;
		this._viewPort.height = this._backBufferHeight = height;
		this._backBufferDirty = true;
		this.notifyViewportUpdated();
		return height;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(antiAlias) {
		this._antiAlias = antiAlias;
		this._backBufferDirty = true;
		return antiAlias;
	}
	,get_viewPort: function() {
		this._viewportDirty = false;
		return this._viewPort;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(color) {
		this._color = color;
		return color;
	}
	,get_visible: function() {
		return this._stage3D.visible;
	}
	,set_visible: function(value) {
		this._stage3D.visible = value;
		return value;
	}
	,get_bufferClear: function() {
		return this._bufferClear;
	}
	,set_bufferClear: function(newBufferClear) {
		this._bufferClear = newBufferClear;
		return newBufferClear;
	}
	,get_mouse3DManager: function() {
		return this._mouse3DManager;
	}
	,set_mouse3DManager: function(value) {
		this._mouse3DManager = value;
		return value;
	}
	,get_touch3DManager: function() {
		return this._touch3DManager;
	}
	,set_touch3DManager: function(value) {
		this._touch3DManager = value;
		return value;
	}
	,freeContext3D: function() {
		if(this._context3D != null) {
			this._context3D.dispose();
			this.dispatchEvent(new away3d.events.Stage3DEvent(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED));
		}
		this._context3D = null;
	}
	,onContext3DUpdate: function(event) {
		if(this._stage3D.context3D != null) {
			var hadContext = this._context3D != null;
			this._context3D = this._stage3D.context3D;
			this._context3D.enableErrorChecking = away3d.debug.Debug.active;
			if(this._backBufferWidth > 0 && this._backBufferHeight > 0) this._context3D.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
			this.setRenderCallback(this._callbackMethod);
			this.dispatchEvent(new away3d.events.Stage3DEvent(hadContext?away3d.events.Stage3DEvent.CONTEXT3D_RECREATED:away3d.events.Stage3DEvent.CONTEXT3D_CREATED));
		} else throw new openfl.errors.Error("Rendering context lost!");
	}
	,requestContext: function(forceSoftware,profile) {
		if(profile == null) profile = "baseline";
		if(forceSoftware == null) forceSoftware = false;
		if(!this._usesSoftwareRendering) this._usesSoftwareRendering = forceSoftware;
		this._profile = profile;
		var renderMode;
		if(forceSoftware) renderMode = openfl.display3D.Context3DRenderMode.SOFTWARE; else renderMode = openfl.display3D.Context3DRenderMode.AUTO;
		this._stage3D.requestContext3D(Std.string(renderMode));
		this._contextRequested = true;
	}
	,onEnterFrame: function(event) {
		if(this._context3D == null) return;
		this.clear();
		this.notifyEnterFrame();
		this.present();
	}
	,recoverFromDisposal: function() {
		if(this._context3D == null) return false;
		if(this._context3D.driverInfo == "Disposed") {
			this._context3D = null;
			this.dispatchEvent(new away3d.events.Stage3DEvent(away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED));
			return false;
		}
		return true;
	}
	,clearDepthBuffer: function() {
		if(this._context3D == null) return;
		this._context3D.clear(0,0,0,1,1,0,256);
	}
	,__class__: away3d.core.managers.Stage3DProxy
	,__properties__: {set_touch3DManager:"set_touch3DManager",get_touch3DManager:"get_touch3DManager",set_mouse3DManager:"set_mouse3DManager",get_mouse3DManager:"get_mouse3DManager",set_bufferClear:"set_bufferClear",get_bufferClear:"get_bufferClear",set_visible:"set_visible",get_visible:"get_visible",set_color:"set_color",get_color:"get_color",get_viewPort:"get_viewPort",set_antiAlias:"set_antiAlias",get_antiAlias:"get_antiAlias",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",get_usesSoftwareRendering:"get_usesSoftwareRendering",get_driverInfo:"get_driverInfo",get_context3D:"get_context3D",get_stage3D:"get_stage3D",get_stage3DIndex:"get_stage3DIndex",set_scissorRect:"set_scissorRect",get_scissorRect:"get_scissorRect",get_renderSurfaceSelector:"get_renderSurfaceSelector",get_renderTarget:"get_renderTarget",set_enableDepthAndStencil:"set_enableDepthAndStencil",get_enableDepthAndStencil:"get_enableDepthAndStencil",get_profile:"get_profile"}
});
var haxe = {};
haxe.ds = {};
haxe.ds.IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe.ds.IntMap
};
openfl.VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl.VectorData;
openfl.VectorData.__name__ = ["openfl","VectorData"];
openfl.VectorData.prototype = {
	__class__: openfl.VectorData
};
away3d.core.managers.Touch3DManager = function() {
	this._updateDirty = true;
	this._nullVector = new openfl.geom.Vector3D();
	this._touchMoveEvent = new openfl.events.TouchEvent("touchMove");
	this._touchPicker = away3d.core.pick.PickingType.RAYCAST_FIRST_ENCOUNTERED;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._touchPoints = this1;
	this._touchPointFromId = new haxe.ds.IntMap();
};
$hxClasses["away3d.core.managers.Touch3DManager"] = away3d.core.managers.Touch3DManager;
away3d.core.managers.Touch3DManager.__name__ = ["away3d","core","managers","Touch3DManager"];
away3d.core.managers.Touch3DManager.prototype = {
	updateCollider: function() {
		if(this._forceTouchMove || this._updateDirty) {
			var _g1 = 0;
			var _g = this._numTouchPoints;
			while(_g1 < _g) {
				var i = _g1++;
				this._touchPoint = this._touchPoints.data[i];
				this._collidingObject = this._touchPicker.getViewCollision(this._touchPoint.x,this._touchPoint.y,this._view);
				away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.set(this._touchPoint.id,this._collidingObject);
			}
		}
	}
	,fireTouchEvents: function() {
		var i;
		var len;
		var event;
		var dispatcher;
		var _g1 = 0;
		var _g = this._numTouchPoints;
		while(_g1 < _g) {
			var i1 = _g1++;
			this._touchPoint = this._touchPoints.data[i1];
			this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(this._touchPoint.id);
			this._previousCollidingObject = away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId.get(this._touchPoint.id);
			if(this._collidingObject != this._previousCollidingObject) {
				if(this._previousCollidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_OUT,this._touchMoveEvent,this._previousCollidingObject,this._touchPoint);
				if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_OVER,this._touchMoveEvent,this._collidingObject,this._touchPoint);
			}
			if(this._forceTouchMove && this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_MOVE,this._touchMoveEvent,this._collidingObject,this._touchPoint);
		}
		len = away3d.core.managers.Touch3DManager._queuedEvents.length;
		var _g2 = 0;
		while(_g2 < len) {
			var i2 = _g2++;
			event = away3d.core.managers.Touch3DManager._queuedEvents.data[i2];
			dispatcher = event.object;
			while(dispatcher != null && !dispatcher._ancestorsAllowMouseEnabled) dispatcher = dispatcher.get_parent();
			if(dispatcher != null) dispatcher.dispatchEvent(event);
		}
		var value = [];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g11 = 0;
		var _g3 = value.length;
		while(_g11 < _g3) {
			var i3 = _g11++;
			vec[i3] = value[i3];
		}
		vectorData.data = vec;
		away3d.core.managers.Touch3DManager._queuedEvents = vectorData;
		this._updateDirty = false;
		var _g12 = 0;
		var _g4 = this._numTouchPoints;
		while(_g12 < _g4) {
			var i4 = _g12++;
			this._touchPoint = this._touchPoints.data[i4];
			away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId.set(this._touchPoint.id,away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(this._touchPoint.id));
		}
	}
	,enableTouchListeners: function(view) {
		view.addEventListener("touchBegin",$bind(this,this.onTouchBegin));
		view.addEventListener("touchMove",$bind(this,this.onTouchMove));
		view.addEventListener("touchEnd",$bind(this,this.onTouchEnd));
	}
	,disableTouchListeners: function(view) {
		view.removeEventListener("touchBegin",$bind(this,this.onTouchBegin));
		view.removeEventListener("touchMove",$bind(this,this.onTouchMove));
		view.removeEventListener("touchEnd",$bind(this,this.onTouchEnd));
	}
	,dispose: function() {
		this._touchPicker.dispose();
		this._touchPoints = null;
		this._touchPointFromId = null;
		away3d.core.managers.Touch3DManager._collidingObjectFromTouchId = null;
		away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId = null;
	}
	,queueDispatch: function(emitType,sourceEvent,collider,touch) {
		var event = new away3d.events.TouchEvent3D(emitType);
		event.ctrlKey = sourceEvent.ctrlKey;
		event.altKey = sourceEvent.altKey;
		event.shiftKey = sourceEvent.shiftKey;
		event.screenX = touch.x;
		event.screenY = touch.y;
		event.touchPointID = touch.id;
		if(collider != null) {
			event.object = collider.entity;
			event.renderable = collider.renderable;
			event.uv = collider.uv;
			if(collider.localPosition != null) event.localPosition = collider.localPosition.clone(); else event.localPosition = null;
			if(collider.localNormal != null) event.localNormal = collider.localNormal.clone(); else event.localNormal = null;
			event.index = collider.index;
			event.subGeometryIndex = collider.subGeometryIndex;
		} else {
			event.uv = null;
			event.object = null;
			event.localPosition = this._nullVector;
			event.localNormal = this._nullVector;
			event.index = 0;
			event.subGeometryIndex = 0;
		}
		var this1 = away3d.core.managers.Touch3DManager._queuedEvents;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = event;
		}
		this1.length;
	}
	,onTouchBegin: function(event) {
		var touch = new away3d.core.managers.TouchPoint();
		touch.id = event.touchPointID;
		touch.x = event.stageX;
		touch.y = event.stageY;
		this._numTouchPoints++;
		var this1 = this._touchPoints;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = touch;
		}
		this1.length;
		this._touchPointFromId.set(touch.id,touch);
		this.updateCollider();
		this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(touch.id);
		if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_BEGIN,event,this._collidingObject,touch);
		this._updateDirty = true;
	}
	,onTouchMove: function(event) {
		var touch = this._touchPointFromId.get(event.touchPointID);
		touch.x = event.stageX;
		touch.y = event.stageY;
		this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(touch.id);
		if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_MOVE,this._touchMoveEvent = event,this._collidingObject,touch);
		this._updateDirty = true;
	}
	,onTouchEnd: function(event) {
		var touch = this._touchPointFromId.get(event.touchPointID);
		this._collidingObject = away3d.core.managers.Touch3DManager._collidingObjectFromTouchId.get(touch.id);
		if(this._collidingObject != null) this.queueDispatch(away3d.events.TouchEvent3D.TOUCH_END,event,this._collidingObject,touch);
		this._touchPointFromId.remove(touch.id);
		this._numTouchPoints--;
		var this1 = this._touchPoints;
		var pos;
		var this2 = this._touchPoints;
		var value = -1;
		var _g1 = 0;
		var _g = this2.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this2.data[i] == touch) {
				value = i;
				break;
			}
		}
		pos = value;
		var len = 1;
		if(pos < 0) pos += this1.length;
		if(pos + len > this1.length) len = this1.length - pos;
		if(len < 0) len = 0;
		var vectorData = new openfl.VectorData();
		vectorData.length = len;
		vectorData.fixed = false;
		var this3;
		this3 = new Array(len);
		vectorData.data = this3;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
		if(len > 0) {
			this1.length -= len;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
		}
		vectorData;
		this._updateDirty = true;
	}
	,get_forceTouchMove: function() {
		return this._forceTouchMove;
	}
	,set_forceTouchMove: function(value) {
		this._forceTouchMove = value;
		return value;
	}
	,get_touchPicker: function() {
		return this._touchPicker;
	}
	,set_touchPicker: function(value) {
		this._touchPicker = value;
		return value;
	}
	,set_view: function(value) {
		this._view = value;
		return value;
	}
	,__class__: away3d.core.managers.Touch3DManager
	,__properties__: {set_view:"set_view",set_touchPicker:"set_touchPicker",get_touchPicker:"get_touchPicker",set_forceTouchMove:"set_forceTouchMove",get_forceTouchMove:"get_forceTouchMove"}
};
away3d.core.managers.TouchPoint = function() {
};
$hxClasses["away3d.core.managers.TouchPoint"] = away3d.core.managers.TouchPoint;
away3d.core.managers.TouchPoint.__name__ = ["away3d","core","managers","TouchPoint"];
away3d.core.managers.TouchPoint.prototype = {
	__class__: away3d.core.managers.TouchPoint
};
away3d.core.math = {};
away3d.core.math.MathConsts = function() { };
$hxClasses["away3d.core.math.MathConsts"] = away3d.core.math.MathConsts;
away3d.core.math.MathConsts.__name__ = ["away3d","core","math","MathConsts"];
away3d.core.math.Matrix3DUtils = function() { };
$hxClasses["away3d.core.math.Matrix3DUtils"] = away3d.core.math.Matrix3DUtils;
away3d.core.math.Matrix3DUtils.__name__ = ["away3d","core","math","Matrix3DUtils"];
away3d.core.math.Matrix3DUtils.__properties__ = {get_CALCULATION_MATRIX:"get_CALCULATION_MATRIX",get_RAW_DATA_CONTAINER:"get_RAW_DATA_CONTAINER"}
away3d.core.math.Matrix3DUtils.RAW_DATA_CONTAINER = null;
away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER = function() {
	var value = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
away3d.core.math.Matrix3DUtils.CALCULATION_MATRIX = null;
away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX = function() {
	return new openfl.geom.Matrix3D();
};
away3d.core.math.Matrix3DUtils.quaternion2matrix = function(quarternion,m) {
	var x = quarternion.x;
	var y = quarternion.y;
	var z = quarternion.z;
	var w = quarternion.w;
	var xx = x * x;
	var xy = x * y;
	var xz = x * z;
	var xw = x * w;
	var yy = y * y;
	var yz = y * z;
	var yw = y * w;
	var zz = z * z;
	var zw = z * w;
	var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	if(!raw.fixed) {
		if(0 >= raw.length) raw.length = 1;
		if(raw.data.length < raw.length) {
			var data;
			var this1;
			this1 = new Array(raw.data.length + 10);
			data = this1;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
			raw.data = data;
		}
	}
	raw.data[0] = 1 - 2 * (yy + zz);
	if(!raw.fixed) {
		if(1 >= raw.length) raw.length = 2;
		if(raw.data.length < raw.length) {
			var data1;
			var this2;
			this2 = new Array(raw.data.length + 10);
			data1 = this2;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
			raw.data = data1;
		}
	}
	raw.data[1] = 2 * (xy + zw);
	if(!raw.fixed) {
		if(2 >= raw.length) raw.length = 3;
		if(raw.data.length < raw.length) {
			var data2;
			var this3;
			this3 = new Array(raw.data.length + 10);
			data2 = this3;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
			raw.data = data2;
		}
	}
	raw.data[2] = 2 * (xz - yw);
	if(!raw.fixed) {
		if(4 >= raw.length) raw.length = 5;
		if(raw.data.length < raw.length) {
			var data3;
			var this4;
			this4 = new Array(raw.data.length + 10);
			data3 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
			raw.data = data3;
		}
	}
	raw.data[4] = 2 * (xy - zw);
	if(!raw.fixed) {
		if(5 >= raw.length) raw.length = 6;
		if(raw.data.length < raw.length) {
			var data4;
			var this5;
			this5 = new Array(raw.data.length + 10);
			data4 = this5;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
			raw.data = data4;
		}
	}
	raw.data[5] = 1 - 2 * (xx + zz);
	if(!raw.fixed) {
		if(6 >= raw.length) raw.length = 7;
		if(raw.data.length < raw.length) {
			var data5;
			var this6;
			this6 = new Array(raw.data.length + 10);
			data5 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
			raw.data = data5;
		}
	}
	raw.data[6] = 2 * (yz + xw);
	if(!raw.fixed) {
		if(8 >= raw.length) raw.length = 9;
		if(raw.data.length < raw.length) {
			var data6;
			var this7;
			this7 = new Array(raw.data.length + 10);
			data6 = this7;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
			raw.data = data6;
		}
	}
	raw.data[8] = 2 * (xz + yw);
	if(!raw.fixed) {
		if(9 >= raw.length) raw.length = 10;
		if(raw.data.length < raw.length) {
			var data7;
			var this8;
			this8 = new Array(raw.data.length + 10);
			data7 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
			raw.data = data7;
		}
	}
	raw.data[9] = 2 * (yz - xw);
	if(!raw.fixed) {
		if(10 >= raw.length) raw.length = 11;
		if(raw.data.length < raw.length) {
			var data8;
			var this9;
			this9 = new Array(raw.data.length + 10);
			data8 = this9;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
			raw.data = data8;
		}
	}
	raw.data[10] = 1 - 2 * (xx + yy);
	var value;
	var value1;
	var value2;
	var value3;
	var value4;
	if(!raw.fixed) {
		if(14 >= raw.length) raw.length = 15;
		if(raw.data.length < raw.length) {
			var data9;
			var this10;
			this10 = new Array(raw.data.length + 10);
			data9 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
			raw.data = data9;
		}
	}
	value4 = raw.data[14] = 0;
	if(!raw.fixed) {
		if(13 >= raw.length) raw.length = 14;
		if(raw.data.length < raw.length) {
			var data10;
			var this11;
			this11 = new Array(raw.data.length + 10);
			data10 = this11;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
			raw.data = data10;
		}
	}
	value3 = raw.data[13] = value4;
	if(!raw.fixed) {
		if(12 >= raw.length) raw.length = 13;
		if(raw.data.length < raw.length) {
			var data11;
			var this12;
			this12 = new Array(raw.data.length + 10);
			data11 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
			raw.data = data11;
		}
	}
	value2 = raw.data[12] = value3;
	if(!raw.fixed) {
		if(11 >= raw.length) raw.length = 12;
		if(raw.data.length < raw.length) {
			var data12;
			var this13;
			this13 = new Array(raw.data.length + 10);
			data12 = this13;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
			raw.data = data12;
		}
	}
	value1 = raw.data[11] = value2;
	if(!raw.fixed) {
		if(7 >= raw.length) raw.length = 8;
		if(raw.data.length < raw.length) {
			var data13;
			var this14;
			this14 = new Array(raw.data.length + 10);
			data13 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
			raw.data = data13;
		}
	}
	value = raw.data[7] = value1;
	if(!raw.fixed) {
		if(3 >= raw.length) raw.length = 4;
		if(raw.data.length < raw.length) {
			var data14;
			var this15;
			this15 = new Array(raw.data.length + 10);
			data14 = this15;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
			raw.data = data14;
		}
	}
	raw.data[3] = value;
	if(!raw.fixed) {
		if(15 >= raw.length) raw.length = 16;
		if(raw.data.length < raw.length) {
			var data15;
			var this16;
			this16 = new Array(raw.data.length + 10);
			data15 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
			raw.data = data15;
		}
	}
	raw.data[15] = 1;
	if(m != null) {
		m.copyRawDataFrom(raw);
		return m;
	} else return new openfl.geom.Matrix3D(raw);
};
away3d.core.math.Matrix3DUtils.getForward = function(m,v) {
	if(v == null) v = new openfl.geom.Vector3D(0.0,0.0,0.0);
	m.copyColumnTo(2,v);
	v.normalize();
	return v;
};
away3d.core.math.Matrix3DUtils.getUp = function(m,v) {
	if(v == null) v = new openfl.geom.Vector3D(0.0,0.0,0.0);
	m.copyColumnTo(1,v);
	v.normalize();
	return v;
};
away3d.core.math.Matrix3DUtils.getRight = function(m,v) {
	if(v == null) v = new openfl.geom.Vector3D(0.0,0.0,0.0);
	m.copyColumnTo(0,v);
	v.normalize();
	return v;
};
away3d.core.math.Matrix3DUtils.compare = function(m1,m2) {
	var r1 = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	var r2 = m2.rawData;
	m1.copyRawDataTo(r1);
	var i = 0;
	while(i < 16) {
		if(r1.data[i] != r2.data[i]) return false;
		++i;
	}
	return true;
};
away3d.core.math.Matrix3DUtils.lookAt = function(matrix,pos,dir,up) {
	var dirN;
	var upN;
	var lftN;
	var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	lftN = new openfl.geom.Vector3D(dir.y * up.z - dir.z * up.y,dir.z * up.x - dir.x * up.z,dir.x * up.y - dir.y * up.x,1);
	lftN.normalize();
	upN = new openfl.geom.Vector3D(lftN.y * dir.z - lftN.z * dir.y,lftN.z * dir.x - lftN.x * dir.z,lftN.x * dir.y - lftN.y * dir.x,1);
	upN.normalize();
	dirN = new openfl.geom.Vector3D(dir.x,dir.y,dir.z,dir.w);
	dirN.normalize();
	if(!raw.fixed) {
		if(0 >= raw.length) raw.length = 1;
		if(raw.data.length < raw.length) {
			var data;
			var this1;
			this1 = new Array(raw.data.length + 10);
			data = this1;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
			raw.data = data;
		}
	}
	raw.data[0] = lftN.x;
	if(!raw.fixed) {
		if(1 >= raw.length) raw.length = 2;
		if(raw.data.length < raw.length) {
			var data1;
			var this2;
			this2 = new Array(raw.data.length + 10);
			data1 = this2;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
			raw.data = data1;
		}
	}
	raw.data[1] = upN.x;
	if(!raw.fixed) {
		if(2 >= raw.length) raw.length = 3;
		if(raw.data.length < raw.length) {
			var data2;
			var this3;
			this3 = new Array(raw.data.length + 10);
			data2 = this3;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
			raw.data = data2;
		}
	}
	raw.data[2] = -dirN.x;
	if(!raw.fixed) {
		if(3 >= raw.length) raw.length = 4;
		if(raw.data.length < raw.length) {
			var data3;
			var this4;
			this4 = new Array(raw.data.length + 10);
			data3 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
			raw.data = data3;
		}
	}
	raw.data[3] = 0.0;
	if(!raw.fixed) {
		if(4 >= raw.length) raw.length = 5;
		if(raw.data.length < raw.length) {
			var data4;
			var this5;
			this5 = new Array(raw.data.length + 10);
			data4 = this5;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
			raw.data = data4;
		}
	}
	raw.data[4] = lftN.y;
	if(!raw.fixed) {
		if(5 >= raw.length) raw.length = 6;
		if(raw.data.length < raw.length) {
			var data5;
			var this6;
			this6 = new Array(raw.data.length + 10);
			data5 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
			raw.data = data5;
		}
	}
	raw.data[5] = upN.y;
	if(!raw.fixed) {
		if(6 >= raw.length) raw.length = 7;
		if(raw.data.length < raw.length) {
			var data6;
			var this7;
			this7 = new Array(raw.data.length + 10);
			data6 = this7;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
			raw.data = data6;
		}
	}
	raw.data[6] = -dirN.y;
	if(!raw.fixed) {
		if(7 >= raw.length) raw.length = 8;
		if(raw.data.length < raw.length) {
			var data7;
			var this8;
			this8 = new Array(raw.data.length + 10);
			data7 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
			raw.data = data7;
		}
	}
	raw.data[7] = 0.0;
	if(!raw.fixed) {
		if(8 >= raw.length) raw.length = 9;
		if(raw.data.length < raw.length) {
			var data8;
			var this9;
			this9 = new Array(raw.data.length + 10);
			data8 = this9;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
			raw.data = data8;
		}
	}
	raw.data[8] = lftN.z;
	if(!raw.fixed) {
		if(9 >= raw.length) raw.length = 10;
		if(raw.data.length < raw.length) {
			var data9;
			var this10;
			this10 = new Array(raw.data.length + 10);
			data9 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
			raw.data = data9;
		}
	}
	raw.data[9] = upN.z;
	if(!raw.fixed) {
		if(10 >= raw.length) raw.length = 11;
		if(raw.data.length < raw.length) {
			var data10;
			var this11;
			this11 = new Array(raw.data.length + 10);
			data10 = this11;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
			raw.data = data10;
		}
	}
	raw.data[10] = -dirN.z;
	if(!raw.fixed) {
		if(11 >= raw.length) raw.length = 12;
		if(raw.data.length < raw.length) {
			var data11;
			var this12;
			this12 = new Array(raw.data.length + 10);
			data11 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
			raw.data = data11;
		}
	}
	raw.data[11] = 0.0;
	if(!raw.fixed) {
		if(12 >= raw.length) raw.length = 13;
		if(raw.data.length < raw.length) {
			var data12;
			var this13;
			this13 = new Array(raw.data.length + 10);
			data12 = this13;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
			raw.data = data12;
		}
	}
	raw.data[12] = -(lftN.x * pos.x + lftN.y * pos.y + lftN.z * pos.z);
	if(!raw.fixed) {
		if(13 >= raw.length) raw.length = 14;
		if(raw.data.length < raw.length) {
			var data13;
			var this14;
			this14 = new Array(raw.data.length + 10);
			data13 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
			raw.data = data13;
		}
	}
	raw.data[13] = -(upN.x * pos.x + upN.y * pos.y + upN.z * pos.z);
	if(!raw.fixed) {
		if(14 >= raw.length) raw.length = 15;
		if(raw.data.length < raw.length) {
			var data14;
			var this15;
			this15 = new Array(raw.data.length + 10);
			data14 = this15;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
			raw.data = data14;
		}
	}
	raw.data[14] = dirN.x * pos.x + dirN.y * pos.y + dirN.z * pos.z;
	if(!raw.fixed) {
		if(15 >= raw.length) raw.length = 16;
		if(raw.data.length < raw.length) {
			var data15;
			var this16;
			this16 = new Array(raw.data.length + 10);
			data15 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
			raw.data = data15;
		}
	}
	raw.data[15] = 1.0;
	matrix.copyRawDataFrom(raw);
};
away3d.core.math.Matrix3DUtils.reflection = function(plane,target) {
	if(target == null) target = new openfl.geom.Matrix3D();
	var a = plane.a;
	var b = plane.b;
	var c = plane.c;
	var d = plane.d;
	var rawData = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
	var ab2 = -2 * a * b;
	var ac2 = -2 * a * c;
	var bc2 = -2 * b * c;
	if(!rawData.fixed) {
		if(0 >= rawData.length) rawData.length = 1;
		if(rawData.data.length < rawData.length) {
			var data;
			var this1;
			this1 = new Array(rawData.data.length + 10);
			data = this1;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data,0,rawData.data.length);
			rawData.data = data;
		}
	}
	rawData.data[0] = 1 - 2 * a * a;
	if(!rawData.fixed) {
		if(4 >= rawData.length) rawData.length = 5;
		if(rawData.data.length < rawData.length) {
			var data1;
			var this2;
			this2 = new Array(rawData.data.length + 10);
			data1 = this2;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data1,0,rawData.data.length);
			rawData.data = data1;
		}
	}
	rawData.data[4] = ab2;
	if(!rawData.fixed) {
		if(8 >= rawData.length) rawData.length = 9;
		if(rawData.data.length < rawData.length) {
			var data2;
			var this3;
			this3 = new Array(rawData.data.length + 10);
			data2 = this3;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data2,0,rawData.data.length);
			rawData.data = data2;
		}
	}
	rawData.data[8] = ac2;
	if(!rawData.fixed) {
		if(12 >= rawData.length) rawData.length = 13;
		if(rawData.data.length < rawData.length) {
			var data3;
			var this4;
			this4 = new Array(rawData.data.length + 10);
			data3 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data3,0,rawData.data.length);
			rawData.data = data3;
		}
	}
	rawData.data[12] = -2 * a * d;
	if(!rawData.fixed) {
		if(1 >= rawData.length) rawData.length = 2;
		if(rawData.data.length < rawData.length) {
			var data4;
			var this5;
			this5 = new Array(rawData.data.length + 10);
			data4 = this5;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data4,0,rawData.data.length);
			rawData.data = data4;
		}
	}
	rawData.data[1] = ab2;
	if(!rawData.fixed) {
		if(5 >= rawData.length) rawData.length = 6;
		if(rawData.data.length < rawData.length) {
			var data5;
			var this6;
			this6 = new Array(rawData.data.length + 10);
			data5 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data5,0,rawData.data.length);
			rawData.data = data5;
		}
	}
	rawData.data[5] = 1 - 2 * b * b;
	if(!rawData.fixed) {
		if(9 >= rawData.length) rawData.length = 10;
		if(rawData.data.length < rawData.length) {
			var data6;
			var this7;
			this7 = new Array(rawData.data.length + 10);
			data6 = this7;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data6,0,rawData.data.length);
			rawData.data = data6;
		}
	}
	rawData.data[9] = bc2;
	if(!rawData.fixed) {
		if(13 >= rawData.length) rawData.length = 14;
		if(rawData.data.length < rawData.length) {
			var data7;
			var this8;
			this8 = new Array(rawData.data.length + 10);
			data7 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data7,0,rawData.data.length);
			rawData.data = data7;
		}
	}
	rawData.data[13] = -2 * b * d;
	if(!rawData.fixed) {
		if(2 >= rawData.length) rawData.length = 3;
		if(rawData.data.length < rawData.length) {
			var data8;
			var this9;
			this9 = new Array(rawData.data.length + 10);
			data8 = this9;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data8,0,rawData.data.length);
			rawData.data = data8;
		}
	}
	rawData.data[2] = ac2;
	if(!rawData.fixed) {
		if(6 >= rawData.length) rawData.length = 7;
		if(rawData.data.length < rawData.length) {
			var data9;
			var this10;
			this10 = new Array(rawData.data.length + 10);
			data9 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data9,0,rawData.data.length);
			rawData.data = data9;
		}
	}
	rawData.data[6] = bc2;
	if(!rawData.fixed) {
		if(10 >= rawData.length) rawData.length = 11;
		if(rawData.data.length < rawData.length) {
			var data10;
			var this11;
			this11 = new Array(rawData.data.length + 10);
			data10 = this11;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data10,0,rawData.data.length);
			rawData.data = data10;
		}
	}
	rawData.data[10] = 1 - 2 * c * c;
	if(!rawData.fixed) {
		if(14 >= rawData.length) rawData.length = 15;
		if(rawData.data.length < rawData.length) {
			var data11;
			var this12;
			this12 = new Array(rawData.data.length + 10);
			data11 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data11,0,rawData.data.length);
			rawData.data = data11;
		}
	}
	rawData.data[14] = -2 * c * d;
	if(!rawData.fixed) {
		if(3 >= rawData.length) rawData.length = 4;
		if(rawData.data.length < rawData.length) {
			var data12;
			var this13;
			this13 = new Array(rawData.data.length + 10);
			data12 = this13;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data12,0,rawData.data.length);
			rawData.data = data12;
		}
	}
	rawData.data[3] = 0;
	if(!rawData.fixed) {
		if(7 >= rawData.length) rawData.length = 8;
		if(rawData.data.length < rawData.length) {
			var data13;
			var this14;
			this14 = new Array(rawData.data.length + 10);
			data13 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data13,0,rawData.data.length);
			rawData.data = data13;
		}
	}
	rawData.data[7] = 0;
	if(!rawData.fixed) {
		if(11 >= rawData.length) rawData.length = 12;
		if(rawData.data.length < rawData.length) {
			var data14;
			var this15;
			this15 = new Array(rawData.data.length + 10);
			data14 = this15;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data14,0,rawData.data.length);
			rawData.data = data14;
		}
	}
	rawData.data[11] = 0;
	if(!rawData.fixed) {
		if(15 >= rawData.length) rawData.length = 16;
		if(rawData.data.length < rawData.length) {
			var data15;
			var this16;
			this16 = new Array(rawData.data.length + 10);
			data15 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data15,0,rawData.data.length);
			rawData.data = data15;
		}
	}
	rawData.data[15] = 1;
	target.copyRawDataFrom(rawData);
	return target;
};
away3d.core.math.Plane3D = function(a,b,c,d) {
	if(d == null) d = 0;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 0;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	if(a == 0 && b == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XY_AXIS; else if(b == 0 && c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_YZ_AXIS; else if(a == 0 && c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XZ_AXIS; else this._alignment = away3d.core.math.Plane3D.ALIGN_ANY;
};
$hxClasses["away3d.core.math.Plane3D"] = away3d.core.math.Plane3D;
away3d.core.math.Plane3D.__name__ = ["away3d","core","math","Plane3D"];
away3d.core.math.Plane3D.prototype = {
	fromPoints: function(p0,p1,p2) {
		var d1x = p1.x - p0.x;
		var d1y = p1.y - p0.y;
		var d1z = p1.z - p0.z;
		var d2x = p2.x - p0.x;
		var d2y = p2.y - p0.y;
		var d2z = p2.z - p0.z;
		this.a = d1y * d2z - d1z * d2y;
		this.b = d1z * d2x - d1x * d2z;
		this.c = d1x * d2y - d1y * d2x;
		this.d = this.a * p0.x + this.b * p0.y + this.c * p0.z;
		if(this.a == 0 && this.b == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XY_AXIS; else if(this.b == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_YZ_AXIS; else if(this.a == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XZ_AXIS; else this._alignment = away3d.core.math.Plane3D.ALIGN_ANY;
	}
	,fromNormalAndPoint: function(normal,point) {
		this.a = normal.x;
		this.b = normal.y;
		this.c = normal.z;
		this.d = this.a * point.x + this.b * point.y + this.c * point.z;
		if(this.a == 0 && this.b == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XY_AXIS; else if(this.b == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_YZ_AXIS; else if(this.a == 0 && this.c == 0) this._alignment = away3d.core.math.Plane3D.ALIGN_XZ_AXIS; else this._alignment = away3d.core.math.Plane3D.ALIGN_ANY;
	}
	,normalize: function() {
		var len = 1 / Math.sqrt(this.a * this.a + this.b * this.b + this.c * this.c);
		this.a *= len;
		this.b *= len;
		this.c *= len;
		this.d *= len;
		return this;
	}
	,distance: function(p) {
		if(this._alignment == away3d.core.math.Plane3D.ALIGN_YZ_AXIS) return this.a * p.x - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XZ_AXIS) return this.b * p.y - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XY_AXIS) return this.c * p.z - this.d; else return this.a * p.x + this.b * p.y + this.c * p.z - this.d;
	}
	,classifyPoint: function(p,epsilon) {
		if(epsilon == null) epsilon = 0.01;
		if(this.d != this.d) return away3d.core.math.PlaneClassification.FRONT;
		var len;
		if(this._alignment == away3d.core.math.Plane3D.ALIGN_YZ_AXIS) len = this.a * p.x - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XZ_AXIS) len = this.b * p.y - this.d; else if(this._alignment == away3d.core.math.Plane3D.ALIGN_XY_AXIS) len = this.c * p.z - this.d; else len = this.a * p.x + this.b * p.y + this.c * p.z - this.d;
		if(len < -epsilon) return away3d.core.math.PlaneClassification.BACK; else if(len > epsilon) return away3d.core.math.PlaneClassification.FRONT; else return away3d.core.math.PlaneClassification.INTERSECT;
	}
	,toString: function() {
		return "Plane3D [a:" + this.a + ", b:" + this.b + ", c:" + this.c + ", d:" + this.d + "].";
	}
	,__class__: away3d.core.math.Plane3D
};
away3d.core.math.PlaneClassification = function() { };
$hxClasses["away3d.core.math.PlaneClassification"] = away3d.core.math.PlaneClassification;
away3d.core.math.PlaneClassification.__name__ = ["away3d","core","math","PlaneClassification"];
away3d.core.math.Quaternion = function(x,y,z,w) {
	if(w == null) w = 1;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	x = 0;
	y = 0;
	z = 0;
	w = 1;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["away3d.core.math.Quaternion"] = away3d.core.math.Quaternion;
away3d.core.math.Quaternion.__name__ = ["away3d","core","math","Quaternion"];
away3d.core.math.Quaternion.prototype = {
	get_magnitude: function() {
		return Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,multiply: function(qa,qb) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		this.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;
		this.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;
		this.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;
		this.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;
	}
	,multiplyVector: function(vector,target) {
		if(target == null) target = new away3d.core.math.Quaternion();
		var x2 = vector.x;
		var y2 = vector.y;
		var z2 = vector.z;
		target.w = -this.x * x2 - this.y * y2 - this.z * z2;
		target.x = this.w * x2 + this.y * z2 - this.z * y2;
		target.y = this.w * y2 - this.x * z2 + this.z * x2;
		target.z = this.w * z2 + this.x * y2 - this.y * x2;
		return target;
	}
	,fromAxisAngle: function(axis,angle) {
		var sin_a = Math.sin(angle / 2);
		var cos_a = Math.cos(angle / 2);
		this.x = axis.x * sin_a;
		this.y = axis.y * sin_a;
		this.z = axis.z * sin_a;
		this.w = cos_a;
		this.normalize();
	}
	,slerp: function(qa,qb,t) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		var dot = w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2;
		if(dot < 0) {
			dot = -dot;
			w2 = -w2;
			x2 = -x2;
			y2 = -y2;
			z2 = -z2;
		}
		if(dot < 0.95) {
			var angle = Math.acos(dot);
			var s = 1 / Math.sin(angle);
			var s1 = Math.sin(angle * (1 - t)) * s;
			var s2 = Math.sin(angle * t) * s;
			this.w = w1 * s1 + w2 * s2;
			this.x = x1 * s1 + x2 * s2;
			this.y = y1 * s1 + y2 * s2;
			this.z = z1 * s1 + z2 * s2;
		} else {
			this.w = w1 + t * (w2 - w1);
			this.x = x1 + t * (x2 - x1);
			this.y = y1 + t * (y2 - y1);
			this.z = z1 + t * (z2 - z1);
			var len = 1.0 / Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
			this.w *= len;
			this.x *= len;
			this.y *= len;
			this.z *= len;
		}
	}
	,lerp: function(qa,qb,t) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		var len;
		if(w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2 < 0) {
			w2 = -w2;
			x2 = -x2;
			y2 = -y2;
			z2 = -z2;
		}
		this.w = w1 + t * (w2 - w1);
		this.x = x1 + t * (x2 - x1);
		this.y = y1 + t * (y2 - y1);
		this.z = z1 + t * (z2 - z1);
		len = 1.0 / Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
		this.w *= len;
		this.x *= len;
		this.y *= len;
		this.z *= len;
	}
	,fromEulerAngles: function(ax,ay,az) {
		var halfX = ax * .5;
		var halfY = ay * .5;
		var halfZ = az * .5;
		var cosX = Math.cos(halfX);
		var sinX = Math.sin(halfX);
		var cosY = Math.cos(halfY);
		var sinY = Math.sin(halfY);
		var cosZ = Math.cos(halfZ);
		var sinZ = Math.sin(halfZ);
		this.w = cosX * cosY * cosZ + sinX * sinY * sinZ;
		this.x = sinX * cosY * cosZ - cosX * sinY * sinZ;
		this.y = cosX * sinY * cosZ + sinX * cosY * sinZ;
		this.z = cosX * cosY * sinZ - sinX * sinY * cosZ;
	}
	,toEulerAngles: function(target) {
		if(target == null) target = new openfl.geom.Vector3D();
		target.x = Math.atan2(2 * (this.w * this.x + this.y * this.z),1 - 2 * (this.x * this.x + this.y * this.y));
		target.y = Math.asin(2 * (this.w * this.y - this.z * this.x));
		target.z = Math.atan2(2 * (this.w * this.z + this.x * this.y),1 - 2 * (this.y * this.y + this.z * this.z));
		return target;
	}
	,normalize: function(val) {
		if(val == null) val = 1;
		var mag = val / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		this.x *= mag;
		this.y *= mag;
		this.z *= mag;
		this.w *= mag;
	}
	,toString: function() {
		return "{x:" + this.x + " y:" + this.y + " z:" + this.z + " w:" + this.w + "}";
	}
	,toMatrix3D: function(target) {
		var rawData = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var xy2 = 2.0 * this.x * this.y;
		var xz2 = 2.0 * this.x * this.z;
		var xw2 = 2.0 * this.x * this.w;
		var yz2 = 2.0 * this.y * this.z;
		var yw2 = 2.0 * this.y * this.w;
		var zw2 = 2.0 * this.z * this.w;
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var ww = this.w * this.w;
		if(!rawData.fixed) {
			if(0 >= rawData.length) rawData.length = 1;
			if(rawData.data.length < rawData.length) {
				var data;
				var this1;
				this1 = new Array(rawData.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data,0,rawData.data.length);
				rawData.data = data;
			}
		}
		rawData.data[0] = xx - yy - zz + ww;
		if(!rawData.fixed) {
			if(4 >= rawData.length) rawData.length = 5;
			if(rawData.data.length < rawData.length) {
				var data1;
				var this2;
				this2 = new Array(rawData.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data1,0,rawData.data.length);
				rawData.data = data1;
			}
		}
		rawData.data[4] = xy2 - zw2;
		if(!rawData.fixed) {
			if(8 >= rawData.length) rawData.length = 9;
			if(rawData.data.length < rawData.length) {
				var data2;
				var this3;
				this3 = new Array(rawData.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data2,0,rawData.data.length);
				rawData.data = data2;
			}
		}
		rawData.data[8] = xz2 + yw2;
		if(!rawData.fixed) {
			if(12 >= rawData.length) rawData.length = 13;
			if(rawData.data.length < rawData.length) {
				var data3;
				var this4;
				this4 = new Array(rawData.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data3,0,rawData.data.length);
				rawData.data = data3;
			}
		}
		rawData.data[12] = 0;
		if(!rawData.fixed) {
			if(1 >= rawData.length) rawData.length = 2;
			if(rawData.data.length < rawData.length) {
				var data4;
				var this5;
				this5 = new Array(rawData.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data4,0,rawData.data.length);
				rawData.data = data4;
			}
		}
		rawData.data[1] = xy2 + zw2;
		if(!rawData.fixed) {
			if(5 >= rawData.length) rawData.length = 6;
			if(rawData.data.length < rawData.length) {
				var data5;
				var this6;
				this6 = new Array(rawData.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data5,0,rawData.data.length);
				rawData.data = data5;
			}
		}
		rawData.data[5] = -xx + yy - zz + ww;
		if(!rawData.fixed) {
			if(9 >= rawData.length) rawData.length = 10;
			if(rawData.data.length < rawData.length) {
				var data6;
				var this7;
				this7 = new Array(rawData.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data6,0,rawData.data.length);
				rawData.data = data6;
			}
		}
		rawData.data[9] = yz2 - xw2;
		if(!rawData.fixed) {
			if(13 >= rawData.length) rawData.length = 14;
			if(rawData.data.length < rawData.length) {
				var data7;
				var this8;
				this8 = new Array(rawData.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data7,0,rawData.data.length);
				rawData.data = data7;
			}
		}
		rawData.data[13] = 0;
		if(!rawData.fixed) {
			if(2 >= rawData.length) rawData.length = 3;
			if(rawData.data.length < rawData.length) {
				var data8;
				var this9;
				this9 = new Array(rawData.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data8,0,rawData.data.length);
				rawData.data = data8;
			}
		}
		rawData.data[2] = xz2 - yw2;
		if(!rawData.fixed) {
			if(6 >= rawData.length) rawData.length = 7;
			if(rawData.data.length < rawData.length) {
				var data9;
				var this10;
				this10 = new Array(rawData.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data9,0,rawData.data.length);
				rawData.data = data9;
			}
		}
		rawData.data[6] = yz2 + xw2;
		if(!rawData.fixed) {
			if(10 >= rawData.length) rawData.length = 11;
			if(rawData.data.length < rawData.length) {
				var data10;
				var this11;
				this11 = new Array(rawData.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data10,0,rawData.data.length);
				rawData.data = data10;
			}
		}
		rawData.data[10] = -xx - yy + zz + ww;
		if(!rawData.fixed) {
			if(14 >= rawData.length) rawData.length = 15;
			if(rawData.data.length < rawData.length) {
				var data11;
				var this12;
				this12 = new Array(rawData.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data11,0,rawData.data.length);
				rawData.data = data11;
			}
		}
		rawData.data[14] = 0;
		if(!rawData.fixed) {
			if(3 >= rawData.length) rawData.length = 4;
			if(rawData.data.length < rawData.length) {
				var data12;
				var this13;
				this13 = new Array(rawData.data.length + 10);
				data12 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data12,0,rawData.data.length);
				rawData.data = data12;
			}
		}
		rawData.data[3] = 0.0;
		if(!rawData.fixed) {
			if(7 >= rawData.length) rawData.length = 8;
			if(rawData.data.length < rawData.length) {
				var data13;
				var this14;
				this14 = new Array(rawData.data.length + 10);
				data13 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data13,0,rawData.data.length);
				rawData.data = data13;
			}
		}
		rawData.data[7] = 0.0;
		if(!rawData.fixed) {
			if(11 >= rawData.length) rawData.length = 12;
			if(rawData.data.length < rawData.length) {
				var data14;
				var this15;
				this15 = new Array(rawData.data.length + 10);
				data14 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data14,0,rawData.data.length);
				rawData.data = data14;
			}
		}
		rawData.data[11] = 0;
		if(!rawData.fixed) {
			if(15 >= rawData.length) rawData.length = 16;
			if(rawData.data.length < rawData.length) {
				var data15;
				var this16;
				this16 = new Array(rawData.data.length + 10);
				data15 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(rawData.data,0,data15,0,rawData.data.length);
				rawData.data = data15;
			}
		}
		rawData.data[15] = 1;
		if(target == null) return new openfl.geom.Matrix3D(rawData);
		target.copyRawDataFrom(rawData);
		return target;
	}
	,fromMatrix: function(matrix) {
		var tmp;
		tmp = matrix.decompose(openfl.geom.Orientation3D.QUATERNION);
		var v = tmp.data[1];
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
	}
	,toRawData: function(target,exclude4thRow) {
		if(exclude4thRow == null) exclude4thRow = false;
		var xy2 = 2.0 * this.x * this.y;
		var xz2 = 2.0 * this.x * this.z;
		var xw2 = 2.0 * this.x * this.w;
		var yz2 = 2.0 * this.y * this.z;
		var yw2 = 2.0 * this.y * this.w;
		var zw2 = 2.0 * this.z * this.w;
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var ww = this.w * this.w;
		if(!target.fixed) {
			if(0 >= target.length) target.length = 1;
			if(target.data.length < target.length) {
				var data;
				var this1;
				this1 = new Array(target.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data,0,target.data.length);
				target.data = data;
			}
		}
		target.data[0] = xx - yy - zz + ww;
		if(!target.fixed) {
			if(1 >= target.length) target.length = 2;
			if(target.data.length < target.length) {
				var data1;
				var this2;
				this2 = new Array(target.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data1,0,target.data.length);
				target.data = data1;
			}
		}
		target.data[1] = xy2 - zw2;
		if(!target.fixed) {
			if(2 >= target.length) target.length = 3;
			if(target.data.length < target.length) {
				var data2;
				var this3;
				this3 = new Array(target.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data2,0,target.data.length);
				target.data = data2;
			}
		}
		target.data[2] = xz2 + yw2;
		if(!target.fixed) {
			if(4 >= target.length) target.length = 5;
			if(target.data.length < target.length) {
				var data3;
				var this4;
				this4 = new Array(target.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data3,0,target.data.length);
				target.data = data3;
			}
		}
		target.data[4] = xy2 + zw2;
		if(!target.fixed) {
			if(5 >= target.length) target.length = 6;
			if(target.data.length < target.length) {
				var data4;
				var this5;
				this5 = new Array(target.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data4,0,target.data.length);
				target.data = data4;
			}
		}
		target.data[5] = -xx + yy - zz + ww;
		if(!target.fixed) {
			if(6 >= target.length) target.length = 7;
			if(target.data.length < target.length) {
				var data5;
				var this6;
				this6 = new Array(target.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data5,0,target.data.length);
				target.data = data5;
			}
		}
		target.data[6] = yz2 - xw2;
		if(!target.fixed) {
			if(8 >= target.length) target.length = 9;
			if(target.data.length < target.length) {
				var data6;
				var this7;
				this7 = new Array(target.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data6,0,target.data.length);
				target.data = data6;
			}
		}
		target.data[8] = xz2 - yw2;
		if(!target.fixed) {
			if(9 >= target.length) target.length = 10;
			if(target.data.length < target.length) {
				var data7;
				var this8;
				this8 = new Array(target.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data7,0,target.data.length);
				target.data = data7;
			}
		}
		target.data[9] = yz2 + xw2;
		if(!target.fixed) {
			if(10 >= target.length) target.length = 11;
			if(target.data.length < target.length) {
				var data8;
				var this9;
				this9 = new Array(target.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data8,0,target.data.length);
				target.data = data8;
			}
		}
		target.data[10] = -xx - yy + zz + ww;
		var value;
		var value1;
		if(!target.fixed) {
			if(11 >= target.length) target.length = 12;
			if(target.data.length < target.length) {
				var data9;
				var this10;
				this10 = new Array(target.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data9,0,target.data.length);
				target.data = data9;
			}
		}
		value1 = target.data[11] = 0;
		if(!target.fixed) {
			if(7 >= target.length) target.length = 8;
			if(target.data.length < target.length) {
				var data10;
				var this11;
				this11 = new Array(target.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data10,0,target.data.length);
				target.data = data10;
			}
		}
		value = target.data[7] = value1;
		if(!target.fixed) {
			if(3 >= target.length) target.length = 4;
			if(target.data.length < target.length) {
				var data11;
				var this12;
				this12 = new Array(target.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data11,0,target.data.length);
				target.data = data11;
			}
		}
		target.data[3] = value;
		if(!exclude4thRow) {
			var value2;
			var value3;
			if(!target.fixed) {
				if(14 >= target.length) target.length = 15;
				if(target.data.length < target.length) {
					var data12;
					var this13;
					this13 = new Array(target.data.length + 10);
					data12 = this13;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data12,0,target.data.length);
					target.data = data12;
				}
			}
			value3 = target.data[14] = 0;
			if(!target.fixed) {
				if(13 >= target.length) target.length = 14;
				if(target.data.length < target.length) {
					var data13;
					var this14;
					this14 = new Array(target.data.length + 10);
					data13 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data13,0,target.data.length);
					target.data = data13;
				}
			}
			value2 = target.data[13] = value3;
			if(!target.fixed) {
				if(12 >= target.length) target.length = 13;
				if(target.data.length < target.length) {
					var data14;
					var this15;
					this15 = new Array(target.data.length + 10);
					data14 = this15;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data14,0,target.data.length);
					target.data = data14;
				}
			}
			target.data[12] = value2;
			if(!target.fixed) {
				if(15 >= target.length) target.length = 16;
				if(target.data.length < target.length) {
					var data15;
					var this16;
					this16 = new Array(target.data.length + 10);
					data15 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(target.data,0,data15,0,target.data.length);
					target.data = data15;
				}
			}
			target.data[15] = 1;
		}
	}
	,clone: function() {
		return new away3d.core.math.Quaternion(this.x,this.y,this.z,this.w);
	}
	,rotatePoint: function(vector,target) {
		var x1;
		var y1;
		var z1;
		var w1;
		var x2 = vector.x;
		var y2 = vector.y;
		var z2 = vector.z;
		if(target == null) target = new openfl.geom.Vector3D();
		w1 = -this.x * x2 - this.y * y2 - this.z * z2;
		x1 = this.w * x2 + this.y * z2 - this.z * y2;
		y1 = this.w * y2 - this.x * z2 + this.z * x2;
		z1 = this.w * z2 + this.x * y2 - this.y * x2;
		target.x = -w1 * this.x + x1 * this.w - y1 * this.z + z1 * this.y;
		target.y = -w1 * this.y + x1 * this.z + y1 * this.w - z1 * this.x;
		target.z = -w1 * this.z - x1 * this.y + y1 * this.x + z1 * this.w;
		return target;
	}
	,copyFrom: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
	}
	,__class__: away3d.core.math.Quaternion
	,__properties__: {get_magnitude:"get_magnitude"}
};
away3d.core.partition = {};
away3d.core.partition.NodeBase = function() {
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._childNodes = this1;
	this._numEntities = 0;
	this._collectionMark = 0;
	this._numChildNodes = 0;
};
$hxClasses["away3d.core.partition.NodeBase"] = away3d.core.partition.NodeBase;
away3d.core.partition.NodeBase.__name__ = ["away3d","core","partition","NodeBase"];
away3d.core.partition.NodeBase.prototype = {
	get_showDebugBounds: function() {
		return this._debugPrimitive != null;
	}
	,set_showDebugBounds: function(value) {
		if(js.Boot.__cast(this._debugPrimitive != null , Bool) == value) return value;
		if(value) this._debugPrimitive = this.createDebugBounds(); else {
			this._debugPrimitive.dispose();
			this._debugPrimitive = null;
		}
		var i = 0;
		while(i < this._numChildNodes) {
			this._childNodes.data[i].set_showDebugBounds(value);
			++i;
		}
		return value;
	}
	,get_parent: function() {
		return this._parent;
	}
	,addNode: function(node) {
		node._parent = this;
		this._numEntities += node._numEntities;
		var this1 = this._childNodes;
		var key = this._numChildNodes++;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = node;
		node.set_showDebugBounds(this._debugPrimitive != null);
		var numEntities = node._numEntities;
		node = this;
		do node._numEntities += numEntities; while((node = node._parent) != null);
	}
	,removeNode: function(node) {
		var index;
		var this1 = this._childNodes;
		var value = -1;
		var _g1 = 0;
		var _g = this1.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this1.data[i] == node) {
				value = i;
				break;
			}
		}
		index = value;
		var this2 = this._childNodes;
		var value1;
		var index1 = --this._numChildNodes;
		value1 = this._childNodes.data[index1];
		if(!this2.fixed) {
			if(index >= this2.length) this2.length = index + 1;
			if(this2.data.length < this2.length) {
				var data;
				var this3;
				this3 = new Array(this2.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(this2.data,0,data,0,this2.data.length);
				this2.data = data;
			}
		}
		this2.data[index] = value1;
		var this4 = this._childNodes;
		var value2 = null;
		if(!this4.fixed) {
			if(this4.length > 0) {
				this4.length--;
				value2 = this4.data[this4.length];
			}
		}
		value2;
		var numEntities = node._numEntities;
		node = this;
		do node._numEntities -= numEntities; while((node = node._parent) != null);
	}
	,isInFrustum: function(planes,numPlanes) {
		return true;
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		return true;
	}
	,findPartitionForEntity: function(entity) {
		return this;
	}
	,acceptTraverser: function(traverser) {
		if(this._numEntities == 0 && this._debugPrimitive == null) return;
		if(traverser.enterNode(this)) {
			var i = 0;
			while(i < this._numChildNodes) ((function($this) {
				var $r;
				var index = i++;
				$r = $this._childNodes.data[index];
				return $r;
			}(this))).acceptTraverser(traverser);
			if(this._debugPrimitive != null) traverser.applyRenderable(this._debugPrimitive);
		}
	}
	,createDebugBounds: function() {
		return null;
	}
	,get_numEntities: function() {
		return this._numEntities;
	}
	,updateNumEntities: function(value) {
		var diff = value - this._numEntities;
		var node = this;
		do node._numEntities += diff; while((node = node._parent) != null);
	}
	,__class__: away3d.core.partition.NodeBase
	,__properties__: {get_numEntities:"get_numEntities",get_parent:"get_parent",set_showDebugBounds:"set_showDebugBounds",get_showDebugBounds:"get_showDebugBounds"}
};
away3d.core.partition.EntityNode = function(entity) {
	away3d.core.partition.NodeBase.call(this);
	this._entity = entity;
	this._numEntities = 1;
};
$hxClasses["away3d.core.partition.EntityNode"] = away3d.core.partition.EntityNode;
away3d.core.partition.EntityNode.__name__ = ["away3d","core","partition","EntityNode"];
away3d.core.partition.EntityNode.__super__ = away3d.core.partition.NodeBase;
away3d.core.partition.EntityNode.prototype = $extend(away3d.core.partition.NodeBase.prototype,{
	get_entity: function() {
		return this._entity;
	}
	,acceptTraverser: function(traverser) {
		traverser.applyEntity(this._entity);
	}
	,removeFromParent: function() {
		if(this._parent != null) this._parent.removeNode(this);
		this._parent = null;
	}
	,isInFrustum: function(planes,numPlanes) {
		if(!this._entity.get_isVisible()) return false;
		return this._entity.get_worldBounds().isInFrustum(planes,numPlanes);
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		if(!this._entity.get_isVisible()) return false;
		return this._entity.isIntersectingRay(rayPosition,rayDirection);
	}
	,__class__: away3d.core.partition.EntityNode
	,__properties__: $extend(away3d.core.partition.NodeBase.prototype.__properties__,{get_entity:"get_entity"})
});
away3d.core.partition.CameraNode = function(camera) {
	away3d.core.partition.EntityNode.call(this,camera);
};
$hxClasses["away3d.core.partition.CameraNode"] = away3d.core.partition.CameraNode;
away3d.core.partition.CameraNode.__name__ = ["away3d","core","partition","CameraNode"];
away3d.core.partition.CameraNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.CameraNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	acceptTraverser: function(traverser) {
	}
	,__class__: away3d.core.partition.CameraNode
});
away3d.core.partition.DirectionalLightNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.DirectionalLightNode"] = away3d.core.partition.DirectionalLightNode;
away3d.core.partition.DirectionalLightNode.__name__ = ["away3d","core","partition","DirectionalLightNode"];
away3d.core.partition.DirectionalLightNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.DirectionalLightNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyDirectionalLight(this._light);
		}
	}
	,__class__: away3d.core.partition.DirectionalLightNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.LightNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.LightNode"] = away3d.core.partition.LightNode;
away3d.core.partition.LightNode.__name__ = ["away3d","core","partition","LightNode"];
away3d.core.partition.LightNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.LightNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyUnknownLight(this._light);
		}
	}
	,__class__: away3d.core.partition.LightNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.LightProbeNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.LightProbeNode"] = away3d.core.partition.LightProbeNode;
away3d.core.partition.LightProbeNode.__name__ = ["away3d","core","partition","LightProbeNode"];
away3d.core.partition.LightProbeNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.LightProbeNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyLightProbe(this._light);
		}
	}
	,__class__: away3d.core.partition.LightProbeNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.MeshNode = function(mesh) {
	away3d.core.partition.EntityNode.call(this,mesh);
	this._mesh = mesh;
};
$hxClasses["away3d.core.partition.MeshNode"] = away3d.core.partition.MeshNode;
away3d.core.partition.MeshNode.__name__ = ["away3d","core","partition","MeshNode"];
away3d.core.partition.MeshNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.MeshNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	get_mesh: function() {
		return this._mesh;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			var subs = this._mesh.get_subMeshes();
			var i = 0;
			var len = subs.length;
			while(i < len) traverser.applyRenderable((function($this) {
				var $r;
				var index = i++;
				$r = subs.data[index];
				return $r;
			}(this)));
		}
	}
	,__class__: away3d.core.partition.MeshNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_mesh:"get_mesh"})
});
away3d.core.partition.NullNode = function() {
	away3d.core.partition.NodeBase.call(this);
};
$hxClasses["away3d.core.partition.NullNode"] = away3d.core.partition.NullNode;
away3d.core.partition.NullNode.__name__ = ["away3d","core","partition","NullNode"];
away3d.core.partition.NullNode.__super__ = away3d.core.partition.NodeBase;
away3d.core.partition.NullNode.prototype = $extend(away3d.core.partition.NodeBase.prototype,{
	__class__: away3d.core.partition.NullNode
});
away3d.core.partition.Partition3D = function(rootNode) {
	this._rootNode = rootNode;
	if(rootNode == null) this._rootNode = new away3d.core.partition.NullNode();
};
$hxClasses["away3d.core.partition.Partition3D"] = away3d.core.partition.Partition3D;
away3d.core.partition.Partition3D.__name__ = ["away3d","core","partition","Partition3D"];
away3d.core.partition.Partition3D.prototype = {
	get_showDebugBounds: function() {
		return this._rootNode.get_showDebugBounds();
	}
	,set_showDebugBounds: function(value) {
		this._rootNode.set_showDebugBounds(value);
		return value;
	}
	,traverse: function(traverser) {
		if(this._updatesMade) this.updateEntities();
		++away3d.core.traverse.PartitionTraverser._collectionMark;
		this._rootNode.acceptTraverser(traverser);
	}
	,markForUpdate: function(entity) {
		var node = entity.getEntityPartitionNode();
		var t = this._updateQueue;
		while(t != null) {
			if(node == t) return;
			t = t._updateQueueNext;
		}
		node._updateQueueNext = this._updateQueue;
		this._updateQueue = node;
		this._updatesMade = true;
	}
	,removeEntity: function(entity) {
		var node = entity.getEntityPartitionNode();
		var t;
		node.removeFromParent();
		if(node == this._updateQueue) this._updateQueue = node._updateQueueNext; else {
			t = this._updateQueue;
			while(t != null && t._updateQueueNext != node) t = t._updateQueueNext;
			if(t != null) t._updateQueueNext = node._updateQueueNext;
		}
		node._updateQueueNext = null;
		if(this._updateQueue == null) this._updatesMade = false;
	}
	,updateEntities: function() {
		var node = this._updateQueue;
		var targetNode;
		var t;
		this._updateQueue = null;
		this._updatesMade = false;
		do {
			targetNode = this._rootNode.findPartitionForEntity(node.get_entity());
			if(node.get_parent() != targetNode) {
				if(node != null) node.removeFromParent();
				targetNode.addNode(node);
			}
			t = node._updateQueueNext;
			node._updateQueueNext = null;
			node.get_entity().internalUpdate();
		} while((node = t) != null);
	}
	,__class__: away3d.core.partition.Partition3D
	,__properties__: {set_showDebugBounds:"set_showDebugBounds",get_showDebugBounds:"get_showDebugBounds"}
};
away3d.core.partition.PointLightNode = function(light) {
	away3d.core.partition.EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.PointLightNode"] = away3d.core.partition.PointLightNode;
away3d.core.partition.PointLightNode.__name__ = ["away3d","core","partition","PointLightNode"];
away3d.core.partition.PointLightNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.PointLightNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyPointLight(this._light);
		}
	}
	,__class__: away3d.core.partition.PointLightNode
	,__properties__: $extend(away3d.core.partition.EntityNode.prototype.__properties__,{get_light:"get_light"})
});
away3d.core.partition.RenderableNode = function(renderable) {
	away3d.core.partition.EntityNode.call(this,js.Boot.__cast(renderable , away3d.entities.Entity));
	this._renderable = renderable;
};
$hxClasses["away3d.core.partition.RenderableNode"] = away3d.core.partition.RenderableNode;
away3d.core.partition.RenderableNode.__name__ = ["away3d","core","partition","RenderableNode"];
away3d.core.partition.RenderableNode.__super__ = away3d.core.partition.EntityNode;
away3d.core.partition.RenderableNode.prototype = $extend(away3d.core.partition.EntityNode.prototype,{
	acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d.core.partition.EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyRenderable(this._renderable);
		}
	}
	,__class__: away3d.core.partition.RenderableNode
});
away3d.core.pick = {};
away3d.core.pick.IPicker = function() { };
$hxClasses["away3d.core.pick.IPicker"] = away3d.core.pick.IPicker;
away3d.core.pick.IPicker.__name__ = ["away3d","core","pick","IPicker"];
away3d.core.pick.IPicker.prototype = {
	__class__: away3d.core.pick.IPicker
	,__properties__: {set_onlyMouseEnabled:"set_onlyMouseEnabled",get_onlyMouseEnabled:"get_onlyMouseEnabled"}
};
away3d.core.pick.IPickingCollider = function() { };
$hxClasses["away3d.core.pick.IPickingCollider"] = away3d.core.pick.IPickingCollider;
away3d.core.pick.IPickingCollider.__name__ = ["away3d","core","pick","IPickingCollider"];
away3d.core.pick.IPickingCollider.prototype = {
	__class__: away3d.core.pick.IPickingCollider
};
away3d.core.pick.PickingCollisionVO = function(entity) {
	this.entity = entity;
};
$hxClasses["away3d.core.pick.PickingCollisionVO"] = away3d.core.pick.PickingCollisionVO;
away3d.core.pick.PickingCollisionVO.__name__ = ["away3d","core","pick","PickingCollisionVO"];
away3d.core.pick.PickingCollisionVO.prototype = {
	__class__: away3d.core.pick.PickingCollisionVO
};
away3d.core.pick.RaycastPicker = function(findClosestCollision) {
	this._raycastCollector = new away3d.core.traverse.RaycastCollector();
	this._ignoredEntities = new Array();
	this._onlyMouseEnabled = true;
	this._findClosestCollision = findClosestCollision;
	this._entities = new Array();
};
$hxClasses["away3d.core.pick.RaycastPicker"] = away3d.core.pick.RaycastPicker;
away3d.core.pick.RaycastPicker.__name__ = ["away3d","core","pick","RaycastPicker"];
away3d.core.pick.RaycastPicker.__interfaces__ = [away3d.core.pick.IPicker];
away3d.core.pick.RaycastPicker.prototype = {
	get_onlyMouseEnabled: function() {
		return this._onlyMouseEnabled;
	}
	,set_onlyMouseEnabled: function(value) {
		this._onlyMouseEnabled = value;
		return value;
	}
	,getViewCollision: function(x,y,view) {
		var collector = view.get_entityCollector();
		if(collector.get_numMouseEnableds() == 0) return null;
		var rayPosition = view.unproject(x,y,0);
		var rayDirection = view.unproject(x,y,1);
		rayDirection.x = rayDirection.x - rayPosition.x;
		rayDirection.y = rayDirection.y - rayPosition.y;
		rayDirection.z = rayDirection.z - rayPosition.z;
		this._numEntities = 0;
		var node = collector.get_entityHead();
		var entity;
		while(node != null) {
			entity = node.entity;
			if(this.isIgnored(entity)) {
				node = node.next;
				continue;
			}
			if(entity.get_isVisible() && entity.isIntersectingRay(rayPosition,rayDirection)) this._entities[this._numEntities++] = entity;
			node = node.next;
		}
		if(this._numEntities == 0) return null;
		return this.getPickingCollisionVO();
	}
	,getSceneCollision: function(position,direction,scene) {
		this._raycastCollector.clear();
		this._raycastCollector.set_rayPosition(position);
		this._raycastCollector.set_rayDirection(direction);
		scene.traversePartitions(this._raycastCollector);
		this._numEntities = 0;
		var node = this._raycastCollector.get_entityHead();
		var entity;
		while(node != null) {
			entity = node.entity;
			if(this.isIgnored(entity)) {
				node = node.next;
				continue;
			}
			this._entities[this._numEntities++] = entity;
			node = node.next;
		}
		if(this._numEntities == 0) return null;
		return this.getPickingCollisionVO();
	}
	,getEntityCollision: function(position,direction,entities) {
		this._numEntities = 0;
		var entity;
		var _g = 0;
		while(_g < entities.length) {
			var entity1 = entities[_g];
			++_g;
			if(entity1.isIntersectingRay(position,direction)) this._entities[this._numEntities++] = entity1;
		}
		return this.getPickingCollisionVO();
	}
	,setIgnoreList: function(entities) {
		this._ignoredEntities = entities;
	}
	,isIgnored: function(entity) {
		if(this._onlyMouseEnabled && (!entity._ancestorsAllowMouseEnabled || !entity.get_mouseEnabled())) return true;
		var ignoredEntity;
		var _g = 0;
		var _g1 = this._ignoredEntities;
		while(_g < _g1.length) {
			var ignoredEntity1 = _g1[_g];
			++_g;
			if(ignoredEntity1 == entity) return true;
		}
		return false;
	}
	,sortOnNearT: function(entity1,entity2) {
		if(entity1.get_pickingCollisionVO().rayEntryDistance > entity2.get_pickingCollisionVO().rayEntryDistance) return 1; else return -1;
	}
	,getPickingCollisionVO: function() {
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._entities),this._numEntities);
		this._entities.sort($bind(this,this.sortOnNearT));
		var shortestCollisionDistance = Math.POSITIVE_INFINITY;
		var bestCollisionVO = null;
		var pickingCollisionVO;
		var entity;
		var i;
		var _g1 = 0;
		var _g = this._numEntities;
		while(_g1 < _g) {
			var i1 = _g1++;
			entity = this._entities[i1];
			pickingCollisionVO = entity._pickingCollisionVO;
			if(entity.get_pickingCollider() != null) {
				if((bestCollisionVO == null || pickingCollisionVO.rayEntryDistance < bestCollisionVO.rayEntryDistance) && entity.collidesBefore(shortestCollisionDistance,this._findClosestCollision)) {
					shortestCollisionDistance = pickingCollisionVO.rayEntryDistance;
					bestCollisionVO = pickingCollisionVO;
					if(!this._findClosestCollision) {
						this.updateLocalPosition(pickingCollisionVO);
						return pickingCollisionVO;
					}
				}
			} else if(bestCollisionVO == null || pickingCollisionVO.rayEntryDistance < bestCollisionVO.rayEntryDistance) {
				if(!pickingCollisionVO.rayOriginIsInsideBounds) {
					this.updateLocalPosition(pickingCollisionVO);
					return pickingCollisionVO;
				}
			}
		}
		return bestCollisionVO;
	}
	,updateLocalPosition: function(pickingCollisionVO) {
		if(pickingCollisionVO.localPosition == null) pickingCollisionVO.localPosition = new openfl.geom.Vector3D();
		var collisionPos = pickingCollisionVO.localPosition;
		var rayDir = pickingCollisionVO.localRayDirection;
		var rayPos = pickingCollisionVO.localRayPosition;
		var t = pickingCollisionVO.rayEntryDistance;
		collisionPos.x = rayPos.x + t * rayDir.x;
		collisionPos.y = rayPos.y + t * rayDir.y;
		collisionPos.z = rayPos.z + t * rayDir.z;
	}
	,dispose: function() {
	}
	,__class__: away3d.core.pick.RaycastPicker
	,__properties__: {set_onlyMouseEnabled:"set_onlyMouseEnabled",get_onlyMouseEnabled:"get_onlyMouseEnabled"}
};
away3d.core.traverse = {};
away3d.core.traverse.PartitionTraverser = function() {
};
$hxClasses["away3d.core.traverse.PartitionTraverser"] = away3d.core.traverse.PartitionTraverser;
away3d.core.traverse.PartitionTraverser.__name__ = ["away3d","core","traverse","PartitionTraverser"];
away3d.core.traverse.PartitionTraverser.prototype = {
	enterNode: function(node) {
		return true;
	}
	,applySkyBox: function(renderable) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyRenderable: function(renderable) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyUnknownLight: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyDirectionalLight: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyPointLight: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyLightProbe: function(light) {
		throw new away3d.errors.AbstractMethodError();
	}
	,applyEntity: function(entity) {
		throw new away3d.errors.AbstractMethodError();
	}
	,get_entryPoint: function() {
		return this._entryPoint;
	}
	,__class__: away3d.core.traverse.PartitionTraverser
	,__properties__: {get_entryPoint:"get_entryPoint"}
};
away3d.core.traverse.EntityCollector = function() {
	away3d.core.traverse.PartitionTraverser.call(this);
	this.init();
};
$hxClasses["away3d.core.traverse.EntityCollector"] = away3d.core.traverse.EntityCollector;
away3d.core.traverse.EntityCollector.__name__ = ["away3d","core","traverse","EntityCollector"];
away3d.core.traverse.EntityCollector.__super__ = away3d.core.traverse.PartitionTraverser;
away3d.core.traverse.EntityCollector.prototype = $extend(away3d.core.traverse.PartitionTraverser.prototype,{
	init: function() {
		this._lights = new Array();
		this._directionalLights = new Array();
		this._pointLights = new Array();
		this._lightProbes = new Array();
		this._renderableListItemPool = new away3d.core.data.RenderableListItemPool();
		this._entityListItemPool = new away3d.core.data.EntityListItemPool();
		this._numEntities = 0;
		this._numLights = 0;
		this._numTriangles = 0;
		this._numMouseEnableds = 0;
		this._numDirectionalLights = 0;
		this._numPointLights = 0;
		this._numLightProbes = 0;
		this._numCullPlanes = 0;
	}
	,get_camera: function() {
		return this._camera;
	}
	,set_camera: function(value) {
		this._camera = value;
		this._entryPoint = this._camera.get_scenePosition();
		this._cameraForward = this._camera.get_forwardVector();
		this._cullPlanes = this._camera.get_frustumPlanes();
		return value;
	}
	,get_cullPlanes: function() {
		return this._customCullPlanes;
	}
	,set_cullPlanes: function(value) {
		this._customCullPlanes = value;
		return value;
	}
	,get_numMouseEnableds: function() {
		return this._numMouseEnableds;
	}
	,get_skyBox: function() {
		return this._skyBox;
	}
	,get_opaqueRenderableHead: function() {
		return this._opaqueRenderableHead;
	}
	,set_opaqueRenderableHead: function(value) {
		this._opaqueRenderableHead = value;
		return value;
	}
	,get_blendedRenderableHead: function() {
		return this._blendedRenderableHead;
	}
	,set_blendedRenderableHead: function(value) {
		this._blendedRenderableHead = value;
		return value;
	}
	,get_entityHead: function() {
		return this._entityHead;
	}
	,get_lights: function() {
		return this._lights;
	}
	,get_directionalLights: function() {
		return this._directionalLights;
	}
	,get_pointLights: function() {
		return this._pointLights;
	}
	,get_lightProbes: function() {
		return this._lightProbes;
	}
	,clear: function() {
		if(this._camera != null) {
			this._entryPoint = this._camera.get_scenePosition();
			this._cameraForward = this._camera.get_forwardVector();
		}
		if(this._customCullPlanes != null) this._cullPlanes = this._customCullPlanes; else if(this._camera != null) this._cullPlanes = this._camera.get_frustumPlanes(); else this._cullPlanes = null;
		if(this._cullPlanes != null) this._numCullPlanes = this._cullPlanes.length; else this._numCullPlanes = 0;
		this._numTriangles = this._numMouseEnableds = 0;
		this._blendedRenderableHead = null;
		this._opaqueRenderableHead = null;
		this._entityHead = null;
		this._renderableListItemPool.freeAll();
		this._entityListItemPool.freeAll();
		this._skyBox = null;
		if(this._numLights > 0) {
			this._lights = [];
			this._numLights = 0;
		}
		if(this._numDirectionalLights > 0) {
			this._directionalLights = [];
			this._numDirectionalLights = 0;
		}
		if(this._numPointLights > 0) {
			this._pointLights = [];
			this._numPointLights = 0;
		}
		if(this._numLightProbes > 0) {
			this._lightProbes = [];
			this._numLightProbes = 0;
		}
	}
	,enterNode: function(node) {
		var enter = away3d.core.traverse.PartitionTraverser._collectionMark != node._collectionMark && node.isInFrustum(this._cullPlanes,this._numCullPlanes);
		node._collectionMark = away3d.core.traverse.PartitionTraverser._collectionMark;
		return enter;
	}
	,applySkyBox: function(renderable) {
		this._skyBox = renderable;
	}
	,applyRenderable: function(renderable) {
		var material;
		var entity = renderable.get_sourceEntity();
		if(renderable.get_mouseEnabled()) ++this._numMouseEnableds;
		this._numTriangles += renderable.get_numTriangles();
		material = renderable.get_material();
		if(material != null) {
			var item = this._renderableListItemPool.getItem();
			item.renderable = renderable;
			item.materialId = material._uniqueId;
			item.renderOrderId = material._renderOrderId;
			item.cascaded = false;
			var dx = this._entryPoint.x - entity.get_x();
			var dy = this._entryPoint.y - entity.get_y();
			var dz = this._entryPoint.z - entity.get_z();
			item.zIndex = dx * this._cameraForward.x + dy * this._cameraForward.y + dz * this._cameraForward.z + entity.get_zOffset();
			item.renderSceneTransform = renderable.getRenderSceneTransform(this._camera);
			if(material.get_requiresBlending()) {
				item.next = this._blendedRenderableHead;
				this._blendedRenderableHead = item;
			} else {
				item.next = this._opaqueRenderableHead;
				this._opaqueRenderableHead = item;
			}
		}
	}
	,applyEntity: function(entity) {
		++this._numEntities;
		var item = this._entityListItemPool.getItem();
		item.entity = entity;
		item.next = this._entityHead;
		this._entityHead = item;
	}
	,applyUnknownLight: function(light) {
		this._lights[this._numLights++] = light;
	}
	,applyDirectionalLight: function(light) {
		this._lights[this._numLights++] = light;
		this._directionalLights[this._numDirectionalLights++] = light;
	}
	,applyPointLight: function(light) {
		this._lights[this._numLights++] = light;
		this._pointLights[this._numPointLights++] = light;
	}
	,applyLightProbe: function(light) {
		this._lights[this._numLights++] = light;
		this._lightProbes[this._numLightProbes++] = light;
	}
	,get_numTriangles: function() {
		return this._numTriangles;
	}
	,cleanUp: function() {
	}
	,__class__: away3d.core.traverse.EntityCollector
	,__properties__: $extend(away3d.core.traverse.PartitionTraverser.prototype.__properties__,{get_numTriangles:"get_numTriangles",get_lightProbes:"get_lightProbes",get_pointLights:"get_pointLights",get_directionalLights:"get_directionalLights",get_lights:"get_lights",get_entityHead:"get_entityHead",set_blendedRenderableHead:"set_blendedRenderableHead",get_blendedRenderableHead:"get_blendedRenderableHead",set_opaqueRenderableHead:"set_opaqueRenderableHead",get_opaqueRenderableHead:"get_opaqueRenderableHead",get_skyBox:"get_skyBox",get_numMouseEnableds:"get_numMouseEnableds",set_cullPlanes:"set_cullPlanes",get_cullPlanes:"get_cullPlanes",set_camera:"set_camera",get_camera:"get_camera"})
});
away3d.core.traverse.RaycastCollector = function() {
	this._rayPosition = new openfl.geom.Vector3D();
	this._rayDirection = new openfl.geom.Vector3D();
	away3d.core.traverse.EntityCollector.call(this);
};
$hxClasses["away3d.core.traverse.RaycastCollector"] = away3d.core.traverse.RaycastCollector;
away3d.core.traverse.RaycastCollector.__name__ = ["away3d","core","traverse","RaycastCollector"];
away3d.core.traverse.RaycastCollector.__super__ = away3d.core.traverse.EntityCollector;
away3d.core.traverse.RaycastCollector.prototype = $extend(away3d.core.traverse.EntityCollector.prototype,{
	get_rayPosition: function() {
		return this._rayPosition;
	}
	,set_rayPosition: function(value) {
		this._rayPosition = value;
		return value;
	}
	,get_rayDirection: function() {
		return this._rayDirection;
	}
	,set_rayDirection: function(value) {
		this._rayDirection = value;
		return value;
	}
	,enterNode: function(node) {
		return node.isIntersectingRay(this._rayPosition,this._rayDirection);
	}
	,applySkyBox: function(renderable) {
	}
	,applyRenderable: function(renderable) {
	}
	,applyUnknownLight: function(light) {
	}
	,__class__: away3d.core.traverse.RaycastCollector
	,__properties__: $extend(away3d.core.traverse.EntityCollector.prototype.__properties__,{set_rayDirection:"set_rayDirection",get_rayDirection:"get_rayDirection",set_rayPosition:"set_rayPosition",get_rayPosition:"get_rayPosition"})
});
openfl.geom.Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl.geom.Vector3D;
openfl.geom.Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl.geom.Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl.geom.Vector3D.X_AXIS = null;
openfl.geom.Vector3D.Y_AXIS = null;
openfl.geom.Vector3D.Z_AXIS = null;
openfl.geom.Vector3D.angleBetween = function(a,b) {
	var a0 = new openfl.geom.Vector3D(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new openfl.geom.Vector3D(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
openfl.geom.Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl.geom.Vector3D.get_X_AXIS = function() {
	return new openfl.geom.Vector3D(1,0,0);
};
openfl.geom.Vector3D.get_Y_AXIS = function() {
	return new openfl.geom.Vector3D(0,1,0);
};
openfl.geom.Vector3D.get_Z_AXIS = function() {
	return new openfl.geom.Vector3D(0,0,1);
};
openfl.geom.Vector3D.prototype = {
	add: function(a) {
		return new openfl.geom.Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl.geom.Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl.geom.Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl.geom.Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl.geom.Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
openfl.geom.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl.geom.Rectangle;
openfl.geom.Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl.geom.Rectangle.prototype = {
	clone: function() {
		return new openfl.geom.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl.geom.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl.geom.Rectangle();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new openfl.geom.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime.math.Rectangle(this.x,this.y,this.width,this.height);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl.geom.Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl.geom.Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl.geom.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
away3d.core.pick.ShaderPicker = function() {
	this._onlyMouseEnabled = true;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._interactives = this1;
	this._localHitPosition = new openfl.geom.Vector3D();
	this._hitUV = new openfl.geom.Point();
	this._localHitNormal = new openfl.geom.Vector3D();
	this._rayPos = new openfl.geom.Vector3D();
	this._rayDir = new openfl.geom.Vector3D();
	this._id = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),4,0);
	this._viewportData = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this5;
		this5 = new openfl.VectorData();
		{
			var this6;
			this6 = new Array(0);
			this5.data = this6;
		}
		this5.length = 0;
		this5.fixed = false;
		$r = this5;
		return $r;
	}(this))),4,0);
	this._boundOffsetScale = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this7;
		this7 = new openfl.VectorData();
		{
			var this8;
			this8 = new Array(0);
			this7.data = this8;
		}
		this7.length = 0;
		this7.fixed = false;
		$r = this7;
		return $r;
	}(this))),8,0);
	var this9 = this._boundOffsetScale;
	if(!this9.fixed) {
		if(3 >= this9.length) this9.length = 4;
		if(this9.data.length < this9.length) {
			var data;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data,0,this9.data.length);
			this9.data = data;
		}
	}
	this9.data[3] = 0;
	var this11 = this._boundOffsetScale;
	if(!this11.fixed) {
		if(7 >= this11.length) this11.length = 8;
		if(this11.data.length < this11.length) {
			var data1;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data1 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data1,0,this11.data.length);
			this11.data = data1;
		}
	}
	this11.data[7] = 1;
};
$hxClasses["away3d.core.pick.ShaderPicker"] = away3d.core.pick.ShaderPicker;
away3d.core.pick.ShaderPicker.__name__ = ["away3d","core","pick","ShaderPicker"];
away3d.core.pick.ShaderPicker.__interfaces__ = [away3d.core.pick.IPicker];
away3d.core.pick.ShaderPicker.prototype = {
	get_onlyMouseEnabled: function() {
		return this._onlyMouseEnabled;
	}
	,set_onlyMouseEnabled: function(value) {
		this._onlyMouseEnabled = value;
		return value;
	}
	,getViewCollision: function(x,y,view) {
		var collector = view.get_entityCollector();
		this._stage3DProxy = view.get_stage3DProxy();
		if(this._stage3DProxy == null) return null;
		this._context = this._stage3DProxy._context3D;
		var this1 = this._viewportData;
		var value = view.get_width();
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = value;
		var this3 = this._viewportData;
		var value1 = view.get_height();
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = value1;
		var this5 = this._viewportData;
		var value2 = -(this._projX = 2 * x / view.get_width() - 1);
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = value2;
		var this7 = this._viewportData;
		var value3 = this._projY = 2 * y / view.get_height() - 1;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = value3;
		this._potentialFound = false;
		this.draw(collector,null);
		this._context.setVertexBufferAt(0,null);
		if(this._context == null || !this._potentialFound) return null;
		if(this._bitmapData == null) this._bitmapData = new openfl.display.BitmapData(1,1,false,0);
		this._context.drawToBitmapData(this._bitmapData);
		this._hitColor = this._bitmapData.getPixel(0,0);
		if(this._hitColor == 0) {
			this._context.present();
			return null;
		}
		this._hitRenderable = this._interactives.data[this._hitColor - 1];
		this._hitEntity = this._hitRenderable.get_sourceEntity();
		if(this._onlyMouseEnabled && (!this._hitEntity._ancestorsAllowMouseEnabled || !this._hitEntity.get_mouseEnabled())) return null;
		var _collisionVO = this._hitEntity.get_pickingCollisionVO();
		if(this._hitRenderable.get_shaderPickingDetails()) {
			this.getHitDetails(view.get_camera());
			_collisionVO.localPosition = this._localHitPosition;
			_collisionVO.localNormal = this._localHitNormal;
			_collisionVO.uv = this._hitUV;
			_collisionVO.index = this._faceIndex;
			_collisionVO.subGeometryIndex = this._subGeometryIndex;
		} else {
			_collisionVO.localPosition = null;
			_collisionVO.localNormal = null;
			_collisionVO.uv = null;
			_collisionVO.index = 0;
			_collisionVO.subGeometryIndex = 0;
		}
		return _collisionVO;
	}
	,getSceneCollision: function(position,direction,scene) {
		return null;
	}
	,draw: function(entityCollector,target) {
		var camera = entityCollector.get_camera();
		this._context.clear(0,0,0,1);
		this._stage3DProxy.set_scissorRect(away3d.core.pick.ShaderPicker.MOUSE_SCISSOR_RECT);
		var value = [];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this._interactives = vectorData;
		this._interactiveId = 0;
		if(this._objectProgram3D == null) this.initObjectProgram3D();
		this._context.setBlendFactors(1,0);
		this._context.setDepthTest(true,513);
		this._context.setProgram(this._objectProgram3D);
		this._context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,4,(function($this) {
			var $r;
			var this2 = $this._viewportData;
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this2.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value1.push(this2.data[i1]);
				}
			}
			$r = value1;
			return $r;
		}(this)),1);
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),camera);
		this.drawRenderables(entityCollector.get_blendedRenderableHead(),camera);
	}
	,drawRenderables: function(item,camera) {
		var matrix = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		var renderable;
		var viewProjection = camera.get_viewProjection();
		while(item != null) {
			renderable = item.renderable;
			if(renderable.get_sourceEntity().get_scene() == null || !renderable.get_mouseEnabled() && this._onlyMouseEnabled) {
				item = item.next;
				continue;
			}
			this._potentialFound = true;
			this._context.setCulling(renderable.get_material() != null && renderable.get_material().get_bothSides()?0:1028);
			var this1 = this._interactives;
			var key = this._interactiveId++;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = renderable;
			var this3 = this._id;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = (this._interactiveId >> 8) / 255;
			var this5 = this._id;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = (this._interactiveId & 255) / 255;
			matrix.copyFrom(renderable.getRenderSceneTransform(camera));
			matrix.append(viewProjection);
			this._context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,matrix,true);
			this._context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
				var $r;
				var this7 = $this._id;
				var value = new Array();
				{
					var _g1 = 0;
					var _g = this7.data.length;
					while(_g1 < _g) {
						var i = _g1++;
						value.push(this7.data[i]);
					}
				}
				$r = value;
				return $r;
			}(this)),1);
			renderable.activateVertexBuffer(0,this._stage3DProxy);
			this._context.drawTriangles(renderable.getIndexBuffer(this._stage3DProxy),0,renderable.get_numTriangles());
			item = item.next;
		}
	}
	,updateRay: function(camera) {
		this._rayPos = camera.get_scenePosition();
		this._rayDir = camera.getRay(this._projX,this._projY,1);
		this._rayDir.normalize();
	}
	,initObjectProgram3D: function() {
		var vertexCode;
		var fragmentCode;
		this._objectProgram3D = this._context.createProgram();
		vertexCode = "m44 vt0, va0, vc0\t\t\t\n" + "mul vt1.xy, vt0.w, vc4.zw\t\n" + "add vt0.xy, vt0.xy, vt1.xy\t\n" + "mul vt0.xy, vt0.xy, vc4.xy\t\n" + "mov op, vt0\t\n";
		fragmentCode = "mov oc, fc0\n";
		this._objectProgram3D.upload(openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexCode),openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentCode));
	}
	,initTriangleProgram3D: function() {
		var vertexCode;
		var fragmentCode;
		this._triangleProgram3D = this._context.createProgram();
		vertexCode = "add vt0, va0, vc5 \t\t\t\n" + "mul vt0, vt0, vc6 \t\t\t\n" + "mov v0, vt0\t\t\t\t\n" + "m44 vt0, va0, vc0\t\t\t\n" + "mul vt1.xy, vt0.w, vc4.zw\t\n" + "add vt0.xy, vt0.xy, vt1.xy\t\n" + "mul vt0.xy, vt0.xy, vc4.xy\t\n" + "mov op, vt0\t\n";
		fragmentCode = "mov oc, v0\n";
		this._triangleProgram3D.upload(openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,vertexCode),openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,fragmentCode));
	}
	,getHitDetails: function(camera) {
		this.getApproximatePosition(camera);
		this.getPreciseDetails(camera);
	}
	,getApproximatePosition: function(camera) {
		var entity = this._hitRenderable.get_sourceEntity();
		var col;
		var scX;
		var scY;
		var scZ;
		var offsX;
		var offsY;
		var offsZ;
		var localViewProjection = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		localViewProjection.copyFrom(this._hitRenderable.getRenderSceneTransform(camera));
		localViewProjection.append(camera.get_viewProjection());
		if(this._triangleProgram3D == null) this.initTriangleProgram3D();
		var this1 = this._boundOffsetScale;
		var value = 1 / (scX = entity.get_maxX() - entity.get_minX());
		if(!this1.fixed) {
			if(4 >= this1.length) this1.length = 5;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[4] = value;
		var this3 = this._boundOffsetScale;
		var value1 = 1 / (scY = entity.get_maxY() - entity.get_minY());
		if(!this3.fixed) {
			if(5 >= this3.length) this3.length = 6;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[5] = value1;
		var this5 = this._boundOffsetScale;
		var value2 = 1 / (scZ = entity.get_maxZ() - entity.get_minZ());
		if(!this5.fixed) {
			if(6 >= this5.length) this5.length = 7;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[6] = value2;
		var this7 = this._boundOffsetScale;
		var value3 = offsX = -entity.get_minX();
		if(!this7.fixed) {
			if(0 >= this7.length) this7.length = 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[0] = value3;
		var this9 = this._boundOffsetScale;
		var value4 = offsY = -entity.get_minY();
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = value4;
		var this11 = this._boundOffsetScale;
		var value5 = offsZ = -entity.get_minZ();
		if(!this11.fixed) {
			if(2 >= this11.length) this11.length = 3;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[2] = value5;
		this._context.setProgram(this._triangleProgram3D);
		this._context.clear(0,0,0,0,1,0,256);
		this._context.setScissorRectangle(away3d.core.pick.ShaderPicker.MOUSE_SCISSOR_RECT);
		this._context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,localViewProjection,true);
		this._context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,5,(function($this) {
			var $r;
			var this13 = $this._boundOffsetScale;
			var value6 = new Array();
			{
				var _g1 = 0;
				var _g = this13.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value6.push(this13.data[i]);
				}
			}
			$r = value6;
			return $r;
		}(this)),2);
		this._hitRenderable.activateVertexBuffer(0,this._stage3DProxy);
		this._context.drawTriangles(this._hitRenderable.getIndexBuffer(this._stage3DProxy),0,this._hitRenderable.get_numTriangles());
		this._context.drawToBitmapData(this._bitmapData);
		col = this._bitmapData.getPixel(0,0);
		this._localHitPosition.x = (col >> 16 & 255) * scX / 255 - offsX;
		this._localHitPosition.y = (col >> 8 & 255) * scY / 255 - offsY;
		this._localHitPosition.z = (col & 255) * scZ / 255 - offsZ;
	}
	,getPreciseDetails: function(camera) {
		var subGeom = (js.Boot.__cast(this._hitRenderable , away3d.core.base.SubMesh)).get_subGeometry();
		var indices = subGeom.get_indexData();
		var vertices = subGeom.get_vertexData();
		var len = indices.length;
		var x1;
		var y1;
		var z1;
		var x2;
		var y2;
		var z2;
		var x3;
		var y3;
		var z3;
		var i = 0;
		var j = 1;
		var k = 2;
		var t1;
		var t2;
		var t3;
		var v0x;
		var v0y;
		var v0z;
		var v1x;
		var v1y;
		var v1z;
		var v2x;
		var v2y;
		var v2z;
		var dot00;
		var dot01;
		var dot02;
		var dot11;
		var dot12;
		var s;
		var t;
		var invDenom;
		var uvs = subGeom.get_UVData();
		var normals = subGeom.get_faceNormals();
		var x = this._localHitPosition.x;
		var y = this._localHitPosition.y;
		var z = this._localHitPosition.z;
		var u;
		var v;
		var ui1;
		var ui2;
		var ui3;
		var s0x;
		var s0y;
		var s0z;
		var s1x;
		var s1y;
		var s1z;
		var nl;
		var stride = subGeom.get_vertexStride();
		var vertexOffset = subGeom.get_vertexOffset();
		this.updateRay(camera);
		while(i < len) {
			t1 = vertexOffset + indices.data[i] * stride;
			t2 = vertexOffset + indices.data[j] * stride;
			t3 = vertexOffset + indices.data[k] * stride;
			x1 = vertices.data[t1];
			y1 = vertices.data[t1 + 1];
			z1 = vertices.data[t1 + 2];
			x2 = vertices.data[t2];
			y2 = vertices.data[t2 + 1];
			z2 = vertices.data[t2 + 2];
			x3 = vertices.data[t3];
			y3 = vertices.data[t3 + 1];
			z3 = vertices.data[t3 + 2];
			if(!(x < x1 && x < x2 && x < x3 || y < y1 && y < y2 && y < y3 || z < z1 && z < z2 && z < z3 || x > x1 && x > x2 && x > x3 || y > y1 && y > y2 && y > y3 || z > z1 && z > z2 && z > z3)) {
				v0x = x3 - x1;
				v0y = y3 - y1;
				v0z = z3 - z1;
				v1x = x2 - x1;
				v1y = y2 - y1;
				v1z = z2 - z1;
				v2x = x - x1;
				v2y = y - y1;
				v2z = z - z1;
				dot00 = v0x * v0x + v0y * v0y + v0z * v0z;
				dot01 = v0x * v1x + v0y * v1y + v0z * v1z;
				dot02 = v0x * v2x + v0y * v2y + v0z * v2z;
				dot11 = v1x * v1x + v1y * v1y + v1z * v1z;
				dot12 = v1x * v2x + v1y * v2y + v1z * v2z;
				invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
				s = (dot11 * dot02 - dot01 * dot12) * invDenom;
				t = (dot00 * dot12 - dot01 * dot02) * invDenom;
				if(s >= 0 && t >= 0 && s + t <= 1) {
					this.getPrecisePosition(this._hitRenderable.get_inverseSceneTransform(),normals.data[i],normals.data[i + 1],normals.data[i + 2],x1,y1,z1);
					v2x = this._localHitPosition.x - x1;
					v2y = this._localHitPosition.y - y1;
					v2z = this._localHitPosition.z - z1;
					s0x = x2 - x1;
					s0y = y2 - y1;
					s0z = z2 - z1;
					s1x = x3 - x1;
					s1y = y3 - y1;
					s1z = z3 - z1;
					this._localHitNormal.x = s0y * s1z - s0z * s1y;
					this._localHitNormal.y = s0z * s1x - s0x * s1z;
					this._localHitNormal.z = s0x * s1y - s0y * s1x;
					nl = 1 / Math.sqrt(this._localHitNormal.x * this._localHitNormal.x + this._localHitNormal.y * this._localHitNormal.y + this._localHitNormal.z * this._localHitNormal.z);
					this._localHitNormal.x *= nl;
					this._localHitNormal.y *= nl;
					this._localHitNormal.z *= nl;
					dot02 = v0x * v2x + v0y * v2y + v0z * v2z;
					dot12 = v1x * v2x + v1y * v2y + v1z * v2z;
					s = (dot11 * dot02 - dot01 * dot12) * invDenom;
					t = (dot00 * dot12 - dot01 * dot02) * invDenom;
					ui1 = indices.data[i] << 1;
					ui2 = indices.data[j] << 1;
					ui3 = indices.data[k] << 1;
					u = uvs.data[ui1];
					v = uvs.data[ui1 + 1];
					this._hitUV.x = u + t * (uvs.data[ui2] - u) + s * (uvs.data[ui3] - u);
					this._hitUV.y = v + t * (uvs.data[ui2 + 1] - v) + s * (uvs.data[ui3 + 1] - v);
					this._faceIndex = i;
					this._subGeometryIndex = away3d.tools.utils.GeomUtil.getMeshSubMeshIndex(js.Boot.__cast(this._hitRenderable , away3d.core.base.SubMesh));
					return;
				}
			}
			i += 3;
			j += 3;
			k += 3;
		}
	}
	,getPrecisePosition: function(invSceneTransform,nx,ny,nz,px,py,pz) {
		var rx;
		var ry;
		var rz;
		var ox;
		var oy;
		var oz;
		var t;
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var cx = this._rayPos.x;
		var cy = this._rayPos.y;
		var cz = this._rayPos.z;
		ox = this._rayDir.x;
		oy = this._rayDir.y;
		oz = this._rayDir.z;
		invSceneTransform.copyRawDataTo(raw);
		rx = raw.data[0] * ox + raw.data[4] * oy + raw.data[8] * oz;
		ry = raw.data[1] * ox + raw.data[5] * oy + raw.data[9] * oz;
		rz = raw.data[2] * ox + raw.data[6] * oy + raw.data[10] * oz;
		ox = raw.data[0] * cx + raw.data[4] * cy + raw.data[8] * cz + raw.data[12];
		oy = raw.data[1] * cx + raw.data[5] * cy + raw.data[9] * cz + raw.data[13];
		oz = raw.data[2] * cx + raw.data[6] * cy + raw.data[10] * cz + raw.data[14];
		t = ((px - ox) * nx + (py - oy) * ny + (pz - oz) * nz) / (rx * nx + ry * ny + rz * nz);
		this._localHitPosition.x = ox + rx * t;
		this._localHitPosition.y = oy + ry * t;
		this._localHitPosition.z = oz + rz * t;
	}
	,dispose: function() {
		this._bitmapData.dispose();
		if(this._triangleProgram3D != null) this._triangleProgram3D.dispose();
		if(this._objectProgram3D != null) this._objectProgram3D.dispose();
		this._triangleProgram3D = null;
		this._objectProgram3D = null;
		this._bitmapData = null;
		this._hitRenderable = null;
		this._hitEntity = null;
	}
	,__class__: away3d.core.pick.ShaderPicker
	,__properties__: {set_onlyMouseEnabled:"set_onlyMouseEnabled",get_onlyMouseEnabled:"get_onlyMouseEnabled"}
};
openfl.geom.Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl.geom.Point;
openfl.geom.Point.__name__ = ["openfl","geom","Point"];
openfl.geom.Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl.geom.Point.interpolate = function(pt1,pt2,f) {
	return new openfl.geom.Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl.geom.Point.polar = function(len,angle) {
	return new openfl.geom.Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl.geom.Point.prototype = {
	add: function(v) {
		return new openfl.geom.Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl.geom.Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl.geom.Point
	,__properties__: {get_length:"get_length"}
};
away3d.utils = {};
away3d.utils.ArrayUtils = function() { };
$hxClasses["away3d.utils.ArrayUtils"] = away3d.utils.ArrayUtils;
away3d.utils.ArrayUtils.__name__ = ["away3d","utils","ArrayUtils"];
away3d.utils.ArrayUtils.reSize = function(either,count,defaultValue) {
	var t = openfl.Lib.getTimer();
	{
		var _g = either;
		switch(_g[1]) {
		case 0:
			var arr = _g[2];
			var c = arr.length;
			while(c < count) {
				arr.push(defaultValue);
				c++;
			}
			while(c > count) {
				arr.pop();
				c--;
			}
			break;
		case 1:
			var vec = _g[2];
			var c1 = vec.length;
			if(!vec.fixed) {
				if(count > vec.length) {
					var data;
					var this1;
					this1 = new Array(count);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data,0,Std["int"](Math.min(vec.data.length,count)));
					vec.data = data;
				}
				vec.length = count;
			}
			count;
			while(c1 < count) {
				var key = c1++;
				var value = defaultValue;
				if(!vec.fixed) {
					if(key >= vec.length) vec.length = key + 1;
					if(vec.data.length < vec.length) {
						var data1;
						var this2;
						this2 = new Array(vec.data.length + 10);
						data1 = this2;
						haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data1,0,vec.data.length);
						vec.data = data1;
					}
				}
				vec.data[key] = value;
			}
			break;
		}
	}
};
away3d.utils.ArrayUtils.Prefill = function(either,count,elem) {
	var t = openfl.Lib.getTimer();
	{
		var _g = either;
		switch(_g[1]) {
		case 0:
			var arr = _g[2];
			arr.splice(0,arr.length);
			var c = 0;
			while(c++ < count) arr.push(elem);
			return arr;
		case 1:
			var vec = _g[2];
			if(!vec.fixed) {
				if(count > vec.length) {
					var data;
					var this1;
					this1 = new Array(count);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data,0,Std["int"](Math.min(vec.data.length,count)));
					vec.data = data;
				}
				vec.length = count;
			}
			count;
			var c1 = 0;
			while(c1 < count) {
				var key = c1++;
				if(!vec.fixed) {
					if(key >= vec.length) vec.length = key + 1;
					if(vec.data.length < vec.length) {
						var data1;
						var this2;
						this2 = new Array(vec.data.length + 10);
						data1 = this2;
						haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data1,0,vec.data.length);
						vec.data = data1;
					}
				}
				vec.data[key] = elem;
			}
			return vec;
		}
	}
};
openfl.display.MovieClip = function() {
	openfl.display.Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl.display.MovieClip;
openfl.display.MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl.display.MovieClip.__super__ = openfl.display.Sprite;
openfl.display.MovieClip.prototype = $extend(openfl.display.Sprite.prototype,{
	gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl.display.MovieClip
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
openfl.display.LoaderInfo = function() {
	openfl.events.EventDispatcher.call(this);
	this.applicationDomain = openfl.system.ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl.display.LoaderInfo;
openfl.display.LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl.display.LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl.display.LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl.events.UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl.display.LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl.display.LoaderInfo.__super__ = openfl.events.EventDispatcher;
openfl.display.LoaderInfo.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	__class__: openfl.display.LoaderInfo
});
openfl.system = {};
openfl.system.ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl.system.ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl.system.ApplicationDomain;
openfl.system.ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl.system.ApplicationDomain.prototype = {
	getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl.system.ApplicationDomain
};
openfl.events.UncaughtErrorEvents = function(target) {
	openfl.events.EventDispatcher.call(this,target);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl.events.UncaughtErrorEvents;
openfl.events.UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl.events.UncaughtErrorEvents.__super__ = openfl.events.EventDispatcher;
openfl.events.UncaughtErrorEvents.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	__class__: openfl.events.UncaughtErrorEvents
});
openfl.Lib = function() { };
$hxClasses["openfl.Lib"] = openfl.Lib;
openfl.Lib.__name__ = ["openfl","Lib"];
openfl.Lib.application = null;
openfl.Lib["as"] = function(v,c) {
	if(js.Boot.__instanceof(v,c)) return v; else return null;
};
openfl.Lib.attach = function(name) {
	return new openfl.display.MovieClip();
};
openfl.Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime.system.System.embed(elementName,width,height,background,assetsPrefix);
};
openfl.Lib.getTimer = function() {
	return lime.system.System.getTimer();
};
openfl.Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl.Lib.notImplemented = function(api) {
	if(!openfl.Lib.__sentWarnings.exists(api)) {
		openfl.Lib.__sentWarnings.set(api,true);
		haxe.Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 114, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl.Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl.Lib.trace = function(arg) {
	haxe.Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 145, className : "openfl.Lib", methodName : "trace"});
};
lime.system = {};
lime.system.System = function() { };
$hxClasses["lime.system.System"] = lime.system.System;
lime.system.System.__name__ = ["lime","system","System"];
lime.system.System.__properties__ = {get_userDirectory:"get_userDirectory",get_fontsDirectory:"get_fontsDirectory",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory"}
lime.system.System.applicationDirectory = null;
lime.system.System.applicationStorageDirectory = null;
lime.system.System.desktopDirectory = null;
lime.system.System.disableCFFI = null;
lime.system.System.documentsDirectory = null;
lime.system.System.fontsDirectory = null;
lime.system.System.userDirectory = null;
lime.system.System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js.Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.background = color;
	ApplicationMain.config.element = htmlElement;
	ApplicationMain.config.width = width;
	ApplicationMain.config.height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime.system.System.exit = function(code) {
};
lime.system.System.findHaxeLib = function(library) {
	return "";
};
lime.system.System.getTimer = function() {
	return Std["int"](new Date().getTime());
};
lime.system.System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(lime.system.System.disableCFFI) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime.system.System.sysName = function() {
	return null;
};
lime.system.System.tryLoad = function(name,library,func,args) {
	return null;
};
lime.system.System.loaderTrace = function(message) {
};
lime.system.System.get_applicationDirectory = function() {
	return null;
};
lime.system.System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime.app.Application.current != null && lime.app.Application.current.config != null) {
		if(lime.app.Application.current.config.company != null) company = lime.app.Application.current.config.company;
		if(lime.app.Application.current.config.file != null) file = lime.app.Application.current.config.file;
	}
	return null;
};
lime.system.System.get_desktopDirectory = function() {
	return null;
};
lime.system.System.get_documentsDirectory = function() {
	return null;
};
lime.system.System.get_fontsDirectory = function() {
	return null;
};
lime.system.System.get_userDirectory = function() {
	return null;
};
haxe.ds._Vector = {};
haxe.ds._Vector.Vector_Impl_ = function() { };
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe.ds._Vector.Vector_Impl_;
haxe.ds._Vector.Vector_Impl_.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe.ds._Vector.Vector_Impl_.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe.ds._Vector.Vector_Impl_.toArray = function(this1) {
	var a = new Array();
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
away3d.utils._ArrayUtils = {};
away3d.utils._ArrayUtils.AcceptEither_Impl_ = function() { };
$hxClasses["away3d.utils._ArrayUtils.AcceptEither_Impl_"] = away3d.utils._ArrayUtils.AcceptEither_Impl_;
away3d.utils._ArrayUtils.AcceptEither_Impl_.__name__ = ["away3d","utils","_ArrayUtils","AcceptEither_Impl_"];
away3d.utils._ArrayUtils.AcceptEither_Impl_.__properties__ = {get_type:"get_type",get_value:"get_value"}
away3d.utils._ArrayUtils.AcceptEither_Impl_._new = function(e) {
	return e;
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.get_value = function(this1) {
	switch(this1[1]) {
	case 0:
		var v = this1[2];
		return v;
	case 1:
		var v = this1[2];
		return v;
	}
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.get_type = function(this1) {
	return this1;
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA = function(v) {
	var e = away3d.utils.Either.Left(v);
	return e;
};
away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB = function(v) {
	var e = away3d.utils.Either.Right(v);
	return e;
};
away3d.utils.Either = $hxClasses["away3d.utils.Either"] = { __ename__ : ["away3d","utils","Either"], __constructs__ : ["Left","Right"] };
away3d.utils.Either.Left = function(v) { var $x = ["Left",0,v]; $x.__enum__ = away3d.utils.Either; $x.toString = $estr; return $x; };
away3d.utils.Either.Right = function(v) { var $x = ["Right",1,v]; $x.__enum__ = away3d.utils.Either; $x.toString = $estr; return $x; };
away3d.core.pick.PickingType = function() { };
$hxClasses["away3d.core.pick.PickingType"] = away3d.core.pick.PickingType;
away3d.core.pick.PickingType.__name__ = ["away3d","core","pick","PickingType"];
away3d.core.render = {};
away3d.core.render.BackgroundImageRenderer = function(stage3DProxy) {
	this.set_stage3DProxy(stage3DProxy);
};
$hxClasses["away3d.core.render.BackgroundImageRenderer"] = away3d.core.render.BackgroundImageRenderer;
away3d.core.render.BackgroundImageRenderer.__name__ = ["away3d","core","render","BackgroundImageRenderer"];
away3d.core.render.BackgroundImageRenderer.prototype = {
	get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(value) {
		if(value == this._stage3DProxy) return value;
		this._stage3DProxy = value;
		this.removeBuffers();
		return value;
	}
	,removeBuffers: function() {
		if(this._vertexBuffer != null) {
			this._vertexBuffer.dispose();
			this._vertexBuffer = null;
			this._program3d.dispose();
			this._program3d = null;
			this._indexBuffer.dispose();
			this._indexBuffer = null;
		}
	}
	,getVertexCode: function() {
		return "mov op, va0\n" + "mov v0, va1";
	}
	,getFragmentCode: function() {
		var format;
		var _sw0_ = this._texture.get_format();
		switch(_sw0_[1]) {
		case 1:
			format = "dxt1,";
			break;
		case 2:
			format = "dxt5,";
			break;
		default:
			format = "";
		}
		return "tex ft0, v0, fs0 <2d, " + format + "linear>\t\n" + "mov oc, ft0";
	}
	,dispose: function() {
		this.removeBuffers();
	}
	,render: function() {
	}
	,initBuffers: function(context) {
		this._vertexBuffer = context.createVertexBuffer(4,4);
		this._program3d = context.createProgram();
		this._indexBuffer = context.createIndexBuffer(6);
		var inds;
		var a = [2,1,0,3,2,0];
		var vectorData = new openfl.VectorData();
		vectorData.length = a.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(a.length);
		vec = this1;
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = a[i];
		}
		vectorData.data = vec;
		inds = vectorData;
		this._indexBuffer.uploadFromVector(inds,0,6);
		this._program3d.upload(openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,this.getVertexCode()),openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,this.getFragmentCode()));
		var w = 2;
		var h = 2;
		var x = -1;
		var y = 1;
		if(this._stage3DProxy.get_scissorRect() != null) {
			x = (this._stage3DProxy.get_scissorRect().x * 2 - this._stage3DProxy.get_viewPort().width) / this._stage3DProxy.get_viewPort().width;
			y = (this._stage3DProxy.get_scissorRect().y * 2 - this._stage3DProxy.get_viewPort().height) / this._stage3DProxy.get_viewPort().height * -1;
			w = 2 / (this._stage3DProxy.get_viewPort().width / this._stage3DProxy.get_scissorRect().width);
			h = 2 / (this._stage3DProxy.get_viewPort().height / this._stage3DProxy.get_scissorRect().height);
		}
		var verts;
		var a1 = [x,y - h,0,1,x + w,y - h,1,1,x + w,y,1,0,x,y,0,0];
		var vectorData1 = new openfl.VectorData();
		vectorData1.length = a1.length;
		vectorData1.fixed = true;
		var vec1;
		var this2;
		this2 = new Array(a1.length);
		vec1 = this2;
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vec1[i1] = a1[i1];
		}
		vectorData1.data = vec1;
		verts = vectorData1;
		this._vertexBuffer.uploadFromVector(verts,0,4);
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		this._texture = value;
		return value;
	}
	,__class__: away3d.core.render.BackgroundImageRenderer
	,__properties__: {set_texture:"set_texture",get_texture:"get_texture",set_stage3DProxy:"set_stage3DProxy",get_stage3DProxy:"get_stage3DProxy"}
};
away3d.core.render.RendererBase = function(renderToTexture) {
	if(renderToTexture == null) renderToTexture = false;
	this._backgroundR = 0;
	this._backgroundG = 0;
	this._backgroundB = 0;
	this._backgroundAlpha = 1;
	this._shareContext = false;
	this._textureRatioX = 1;
	this._textureRatioY = 1;
	this._clearOnRender = true;
	this._rttViewProjectionMatrix = new openfl.geom.Matrix3D();
	this._renderableSorter = new away3d.core.sort.RenderableMergeSort();
	this._renderToTexture = renderToTexture;
};
$hxClasses["away3d.core.render.RendererBase"] = away3d.core.render.RendererBase;
away3d.core.render.RendererBase.__name__ = ["away3d","core","render","RendererBase"];
away3d.core.render.RendererBase.prototype = {
	createEntityCollector: function() {
		return new away3d.core.traverse.EntityCollector();
	}
	,get_viewWidth: function() {
		return this._viewWidth;
	}
	,set_viewWidth: function(value) {
		this._viewWidth = value;
		return value;
	}
	,get_viewHeight: function() {
		return this._viewHeight;
	}
	,set_viewHeight: function(value) {
		this._viewHeight = value;
		return value;
	}
	,get_renderToTexture: function() {
		return this._renderToTexture;
	}
	,get_renderableSorter: function() {
		return this._renderableSorter;
	}
	,set_renderableSorter: function(value) {
		this._renderableSorter = value;
		return value;
	}
	,get_clearOnRender: function() {
		return this._clearOnRender;
	}
	,set_clearOnRender: function(value) {
		this._clearOnRender = value;
		return value;
	}
	,get_backgroundR: function() {
		return this._backgroundR;
	}
	,set_backgroundR: function(value) {
		this._backgroundR = value;
		return value;
	}
	,get_backgroundG: function() {
		return this._backgroundG;
	}
	,set_backgroundG: function(value) {
		this._backgroundG = value;
		return value;
	}
	,get_backgroundB: function() {
		return this._backgroundB;
	}
	,set_backgroundB: function(value) {
		this._backgroundB = value;
		return value;
	}
	,get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(value) {
		if(value == this._stage3DProxy) return value;
		if(value == null) {
			if(this._stage3DProxy != null) {
				this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,$bind(this,this.onContextUpdate));
				this._stage3DProxy.removeEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,$bind(this,this.onContextUpdate));
			}
			this._stage3DProxy = null;
			this._context = null;
			return null;
		}
		this._stage3DProxy = value;
		this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_CREATED,$bind(this,this.onContextUpdate));
		this._stage3DProxy.addEventListener(away3d.events.Stage3DEvent.CONTEXT3D_RECREATED,$bind(this,this.onContextUpdate));
		if(this._backgroundImageRenderer != null) this._backgroundImageRenderer.set_stage3DProxy(value);
		if(value.get_context3D() != null) this._context = value.get_context3D();
		return value;
	}
	,get_shareContext: function() {
		return this._shareContext;
	}
	,set_shareContext: function(value) {
		this._shareContext = value;
		return value;
	}
	,dispose: function() {
		this.set_stage3DProxy(null);
		if(this._backgroundImageRenderer != null) {
			this._backgroundImageRenderer.dispose();
			this._backgroundImageRenderer = null;
		}
	}
	,render: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(this._stage3DProxy == null || this._context == null) return;
		this._rttViewProjectionMatrix.copyFrom(entityCollector.get_camera().get_viewProjection());
		this._rttViewProjectionMatrix.appendScale(this._textureRatioX,this._textureRatioY,1);
		this.executeRender(entityCollector,target,scissorRect,surfaceSelector);
		var i = 0;
		while(i < 8) {
			this._context.setVertexBufferAt(i,null);
			this._context.setTextureAt(i,null);
			++i;
		}
	}
	,executeRender: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		this._renderTarget = target;
		this._renderTargetSurface = surfaceSelector;
		if(this._renderableSorter != null) this._renderableSorter.sort(entityCollector);
		if(this._renderToTexture) this.executeRenderToTexturePass(entityCollector);
		this._stage3DProxy.setRenderTarget(target,true,surfaceSelector);
		if((target != null || !this._shareContext) && this._clearOnRender) this._context.clear(this._backgroundR,this._backgroundG,this._backgroundB,this._backgroundAlpha,1,0);
		this._context.setDepthTest(false,519);
		this._stage3DProxy.set_scissorRect(scissorRect);
		if(this._backgroundImageRenderer != null) this._backgroundImageRenderer.render();
		this.draw(entityCollector,target);
		this._context.setDepthTest(false,515);
		if(!this._shareContext) {
			if(this._snapshotRequired && this._snapshotBitmapData != null) {
				this._context.drawToBitmapData(this._snapshotBitmapData);
				this._snapshotRequired = false;
			}
		}
		this._stage3DProxy.set_scissorRect(null);
	}
	,queueSnapshot: function(bmd) {
		this._snapshotRequired = true;
		this._snapshotBitmapData = bmd;
	}
	,executeRenderToTexturePass: function(entityCollector) {
		throw new away3d.errors.AbstractMethodError();
	}
	,draw: function(entityCollector,target) {
		throw new away3d.errors.AbstractMethodError();
	}
	,onContextUpdate: function(event) {
		this._context = this._stage3DProxy.get_context3D();
	}
	,get_backgroundAlpha: function() {
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		this._backgroundAlpha = value;
		return value;
	}
	,get_background: function() {
		return this._background;
	}
	,set_background: function(value) {
		if(this._backgroundImageRenderer != null && value == null) {
			this._backgroundImageRenderer.dispose();
			this._backgroundImageRenderer = null;
		}
		if(this._backgroundImageRenderer == null && value != null) this._backgroundImageRenderer = new away3d.core.render.BackgroundImageRenderer(this._stage3DProxy);
		this._background = value;
		if(this._backgroundImageRenderer != null) this._backgroundImageRenderer.set_texture(value);
		return value;
	}
	,get_backgroundImageRenderer: function() {
		return this._backgroundImageRenderer;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(antiAlias) {
		this._antiAlias = antiAlias;
		return antiAlias;
	}
	,get_textureRatioX: function() {
		return this._textureRatioX;
	}
	,set_textureRatioX: function(value) {
		this._textureRatioX = value;
		return value;
	}
	,get_textureRatioY: function() {
		return this._textureRatioY;
	}
	,set_textureRatioY: function(value) {
		this._textureRatioY = value;
		return value;
	}
	,__class__: away3d.core.render.RendererBase
	,__properties__: {set_textureRatioY:"set_textureRatioY",get_textureRatioY:"get_textureRatioY",set_textureRatioX:"set_textureRatioX",get_textureRatioX:"get_textureRatioX",set_antiAlias:"set_antiAlias",get_antiAlias:"get_antiAlias",get_backgroundImageRenderer:"get_backgroundImageRenderer",set_background:"set_background",get_background:"get_background",set_backgroundAlpha:"set_backgroundAlpha",get_backgroundAlpha:"get_backgroundAlpha",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",set_stage3DProxy:"set_stage3DProxy",get_stage3DProxy:"get_stage3DProxy",set_backgroundB:"set_backgroundB",get_backgroundB:"get_backgroundB",set_backgroundG:"set_backgroundG",get_backgroundG:"get_backgroundG",set_backgroundR:"set_backgroundR",get_backgroundR:"get_backgroundR",set_clearOnRender:"set_clearOnRender",get_clearOnRender:"get_clearOnRender",set_renderableSorter:"set_renderableSorter",get_renderableSorter:"get_renderableSorter",get_renderToTexture:"get_renderToTexture",set_viewHeight:"set_viewHeight",get_viewHeight:"get_viewHeight",set_viewWidth:"set_viewWidth",get_viewWidth:"get_viewWidth"}
};
away3d.core.render.DefaultRenderer = function() {
	away3d.core.render.RendererBase.call(this);
	this._skyboxProjection = new openfl.geom.Matrix3D();
	this._depthRenderer = new away3d.core.render.DepthRenderer();
	this._distanceRenderer = new away3d.core.render.DepthRenderer(false,true);
};
$hxClasses["away3d.core.render.DefaultRenderer"] = away3d.core.render.DefaultRenderer;
away3d.core.render.DefaultRenderer.__name__ = ["away3d","core","render","DefaultRenderer"];
away3d.core.render.DefaultRenderer.__super__ = away3d.core.render.RendererBase;
away3d.core.render.DefaultRenderer.prototype = $extend(away3d.core.render.RendererBase.prototype,{
	set_stage3DProxy: function(value) {
		away3d.core.render.RendererBase.prototype.set_stage3DProxy.call(this,value);
		this._distanceRenderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(value));
		return value;
	}
	,executeRender: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		this.updateLights(entityCollector);
		if(target != null) {
			this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector,away3d.core.render.DefaultRenderer.RTT_PASSES);
			this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector,away3d.core.render.DefaultRenderer.RTT_PASSES);
		}
		away3d.core.render.RendererBase.prototype.executeRender.call(this,entityCollector,target,scissorRect,surfaceSelector);
	}
	,updateLights: function(entityCollector) {
		var dirLights = entityCollector.get_directionalLights();
		var pointLights = entityCollector.get_pointLights();
		var len;
		var i;
		var light;
		var shadowMapper;
		len = dirLights.length;
		i = 0;
		while(i < len) {
			light = dirLights[i];
			shadowMapper = light.get_shadowMapper();
			if(light.get_castsShadows() && (shadowMapper.get_autoUpdateShadows() || shadowMapper._shadowsInvalid)) shadowMapper.renderDepthMap(this._stage3DProxy,entityCollector,this._depthRenderer);
			++i;
		}
		len = pointLights.length;
		i = 0;
		while(i < len) {
			light = pointLights[i];
			shadowMapper = light.get_shadowMapper();
			if(light.get_castsShadows() && (shadowMapper.get_autoUpdateShadows() || shadowMapper._shadowsInvalid)) shadowMapper.renderDepthMap(this._stage3DProxy,entityCollector,this._distanceRenderer);
			++i;
		}
	}
	,draw: function(entityCollector,target) {
		this._context.setBlendFactors(1,0);
		if(entityCollector.get_skyBox() != null) {
			if(this._activeMaterial != null) this._activeMaterial.deactivate(this._stage3DProxy);
			this._activeMaterial = null;
			this._context.setDepthTest(false,519);
			this.drawSkyBox(entityCollector);
		}
		this._context.setDepthTest(true,515);
		var which;
		if(target != null) which = away3d.core.render.DefaultRenderer.SCREEN_PASSES; else which = away3d.core.render.DefaultRenderer.ALL_PASSES;
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector,which);
		this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector,which);
		this._context.setDepthTest(false,515);
		if(this._activeMaterial != null) this._activeMaterial.deactivate(this._stage3DProxy);
		this._activeMaterial = null;
	}
	,drawSkyBox: function(entityCollector) {
		var skyBox = entityCollector.get_skyBox();
		var material = skyBox.get_material();
		var camera = entityCollector.get_camera();
		this.updateSkyBoxProjection(camera);
		material.activatePass(0,this._stage3DProxy,camera);
		material.renderPass(0,skyBox,this._stage3DProxy,entityCollector,this._skyboxProjection);
		material.deactivatePass(0,this._stage3DProxy);
	}
	,updateSkyBoxProjection: function(camera) {
		var near = new openfl.geom.Vector3D();
		this._skyboxProjection.copyFrom(this._rttViewProjectionMatrix);
		this._skyboxProjection.copyRowTo(2,near);
		var camPos = camera.get_scenePosition();
		var cx = near.x;
		var cy = near.y;
		var cz = near.z;
		var cw = -(near.x * camPos.x + near.y * camPos.y + near.z * camPos.z + Math.sqrt(cx * cx + cy * cy + cz * cz));
		var signX;
		if(cx >= 0) signX = 1; else signX = -1;
		var signY;
		if(cy >= 0) signY = 1; else signY = -1;
		var p = new openfl.geom.Vector3D(signX,signY,1,1);
		var inverse = this._skyboxProjection.clone();
		inverse.invert();
		var q = inverse.transformVector(p);
		this._skyboxProjection.copyRowTo(3,p);
		var a = (q.x * p.x + q.y * p.y + q.z * p.z + q.w * p.w) / (cx * q.x + cy * q.y + cz * q.z + cw * q.w);
		this._skyboxProjection.copyRowFrom(2,new openfl.geom.Vector3D(cx * a,cy * a,cz * a,cw * a));
	}
	,drawRenderables: function(item,entityCollector,which) {
		var numPasses;
		var j;
		var camera = entityCollector.get_camera();
		var item2;
		while(item != null) {
			this._activeMaterial = item.renderable.get_material();
			this._activeMaterial.updateMaterial(this._context);
			numPasses = this._activeMaterial.get_numPasses();
			j = 0;
			do {
				item2 = item;
				var rttMask;
				if(this._activeMaterial.passRendersToTexture(j)) rttMask = 1; else rttMask = 2;
				if((rttMask & which) != 0) {
					this._activeMaterial.activatePass(j,this._stage3DProxy,camera);
					do {
						this._activeMaterial.renderPass(j,item2.renderable,this._stage3DProxy,entityCollector,this._rttViewProjectionMatrix);
						item2 = item2.next;
					} while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
					this._activeMaterial.deactivatePass(j,this._stage3DProxy);
				} else do item2 = item2.next; while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
			} while(++j < numPasses);
			item = item2;
		}
	}
	,dispose: function() {
		away3d.core.render.RendererBase.prototype.dispose.call(this);
		this._depthRenderer.dispose();
		this._distanceRenderer.dispose();
		this._depthRenderer = null;
		this._distanceRenderer = null;
	}
	,__class__: away3d.core.render.DefaultRenderer
});
away3d.core.render.DepthRenderer = function(renderBlended,distanceBased) {
	if(distanceBased == null) distanceBased = false;
	if(renderBlended == null) renderBlended = false;
	away3d.core.render.RendererBase.call(this);
	this._renderBlended = renderBlended;
	this._distanceBased = distanceBased;
	this._backgroundR = 1;
	this._backgroundG = 1;
	this._backgroundB = 1;
};
$hxClasses["away3d.core.render.DepthRenderer"] = away3d.core.render.DepthRenderer;
away3d.core.render.DepthRenderer.__name__ = ["away3d","core","render","DepthRenderer"];
away3d.core.render.DepthRenderer.__super__ = away3d.core.render.RendererBase;
away3d.core.render.DepthRenderer.prototype = $extend(away3d.core.render.RendererBase.prototype,{
	get_disableColor: function() {
		return this._disableColor;
	}
	,set_disableColor: function(value) {
		this._disableColor = value;
		return value;
	}
	,set_backgroundR: function(value) {
		return value;
	}
	,set_backgroundG: function(value) {
		return value;
	}
	,set_backgroundB: function(value) {
		return value;
	}
	,renderCascades: function(entityCollector,target,numCascades,scissorRects,cameras) {
		this._renderTarget = target;
		this._renderTargetSurface = 0;
		this._renderableSorter.sort(entityCollector);
		this._stage3DProxy.setRenderTarget(target,true,0);
		this._context.clear(1,1,1,1,1,0);
		this._context.setBlendFactors(1,0);
		this._context.setDepthTest(true,513);
		var head = entityCollector.get_opaqueRenderableHead();
		var first = true;
		var i = numCascades - 1;
		while(i >= 0) {
			this._stage3DProxy.set_scissorRect(scissorRects[i]);
			this.drawCascadeRenderables(head,cameras[i],first?null:(function($this) {
				var $r;
				var this1 = cameras[i].get_frustumPlanes();
				var value = new Array();
				{
					var _g1 = 0;
					var _g = this1.data.length;
					while(_g1 < _g) {
						var i1 = _g1++;
						value.push(this1.data[i1]);
					}
				}
				$r = value;
				return $r;
			}(this)));
			first = false;
			--i;
		}
		if(this._activeMaterial != null) this._activeMaterial.deactivateForDepth(this._stage3DProxy);
		this._activeMaterial = null;
		this._context.setDepthTest(false,515);
		this._stage3DProxy.set_scissorRect(null);
	}
	,drawCascadeRenderables: function(item,camera,cullPlanes) {
		var material;
		while(item != null) {
			if(item.cascaded) {
				item = item.next;
				continue;
			}
			var renderable = item.renderable;
			var entity = renderable.get_sourceEntity();
			if(cullPlanes == null || entity.get_worldBounds().isInFrustum((function($this) {
				var $r;
				var vectorData = new openfl.VectorData();
				vectorData.length = cullPlanes.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(cullPlanes.length);
					vec = this1;
					var _g1 = 0;
					var _g = cullPlanes.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = cullPlanes[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)),4)) {
				material = renderable.get_material();
				if(this._activeMaterial != material) {
					if(this._activeMaterial != null) this._activeMaterial.deactivateForDepth(this._stage3DProxy);
					this._activeMaterial = material;
					this._activeMaterial.activateForDepth(this._stage3DProxy,camera,false);
				}
				this._activeMaterial.renderDepth(renderable,this._stage3DProxy,camera,camera.get_viewProjection());
			} else item.cascaded = true;
			item = item.next;
		}
	}
	,draw: function(entityCollector,target) {
		this._context.setBlendFactors(1,0);
		this._context.setDepthTest(true,513);
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector);
		if(this._disableColor) this._context.setColorMask(false,false,false,false);
		if(this._renderBlended) this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector);
		if(this._activeMaterial != null) this._activeMaterial.deactivateForDepth(this._stage3DProxy);
		if(this._disableColor) this._context.setColorMask(true,true,true,true);
		this._activeMaterial = null;
	}
	,drawRenderables: function(item,entityCollector) {
		var camera = entityCollector.get_camera();
		var item2;
		while(item != null) {
			this._activeMaterial = item.renderable.get_material();
			if(this._disableColor && this._activeMaterial.hasDepthAlphaThreshold()) {
				item2 = item;
				do item2 = item2.next; while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
			} else {
				this._activeMaterial.activateForDepth(this._stage3DProxy,camera,this._distanceBased);
				item2 = item;
				do {
					this._activeMaterial.renderDepth(item2.renderable,this._stage3DProxy,camera,this._rttViewProjectionMatrix);
					item2 = item2.next;
				} while(item2 != null && item2.renderable.get_material() == this._activeMaterial);
				this._activeMaterial.deactivateForDepth(this._stage3DProxy);
			}
			item = item2;
		}
	}
	,__class__: away3d.core.render.DepthRenderer
	,__properties__: $extend(away3d.core.render.RendererBase.prototype.__properties__,{set_disableColor:"set_disableColor",get_disableColor:"get_disableColor"})
});
away3d.core.render.Filter3DRenderer = function(stage3DProxy) {
	this._filterSizesInvalid = true;
	this._stage3DProxy = stage3DProxy;
	this._rttManager = away3d.core.managers.RTTBufferManager.getInstance(stage3DProxy);
	this._rttManager.addEventListener(openfl.events.Event.RESIZE,$bind(this,this.onRTTResize));
};
$hxClasses["away3d.core.render.Filter3DRenderer"] = away3d.core.render.Filter3DRenderer;
away3d.core.render.Filter3DRenderer.__name__ = ["away3d","core","render","Filter3DRenderer"];
away3d.core.render.Filter3DRenderer.prototype = {
	onRTTResize: function(event) {
		this._filterSizesInvalid = true;
	}
	,get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,getMainInputTexture: function(stage3DProxy) {
		if(this._filterTasksInvalid) this.updateFilterTasks(stage3DProxy);
		return this._mainInputTexture;
	}
	,get_filters: function() {
		return this._filters;
	}
	,set_filters: function(value) {
		this._filters = value;
		this._filterTasksInvalid = true;
		this._requireDepthRender = false;
		if(this._filters == null) return null;
		var i = 0;
		while(i < this._filters.length) {
			if(!this._requireDepthRender) this._requireDepthRender = js.Boot.__cast(this._filters.data[i].requireDepthRender != null , Bool);
			++i;
		}
		this._filterSizesInvalid = true;
		return value;
	}
	,updateFilterTasks: function(stage3DProxy) {
		var len;
		if(this._filterSizesInvalid) this.updateFilterSizes();
		if(this._filters == null) {
			this._tasks = null;
			return;
		}
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		this._tasks = this1;
		len = this._filters.length - 1;
		var filter;
		var i = 0;
		while(i <= len) {
			filter = this._filters.data[i];
			filter.setRenderTargets(i == len?null:(js.Boot.__cast(this._filters.data[i + 1] , away3d.filters.Filter3DBase)).getMainInputTexture(stage3DProxy),stage3DProxy);
			var this3 = this._tasks;
			var a;
			var this4 = filter.get_tasks();
			a = this4;
			var vectorData = new openfl.VectorData();
			if(a != null) vectorData.length = this3.length + a.length; else vectorData.length = this3.length;
			vectorData.fixed = false;
			var this5;
			this5 = new Array(vectorData.length);
			vectorData.data = this5;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData.data,0,this3.length);
			if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this3.length,a.length);
			this._tasks = vectorData;
			++i;
		}
		this._mainInputTexture = this._filters.data[0].getMainInputTexture(stage3DProxy);
	}
	,render: function(stage3DProxy,camera3D,depthTexture) {
		var len;
		var i;
		var task;
		var context = stage3DProxy.get_context3D();
		var indexBuffer = this._rttManager.get_indexBuffer();
		var vertexBuffer = this._rttManager.get_renderToTextureVertexBuffer();
		if(this._filters == null) return;
		if(this._filterSizesInvalid) this.updateFilterSizes();
		if(this._filterTasksInvalid) this.updateFilterTasks(stage3DProxy);
		len = this._filters.length;
		i = 0;
		while(i < len) {
			this._filters.data[i].update(stage3DProxy,camera3D);
			++i;
		}
		len = this._tasks.length;
		if(len > 1) {
			context.setVertexBufferAt(0,vertexBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
			context.setVertexBufferAt(1,vertexBuffer,2,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
		}
		i = 0;
		while(i < len) {
			task = this._tasks.data[i];
			stage3DProxy.setRenderTarget(task.get_target());
			context.setProgram(task.getProgram3D(stage3DProxy));
			if(task.get_target() == null) {
				stage3DProxy.set_scissorRect(null);
				vertexBuffer = this._rttManager.get_renderToScreenVertexBuffer();
				context.setVertexBufferAt(0,vertexBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
				context.setVertexBufferAt(1,vertexBuffer,2,openfl.display3D.Context3DVertexBufferFormat.FLOAT_2);
			}
			context.setTextureAt(0,task.getMainInputTexture(stage3DProxy));
			context.clear(0.0,0.0,0.0,0.0);
			task.activate(stage3DProxy,camera3D,depthTexture);
			context.setBlendFactors(1,0);
			context.drawTriangles(indexBuffer,0,2);
			task.deactivate(stage3DProxy);
			++i;
		}
		context.setTextureAt(0,null);
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
	}
	,updateFilterSizes: function() {
		var i = 0;
		while(i < this._filters.length) {
			this._filters.data[i].textureWidth = this._rttManager.get_textureWidth();
			this._filters.data[i].textureHeight = this._rttManager.get_textureHeight();
			++i;
		}
		this._filterSizesInvalid = true;
	}
	,dispose: function() {
		this._rttManager.removeEventListener(openfl.events.Event.RESIZE,$bind(this,this.onRTTResize));
		this._rttManager = null;
		this._stage3DProxy = null;
	}
	,__class__: away3d.core.render.Filter3DRenderer
	,__properties__: {set_filters:"set_filters",get_filters:"get_filters",get_requireDepthRender:"get_requireDepthRender"}
};
away3d.core.sort = {};
away3d.core.sort.IEntitySorter = function() { };
$hxClasses["away3d.core.sort.IEntitySorter"] = away3d.core.sort.IEntitySorter;
away3d.core.sort.IEntitySorter.__name__ = ["away3d","core","sort","IEntitySorter"];
away3d.core.sort.IEntitySorter.prototype = {
	__class__: away3d.core.sort.IEntitySorter
};
away3d.core.sort.RenderableMergeSort = function() {
};
$hxClasses["away3d.core.sort.RenderableMergeSort"] = away3d.core.sort.RenderableMergeSort;
away3d.core.sort.RenderableMergeSort.__name__ = ["away3d","core","sort","RenderableMergeSort"];
away3d.core.sort.RenderableMergeSort.__interfaces__ = [away3d.core.sort.IEntitySorter];
away3d.core.sort.RenderableMergeSort.prototype = {
	sort: function(collector) {
		collector.set_opaqueRenderableHead(this.mergeSortByMaterial(collector.get_opaqueRenderableHead()));
		collector.set_blendedRenderableHead(this.mergeSortByDepth(collector.get_blendedRenderableHead()));
	}
	,mergeSortByDepth: function(head) {
		var headB;
		var fast;
		var slow;
		if(head == null || head.next == null) return head;
		slow = head;
		fast = head.next;
		while(fast != null) {
			fast = fast.next;
			if(fast != null) {
				slow = slow.next;
				fast = fast.next;
			}
		}
		headB = slow.next;
		slow.next = null;
		head = this.mergeSortByDepth(head);
		headB = this.mergeSortByDepth(headB);
		var result = null;
		var curr = null;
		var l = null;
		if(head == null) return headB;
		if(headB == null) return head;
		while(head != null && headB != null) {
			if(head.zIndex < headB.zIndex) {
				l = head;
				head = head.next;
			} else {
				l = headB;
				headB = headB.next;
			}
			if(result == null) result = l; else curr.next = l;
			curr = l;
		}
		if(head != null) curr.next = head; else if(headB != null) curr.next = headB;
		return result;
	}
	,mergeSortByMaterial: function(head) {
		var headB;
		var fast;
		var slow;
		if(head == null || head.next == null) return head;
		slow = head;
		fast = head.next;
		while(fast != null) {
			fast = fast.next;
			if(fast != null) {
				slow = slow.next;
				fast = fast.next;
			}
		}
		headB = slow.next;
		slow.next = null;
		head = this.mergeSortByMaterial(head);
		headB = this.mergeSortByMaterial(headB);
		var result = null;
		var curr = null;
		var l = null;
		var cmp;
		if(head == null) return headB;
		if(headB == null) return head;
		while(head != null && headB != null && head != null && headB != null) {
			var aid = head.renderOrderId;
			var bid = headB.renderOrderId;
			if(aid == bid) {
				var ma = head.materialId;
				var mb = headB.materialId;
				if(ma == mb) {
					if(head.zIndex < headB.zIndex) cmp = 1; else cmp = -1;
				} else if(ma > mb) cmp = 1; else cmp = -1;
			} else if(aid > bid) cmp = 1; else cmp = -1;
			if(cmp < 0) {
				l = head;
				head = head.next;
			} else {
				l = headB;
				headB = headB.next;
			}
			if(result == null) {
				result = l;
				curr = l;
			} else {
				curr.next = l;
				curr = l;
			}
		}
		if(head != null) curr.next = head; else if(headB != null) curr.next = headB;
		return result;
	}
	,__class__: away3d.core.sort.RenderableMergeSort
};
away3d.core.traverse.ShadowCasterCollector = function() {
	away3d.core.traverse.EntityCollector.call(this);
};
$hxClasses["away3d.core.traverse.ShadowCasterCollector"] = away3d.core.traverse.ShadowCasterCollector;
away3d.core.traverse.ShadowCasterCollector.__name__ = ["away3d","core","traverse","ShadowCasterCollector"];
away3d.core.traverse.ShadowCasterCollector.__super__ = away3d.core.traverse.EntityCollector;
away3d.core.traverse.ShadowCasterCollector.prototype = $extend(away3d.core.traverse.EntityCollector.prototype,{
	applyRenderable: function(renderable) {
		var material = renderable.get_material();
		var entity = renderable.get_sourceEntity();
		if(renderable.get_castsShadows() && material != null) {
			var item = this._renderableListItemPool.getItem();
			item.renderable = renderable;
			item.next = this._opaqueRenderableHead;
			item.cascaded = false;
			var dx = this._entryPoint.x - entity.get_x();
			var dy = this._entryPoint.y - entity.get_y();
			var dz = this._entryPoint.z - entity.get_z();
			item.zIndex = dx * this._cameraForward.x + dy * this._cameraForward.y + dz * this._cameraForward.z;
			item.renderSceneTransform = renderable.getRenderSceneTransform(this._camera);
			item.renderOrderId = material._depthPassId;
			this._opaqueRenderableHead = item;
		}
	}
	,applyUnknownLight: function(light) {
	}
	,applyDirectionalLight: function(light) {
	}
	,applyPointLight: function(light) {
	}
	,applyLightProbe: function(light) {
	}
	,applySkyBox: function(renderable) {
	}
	,__class__: away3d.core.traverse.ShadowCasterCollector
});
away3d.debug = {};
away3d.debug.Debug = function() { };
$hxClasses["away3d.debug.Debug"] = away3d.debug.Debug;
away3d.debug.Debug.__name__ = ["away3d","debug","Debug"];
away3d.debug.Debug.clear = function() {
};
away3d.debug.Debug.delimiter = function() {
};
away3d.debug.Debug.trace = function(message) {
	if(away3d.debug.Debug.active) haxe.Log.trace(message,{ fileName : "Debug.hx", lineNumber : 20, className : "away3d.debug.Debug", methodName : "trace"});
};
away3d.debug.Debug.warning = function(message) {
	if(away3d.debug.Debug.warningsAsErrors) {
		away3d.debug.Debug.error(message);
		return;
	}
	haxe.Log.trace("WARNING: " + Std.string(message),{ fileName : "Debug.hx", lineNumber : 28, className : "away3d.debug.Debug", methodName : "warning"});
};
away3d.debug.Debug.error = function(message) {
	haxe.Log.trace("ERROR: " + Std.string(message),{ fileName : "Debug.hx", lineNumber : 32, className : "away3d.debug.Debug", methodName : "error"});
	throw new openfl.errors.Error(message);
};
away3d.entities.Mesh = function(geometry,material) {
	this._castsShadows = true;
	this._shareAnimationGeometry = true;
	away3d.entities.Entity.call(this);
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._subMeshes = this1;
	this.set_geometry(geometry);
	if(this.get_geometry() == null) this.set_geometry(new away3d.core.base.Geometry());
	this.set_material(material);
	if(this.get_material() == null) this.set_material(away3d.materials.utils.DefaultMaterialManager.getDefaultMaterial(this));
};
$hxClasses["away3d.entities.Mesh"] = away3d.entities.Mesh;
away3d.entities.Mesh.__name__ = ["away3d","entities","Mesh"];
away3d.entities.Mesh.__interfaces__ = [away3d.library.assets.IAsset,away3d.core.base.IMaterialOwner];
away3d.entities.Mesh.__super__ = away3d.entities.Entity;
away3d.entities.Mesh.prototype = $extend(away3d.entities.Entity.prototype,{
	bakeTransformations: function() {
		this.get_geometry().applyTransformation(this.get_transform());
		this.get_transform().identity();
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.MESH;
	}
	,onGeometryBoundsInvalid: function(event) {
		this.invalidateBounds();
	}
	,get_castsShadows: function() {
		return this._castsShadows;
	}
	,set_castsShadows: function(value) {
		this._castsShadows = value;
		return value;
	}
	,get_animator: function() {
		return this._animator;
	}
	,set_animator: function(value) {
		if(this._animator != null) this._animator.removeOwner(this);
		this._animator = value;
		var oldMaterial = this.get_material();
		this.set_material(null);
		this.set_material(oldMaterial);
		var len = this._subMeshes.length;
		var subMesh;
		var i = 0;
		while(i < len) {
			subMesh = this._subMeshes.data[i];
			oldMaterial = subMesh._material;
			if(oldMaterial != null) {
				subMesh.set_material(null);
				subMesh.set_material(oldMaterial);
			}
			++i;
		}
		if(this._animator != null) this._animator.addOwner(this);
		return value;
	}
	,get_geometry: function() {
		return this._geometry;
	}
	,set_geometry: function(value) {
		var i;
		if(this._geometry != null) {
			this._geometry.removeEventListener(away3d.events.GeometryEvent.BOUNDS_INVALID,$bind(this,this.onGeometryBoundsInvalid));
			this._geometry.removeEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED,$bind(this,this.onSubGeometryAdded));
			this._geometry.removeEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED,$bind(this,this.onSubGeometryRemoved));
			i = 0;
			while(i < this._subMeshes.length) {
				this._subMeshes.data[i].dispose();
				++i;
			}
			var value1 = [];
			var vectorData = new openfl.VectorData();
			vectorData.length = value1.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(value1.length);
			vec = this1;
			var _g1 = 0;
			var _g = value1.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				vec[i1] = value1[i1];
			}
			vectorData.data = vec;
			this._subMeshes = vectorData;
		}
		this._geometry = value;
		if(this._geometry != null) {
			this._geometry.addEventListener(away3d.events.GeometryEvent.BOUNDS_INVALID,$bind(this,this.onGeometryBoundsInvalid));
			this._geometry.addEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED,$bind(this,this.onSubGeometryAdded));
			this._geometry.addEventListener(away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED,$bind(this,this.onSubGeometryRemoved));
			var subGeoms = this._geometry.get_subGeometries();
			i = 0;
			while(i < subGeoms.length) {
				this.addSubMesh(subGeoms.data[i]);
				++i;
			}
		}
		if(this._material != null) {
			this._material.removeOwner(this);
			this._material.addOwner(this);
		}
		return value;
	}
	,get_material: function() {
		return this._material;
	}
	,set_material: function(value) {
		if(value == this._material) return value;
		if(this._material != null) this._material.removeOwner(this);
		this._material = value;
		if(this._material != null) this._material.addOwner(this);
		return value;
	}
	,get_subMeshes: function() {
		this._geometry.validate();
		return this._subMeshes;
	}
	,get_shareAnimationGeometry: function() {
		return this._shareAnimationGeometry;
	}
	,set_shareAnimationGeometry: function(value) {
		this._shareAnimationGeometry = value;
		return value;
	}
	,clearAnimationGeometry: function() {
		var len = this._subMeshes.length;
		var i = 0;
		while(i < len) {
			this._subMeshes.data[i].animationSubGeometry = null;
			++i;
		}
	}
	,dispose: function() {
		away3d.entities.Entity.prototype.dispose.call(this);
		this.set_material(null);
		this.set_geometry(null);
	}
	,disposeWithAnimatorAndChildren: function() {
		this.disposeWithChildren();
		if(this._animator != null) this._animator.dispose();
	}
	,clone: function() {
		var clone = new away3d.entities.Mesh(this._geometry,this._material);
		clone.set_transform(this.get_transform());
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_partition(this.get_partition());
		clone.set_bounds(this._bounds.clone());
		clone.set_name(this.get_name());
		clone.set_castsShadows(this.get_castsShadows());
		clone.set_shareAnimationGeometry(this.get_shareAnimationGeometry());
		clone.set_mouseEnabled(this.get_mouseEnabled());
		clone.set_mouseChildren(this.get_mouseChildren());
		clone.extra = this.extra;
		var len = this._subMeshes.length;
		var i = 0;
		while(i < len) {
			clone._subMeshes.data[i]._material = this._subMeshes.data[i]._material;
			++i;
		}
		len = this.get_numChildren();
		i = 0;
		while(i < len) {
			clone.addChild(js.Boot.__cast(this.getChildAt(i).clone() , away3d.containers.ObjectContainer3D));
			++i;
		}
		if(this._animator != null) clone.set_animator(this._animator.clone());
		return clone;
	}
	,updateBounds: function() {
		this._bounds.fromGeometry(this._geometry);
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.MeshNode(this);
	}
	,onSubGeometryAdded: function(event) {
		this.addSubMesh(event.get_subGeometry());
	}
	,onSubGeometryRemoved: function(event) {
		var subMesh;
		var subGeom = event.get_subGeometry();
		var len = this._subMeshes.length;
		var i;
		i = 0;
		while(i < len) {
			subMesh = this._subMeshes.data[i];
			if(subMesh.get_subGeometry() == subGeom) {
				subMesh.dispose();
				var this1 = this._subMeshes;
				var pos = i;
				var len1 = 1;
				if(pos < 0) pos += this1.length;
				if(pos + len1 > this1.length) len1 = this1.length - pos;
				if(len1 < 0) len1 = 0;
				var vectorData = new openfl.VectorData();
				vectorData.length = len1;
				vectorData.fixed = false;
				var this2;
				this2 = new Array(len1);
				vectorData.data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len1);
				if(len1 > 0) {
					this1.length -= len1;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len1,this1.data,pos,this1.length - pos);
				}
				vectorData;
				break;
			}
			++i;
		}
		--len;
		while(i < len) {
			this._subMeshes.data[i]._index = i;
			++i;
		}
	}
	,addSubMesh: function(subGeometry) {
		var subMesh = new away3d.core.base.SubMesh(subGeometry,this,null);
		var len = this._subMeshes.length;
		subMesh._index = len;
		var this1 = this._subMeshes;
		if(!this1.fixed) {
			if(len >= this1.length) this1.length = len + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[len] = subMesh;
		this.invalidateBounds();
	}
	,getSubMeshForSubGeometry: function(subGeometry) {
		var index;
		var this1 = this._geometry.get_subGeometries();
		var value = -1;
		var _g1 = 0;
		var _g = this1.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this1.data[i] == subGeometry) {
				value = i;
				break;
			}
		}
		index = value;
		return this._subMeshes.data[index];
	}
	,collidesBefore: function(shortestCollisionDistance,findClosest) {
		this._pickingCollider.setLocalRay(this._pickingCollisionVO.localRayPosition,this._pickingCollisionVO.localRayDirection);
		this._pickingCollisionVO.renderable = null;
		var len = this._subMeshes.length;
		var i = 0;
		while(i < len) {
			var subMesh = this._subMeshes.data[i];
			if(this._pickingCollider.testSubMeshCollision(subMesh,this._pickingCollisionVO,shortestCollisionDistance)) {
				shortestCollisionDistance = this._pickingCollisionVO.rayEntryDistance;
				this._pickingCollisionVO.renderable = subMesh;
				if(!findClosest) return true;
			}
			++i;
		}
		return this._pickingCollisionVO.renderable != null;
	}
	,__class__: away3d.entities.Mesh
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{set_shareAnimationGeometry:"set_shareAnimationGeometry",get_shareAnimationGeometry:"get_shareAnimationGeometry",get_subMeshes:"get_subMeshes",set_material:"set_material",get_material:"get_material",set_geometry:"set_geometry",get_geometry:"get_geometry",set_animator:"set_animator",get_animator:"get_animator",set_castsShadows:"set_castsShadows",get_castsShadows:"get_castsShadows"})
});
away3d.entities.SegmentSet = function() {
	this._numIndices = 0;
	this._subSetCount = 0;
	this._indexSegments = 0;
	this.LIMIT = 196605;
	away3d.entities.Entity.call(this);
	this._subSetCount = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._subSets = this1;
	this.addSubSet();
	this._segments = new haxe.ds.IntMap();
	this.set_material(new away3d.materials.SegmentMaterial());
};
$hxClasses["away3d.entities.SegmentSet"] = away3d.entities.SegmentSet;
away3d.entities.SegmentSet.__name__ = ["away3d","entities","SegmentSet"];
away3d.entities.SegmentSet.__interfaces__ = [away3d.core.base.IRenderable];
away3d.entities.SegmentSet.__super__ = away3d.entities.Entity;
away3d.entities.SegmentSet.prototype = $extend(away3d.entities.Entity.prototype,{
	addSegment: function(segment) {
		segment.set_segmentsBase(this);
		this._hasData = true;
		var subSetIndex = this._subSets.length - 1;
		var subSet = this._subSets.data[subSetIndex];
		if(subSet.vertices.length + 44 > this.LIMIT) {
			subSet = this.addSubSet();
			subSetIndex++;
		}
		segment.set_index(subSet.vertices.length);
		segment.set_subSetIndex(subSetIndex);
		this.updateSegment(segment);
		var index = subSet.lineCount << 2;
		var this1 = subSet.indices;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = index;
		}
		this1.length;
		var this3 = subSet.indices;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
			this3.data[this3.length - 1] = index + 1;
		}
		this3.length;
		var this5 = subSet.indices;
		if(!this5.fixed) {
			this5.length++;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
			this5.data[this5.length - 1] = index + 2;
		}
		this5.length;
		var this7 = subSet.indices;
		if(!this7.fixed) {
			this7.length++;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
			this7.data[this7.length - 1] = index + 3;
		}
		this7.length;
		var this9 = subSet.indices;
		if(!this9.fixed) {
			this9.length++;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
			this9.data[this9.length - 1] = index + 2;
		}
		this9.length;
		var this11 = subSet.indices;
		if(!this11.fixed) {
			this11.length++;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
			this11.data[this11.length - 1] = index + 1;
		}
		this11.length;
		subSet.numVertices = subSet.vertices.length / 11 | 0;
		subSet.numIndices = subSet.indices.length;
		subSet.lineCount++;
		var segRef = new away3d.entities.SegRef();
		segRef.index = index;
		segRef.subSetIndex = subSetIndex;
		segRef.segment = segment;
		this._segments.set(this._indexSegments,segRef);
		this._indexSegments++;
	}
	,removeSegmentByIndex: function(index,dispose) {
		if(dispose == null) dispose = false;
		var segRef;
		if(index >= this._indexSegments) return;
		if(this._segments.exists(index)) segRef = this._segments.get(index); else return;
		var subSet;
		if(this._subSets.data[segRef.subSetIndex] == null) return;
		var subSetIndex = segRef.subSetIndex;
		subSet = this._subSets.data[segRef.subSetIndex];
		var segment = segRef.segment;
		var indices = subSet.indices;
		var ind = index * 6;
		var _g1 = ind;
		var _g = indices.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = i;
			if(!indices.fixed) {
				if(_g2 >= indices.length) indices.length = _g2 + 1;
				if(indices.data.length < indices.length) {
					var data;
					var this1;
					this1 = new Array(indices.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data,0,indices.data.length);
					indices.data = data;
				}
			}
			indices.data[_g2] = indices.data[_g2] - 4;
		}
		var this2 = subSet.indices;
		var pos = index * 6;
		var len = 6;
		if(pos < 0) pos += this2.length;
		if(pos + len > this2.length) len = this2.length - pos;
		if(len < 0) len = 0;
		var vectorData = new openfl.VectorData();
		vectorData.length = len;
		vectorData.fixed = false;
		var this3;
		this3 = new Array(len);
		vectorData.data = this3;
		haxe.ds._Vector.Vector_Impl_.blit(this2.data,pos,vectorData.data,0,len);
		if(len > 0) {
			this2.length -= len;
			haxe.ds._Vector.Vector_Impl_.blit(this2.data,pos + len,this2.data,pos,this2.length - pos);
		}
		vectorData;
		var this4 = subSet.vertices;
		var pos1 = index * 44;
		var len1 = 44;
		if(pos1 < 0) pos1 += this4.length;
		if(pos1 + len1 > this4.length) len1 = this4.length - pos1;
		if(len1 < 0) len1 = 0;
		var vectorData1 = new openfl.VectorData();
		vectorData1.length = len1;
		vectorData1.fixed = false;
		var this5;
		this5 = new Array(len1);
		vectorData1.data = this5;
		haxe.ds._Vector.Vector_Impl_.blit(this4.data,pos1,vectorData1.data,0,len1);
		if(len1 > 0) {
			this4.length -= len1;
			haxe.ds._Vector.Vector_Impl_.blit(this4.data,pos1 + len1,this4.data,pos1,this4.length - pos1);
		}
		vectorData1;
		subSet.numVertices = subSet.vertices.length / 11 | 0;
		subSet.numIndices = indices.length;
		subSet.vertexBufferDirty = true;
		subSet.indexBufferDirty = true;
		subSet.lineCount--;
		if(dispose) {
			segment.dispose();
			segment = null;
		} else {
			segment.set_index(-1);
			segment.set_segmentsBase(null);
		}
		if(subSet.lineCount == 0) {
			if(subSetIndex == 0) this._hasData = false; else {
				subSet.dispose();
				var this6 = this._subSets;
				if(!this6.fixed) {
					if(subSetIndex >= this6.length) this6.length = subSetIndex + 1;
					if(this6.data.length < this6.length) {
						var data1;
						var this7;
						this7 = new Array(this6.data.length + 10);
						data1 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(this6.data,0,data1,0,this6.data.length);
						this6.data = data1;
					}
				}
				this6.data[subSetIndex] = null;
				var this8 = this._subSets;
				var pos2 = subSetIndex;
				var len2 = 1;
				if(pos2 < 0) pos2 += this8.length;
				if(pos2 + len2 > this8.length) len2 = this8.length - pos2;
				if(len2 < 0) len2 = 0;
				var vectorData2 = new openfl.VectorData();
				vectorData2.length = len2;
				vectorData2.fixed = false;
				var this9;
				this9 = new Array(len2);
				vectorData2.data = this9;
				haxe.ds._Vector.Vector_Impl_.blit(this8.data,pos2,vectorData2.data,0,len2);
				if(len2 > 0) {
					this8.length -= len2;
					haxe.ds._Vector.Vector_Impl_.blit(this8.data,pos2 + len2,this8.data,pos2,this8.length - pos2);
				}
				vectorData2;
			}
		}
		this.reOrderIndices(subSetIndex,index);
		segRef = null;
		this._segments.remove(this._indexSegments);
		this._indexSegments--;
	}
	,removeSegment: function(segment,dispose) {
		if(dispose == null) dispose = false;
		if(segment.get_index() == -1) return;
		this.removeSegmentByIndex(Std["int"](segment.get_index() / 44));
	}
	,removeAllSegments: function() {
		var subSet;
		var _g1 = 0;
		var _g = this._subSetCount;
		while(_g1 < _g) {
			var i = _g1++;
			subSet = this._subSets.data[i];
			subSet.vertices = null;
			subSet.indices = null;
			if(subSet.vertexBuffer != null) subSet.vertexBuffer.dispose();
			if(subSet.indexBuffer != null) subSet.indexBuffer.dispose();
			subSet = null;
		}
		var iterator = this._segments.iterator();
		while( iterator.hasNext() ) {
			var segReg = iterator.next();
			segReg = null;
		}
		this._segments = null;
		this._subSetCount = 0;
		this._activeSubSet = null;
		this._indexSegments = 0;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		this._subSets = this1;
		this._segments = new haxe.ds.IntMap();
		this.addSubSet();
		this._hasData = false;
	}
	,getSegment: function(index) {
		if(index > this._indexSegments - 1) return null;
		return this._segments.get(index).segment;
	}
	,get_segmentCount: function() {
		return this._indexSegments;
	}
	,get_subSetCount: function() {
		return this._subSetCount;
	}
	,updateSegment: function(segment) {
		var start = segment._start;
		var end = segment._end;
		var startX = start.x;
		var startY = start.y;
		var startZ = start.z;
		var endX = end.x;
		var endY = end.y;
		var endZ = end.z;
		var startR = segment._startR;
		var startG = segment._startG;
		var startB = segment._startB;
		var endR = segment._endR;
		var endG = segment._endG;
		var endB = segment._endB;
		var index = segment.get_index();
		var t = segment.get_thickness();
		var subSet;
		var index1 = segment.get_subSetIndex();
		subSet = this._subSets.data[index1];
		var vertices = subSet.vertices;
		var key = index++;
		if(!vertices.fixed) {
			if(key >= vertices.length) vertices.length = key + 1;
			if(vertices.data.length < vertices.length) {
				var data;
				var this1;
				this1 = new Array(vertices.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data,0,vertices.data.length);
				vertices.data = data;
			}
		}
		vertices.data[key] = startX;
		var key1 = index++;
		if(!vertices.fixed) {
			if(key1 >= vertices.length) vertices.length = key1 + 1;
			if(vertices.data.length < vertices.length) {
				var data1;
				var this2;
				this2 = new Array(vertices.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data1,0,vertices.data.length);
				vertices.data = data1;
			}
		}
		vertices.data[key1] = startY;
		var key2 = index++;
		if(!vertices.fixed) {
			if(key2 >= vertices.length) vertices.length = key2 + 1;
			if(vertices.data.length < vertices.length) {
				var data2;
				var this3;
				this3 = new Array(vertices.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data2,0,vertices.data.length);
				vertices.data = data2;
			}
		}
		vertices.data[key2] = startZ;
		var key3 = index++;
		if(!vertices.fixed) {
			if(key3 >= vertices.length) vertices.length = key3 + 1;
			if(vertices.data.length < vertices.length) {
				var data3;
				var this4;
				this4 = new Array(vertices.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data3,0,vertices.data.length);
				vertices.data = data3;
			}
		}
		vertices.data[key3] = endX;
		var key4 = index++;
		if(!vertices.fixed) {
			if(key4 >= vertices.length) vertices.length = key4 + 1;
			if(vertices.data.length < vertices.length) {
				var data4;
				var this5;
				this5 = new Array(vertices.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data4,0,vertices.data.length);
				vertices.data = data4;
			}
		}
		vertices.data[key4] = endY;
		var key5 = index++;
		if(!vertices.fixed) {
			if(key5 >= vertices.length) vertices.length = key5 + 1;
			if(vertices.data.length < vertices.length) {
				var data5;
				var this6;
				this6 = new Array(vertices.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data5,0,vertices.data.length);
				vertices.data = data5;
			}
		}
		vertices.data[key5] = endZ;
		var key6 = index++;
		if(!vertices.fixed) {
			if(key6 >= vertices.length) vertices.length = key6 + 1;
			if(vertices.data.length < vertices.length) {
				var data6;
				var this7;
				this7 = new Array(vertices.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data6,0,vertices.data.length);
				vertices.data = data6;
			}
		}
		vertices.data[key6] = t;
		var key7 = index++;
		if(!vertices.fixed) {
			if(key7 >= vertices.length) vertices.length = key7 + 1;
			if(vertices.data.length < vertices.length) {
				var data7;
				var this8;
				this8 = new Array(vertices.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data7,0,vertices.data.length);
				vertices.data = data7;
			}
		}
		vertices.data[key7] = startR;
		var key8 = index++;
		if(!vertices.fixed) {
			if(key8 >= vertices.length) vertices.length = key8 + 1;
			if(vertices.data.length < vertices.length) {
				var data8;
				var this9;
				this9 = new Array(vertices.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data8,0,vertices.data.length);
				vertices.data = data8;
			}
		}
		vertices.data[key8] = startG;
		var key9 = index++;
		if(!vertices.fixed) {
			if(key9 >= vertices.length) vertices.length = key9 + 1;
			if(vertices.data.length < vertices.length) {
				var data9;
				var this10;
				this10 = new Array(vertices.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data9,0,vertices.data.length);
				vertices.data = data9;
			}
		}
		vertices.data[key9] = startB;
		var key10 = index++;
		if(!vertices.fixed) {
			if(key10 >= vertices.length) vertices.length = key10 + 1;
			if(vertices.data.length < vertices.length) {
				var data10;
				var this11;
				this11 = new Array(vertices.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data10,0,vertices.data.length);
				vertices.data = data10;
			}
		}
		vertices.data[key10] = 1;
		var key11 = index++;
		if(!vertices.fixed) {
			if(key11 >= vertices.length) vertices.length = key11 + 1;
			if(vertices.data.length < vertices.length) {
				var data11;
				var this12;
				this12 = new Array(vertices.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data11,0,vertices.data.length);
				vertices.data = data11;
			}
		}
		vertices.data[key11] = endX;
		var key12 = index++;
		if(!vertices.fixed) {
			if(key12 >= vertices.length) vertices.length = key12 + 1;
			if(vertices.data.length < vertices.length) {
				var data12;
				var this13;
				this13 = new Array(vertices.data.length + 10);
				data12 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data12,0,vertices.data.length);
				vertices.data = data12;
			}
		}
		vertices.data[key12] = endY;
		var key13 = index++;
		if(!vertices.fixed) {
			if(key13 >= vertices.length) vertices.length = key13 + 1;
			if(vertices.data.length < vertices.length) {
				var data13;
				var this14;
				this14 = new Array(vertices.data.length + 10);
				data13 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data13,0,vertices.data.length);
				vertices.data = data13;
			}
		}
		vertices.data[key13] = endZ;
		var key14 = index++;
		if(!vertices.fixed) {
			if(key14 >= vertices.length) vertices.length = key14 + 1;
			if(vertices.data.length < vertices.length) {
				var data14;
				var this15;
				this15 = new Array(vertices.data.length + 10);
				data14 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data14,0,vertices.data.length);
				vertices.data = data14;
			}
		}
		vertices.data[key14] = startX;
		var key15 = index++;
		if(!vertices.fixed) {
			if(key15 >= vertices.length) vertices.length = key15 + 1;
			if(vertices.data.length < vertices.length) {
				var data15;
				var this16;
				this16 = new Array(vertices.data.length + 10);
				data15 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data15,0,vertices.data.length);
				vertices.data = data15;
			}
		}
		vertices.data[key15] = startY;
		var key16 = index++;
		if(!vertices.fixed) {
			if(key16 >= vertices.length) vertices.length = key16 + 1;
			if(vertices.data.length < vertices.length) {
				var data16;
				var this17;
				this17 = new Array(vertices.data.length + 10);
				data16 = this17;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data16,0,vertices.data.length);
				vertices.data = data16;
			}
		}
		vertices.data[key16] = startZ;
		var key17 = index++;
		if(!vertices.fixed) {
			if(key17 >= vertices.length) vertices.length = key17 + 1;
			if(vertices.data.length < vertices.length) {
				var data17;
				var this18;
				this18 = new Array(vertices.data.length + 10);
				data17 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data17,0,vertices.data.length);
				vertices.data = data17;
			}
		}
		vertices.data[key17] = -t;
		var key18 = index++;
		if(!vertices.fixed) {
			if(key18 >= vertices.length) vertices.length = key18 + 1;
			if(vertices.data.length < vertices.length) {
				var data18;
				var this19;
				this19 = new Array(vertices.data.length + 10);
				data18 = this19;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data18,0,vertices.data.length);
				vertices.data = data18;
			}
		}
		vertices.data[key18] = endR;
		var key19 = index++;
		if(!vertices.fixed) {
			if(key19 >= vertices.length) vertices.length = key19 + 1;
			if(vertices.data.length < vertices.length) {
				var data19;
				var this20;
				this20 = new Array(vertices.data.length + 10);
				data19 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data19,0,vertices.data.length);
				vertices.data = data19;
			}
		}
		vertices.data[key19] = endG;
		var key20 = index++;
		if(!vertices.fixed) {
			if(key20 >= vertices.length) vertices.length = key20 + 1;
			if(vertices.data.length < vertices.length) {
				var data20;
				var this21;
				this21 = new Array(vertices.data.length + 10);
				data20 = this21;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data20,0,vertices.data.length);
				vertices.data = data20;
			}
		}
		vertices.data[key20] = endB;
		var key21 = index++;
		if(!vertices.fixed) {
			if(key21 >= vertices.length) vertices.length = key21 + 1;
			if(vertices.data.length < vertices.length) {
				var data21;
				var this22;
				this22 = new Array(vertices.data.length + 10);
				data21 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data21,0,vertices.data.length);
				vertices.data = data21;
			}
		}
		vertices.data[key21] = 1;
		var key22 = index++;
		if(!vertices.fixed) {
			if(key22 >= vertices.length) vertices.length = key22 + 1;
			if(vertices.data.length < vertices.length) {
				var data22;
				var this23;
				this23 = new Array(vertices.data.length + 10);
				data22 = this23;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data22,0,vertices.data.length);
				vertices.data = data22;
			}
		}
		vertices.data[key22] = startX;
		var key23 = index++;
		if(!vertices.fixed) {
			if(key23 >= vertices.length) vertices.length = key23 + 1;
			if(vertices.data.length < vertices.length) {
				var data23;
				var this24;
				this24 = new Array(vertices.data.length + 10);
				data23 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data23,0,vertices.data.length);
				vertices.data = data23;
			}
		}
		vertices.data[key23] = startY;
		var key24 = index++;
		if(!vertices.fixed) {
			if(key24 >= vertices.length) vertices.length = key24 + 1;
			if(vertices.data.length < vertices.length) {
				var data24;
				var this25;
				this25 = new Array(vertices.data.length + 10);
				data24 = this25;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data24,0,vertices.data.length);
				vertices.data = data24;
			}
		}
		vertices.data[key24] = startZ;
		var key25 = index++;
		if(!vertices.fixed) {
			if(key25 >= vertices.length) vertices.length = key25 + 1;
			if(vertices.data.length < vertices.length) {
				var data25;
				var this26;
				this26 = new Array(vertices.data.length + 10);
				data25 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data25,0,vertices.data.length);
				vertices.data = data25;
			}
		}
		vertices.data[key25] = endX;
		var key26 = index++;
		if(!vertices.fixed) {
			if(key26 >= vertices.length) vertices.length = key26 + 1;
			if(vertices.data.length < vertices.length) {
				var data26;
				var this27;
				this27 = new Array(vertices.data.length + 10);
				data26 = this27;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data26,0,vertices.data.length);
				vertices.data = data26;
			}
		}
		vertices.data[key26] = endY;
		var key27 = index++;
		if(!vertices.fixed) {
			if(key27 >= vertices.length) vertices.length = key27 + 1;
			if(vertices.data.length < vertices.length) {
				var data27;
				var this28;
				this28 = new Array(vertices.data.length + 10);
				data27 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data27,0,vertices.data.length);
				vertices.data = data27;
			}
		}
		vertices.data[key27] = endZ;
		var key28 = index++;
		if(!vertices.fixed) {
			if(key28 >= vertices.length) vertices.length = key28 + 1;
			if(vertices.data.length < vertices.length) {
				var data28;
				var this29;
				this29 = new Array(vertices.data.length + 10);
				data28 = this29;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data28,0,vertices.data.length);
				vertices.data = data28;
			}
		}
		vertices.data[key28] = -t;
		var key29 = index++;
		if(!vertices.fixed) {
			if(key29 >= vertices.length) vertices.length = key29 + 1;
			if(vertices.data.length < vertices.length) {
				var data29;
				var this30;
				this30 = new Array(vertices.data.length + 10);
				data29 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data29,0,vertices.data.length);
				vertices.data = data29;
			}
		}
		vertices.data[key29] = startR;
		var key30 = index++;
		if(!vertices.fixed) {
			if(key30 >= vertices.length) vertices.length = key30 + 1;
			if(vertices.data.length < vertices.length) {
				var data30;
				var this31;
				this31 = new Array(vertices.data.length + 10);
				data30 = this31;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data30,0,vertices.data.length);
				vertices.data = data30;
			}
		}
		vertices.data[key30] = startG;
		var key31 = index++;
		if(!vertices.fixed) {
			if(key31 >= vertices.length) vertices.length = key31 + 1;
			if(vertices.data.length < vertices.length) {
				var data31;
				var this32;
				this32 = new Array(vertices.data.length + 10);
				data31 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data31,0,vertices.data.length);
				vertices.data = data31;
			}
		}
		vertices.data[key31] = startB;
		var key32 = index++;
		if(!vertices.fixed) {
			if(key32 >= vertices.length) vertices.length = key32 + 1;
			if(vertices.data.length < vertices.length) {
				var data32;
				var this33;
				this33 = new Array(vertices.data.length + 10);
				data32 = this33;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data32,0,vertices.data.length);
				vertices.data = data32;
			}
		}
		vertices.data[key32] = 1;
		var key33 = index++;
		if(!vertices.fixed) {
			if(key33 >= vertices.length) vertices.length = key33 + 1;
			if(vertices.data.length < vertices.length) {
				var data33;
				var this34;
				this34 = new Array(vertices.data.length + 10);
				data33 = this34;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data33,0,vertices.data.length);
				vertices.data = data33;
			}
		}
		vertices.data[key33] = endX;
		var key34 = index++;
		if(!vertices.fixed) {
			if(key34 >= vertices.length) vertices.length = key34 + 1;
			if(vertices.data.length < vertices.length) {
				var data34;
				var this35;
				this35 = new Array(vertices.data.length + 10);
				data34 = this35;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data34,0,vertices.data.length);
				vertices.data = data34;
			}
		}
		vertices.data[key34] = endY;
		var key35 = index++;
		if(!vertices.fixed) {
			if(key35 >= vertices.length) vertices.length = key35 + 1;
			if(vertices.data.length < vertices.length) {
				var data35;
				var this36;
				this36 = new Array(vertices.data.length + 10);
				data35 = this36;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data35,0,vertices.data.length);
				vertices.data = data35;
			}
		}
		vertices.data[key35] = endZ;
		var key36 = index++;
		if(!vertices.fixed) {
			if(key36 >= vertices.length) vertices.length = key36 + 1;
			if(vertices.data.length < vertices.length) {
				var data36;
				var this37;
				this37 = new Array(vertices.data.length + 10);
				data36 = this37;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data36,0,vertices.data.length);
				vertices.data = data36;
			}
		}
		vertices.data[key36] = startX;
		var key37 = index++;
		if(!vertices.fixed) {
			if(key37 >= vertices.length) vertices.length = key37 + 1;
			if(vertices.data.length < vertices.length) {
				var data37;
				var this38;
				this38 = new Array(vertices.data.length + 10);
				data37 = this38;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data37,0,vertices.data.length);
				vertices.data = data37;
			}
		}
		vertices.data[key37] = startY;
		var key38 = index++;
		if(!vertices.fixed) {
			if(key38 >= vertices.length) vertices.length = key38 + 1;
			if(vertices.data.length < vertices.length) {
				var data38;
				var this39;
				this39 = new Array(vertices.data.length + 10);
				data38 = this39;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data38,0,vertices.data.length);
				vertices.data = data38;
			}
		}
		vertices.data[key38] = startZ;
		var key39 = index++;
		if(!vertices.fixed) {
			if(key39 >= vertices.length) vertices.length = key39 + 1;
			if(vertices.data.length < vertices.length) {
				var data39;
				var this40;
				this40 = new Array(vertices.data.length + 10);
				data39 = this40;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data39,0,vertices.data.length);
				vertices.data = data39;
			}
		}
		vertices.data[key39] = t;
		var key40 = index++;
		if(!vertices.fixed) {
			if(key40 >= vertices.length) vertices.length = key40 + 1;
			if(vertices.data.length < vertices.length) {
				var data40;
				var this41;
				this41 = new Array(vertices.data.length + 10);
				data40 = this41;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data40,0,vertices.data.length);
				vertices.data = data40;
			}
		}
		vertices.data[key40] = endR;
		var key41 = index++;
		if(!vertices.fixed) {
			if(key41 >= vertices.length) vertices.length = key41 + 1;
			if(vertices.data.length < vertices.length) {
				var data41;
				var this42;
				this42 = new Array(vertices.data.length + 10);
				data41 = this42;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data41,0,vertices.data.length);
				vertices.data = data41;
			}
		}
		vertices.data[key41] = endG;
		var key42 = index++;
		if(!vertices.fixed) {
			if(key42 >= vertices.length) vertices.length = key42 + 1;
			if(vertices.data.length < vertices.length) {
				var data42;
				var this43;
				this43 = new Array(vertices.data.length + 10);
				data42 = this43;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data42,0,vertices.data.length);
				vertices.data = data42;
			}
		}
		vertices.data[key42] = endB;
		var key43 = index++;
		if(!vertices.fixed) {
			if(key43 >= vertices.length) vertices.length = key43 + 1;
			if(vertices.data.length < vertices.length) {
				var data43;
				var this44;
				this44 = new Array(vertices.data.length + 10);
				data43 = this44;
				haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data43,0,vertices.data.length);
				vertices.data = data43;
			}
		}
		vertices.data[key43] = 1;
		subSet.vertexBufferDirty = true;
		this.invalidateBounds();
	}
	,get_hasData: function() {
		return this._hasData;
	}
	,getIndexBuffer: function(stage3DProxy) {
		if(this._activeSubSet.indexContext3D != stage3DProxy.get_context3D() || this._activeSubSet.indexBufferDirty) {
			this._activeSubSet.indexBuffer = stage3DProxy._context3D.createIndexBuffer(this._activeSubSet.numIndices);
			this._activeSubSet.indexBuffer.uploadFromVector(this._activeSubSet.indices,0,this._activeSubSet.numIndices);
			this._activeSubSet.indexBufferDirty = false;
			this._activeSubSet.indexContext3D = stage3DProxy.get_context3D();
		}
		return this._activeSubSet.indexBuffer;
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var subSet = this._subSets.data[index];
		this._activeSubSet = subSet;
		this._numIndices = subSet.numIndices;
		if(subSet.vertexContext3D != stage3DProxy.get_context3D() || subSet.vertexBufferDirty) {
			subSet.vertexBuffer = stage3DProxy._context3D.createVertexBuffer(subSet.numVertices,11);
			subSet.vertexBuffer.uploadFromVector(subSet.vertices,0,subSet.numVertices);
			subSet.vertexBufferDirty = false;
			subSet.vertexContext3D = stage3DProxy.get_context3D();
		}
		var vertexBuffer = subSet.vertexBuffer;
		var context3d = stage3DProxy._context3D;
		context3d.setVertexBufferAt(0,vertexBuffer,0,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
		context3d.setVertexBufferAt(1,vertexBuffer,3,openfl.display3D.Context3DVertexBufferFormat.FLOAT_3);
		context3d.setVertexBufferAt(2,vertexBuffer,6,openfl.display3D.Context3DVertexBufferFormat.FLOAT_1);
		context3d.setVertexBufferAt(3,vertexBuffer,7,openfl.display3D.Context3DVertexBufferFormat.FLOAT_4);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
	}
	,reOrderIndices: function(subSetIndex,index) {
		var segRef;
		var _g1 = index;
		var _g = this._indexSegments - 1;
		while(_g1 < _g) {
			var i = _g1++;
			segRef = this._segments.get(i + 1);
			segRef.index = i;
			if(segRef.subSetIndex == subSetIndex) {
				var _g2 = segRef.segment;
				_g2.set_index(_g2.get_index() - 44);
			}
			this._segments.set(i,segRef);
		}
	}
	,addSubSet: function() {
		var subSet = new away3d.entities.SubSet();
		var this1 = this._subSets;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = subSet;
		}
		this1.length;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		subSet.vertices = this3;
		subSet.numVertices = 0;
		var this5;
		this5 = new openfl.VectorData();
		var this6;
		this6 = new Array(0);
		this5.data = this6;
		this5.length = 0;
		this5.fixed = false;
		subSet.indices = this5;
		subSet.numIndices = 0;
		subSet.vertexBufferDirty = true;
		subSet.indexBufferDirty = true;
		subSet.lineCount = 0;
		this._subSetCount++;
		return subSet;
	}
	,dispose: function() {
		away3d.entities.Entity.prototype.dispose.call(this);
		this.removeAllSegments();
		this._segments = null;
		this._material = null;
		var subSet = this._subSets.data[0];
		subSet.vertices = null;
		subSet.indices = null;
		this._subSets = null;
	}
	,get_mouseEnabled: function() {
		return false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.BoundingSphere();
	}
	,updateBounds: function() {
		var subSet;
		var len;
		var v;
		var index;
		var minX = Math.POSITIVE_INFINITY;
		var minY = Math.POSITIVE_INFINITY;
		var minZ = Math.POSITIVE_INFINITY;
		var maxX = Math.NEGATIVE_INFINITY;
		var maxY = Math.NEGATIVE_INFINITY;
		var maxZ = Math.NEGATIVE_INFINITY;
		var vertices;
		var i = 0;
		while(i < this._subSetCount) {
			subSet = this._subSets.data[i];
			index = 0;
			vertices = subSet.vertices;
			len = vertices.length;
			if(len == 0) {
				++i;
				continue;
			}
			while(index < len) {
				var index1 = index++;
				v = vertices.data[index1];
				if(v < minX) minX = v; else if(v > maxX) maxX = v;
				var index2 = index++;
				v = vertices.data[index2];
				if(v < minY) minY = v; else if(v > maxY) maxY = v;
				var index3 = index++;
				v = vertices.data[index3];
				if(v < minZ) minZ = v; else if(v > maxZ) maxZ = v;
				index += 8;
			}
			++i;
		}
		if(minX != Math.POSITIVE_INFINITY) this._bounds.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ); else {
			var min = .5;
			this._bounds.fromExtremes(-min,-min,-min,min,min,min);
		}
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.RenderableNode(this);
	}
	,get_numTriangles: function() {
		return this._numIndices * 0.3333333 | 0;
	}
	,get_sourceEntity: function() {
		return this;
	}
	,get_castsShadows: function() {
		return false;
	}
	,get_material: function() {
		return this._material;
	}
	,get_animator: function() {
		return this._animator;
	}
	,set_material: function(value) {
		if(value == this._material) return value;
		if(this._material != null) this._material.removeOwner(this);
		this._material = value;
		if(this._material != null) this._material.addOwner(this);
		return value;
	}
	,get_uvTransform: function() {
		return null;
	}
	,get_vertexData: function() {
		return null;
	}
	,get_indexData: function() {
		return null;
	}
	,get_UVData: function() {
		return null;
	}
	,get_numVertices: function() {
		return 0;
	}
	,get_vertexStride: function() {
		return 11;
	}
	,get_vertexNormalData: function() {
		return null;
	}
	,get_vertexTangentData: function() {
		return null;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 0;
	}
	,get_vertexTangentOffset: function() {
		return 0;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.SEGMENT_SET;
	}
	,getRenderSceneTransform: function(camera) {
		return this._sceneTransform;
	}
	,__class__: away3d.entities.SegmentSet
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{get_vertexTangentOffset:"get_vertexTangentOffset",get_vertexNormalOffset:"get_vertexNormalOffset",get_vertexOffset:"get_vertexOffset",get_vertexTangentData:"get_vertexTangentData",get_vertexNormalData:"get_vertexNormalData",get_vertexStride:"get_vertexStride",get_numVertices:"get_numVertices",get_UVData:"get_UVData",get_indexData:"get_indexData",get_vertexData:"get_vertexData",get_uvTransform:"get_uvTransform",get_animator:"get_animator",set_material:"set_material",get_material:"get_material",get_castsShadows:"get_castsShadows",get_sourceEntity:"get_sourceEntity",get_numTriangles:"get_numTriangles",get_hasData:"get_hasData",get_subSetCount:"get_subSetCount",get_segmentCount:"get_segmentCount"})
});
away3d.entities.SegRef = function() {
};
$hxClasses["away3d.entities.SegRef"] = away3d.entities.SegRef;
away3d.entities.SegRef.__name__ = ["away3d","entities","SegRef"];
away3d.entities.SegRef.prototype = {
	__class__: away3d.entities.SegRef
};
away3d.entities.SubSet = function() {
};
$hxClasses["away3d.entities.SubSet"] = away3d.entities.SubSet;
away3d.entities.SubSet.__name__ = ["away3d","entities","SubSet"];
away3d.entities.SubSet.prototype = {
	dispose: function() {
		this.vertices = null;
		if(this.vertexBuffer != null) this.vertexBuffer.dispose();
		if(this.indexBuffer != null) this.indexBuffer.dispose();
	}
	,__class__: away3d.entities.SubSet
};
openfl.errors = {};
openfl.errors.Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl.errors.Error;
openfl.errors.Error.__name__ = ["openfl","errors","Error"];
openfl.errors.Error.prototype = {
	getStackTrace: function() {
		return haxe.CallStack.toString(haxe.CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl.errors.Error
};
away3d.errors = {};
away3d.errors.AbstractMethodError = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "An abstract method was called! Either an instance of an abstract class was created, or an abstract method was not overridden by the subclass.";
	openfl.errors.Error.call(this,message,id);
};
$hxClasses["away3d.errors.AbstractMethodError"] = away3d.errors.AbstractMethodError;
away3d.errors.AbstractMethodError.__name__ = ["away3d","errors","AbstractMethodError"];
away3d.errors.AbstractMethodError.__super__ = openfl.errors.Error;
away3d.errors.AbstractMethodError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: away3d.errors.AbstractMethodError
});
away3d.events.Asset3DEvent = function(type,asset,prevName) {
	openfl.events.Event.call(this,type);
	this._asset = asset;
	if(prevName != null) this._prevName = prevName; else if(this._asset != null) this._prevName = this._asset.get_name(); else this._prevName = null;
};
$hxClasses["away3d.events.Asset3DEvent"] = away3d.events.Asset3DEvent;
away3d.events.Asset3DEvent.__name__ = ["away3d","events","Asset3DEvent"];
away3d.events.Asset3DEvent.__super__ = openfl.events.Event;
away3d.events.Asset3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	get_asset: function() {
		return this._asset;
	}
	,get_assetPrevName: function() {
		return this._prevName;
	}
	,clone: function() {
		var a = new away3d.events.Asset3DEvent(this.type,this.get_asset(),this.get_assetPrevName());
		return a;
	}
	,__class__: away3d.events.Asset3DEvent
	,__properties__: {get_assetPrevName:"get_assetPrevName",get_asset:"get_asset"}
});
away3d.events.CameraEvent = function(type,camera,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this._camera = camera;
};
$hxClasses["away3d.events.CameraEvent"] = away3d.events.CameraEvent;
away3d.events.CameraEvent.__name__ = ["away3d","events","CameraEvent"];
away3d.events.CameraEvent.__super__ = openfl.events.Event;
away3d.events.CameraEvent.prototype = $extend(openfl.events.Event.prototype,{
	get_camera: function() {
		return this._camera;
	}
	,clone: function() {
		return new away3d.events.CameraEvent(this.type,this._camera,this.bubbles,this.cancelable);
	}
	,__class__: away3d.events.CameraEvent
	,__properties__: {get_camera:"get_camera"}
});
away3d.events.GeometryEvent = function(type,subGeometry) {
	openfl.events.Event.call(this,type,false,false);
	this._subGeometry = subGeometry;
};
$hxClasses["away3d.events.GeometryEvent"] = away3d.events.GeometryEvent;
away3d.events.GeometryEvent.__name__ = ["away3d","events","GeometryEvent"];
away3d.events.GeometryEvent.__super__ = openfl.events.Event;
away3d.events.GeometryEvent.prototype = $extend(openfl.events.Event.prototype,{
	get_subGeometry: function() {
		return this._subGeometry;
	}
	,clone: function() {
		return new away3d.events.GeometryEvent(this.type,this._subGeometry);
	}
	,__class__: away3d.events.GeometryEvent
	,__properties__: {get_subGeometry:"get_subGeometry"}
});
away3d.events.LensEvent = function(type,lens,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this._lens = lens;
};
$hxClasses["away3d.events.LensEvent"] = away3d.events.LensEvent;
away3d.events.LensEvent.__name__ = ["away3d","events","LensEvent"];
away3d.events.LensEvent.__super__ = openfl.events.Event;
away3d.events.LensEvent.prototype = $extend(openfl.events.Event.prototype,{
	get_lens: function() {
		return this._lens;
	}
	,clone: function() {
		return new away3d.events.LensEvent(this.type,this._lens,this.bubbles,this.cancelable);
	}
	,__class__: away3d.events.LensEvent
	,__properties__: {get_lens:"get_lens"}
});
away3d.events.LightEvent = function(type) {
	openfl.events.Event.call(this,type);
};
$hxClasses["away3d.events.LightEvent"] = away3d.events.LightEvent;
away3d.events.LightEvent.__name__ = ["away3d","events","LightEvent"];
away3d.events.LightEvent.__super__ = openfl.events.Event;
away3d.events.LightEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new away3d.events.LightEvent(this.type);
	}
	,__class__: away3d.events.LightEvent
});
away3d.events.Object3DEvent = function(type,object) {
	openfl.events.Event.call(this,type);
	this.object = object;
};
$hxClasses["away3d.events.Object3DEvent"] = away3d.events.Object3DEvent;
away3d.events.Object3DEvent.__name__ = ["away3d","events","Object3DEvent"];
away3d.events.Object3DEvent.__super__ = openfl.events.Event;
away3d.events.Object3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new away3d.events.Object3DEvent(this.type,this.object);
	}
	,__class__: away3d.events.Object3DEvent
});
away3d.events.Scene3DEvent = function(type,objectContainer) {
	this.objectContainer3D = objectContainer;
	openfl.events.Event.call(this,type);
};
$hxClasses["away3d.events.Scene3DEvent"] = away3d.events.Scene3DEvent;
away3d.events.Scene3DEvent.__name__ = ["away3d","events","Scene3DEvent"];
away3d.events.Scene3DEvent.__super__ = openfl.events.Event;
away3d.events.Scene3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new away3d.events.Scene3DEvent(this.type,this.objectContainer3D);
	}
	,__class__: away3d.events.Scene3DEvent
});
away3d.events.ShadingMethodEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["away3d.events.ShadingMethodEvent"] = away3d.events.ShadingMethodEvent;
away3d.events.ShadingMethodEvent.__name__ = ["away3d","events","ShadingMethodEvent"];
away3d.events.ShadingMethodEvent.__super__ = openfl.events.Event;
away3d.events.ShadingMethodEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: away3d.events.ShadingMethodEvent
});
away3d.events.Stage3DEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["away3d.events.Stage3DEvent"] = away3d.events.Stage3DEvent;
away3d.events.Stage3DEvent.__name__ = ["away3d","events","Stage3DEvent"];
away3d.events.Stage3DEvent.__super__ = openfl.events.Event;
away3d.events.Stage3DEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: away3d.events.Stage3DEvent
});
away3d.events.TouchEvent3D = function(type) {
	this._allowedToPropagate = true;
	openfl.events.Event.call(this,type,true,true);
};
$hxClasses["away3d.events.TouchEvent3D"] = away3d.events.TouchEvent3D;
away3d.events.TouchEvent3D.__name__ = ["away3d","events","TouchEvent3D"];
away3d.events.TouchEvent3D.__super__ = openfl.events.Event;
away3d.events.TouchEvent3D.prototype = $extend(openfl.events.Event.prototype,{
	stopPropagation: function() {
		openfl.events.Event.prototype.stopPropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent._allowedToPropagate = false;
	}
	,stopImmediatePropagation: function() {
		openfl.events.Event.prototype.stopImmediatePropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) this._parentEvent._allowedToPropagate = false;
	}
	,clone: function() {
		var result = new away3d.events.TouchEvent3D(this.type);
		result.screenX = this.screenX;
		result.screenY = this.screenY;
		result.view = this.view;
		result.object = this.object;
		result.renderable = this.renderable;
		result.material = this.material;
		result.uv = this.uv;
		result.localPosition = this.localPosition;
		result.localNormal = this.localNormal;
		result.index = this.index;
		result.subGeometryIndex = this.subGeometryIndex;
		result.ctrlKey = this.ctrlKey;
		result.shiftKey = this.shiftKey;
		result._parentEvent = this;
		return result;
	}
	,get_scenePosition: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) return (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().transformVector(this.localPosition); else return this.localPosition;
	}
	,get_sceneNormal: function() {
		if(js.Boot.__instanceof(this.object,away3d.containers.ObjectContainer3D)) {
			var sceneNormal = (js.Boot.__cast(this.object , away3d.containers.ObjectContainer3D)).get_sceneTransform().deltaTransformVector(this.localNormal);
			sceneNormal.normalize();
			return sceneNormal;
		} else return this.localNormal;
	}
	,__class__: away3d.events.TouchEvent3D
	,__properties__: {get_sceneNormal:"get_sceneNormal",get_scenePosition:"get_scenePosition"}
});
away3d.filters = {};
away3d.filters.Filter3DBase = function() {
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._tasks = this1;
};
$hxClasses["away3d.filters.Filter3DBase"] = away3d.filters.Filter3DBase;
away3d.filters.Filter3DBase.__name__ = ["away3d","filters","Filter3DBase"];
away3d.filters.Filter3DBase.prototype = {
	get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,addTask: function(filter) {
		var this1 = this._tasks;
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = filter;
		}
		this1.length;
		if(!this._requireDepthRender) this._requireDepthRender = filter.get_requireDepthRender();
	}
	,get_tasks: function() {
		return this._tasks;
	}
	,getMainInputTexture: function(stage3DProxy) {
		return this._tasks.data[0].getMainInputTexture(stage3DProxy);
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,set_textureWidth: function(value) {
		this._textureWidth = value;
		var i = 0;
		while(i < this._tasks.length) {
			this._tasks.data[i].set_textureWidth(value);
			++i;
		}
		return value;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,set_textureHeight: function(value) {
		this._textureHeight = value;
		var i = 0;
		while(i < this._tasks.length) {
			this._tasks.data[i].set_textureHeight(value);
			++i;
		}
		return value;
	}
	,setRenderTargets: function(mainTarget,stage3DProxy) {
		this._tasks.data[this._tasks.length - 1].set_target(mainTarget);
	}
	,dispose: function() {
		var i = 0;
		while(i < this._tasks.length) {
			this._tasks.data[i].dispose();
			++i;
		}
	}
	,update: function(stage,camera) {
	}
	,__class__: away3d.filters.Filter3DBase
	,__properties__: {set_textureHeight:"set_textureHeight",get_textureHeight:"get_textureHeight",set_textureWidth:"set_textureWidth",get_textureWidth:"get_textureWidth",get_tasks:"get_tasks",get_requireDepthRender:"get_requireDepthRender"}
};
away3d.filters.tasks = {};
away3d.filters.tasks.Filter3DTaskBase = function(requireDepthRender) {
	if(requireDepthRender == null) requireDepthRender = false;
	this._scaledTextureWidth = -1;
	this._scaledTextureHeight = -1;
	this._textureWidth = -1;
	this._textureHeight = -1;
	this._textureDimensionsInvalid = true;
	this._program3DInvalid = true;
	this._textureScale = 0;
	this._requireDepthRender = requireDepthRender;
};
$hxClasses["away3d.filters.tasks.Filter3DTaskBase"] = away3d.filters.tasks.Filter3DTaskBase;
away3d.filters.tasks.Filter3DTaskBase.__name__ = ["away3d","filters","tasks","Filter3DTaskBase"];
away3d.filters.tasks.Filter3DTaskBase.prototype = {
	get_textureScale: function() {
		return this._textureScale;
	}
	,set_textureScale: function(value) {
		if(this._textureScale == value) return value;
		this._textureScale = value;
		this._scaledTextureWidth = this._textureWidth >> this._textureScale;
		this._scaledTextureHeight = this._textureHeight >> this._textureScale;
		this._textureDimensionsInvalid = true;
		return value;
	}
	,get_target: function() {
		return this._target;
	}
	,set_target: function(value) {
		this._target = value;
		return value;
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,set_textureWidth: function(value) {
		if(this._textureWidth == value) return value;
		this._textureWidth = value;
		this._scaledTextureWidth = this._textureWidth >> this._textureScale;
		this._textureDimensionsInvalid = true;
		return value;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,set_textureHeight: function(value) {
		if(this._textureHeight == value) return value;
		this._textureHeight = value;
		this._scaledTextureHeight = this._textureHeight >> this._textureScale;
		this._textureDimensionsInvalid = true;
		return value;
	}
	,getMainInputTexture: function(stage) {
		if(this._textureDimensionsInvalid) this.updateTextures(stage);
		return this._mainInputTexture;
	}
	,dispose: function() {
		if(this._mainInputTexture != null) this._mainInputTexture.dispose();
		if(this._program3D != null) this._program3D.dispose();
	}
	,invalidateProgram3D: function() {
		this._program3DInvalid = true;
	}
	,updateProgram3D: function(stage) {
		if(this._program3D != null) this._program3D.dispose();
		this._program3D = stage.get_context3D().createProgram();
		this._program3D.upload(openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.VERTEX,this.getVertexCode()),openfl.display3D._shaders.AGLSLShaderUtils.createShader(openfl.display3D.Context3DProgramType.FRAGMENT,this.getFragmentCode()));
		this._program3DInvalid = false;
	}
	,getVertexCode: function() {
		return "mov op, va0\n" + "mov v0, va1\n";
	}
	,getFragmentCode: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,updateTextures: function(stage) {
		if(this._mainInputTexture != null) this._mainInputTexture.dispose();
		this._mainInputTexture = stage.get_context3D().createTexture(this._scaledTextureWidth,this._scaledTextureHeight,openfl.display3D.Context3DTextureFormat.BGRA,true);
		this._textureDimensionsInvalid = false;
	}
	,getProgram3D: function(stage3DProxy) {
		if(this._program3DInvalid) this.updateProgram3D(stage3DProxy);
		return this._program3D;
	}
	,activate: function(stage3DProxy,camera,depthTexture) {
	}
	,deactivate: function(stage3DProxy) {
	}
	,get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,__class__: away3d.filters.tasks.Filter3DTaskBase
	,__properties__: {get_requireDepthRender:"get_requireDepthRender",set_textureHeight:"set_textureHeight",get_textureHeight:"get_textureHeight",set_textureWidth:"set_textureWidth",get_textureWidth:"get_textureWidth",set_target:"set_target",get_target:"get_target",set_textureScale:"set_textureScale",get_textureScale:"get_textureScale"}
};
away3d.library.assets.Asset3DType = function() { };
$hxClasses["away3d.library.assets.Asset3DType"] = away3d.library.assets.Asset3DType;
away3d.library.assets.Asset3DType.__name__ = ["away3d","library","assets","Asset3DType"];
away3d.lights = {};
away3d.lights.LightBase = function() {
	this._color = 16777215;
	this._colorR = 1;
	this._colorG = 1;
	this._colorB = 1;
	this._ambientColor = 16777215;
	this._ambient = 0;
	this._ambientR = 0;
	this._ambientG = 0;
	this._ambientB = 0;
	this._specular = 1;
	this._specularR = 1;
	this._specularG = 1;
	this._specularB = 1;
	this._diffuse = 1;
	this._diffuseR = 1;
	this._diffuseG = 1;
	this._diffuseB = 1;
	away3d.entities.Entity.call(this);
};
$hxClasses["away3d.lights.LightBase"] = away3d.lights.LightBase;
away3d.lights.LightBase.__name__ = ["away3d","lights","LightBase"];
away3d.lights.LightBase.__super__ = away3d.entities.Entity;
away3d.lights.LightBase.prototype = $extend(away3d.entities.Entity.prototype,{
	get_castsShadows: function() {
		return this._castsShadows;
	}
	,set_castsShadows: function(value) {
		if(this._castsShadows == value) return value;
		this._castsShadows = value;
		if(value) {
			if(this._shadowMapper == null) this._shadowMapper = this.createShadowMapper();
			this._shadowMapper.set_light(this);
		} else {
			if(this._shadowMapper != null) this._shadowMapper.dispose();
			this._shadowMapper = null;
		}
		this.dispatchEvent(new away3d.events.LightEvent(away3d.events.LightEvent.CASTS_SHADOW_CHANGE));
		return value;
	}
	,createShadowMapper: function() {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,get_specular: function() {
		return this._specular;
	}
	,set_specular: function(value) {
		if(value < 0) value = 0;
		this._specular = value;
		this.updateSpecular();
		return value;
	}
	,get_diffuse: function() {
		return this._diffuse;
	}
	,set_diffuse: function(value) {
		if(value < 0) value = 0;
		this._diffuse = value;
		this.updateDiffuse();
		return value;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		this._color = value;
		this._colorR = (this._color >> 16 & 255) / 255;
		this._colorG = (this._color >> 8 & 255) / 255;
		this._colorB = (this._color & 255) / 255;
		this.updateDiffuse();
		this.updateSpecular();
		return value;
	}
	,get_ambient: function() {
		return this._ambient;
	}
	,set_ambient: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		this._ambient = value;
		this.updateAmbient();
		return value;
	}
	,get_ambientColor: function() {
		return this._ambientColor;
	}
	,set_ambientColor: function(value) {
		this._ambientColor = value;
		this.updateAmbient();
		return value;
	}
	,updateAmbient: function() {
		this._ambientR = (this._ambientColor >> 16 & 255) / 255 * this._ambient;
		this._ambientG = (this._ambientColor >> 8 & 255) / 255 * this._ambient;
		this._ambientB = (this._ambientColor & 255) / 255 * this._ambient;
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.LightNode(this);
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.LIGHT;
	}
	,updateSpecular: function() {
		this._specularR = this._colorR * this._specular;
		this._specularG = this._colorG * this._specular;
		this._specularB = this._colorB * this._specular;
	}
	,updateDiffuse: function() {
		this._diffuseR = this._colorR * this._diffuse;
		this._diffuseG = this._colorG * this._diffuse;
		this._diffuseB = this._colorB * this._diffuse;
	}
	,get_shadowMapper: function() {
		return this._shadowMapper;
	}
	,set_shadowMapper: function(value) {
		this._shadowMapper = value;
		this._shadowMapper.set_light(this);
		return value;
	}
	,__class__: away3d.lights.LightBase
	,__properties__: $extend(away3d.entities.Entity.prototype.__properties__,{set_shadowMapper:"set_shadowMapper",get_shadowMapper:"get_shadowMapper",set_ambientColor:"set_ambientColor",get_ambientColor:"get_ambientColor",set_ambient:"set_ambient",get_ambient:"get_ambient",set_color:"set_color",get_color:"get_color",set_diffuse:"set_diffuse",get_diffuse:"get_diffuse",set_specular:"set_specular",get_specular:"get_specular",set_castsShadows:"set_castsShadows",get_castsShadows:"get_castsShadows"})
});
away3d.lights.DirectionalLight = function(xDir,yDir,zDir) {
	if(zDir == null) zDir = 1;
	if(yDir == null) yDir = -1;
	if(xDir == null) xDir = 0;
	away3d.lights.LightBase.call(this);
	this.set_direction(new openfl.geom.Vector3D(xDir,yDir,zDir));
	this._sceneDirection = new openfl.geom.Vector3D();
};
$hxClasses["away3d.lights.DirectionalLight"] = away3d.lights.DirectionalLight;
away3d.lights.DirectionalLight.__name__ = ["away3d","lights","DirectionalLight"];
away3d.lights.DirectionalLight.__super__ = away3d.lights.LightBase;
away3d.lights.DirectionalLight.prototype = $extend(away3d.lights.LightBase.prototype,{
	createEntityPartitionNode: function() {
		return new away3d.core.partition.DirectionalLightNode(this);
	}
	,get_sceneDirection: function() {
		if(this._sceneTransformDirty) this.updateSceneTransform();
		return this._sceneDirection;
	}
	,get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		if(this._tmpLookAt == null) this._tmpLookAt = new openfl.geom.Vector3D();
		this._tmpLookAt.x = this.get_x() + this._direction.x;
		this._tmpLookAt.y = this.get_y() + this._direction.y;
		this._tmpLookAt.z = this.get_z() + this._direction.z;
		this.lookAt(this._tmpLookAt);
		return value;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.NullBounds();
	}
	,updateBounds: function() {
	}
	,updateSceneTransform: function() {
		away3d.lights.LightBase.prototype.updateSceneTransform.call(this);
		this.get_sceneTransform().copyColumnTo(2,this._sceneDirection);
		this._sceneDirection.normalize();
	}
	,createShadowMapper: function() {
		return new away3d.lights.shadowmaps.DirectionalShadowMapper();
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var bounds = renderable.get_sourceEntity().get_bounds();
		var m = new openfl.geom.Matrix3D();
		m.copyFrom(renderable.get_sceneTransform());
		m.append(this.get_inverseSceneTransform());
		if(this._projAABBPoints == null) {
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(24);
			this1.data = this2;
			this1.length = 24;
			this1.fixed = false;
			this._projAABBPoints = this1;
		}
		m.transformVectors(bounds.get_aabbPoints(),this._projAABBPoints);
		var xMin = Math.POSITIVE_INFINITY;
		var xMax = Math.NEGATIVE_INFINITY;
		var yMin = Math.POSITIVE_INFINITY;
		var yMax = Math.NEGATIVE_INFINITY;
		var zMin = Math.POSITIVE_INFINITY;
		var zMax = Math.NEGATIVE_INFINITY;
		var d;
		var i = 0;
		while(i < 24) {
			var index = i++;
			d = this._projAABBPoints.data[index];
			if(d < xMin) xMin = d;
			if(d > xMax) xMax = d;
			var index1 = i++;
			d = this._projAABBPoints.data[index1];
			if(d < yMin) yMin = d;
			if(d > yMax) yMax = d;
			var index2 = i++;
			d = this._projAABBPoints.data[index2];
			if(d < zMin) zMin = d;
			if(d > zMax) zMax = d;
		}
		var invXRange = 1 / (xMax - xMin);
		var invYRange = 1 / (yMax - yMin);
		var invZRange = 1 / (zMax - zMin);
		if(!raw.fixed) {
			if(0 >= raw.length) raw.length = 1;
			if(raw.data.length < raw.length) {
				var data;
				var this3;
				this3 = new Array(raw.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
				raw.data = data;
			}
		}
		raw.data[0] = 2 * invXRange;
		if(!raw.fixed) {
			if(5 >= raw.length) raw.length = 6;
			if(raw.data.length < raw.length) {
				var data1;
				var this4;
				this4 = new Array(raw.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
				raw.data = data1;
			}
		}
		raw.data[5] = 2 * invYRange;
		if(!raw.fixed) {
			if(10 >= raw.length) raw.length = 11;
			if(raw.data.length < raw.length) {
				var data2;
				var this5;
				this5 = new Array(raw.data.length + 10);
				data2 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
				raw.data = data2;
			}
		}
		raw.data[10] = invZRange;
		if(!raw.fixed) {
			if(12 >= raw.length) raw.length = 13;
			if(raw.data.length < raw.length) {
				var data3;
				var this6;
				this6 = new Array(raw.data.length + 10);
				data3 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
				raw.data = data3;
			}
		}
		raw.data[12] = -(xMax + xMin) * invXRange;
		if(!raw.fixed) {
			if(13 >= raw.length) raw.length = 14;
			if(raw.data.length < raw.length) {
				var data4;
				var this7;
				this7 = new Array(raw.data.length + 10);
				data4 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
				raw.data = data4;
			}
		}
		raw.data[13] = -(yMax + yMin) * invYRange;
		if(!raw.fixed) {
			if(14 >= raw.length) raw.length = 15;
			if(raw.data.length < raw.length) {
				var data5;
				var this8;
				this8 = new Array(raw.data.length + 10);
				data5 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
				raw.data = data5;
			}
		}
		raw.data[14] = -zMin * invZRange;
		var value;
		var value1;
		var value2;
		var value3;
		var value4;
		var value5;
		var value6;
		var value7;
		if(!raw.fixed) {
			if(11 >= raw.length) raw.length = 12;
			if(raw.data.length < raw.length) {
				var data6;
				var this9;
				this9 = new Array(raw.data.length + 10);
				data6 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
				raw.data = data6;
			}
		}
		value7 = raw.data[11] = 0;
		if(!raw.fixed) {
			if(9 >= raw.length) raw.length = 10;
			if(raw.data.length < raw.length) {
				var data7;
				var this10;
				this10 = new Array(raw.data.length + 10);
				data7 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
				raw.data = data7;
			}
		}
		value6 = raw.data[9] = value7;
		if(!raw.fixed) {
			if(8 >= raw.length) raw.length = 9;
			if(raw.data.length < raw.length) {
				var data8;
				var this11;
				this11 = new Array(raw.data.length + 10);
				data8 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
				raw.data = data8;
			}
		}
		value5 = raw.data[8] = value6;
		if(!raw.fixed) {
			if(7 >= raw.length) raw.length = 8;
			if(raw.data.length < raw.length) {
				var data9;
				var this12;
				this12 = new Array(raw.data.length + 10);
				data9 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
				raw.data = data9;
			}
		}
		value4 = raw.data[7] = value5;
		if(!raw.fixed) {
			if(6 >= raw.length) raw.length = 7;
			if(raw.data.length < raw.length) {
				var data10;
				var this13;
				this13 = new Array(raw.data.length + 10);
				data10 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
				raw.data = data10;
			}
		}
		value3 = raw.data[6] = value4;
		if(!raw.fixed) {
			if(4 >= raw.length) raw.length = 5;
			if(raw.data.length < raw.length) {
				var data11;
				var this14;
				this14 = new Array(raw.data.length + 10);
				data11 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
				raw.data = data11;
			}
		}
		value2 = raw.data[4] = value3;
		if(!raw.fixed) {
			if(3 >= raw.length) raw.length = 4;
			if(raw.data.length < raw.length) {
				var data12;
				var this15;
				this15 = new Array(raw.data.length + 10);
				data12 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
				raw.data = data12;
			}
		}
		value1 = raw.data[3] = value2;
		if(!raw.fixed) {
			if(2 >= raw.length) raw.length = 3;
			if(raw.data.length < raw.length) {
				var data13;
				var this16;
				this16 = new Array(raw.data.length + 10);
				data13 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
				raw.data = data13;
			}
		}
		value = raw.data[2] = value1;
		if(!raw.fixed) {
			if(1 >= raw.length) raw.length = 2;
			if(raw.data.length < raw.length) {
				var data14;
				var this17;
				this17 = new Array(raw.data.length + 10);
				data14 = this17;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
				raw.data = data14;
			}
		}
		raw.data[1] = value;
		if(!raw.fixed) {
			if(15 >= raw.length) raw.length = 16;
			if(raw.data.length < raw.length) {
				var data15;
				var this18;
				this18 = new Array(raw.data.length + 10);
				data15 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
				raw.data = data15;
			}
		}
		raw.data[15] = 1;
		if(target == null) target = new openfl.geom.Matrix3D();
		target.copyRawDataFrom(raw);
		target.prepend(m);
		return target;
	}
	,__class__: away3d.lights.DirectionalLight
	,__properties__: $extend(away3d.lights.LightBase.prototype.__properties__,{set_direction:"set_direction",get_direction:"get_direction",get_sceneDirection:"get_sceneDirection"})
});
away3d.lights.LightProbe = function(diffuseMap,specularMap) {
	away3d.lights.LightBase.call(this);
	this._diffuseMap = diffuseMap;
	this._specularMap = specularMap;
};
$hxClasses["away3d.lights.LightProbe"] = away3d.lights.LightProbe;
away3d.lights.LightProbe.__name__ = ["away3d","lights","LightProbe"];
away3d.lights.LightProbe.__super__ = away3d.lights.LightBase;
away3d.lights.LightProbe.prototype = $extend(away3d.lights.LightBase.prototype,{
	createEntityPartitionNode: function() {
		return new away3d.core.partition.LightProbeNode(this);
	}
	,get_diffuseMap: function() {
		return this._diffuseMap;
	}
	,set_diffuseMap: function(value) {
		this._diffuseMap = value;
		return value;
	}
	,get_specularMap: function() {
		return this._specularMap;
	}
	,set_specularMap: function(value) {
		this._specularMap = value;
		return value;
	}
	,updateBounds: function() {
		this._boundsInvalid = false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.NullBounds();
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		throw new openfl.errors.Error("Object projection matrices are not supported for LightProbe objects!");
		return null;
	}
	,__class__: away3d.lights.LightProbe
	,__properties__: $extend(away3d.lights.LightBase.prototype.__properties__,{set_specularMap:"set_specularMap",get_specularMap:"get_specularMap",set_diffuseMap:"set_diffuseMap",get_diffuseMap:"get_diffuseMap"})
});
away3d.lights.PointLight = function() {
	this._radius = 90000;
	this._fallOff = 100000;
	away3d.lights.LightBase.call(this);
	this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
};
$hxClasses["away3d.lights.PointLight"] = away3d.lights.PointLight;
away3d.lights.PointLight.__name__ = ["away3d","lights","PointLight"];
away3d.lights.PointLight.__super__ = away3d.lights.LightBase;
away3d.lights.PointLight.prototype = $extend(away3d.lights.LightBase.prototype,{
	createShadowMapper: function() {
		return new away3d.lights.shadowmaps.CubeMapShadowMapper();
	}
	,createEntityPartitionNode: function() {
		return new away3d.core.partition.PointLightNode(this);
	}
	,get_radius: function() {
		return this._radius;
	}
	,set_radius: function(value) {
		this._radius = value;
		if(this._radius < 0) this._radius = 0; else if(this._radius > this._fallOff) {
			this._fallOff = this._radius;
			this.invalidateBounds();
		}
		this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
		return value;
	}
	,fallOffFactor: function() {
		return this._fallOffFactor;
	}
	,get_fallOff: function() {
		return this._fallOff;
	}
	,set_fallOff: function(value) {
		this._fallOff = value;
		if(this._fallOff < 0) this._fallOff = 0;
		if(this._fallOff < this._radius) this._radius = this._fallOff;
		this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
		this.invalidateBounds();
		return value;
	}
	,updateBounds: function() {
		this._bounds.fromSphere(new openfl.geom.Vector3D(),this._fallOff);
		this._boundsInvalid = false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d.bounds.BoundingSphere();
	}
	,getObjectProjectionMatrix: function(renderable,target) {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var bounds = renderable.get_sourceEntity().get_bounds();
		var m = new openfl.geom.Matrix3D();
		m.copyFrom(renderable.get_sceneTransform());
		m.append(this._parent.get_inverseSceneTransform());
		this.lookAt(new openfl.geom.Vector3D(m.rawData.data[12],m.rawData.data[13],m.rawData.data[14]));
		m.copyFrom(renderable.get_sceneTransform());
		m.append(this.get_inverseSceneTransform());
		m.copyColumnTo(3,this._pos);
		var v1 = m.deltaTransformVector(bounds.get_min());
		var v2 = m.deltaTransformVector(bounds.get_max());
		var z = this._pos.z;
		var d1 = v1.x * v1.x + v1.y * v1.y + v1.z * v1.z;
		var d2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
		var d = Math.sqrt(d1 > d2?d1:d2);
		var zMin;
		var zMax;
		zMin = z - d;
		zMax = z + d;
		var value;
		if(!raw.fixed) {
			if(0 >= raw.length) raw.length = 1;
			if(raw.data.length < raw.length) {
				var data;
				var this1;
				this1 = new Array(raw.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
				raw.data = data;
			}
		}
		value = raw.data[0] = zMin / d;
		if(!raw.fixed) {
			if(5 >= raw.length) raw.length = 6;
			if(raw.data.length < raw.length) {
				var data1;
				var this2;
				this2 = new Array(raw.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
				raw.data = data1;
			}
		}
		raw.data[5] = value;
		if(!raw.fixed) {
			if(10 >= raw.length) raw.length = 11;
			if(raw.data.length < raw.length) {
				var data2;
				var this3;
				this3 = new Array(raw.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
				raw.data = data2;
			}
		}
		raw.data[10] = zMax / (zMax - zMin);
		if(!raw.fixed) {
			if(11 >= raw.length) raw.length = 12;
			if(raw.data.length < raw.length) {
				var data3;
				var this4;
				this4 = new Array(raw.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
				raw.data = data3;
			}
		}
		raw.data[11] = 1;
		var value1;
		var value2;
		var value3;
		var value4;
		var value5;
		var value6;
		var value7;
		var value8;
		var value9;
		var value10;
		if(!raw.fixed) {
			if(15 >= raw.length) raw.length = 16;
			if(raw.data.length < raw.length) {
				var data4;
				var this5;
				this5 = new Array(raw.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
				raw.data = data4;
			}
		}
		value10 = raw.data[15] = 0;
		if(!raw.fixed) {
			if(13 >= raw.length) raw.length = 14;
			if(raw.data.length < raw.length) {
				var data5;
				var this6;
				this6 = new Array(raw.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
				raw.data = data5;
			}
		}
		value9 = raw.data[13] = value10;
		if(!raw.fixed) {
			if(12 >= raw.length) raw.length = 13;
			if(raw.data.length < raw.length) {
				var data6;
				var this7;
				this7 = new Array(raw.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
				raw.data = data6;
			}
		}
		value8 = raw.data[12] = value9;
		if(!raw.fixed) {
			if(9 >= raw.length) raw.length = 10;
			if(raw.data.length < raw.length) {
				var data7;
				var this8;
				this8 = new Array(raw.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
				raw.data = data7;
			}
		}
		value7 = raw.data[9] = value8;
		if(!raw.fixed) {
			if(8 >= raw.length) raw.length = 9;
			if(raw.data.length < raw.length) {
				var data8;
				var this9;
				this9 = new Array(raw.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
				raw.data = data8;
			}
		}
		value6 = raw.data[8] = value7;
		if(!raw.fixed) {
			if(7 >= raw.length) raw.length = 8;
			if(raw.data.length < raw.length) {
				var data9;
				var this10;
				this10 = new Array(raw.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
				raw.data = data9;
			}
		}
		value5 = raw.data[7] = value6;
		if(!raw.fixed) {
			if(6 >= raw.length) raw.length = 7;
			if(raw.data.length < raw.length) {
				var data10;
				var this11;
				this11 = new Array(raw.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
				raw.data = data10;
			}
		}
		value4 = raw.data[6] = value5;
		if(!raw.fixed) {
			if(4 >= raw.length) raw.length = 5;
			if(raw.data.length < raw.length) {
				var data11;
				var this12;
				this12 = new Array(raw.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
				raw.data = data11;
			}
		}
		value3 = raw.data[4] = value4;
		if(!raw.fixed) {
			if(3 >= raw.length) raw.length = 4;
			if(raw.data.length < raw.length) {
				var data12;
				var this13;
				this13 = new Array(raw.data.length + 10);
				data12 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
				raw.data = data12;
			}
		}
		value2 = raw.data[3] = value3;
		if(!raw.fixed) {
			if(2 >= raw.length) raw.length = 3;
			if(raw.data.length < raw.length) {
				var data13;
				var this14;
				this14 = new Array(raw.data.length + 10);
				data13 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
				raw.data = data13;
			}
		}
		value1 = raw.data[2] = value2;
		if(!raw.fixed) {
			if(1 >= raw.length) raw.length = 2;
			if(raw.data.length < raw.length) {
				var data14;
				var this15;
				this15 = new Array(raw.data.length + 10);
				data14 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
				raw.data = data14;
			}
		}
		raw.data[1] = value1;
		if(!raw.fixed) {
			if(14 >= raw.length) raw.length = 15;
			if(raw.data.length < raw.length) {
				var data15;
				var this16;
				this16 = new Array(raw.data.length + 10);
				data15 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
				raw.data = data15;
			}
		}
		raw.data[14] = -zMin * raw.data[10];
		if(target == null) target = new openfl.geom.Matrix3D();
		target.copyRawDataFrom(raw);
		target.prepend(m);
		return target;
	}
	,__class__: away3d.lights.PointLight
	,__properties__: $extend(away3d.lights.LightBase.prototype.__properties__,{set_fallOff:"set_fallOff",get_fallOff:"get_fallOff",set_radius:"set_radius",get_radius:"get_radius"})
});
away3d.lights.shadowmaps = {};
away3d.lights.shadowmaps.ShadowMapperBase = function() {
	this._depthMapSize = 2048;
	this._autoUpdateShadows = true;
	this._casterCollector = this.createCasterCollector();
};
$hxClasses["away3d.lights.shadowmaps.ShadowMapperBase"] = away3d.lights.shadowmaps.ShadowMapperBase;
away3d.lights.shadowmaps.ShadowMapperBase.__name__ = ["away3d","lights","shadowmaps","ShadowMapperBase"];
away3d.lights.shadowmaps.ShadowMapperBase.prototype = {
	createCasterCollector: function() {
		return new away3d.core.traverse.ShadowCasterCollector();
	}
	,get_autoUpdateShadows: function() {
		return this._autoUpdateShadows;
	}
	,set_autoUpdateShadows: function(value) {
		this._autoUpdateShadows = value;
		return value;
	}
	,updateShadows: function() {
		this._shadowsInvalid = true;
	}
	,setDepthMap: function(depthMap) {
		if(this._depthMap == depthMap) return;
		if(this._depthMap != null && !this._explicitDepthMap) this._depthMap.dispose();
		this._depthMap = depthMap;
		if(this._depthMap != null) {
			this._explicitDepthMap = true;
			this._depthMapSize = this._depthMap.get_width();
		} else this._explicitDepthMap = false;
	}
	,get_light: function() {
		return this._light;
	}
	,set_light: function(value) {
		this._light = value;
		return value;
	}
	,get_depthMap: function() {
		if(this._depthMap == null) this._depthMap = this.createDepthTexture();
		return this._depthMap;
	}
	,get_depthMapSize: function() {
		return this._depthMapSize;
	}
	,set_depthMapSize: function(value) {
		if(value == this._depthMapSize) return value;
		this._depthMapSize = value;
		if(this._explicitDepthMap) throw new openfl.errors.Error("Cannot set depth map size for the current renderer."); else if(this._depthMap != null) {
			this._depthMap.dispose();
			this._depthMap = null;
		}
		return value;
	}
	,dispose: function() {
		this._casterCollector = null;
		if(this._depthMap != null && !this._explicitDepthMap) this._depthMap.dispose();
		this._depthMap = null;
	}
	,createDepthTexture: function() {
		return new away3d.textures.RenderTexture(this._depthMapSize,this._depthMapSize);
	}
	,renderDepthMap: function(stage3DProxy,entityCollector,renderer) {
		this._shadowsInvalid = false;
		this.updateDepthProjection(entityCollector.get_camera());
		if(this._depthMap == null) this._depthMap = this.createDepthTexture();
		this.drawDepthMap(this._depthMap.getTextureForStage3D(stage3DProxy),entityCollector.scene,renderer);
	}
	,updateDepthProjection: function(viewCamera) {
		throw new away3d.errors.AbstractMethodError();
	}
	,drawDepthMap: function(target,scene,renderer) {
		throw new away3d.errors.AbstractMethodError();
	}
	,__class__: away3d.lights.shadowmaps.ShadowMapperBase
	,__properties__: {set_depthMapSize:"set_depthMapSize",get_depthMapSize:"get_depthMapSize",get_depthMap:"get_depthMap",set_light:"set_light",get_light:"get_light",set_autoUpdateShadows:"set_autoUpdateShadows",get_autoUpdateShadows:"get_autoUpdateShadows"}
};
away3d.lights.shadowmaps.CubeMapShadowMapper = function() {
	away3d.lights.shadowmaps.ShadowMapperBase.call(this);
	this._depthMapSize = 512;
	this._needsRender = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),6,false);
	this.initCameras();
};
$hxClasses["away3d.lights.shadowmaps.CubeMapShadowMapper"] = away3d.lights.shadowmaps.CubeMapShadowMapper;
away3d.lights.shadowmaps.CubeMapShadowMapper.__name__ = ["away3d","lights","shadowmaps","CubeMapShadowMapper"];
away3d.lights.shadowmaps.CubeMapShadowMapper.__super__ = away3d.lights.shadowmaps.ShadowMapperBase;
away3d.lights.shadowmaps.CubeMapShadowMapper.prototype = $extend(away3d.lights.shadowmaps.ShadowMapperBase.prototype,{
	initCameras: function() {
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		this._depthCameras = this1;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		this._lenses = this3;
		this.addCamera(0,90,0);
		this.addCamera(0,-90,0);
		this.addCamera(-90,0,0);
		this.addCamera(90,0,0);
		this.addCamera(0,0,0);
		this.addCamera(0,180,0);
	}
	,addCamera: function(rotationX,rotationY,rotationZ) {
		var cam = new away3d.cameras.Camera3D();
		cam.set_rotationX(rotationX);
		cam.set_rotationY(rotationY);
		cam.set_rotationZ(rotationZ);
		cam.get_lens().set_near(.01);
		(js.Boot.__cast(cam.get_lens() , away3d.cameras.lenses.PerspectiveLens)).set_fieldOfView(90);
		var this1 = this._lenses;
		var x;
		x = js.Boot.__cast(cam.get_lens() , away3d.cameras.lenses.PerspectiveLens);
		if(!this1.fixed) {
			this1.length++;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
			this1.data[this1.length - 1] = x;
		}
		this1.length;
		cam.get_lens().set_aspectRatio(1);
		var this3 = this._depthCameras;
		if(!this3.fixed) {
			this3.length++;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
			this3.data[this3.length - 1] = cam;
		}
		this3.length;
	}
	,createDepthTexture: function() {
		return new away3d.textures.RenderCubeTexture(this._depthMapSize);
	}
	,updateDepthProjection: function(viewCamera) {
		var maxDistance = (js.Boot.__cast(this._light , away3d.lights.PointLight))._fallOff;
		var pos = this._light.get_scenePosition();
		var i = 0;
		while(i < 6) {
			this._lenses.data[i].set_far(maxDistance);
			this._depthCameras.data[i].set_position(pos);
			var this1 = this._needsRender;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = true;
			++i;
		}
	}
	,drawDepthMap: function(target,scene,renderer) {
		var i = 0;
		while(i < 6) {
			if(this._needsRender.data[i]) {
				this._casterCollector.set_camera(this._depthCameras.data[i]);
				this._casterCollector.clear();
				scene.traversePartitions(this._casterCollector);
				renderer.render(this._casterCollector,target,null,i);
				this._casterCollector.cleanUp();
			}
			++i;
		}
	}
	,__class__: away3d.lights.shadowmaps.CubeMapShadowMapper
});
away3d.lights.shadowmaps.DirectionalShadowMapper = function() {
	this._lightOffset = 10000;
	this._snap = 64;
	away3d.lights.shadowmaps.ShadowMapperBase.call(this);
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._cullPlanes = this1;
	this._overallDepthLens = new away3d.cameras.lenses.FreeMatrixLens();
	this._overallDepthCamera = new away3d.cameras.Camera3D(this._overallDepthLens);
	this._localFrustum = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(24);
			this3.data = this4;
		}
		this3.length = 24;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),24,0);
	this._matrix = new openfl.geom.Matrix3D();
};
$hxClasses["away3d.lights.shadowmaps.DirectionalShadowMapper"] = away3d.lights.shadowmaps.DirectionalShadowMapper;
away3d.lights.shadowmaps.DirectionalShadowMapper.__name__ = ["away3d","lights","shadowmaps","DirectionalShadowMapper"];
away3d.lights.shadowmaps.DirectionalShadowMapper.__super__ = away3d.lights.shadowmaps.ShadowMapperBase;
away3d.lights.shadowmaps.DirectionalShadowMapper.prototype = $extend(away3d.lights.shadowmaps.ShadowMapperBase.prototype,{
	get_snap: function() {
		return this._snap;
	}
	,set_snap: function(value) {
		this._snap = value;
		return value;
	}
	,get_lightOffset: function() {
		return this._lightOffset;
	}
	,set_lightOffset: function(value) {
		this._lightOffset = value;
		return value;
	}
	,get_depthProjection: function() {
		return this._overallDepthCamera.get_viewProjection();
	}
	,get_depth: function() {
		return this._maxZ - this._minZ;
	}
	,drawDepthMap: function(target,scene,renderer) {
		this._casterCollector.set_camera(this._overallDepthCamera);
		this._casterCollector.set_cullPlanes(this._cullPlanes);
		this._casterCollector.clear();
		scene.traversePartitions(this._casterCollector);
		renderer.render(this._casterCollector,target);
		this._casterCollector.cleanUp();
	}
	,updateCullPlanes: function(viewCamera) {
		var lightFrustumPlanes = this._overallDepthCamera.get_frustumPlanes();
		var viewFrustumPlanes = viewCamera.get_frustumPlanes();
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this._cullPlanes),4);
		var this1 = this._cullPlanes;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = lightFrustumPlanes.data[0];
		var this3 = this._cullPlanes;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = lightFrustumPlanes.data[1];
		var this5 = this._cullPlanes;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = lightFrustumPlanes.data[2];
		var this7 = this._cullPlanes;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = lightFrustumPlanes.data[3];
		var dir = (js.Boot.__cast(this._light , away3d.lights.DirectionalLight)).get_sceneDirection();
		var dirX = dir.x;
		var dirY = dir.y;
		var dirZ = dir.z;
		var j = 4;
		var i = 0;
		while(i < 6) {
			var plane = viewFrustumPlanes.data[i];
			if(plane.a * dirX + plane.b * dirY + plane.c * dirZ < 0) {
				var this9 = this._cullPlanes;
				var key = j++;
				if(!this9.fixed) {
					if(key >= this9.length) this9.length = key + 1;
					if(this9.data.length < this9.length) {
						var data4;
						var this10;
						this10 = new Array(this9.data.length + 10);
						data4 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
						this9.data = data4;
					}
				}
				this9.data[key] = plane;
			}
			++i;
		}
	}
	,updateDepthProjection: function(viewCamera) {
		this.updateProjectionFromFrustumCorners(viewCamera,(function($this) {
			var $r;
			var value = viewCamera.get_lens().get_frustumCorners();
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this)),this._matrix);
		this._overallDepthLens.set_matrix(this._matrix);
		this.updateCullPlanes(viewCamera);
	}
	,updateProjectionFromFrustumCorners: function(viewCamera,corners,matrix) {
		var raw = away3d.core.math.Matrix3DUtils.get_RAW_DATA_CONTAINER();
		var dir;
		var x;
		var y;
		var z;
		var minX;
		var minY;
		var maxX;
		var maxY;
		var i;
		dir = (js.Boot.__cast(this._light , away3d.lights.DirectionalLight)).get_sceneDirection();
		this._overallDepthCamera.set_transform(this._light.get_sceneTransform());
		x = (viewCamera.get_x() - dir.x * this._lightOffset) / this._snap * this._snap;
		y = (viewCamera.get_y() - dir.y * this._lightOffset) / this._snap * this._snap;
		z = (viewCamera.get_z() - dir.z * this._lightOffset) / this._snap * this._snap;
		this._overallDepthCamera.set_x(x);
		this._overallDepthCamera.set_y(y);
		this._overallDepthCamera.set_z(z);
		this._matrix.copyFrom(this._overallDepthCamera.get_inverseSceneTransform());
		this._matrix.prepend(viewCamera.get_sceneTransform());
		this._matrix.transformVectors(corners,this._localFrustum);
		minX = maxX = this._localFrustum.data[0];
		minY = maxY = this._localFrustum.data[1];
		this._maxZ = this._localFrustum.data[2];
		i = 3;
		while(i < 24) {
			x = this._localFrustum.data[i];
			y = this._localFrustum.data[i + 1];
			z = this._localFrustum.data[i + 2];
			if(x < minX) minX = x;
			if(x > maxX) maxX = x;
			if(y < minY) minY = y;
			if(y > maxY) maxY = y;
			if(z > this._maxZ) this._maxZ = z;
			i += 3;
		}
		this._minZ = 1;
		var w = maxX - minX;
		var h = maxY - minY;
		var d = 1 / (this._maxZ - this._minZ);
		if(minX < 0) minX -= this._snap;
		if(minY < 0) minY -= this._snap;
		minX = minX / this._snap * this._snap;
		minY = minY / this._snap * this._snap;
		var snap2 = 2 * this._snap;
		w = (w / snap2 + 2) * snap2;
		h = (h / snap2 + 2) * snap2;
		maxX = minX + w;
		maxY = minY + h;
		w = 1 / w;
		h = 1 / h;
		if(!raw.fixed) {
			if(0 >= raw.length) raw.length = 1;
			if(raw.data.length < raw.length) {
				var data;
				var this1;
				this1 = new Array(raw.data.length + 10);
				data = this1;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data,0,raw.data.length);
				raw.data = data;
			}
		}
		raw.data[0] = 2 * w;
		if(!raw.fixed) {
			if(5 >= raw.length) raw.length = 6;
			if(raw.data.length < raw.length) {
				var data1;
				var this2;
				this2 = new Array(raw.data.length + 10);
				data1 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data1,0,raw.data.length);
				raw.data = data1;
			}
		}
		raw.data[5] = 2 * h;
		if(!raw.fixed) {
			if(10 >= raw.length) raw.length = 11;
			if(raw.data.length < raw.length) {
				var data2;
				var this3;
				this3 = new Array(raw.data.length + 10);
				data2 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data2,0,raw.data.length);
				raw.data = data2;
			}
		}
		raw.data[10] = d;
		if(!raw.fixed) {
			if(12 >= raw.length) raw.length = 13;
			if(raw.data.length < raw.length) {
				var data3;
				var this4;
				this4 = new Array(raw.data.length + 10);
				data3 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data3,0,raw.data.length);
				raw.data = data3;
			}
		}
		raw.data[12] = -(maxX + minX) * w;
		if(!raw.fixed) {
			if(13 >= raw.length) raw.length = 14;
			if(raw.data.length < raw.length) {
				var data4;
				var this5;
				this5 = new Array(raw.data.length + 10);
				data4 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data4,0,raw.data.length);
				raw.data = data4;
			}
		}
		raw.data[13] = -(maxY + minY) * h;
		if(!raw.fixed) {
			if(14 >= raw.length) raw.length = 15;
			if(raw.data.length < raw.length) {
				var data5;
				var this6;
				this6 = new Array(raw.data.length + 10);
				data5 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data5,0,raw.data.length);
				raw.data = data5;
			}
		}
		raw.data[14] = -this._minZ * d;
		if(!raw.fixed) {
			if(15 >= raw.length) raw.length = 16;
			if(raw.data.length < raw.length) {
				var data6;
				var this7;
				this7 = new Array(raw.data.length + 10);
				data6 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data6,0,raw.data.length);
				raw.data = data6;
			}
		}
		raw.data[15] = 1;
		var value;
		var value1;
		var value2;
		var value3;
		var value4;
		var value5;
		var value6;
		var value7;
		if(!raw.fixed) {
			if(11 >= raw.length) raw.length = 12;
			if(raw.data.length < raw.length) {
				var data7;
				var this8;
				this8 = new Array(raw.data.length + 10);
				data7 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data7,0,raw.data.length);
				raw.data = data7;
			}
		}
		value7 = raw.data[11] = 0;
		if(!raw.fixed) {
			if(9 >= raw.length) raw.length = 10;
			if(raw.data.length < raw.length) {
				var data8;
				var this9;
				this9 = new Array(raw.data.length + 10);
				data8 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data8,0,raw.data.length);
				raw.data = data8;
			}
		}
		value6 = raw.data[9] = value7;
		if(!raw.fixed) {
			if(8 >= raw.length) raw.length = 9;
			if(raw.data.length < raw.length) {
				var data9;
				var this10;
				this10 = new Array(raw.data.length + 10);
				data9 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data9,0,raw.data.length);
				raw.data = data9;
			}
		}
		value5 = raw.data[8] = value6;
		if(!raw.fixed) {
			if(7 >= raw.length) raw.length = 8;
			if(raw.data.length < raw.length) {
				var data10;
				var this11;
				this11 = new Array(raw.data.length + 10);
				data10 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data10,0,raw.data.length);
				raw.data = data10;
			}
		}
		value4 = raw.data[7] = value5;
		if(!raw.fixed) {
			if(6 >= raw.length) raw.length = 7;
			if(raw.data.length < raw.length) {
				var data11;
				var this12;
				this12 = new Array(raw.data.length + 10);
				data11 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data11,0,raw.data.length);
				raw.data = data11;
			}
		}
		value3 = raw.data[6] = value4;
		if(!raw.fixed) {
			if(4 >= raw.length) raw.length = 5;
			if(raw.data.length < raw.length) {
				var data12;
				var this13;
				this13 = new Array(raw.data.length + 10);
				data12 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data12,0,raw.data.length);
				raw.data = data12;
			}
		}
		value2 = raw.data[4] = value3;
		if(!raw.fixed) {
			if(3 >= raw.length) raw.length = 4;
			if(raw.data.length < raw.length) {
				var data13;
				var this14;
				this14 = new Array(raw.data.length + 10);
				data13 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data13,0,raw.data.length);
				raw.data = data13;
			}
		}
		value1 = raw.data[3] = value2;
		if(!raw.fixed) {
			if(2 >= raw.length) raw.length = 3;
			if(raw.data.length < raw.length) {
				var data14;
				var this15;
				this15 = new Array(raw.data.length + 10);
				data14 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data14,0,raw.data.length);
				raw.data = data14;
			}
		}
		value = raw.data[2] = value1;
		if(!raw.fixed) {
			if(1 >= raw.length) raw.length = 2;
			if(raw.data.length < raw.length) {
				var data15;
				var this16;
				this16 = new Array(raw.data.length + 10);
				data15 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(raw.data,0,data15,0,raw.data.length);
				raw.data = data15;
			}
		}
		raw.data[1] = value;
		matrix.copyRawDataFrom(raw);
	}
	,__class__: away3d.lights.shadowmaps.DirectionalShadowMapper
	,__properties__: $extend(away3d.lights.shadowmaps.ShadowMapperBase.prototype.__properties__,{get_depth:"get_depth",get_depthProjection:"get_depthProjection",set_lightOffset:"set_lightOffset",get_lightOffset:"get_lightOffset",set_snap:"set_snap",get_snap:"get_snap"})
});
away3d.materials.LightSources = function() { };
$hxClasses["away3d.materials.LightSources"] = away3d.materials.LightSources;
away3d.materials.LightSources.__name__ = ["away3d","materials","LightSources"];
away3d.materials.MaterialBase = function() {
	this._blendMode = openfl.display.BlendMode.NORMAL;
	this._mipmap = true;
	this._smooth = true;
	this._anisotropy = away3d.textures.Anisotropy.ANISOTROPIC2X;
	this._depthCompareMode = 515;
	this._owners = new Array();
	this._passes = new Array();
	this._depthPass = new away3d.materials.passes.DepthMapPass();
	this._distancePass = new away3d.materials.passes.DistanceMapPass();
	this._depthPass.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDepthPassChange));
	this._distancePass.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDistancePassChange));
	this.set_alphaPremultiplied(false);
	this._uniqueId = away3d.materials.MaterialBase.MATERIAL_ID_COUNT++;
	this._depthPassId = 0;
	this._numPasses = 0;
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.MaterialBase"] = away3d.materials.MaterialBase;
away3d.materials.MaterialBase.__name__ = ["away3d","materials","MaterialBase"];
away3d.materials.MaterialBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.MaterialBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.materials.MaterialBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	get_assetType: function() {
		return away3d.library.assets.Asset3DType.MATERIAL;
	}
	,get_lightPicker: function() {
		return this._lightPicker;
	}
	,set_lightPicker: function(value) {
		if(value != this._lightPicker) {
			this._lightPicker = value;
			var len = this._passes.length;
			var i = 0;
			while(i < len) {
				this._passes[i].set_lightPicker(this._lightPicker);
				++i;
			}
		}
		return value;
	}
	,get_mipmap: function() {
		return this._mipmap;
	}
	,set_mipmap: function(value) {
		this._mipmap = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_mipmap(value);
			++i;
		}
		return value;
	}
	,get_smooth: function() {
		return this._smooth;
	}
	,set_smooth: function(value) {
		this._smooth = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_smooth(value);
			++i;
		}
		return value;
	}
	,get_depthCompareMode: function() {
		return this._depthCompareMode;
	}
	,set_depthCompareMode: function(value) {
		this._depthCompareMode = value;
		return value;
	}
	,get_repeat: function() {
		return this._repeat;
	}
	,set_repeat: function(value) {
		this._repeat = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_repeat(value);
			++i;
		}
		return value;
	}
	,get_anisotropy: function() {
		return this._anisotropy;
	}
	,set_anisotropy: function(value) {
		this._anisotropy = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_anisotropy(this._anisotropy);
			++i;
		}
		return this._anisotropy;
	}
	,dispose: function() {
		var i = 0;
		i = 0;
		while(i < this._numPasses) {
			this._passes[i].dispose();
			++i;
		}
		this._depthPass.dispose();
		this._distancePass.dispose();
		this._depthPass.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDepthPassChange));
		this._distancePass.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDistancePassChange));
	}
	,get_bothSides: function() {
		return this._bothSides;
	}
	,set_bothSides: function(value) {
		this._bothSides = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_bothSides(value);
			++i;
		}
		this._depthPass.set_bothSides(value);
		this._distancePass.set_bothSides(value);
		return value;
	}
	,get_blendMode: function() {
		return this._blendMode;
	}
	,set_blendMode: function(value) {
		this._blendMode = value;
		return value;
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].set_alphaPremultiplied(value);
			++i;
		}
		return value;
	}
	,get_requiresBlending: function() {
		return this._blendMode != openfl.display.BlendMode.NORMAL;
	}
	,get_uniqueId: function() {
		return this._uniqueId;
	}
	,get_numPasses: function() {
		return this._numPasses;
	}
	,hasDepthAlphaThreshold: function() {
		return this._depthPass.get_alphaThreshold() > 0;
	}
	,activateForDepth: function(stage3DProxy,camera,distanceBased) {
		if(distanceBased == null) distanceBased = false;
		this._distanceBasedDepthRender = distanceBased;
		if(distanceBased) this._distancePass.activate(stage3DProxy,camera); else this._depthPass.activate(stage3DProxy,camera);
	}
	,deactivateForDepth: function(stage3DProxy) {
		if(this._distanceBasedDepthRender) this._distancePass.deactivate(stage3DProxy); else this._depthPass.deactivate(stage3DProxy);
	}
	,renderDepth: function(renderable,stage3DProxy,camera,viewProjection) {
		if(this._distanceBasedDepthRender) {
			if(renderable.get_animator() != null) this._distancePass.updateAnimationState(renderable,stage3DProxy,camera);
			this._distancePass.render(renderable,stage3DProxy,camera,viewProjection);
		} else {
			if(renderable.get_animator() != null) this._depthPass.updateAnimationState(renderable,stage3DProxy,camera);
			this._depthPass.render(renderable,stage3DProxy,camera,viewProjection);
		}
	}
	,passRendersToTexture: function(index) {
		return this._passes[index].get_renderToTexture();
	}
	,activatePass: function(index,stage3DProxy,camera) {
		this._passes[index].activate(stage3DProxy,camera);
	}
	,deactivatePass: function(index,stage3DProxy) {
		this._passes[index].deactivate(stage3DProxy);
	}
	,renderPass: function(index,renderable,stage3DProxy,entityCollector,viewProjection) {
		if(this._lightPicker != null) this._lightPicker.collectLights(renderable,entityCollector);
		var pass = this._passes[index];
		if(renderable.get_animator() != null) pass.updateAnimationState(renderable,stage3DProxy,entityCollector.get_camera());
		pass.render(renderable,stage3DProxy,entityCollector.get_camera(),viewProjection);
	}
	,addOwner: function(owner) {
		this._owners.push(owner);
		if(owner.get_animator() != null) {
			if(this._animationSet != null && owner.get_animator().get_animationSet() != this._animationSet) throw new openfl.errors.Error("A Material instance cannot be shared across renderables with different animator libraries"); else if(this._animationSet != owner.get_animator().get_animationSet()) {
				this._animationSet = owner.get_animator().get_animationSet();
				var i = 0;
				while(i < this._numPasses) {
					this._passes[i].set_animationSet(this._animationSet);
					++i;
				}
				this._depthPass.set_animationSet(this._animationSet);
				this._distancePass.set_animationSet(this._animationSet);
				this.invalidatePasses(null);
			}
		}
	}
	,removeOwner: function(owner) {
		this._owners.splice(Lambda.indexOf(this._owners,owner),1);
		if(this._owners.length == 0) {
			this._animationSet = null;
			var i = 0;
			while(i < this._numPasses) {
				this._passes[i].set_animationSet(this._animationSet);
				++i;
			}
			this._depthPass.set_animationSet(this._animationSet);
			this._distancePass.set_animationSet(this._animationSet);
			this.invalidatePasses(null);
		}
	}
	,get_owners: function() {
		return this._owners;
	}
	,updateMaterial: function(context) {
	}
	,deactivate: function(stage3DProxy) {
		this._passes[this._numPasses - 1].deactivate(stage3DProxy);
	}
	,invalidatePasses: function(triggerPass) {
		var _g = this;
		var owner;
		this._depthPass.invalidateShaderProgram();
		this._distancePass.invalidateShaderProgram();
		if(this._animationSet != null) {
			this._animationSet.resetGPUCompatibility();
			Lambda.foreach(this._owners,function(owner1) {
				if(owner1.get_animator() != null) {
					owner1.get_animator().testGPUCompatibility(_g._depthPass);
					owner1.get_animator().testGPUCompatibility(_g._distancePass);
				}
				return true;
			});
		}
		var i;
		var _g1 = 0;
		var _g2 = this._numPasses;
		while(_g1 < _g2) {
			var i1 = [_g1++];
			if(this._passes[i1[0]] != triggerPass) this._passes[i1[0]].invalidateShaderProgram(false);
			if(this._animationSet != null) Lambda.foreach(this._owners,(function(i1) {
				return function(owner2) {
					if(owner2.get_animator() != null) owner2.get_animator().testGPUCompatibility(_g._passes[i1[0]]);
					return true;
				};
			})(i1));
		}
	}
	,removePass: function(pass) {
		this._passes.splice(HxOverrides.indexOf(this._passes,pass,0),1);
		--this._numPasses;
	}
	,clearPasses: function() {
		var i = 0;
		while(i < this._numPasses) {
			this._passes[i].removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onPassChange));
			++i;
		}
		this._passes = [];
		this._numPasses = 0;
	}
	,addPass: function(pass) {
		this._passes[this._numPasses++] = pass;
		pass.set_animationSet(this._animationSet);
		pass.set_alphaPremultiplied(this._alphaPremultiplied);
		pass.set_mipmap(this._mipmap);
		pass.set_smooth(this._smooth);
		pass.set_repeat(this._repeat);
		pass.set_anisotropy(this._anisotropy);
		pass.set_lightPicker(this._lightPicker);
		pass.set_bothSides(this._bothSides);
		pass.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onPassChange));
		this.invalidatePasses(null);
	}
	,onPassChange: function(event) {
		var mult = 1;
		var ids;
		var len;
		this._renderOrderId = 0;
		var i = 0;
		while(i < this._numPasses) {
			ids = this._passes[i]._program3Dids;
			len = ids.length;
			var j = 0;
			while(j < len) {
				if(ids[j] != -1) {
					this._renderOrderId += mult * ids[j] | 0;
					j = len;
				}
				++j;
			}
			mult *= 1000;
			++i;
		}
	}
	,onDistancePassChange: function(event) {
		var ids = this._distancePass._program3Dids;
		var len = ids.length;
		this._depthPassId = 0;
		var j = 0;
		while(j < len) {
			if(ids[j] != -1) {
				this._depthPassId += ids[j];
				j = len;
			}
			++j;
		}
	}
	,onDepthPassChange: function(event) {
		var ids = this._depthPass._program3Dids;
		var len = ids.length;
		this._depthPassId = 0;
		var j = 0;
		while(j < len) {
			if(ids[j] != -1) {
				this._depthPassId += ids[j];
				j = len;
			}
			++j;
		}
	}
	,__class__: away3d.materials.MaterialBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_owners:"get_owners",get_numPasses:"get_numPasses",get_uniqueId:"get_uniqueId",get_requiresBlending:"get_requiresBlending",set_alphaPremultiplied:"set_alphaPremultiplied",get_alphaPremultiplied:"get_alphaPremultiplied",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_bothSides:"set_bothSides",get_bothSides:"get_bothSides",set_anisotropy:"set_anisotropy",get_anisotropy:"get_anisotropy",set_repeat:"set_repeat",get_repeat:"get_repeat",set_depthCompareMode:"set_depthCompareMode",get_depthCompareMode:"get_depthCompareMode",set_smooth:"set_smooth",get_smooth:"get_smooth",set_mipmap:"set_mipmap",get_mipmap:"get_mipmap",set_lightPicker:"set_lightPicker",get_lightPicker:"get_lightPicker",get_assetType:"get_assetType"})
});
away3d.materials.SegmentMaterial = function(thickness) {
	if(thickness == null) thickness = 1.25;
	away3d.materials.MaterialBase.call(this);
	this.set_bothSides(true);
	this.addPass(this._screenPass = new away3d.materials.passes.SegmentPass(thickness));
	this._screenPass.set_material(this);
};
$hxClasses["away3d.materials.SegmentMaterial"] = away3d.materials.SegmentMaterial;
away3d.materials.SegmentMaterial.__name__ = ["away3d","materials","SegmentMaterial"];
away3d.materials.SegmentMaterial.__super__ = away3d.materials.MaterialBase;
away3d.materials.SegmentMaterial.prototype = $extend(away3d.materials.MaterialBase.prototype,{
	__class__: away3d.materials.SegmentMaterial
});
away3d.materials.SinglePassMaterialBase = function() {
	away3d.materials.MaterialBase.call(this);
	this.addPass(this._screenPass = new away3d.materials.passes.SuperShaderPass(this));
};
$hxClasses["away3d.materials.SinglePassMaterialBase"] = away3d.materials.SinglePassMaterialBase;
away3d.materials.SinglePassMaterialBase.__name__ = ["away3d","materials","SinglePassMaterialBase"];
away3d.materials.SinglePassMaterialBase.__super__ = away3d.materials.MaterialBase;
away3d.materials.SinglePassMaterialBase.prototype = $extend(away3d.materials.MaterialBase.prototype,{
	get_enableLightFallOff: function() {
		return this._screenPass.get_enableLightFallOff();
	}
	,set_enableLightFallOff: function(value) {
		this._screenPass.set_enableLightFallOff(value);
		return value;
	}
	,get_alphaThreshold: function() {
		return this._screenPass.get_diffuseMethod().get_alphaThreshold();
	}
	,set_alphaThreshold: function(value) {
		this._screenPass.get_diffuseMethod().set_alphaThreshold(value);
		this._depthPass.set_alphaThreshold(value);
		this._distancePass.set_alphaThreshold(value);
		return value;
	}
	,set_blendMode: function(value) {
		away3d.materials.MaterialBase.prototype.set_blendMode.call(this,value);
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		return value;
	}
	,set_depthCompareMode: function(value) {
		away3d.materials.MaterialBase.prototype.set_depthCompareMode.call(this,value);
		this._screenPass.set_depthCompareMode(value);
		return value;
	}
	,activateForDepth: function(stage3DProxy,camera,distanceBased) {
		if(distanceBased == null) distanceBased = false;
		if(distanceBased) this._distancePass.set_alphaMask(this._screenPass.get_diffuseMethod().get_texture()); else this._depthPass.set_alphaMask(this._screenPass.get_diffuseMethod().get_texture());
		away3d.materials.MaterialBase.prototype.activateForDepth.call(this,stage3DProxy,camera,distanceBased);
	}
	,get_specularLightSources: function() {
		return this._screenPass.get_specularLightSources();
	}
	,set_specularLightSources: function(value) {
		this._screenPass.set_specularLightSources(value);
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._screenPass.get_diffuseLightSources();
	}
	,set_diffuseLightSources: function(value) {
		this._screenPass.set_diffuseLightSources(value);
		return value;
	}
	,get_requiresBlending: function() {
		return away3d.materials.MaterialBase.prototype.get_requiresBlending.call(this) || this._alphaBlending || this._screenPass.get_colorTransform() != null && this._screenPass.get_colorTransform().alphaMultiplier < 1;
	}
	,get_colorTransform: function() {
		return this._screenPass.get_colorTransform();
	}
	,set_colorTransform: function(value) {
		this._screenPass.set_colorTransform(value);
		return value;
	}
	,get_ambientMethod: function() {
		return this._screenPass.get_ambientMethod();
	}
	,set_ambientMethod: function(value) {
		this._screenPass.set_ambientMethod(value);
		return value;
	}
	,get_shadowMethod: function() {
		return this._screenPass.get_shadowMethod();
	}
	,set_shadowMethod: function(value) {
		this._screenPass.set_shadowMethod(value);
		return value;
	}
	,get_diffuseMethod: function() {
		return this._screenPass.get_diffuseMethod();
	}
	,set_diffuseMethod: function(value) {
		this._screenPass.set_diffuseMethod(value);
		return value;
	}
	,get_normalMethod: function() {
		return this._screenPass.get_normalMethod();
	}
	,set_normalMethod: function(value) {
		this._screenPass.set_normalMethod(value);
		return value;
	}
	,get_specularMethod: function() {
		return this._screenPass.get_specularMethod();
	}
	,set_specularMethod: function(value) {
		this._screenPass.set_specularMethod(value);
		return value;
	}
	,addMethod: function(method) {
		this._screenPass.addMethod(method);
	}
	,get_numMethods: function() {
		return this._screenPass.get_numMethods();
	}
	,hasMethod: function(method) {
		return this._screenPass.hasMethod(method);
	}
	,getMethodAt: function(index) {
		return this._screenPass.getMethodAt(index);
	}
	,addMethodAt: function(method,index) {
		this._screenPass.addMethodAt(method,index);
	}
	,removeMethod: function(method) {
		this._screenPass.removeMethod(method);
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) return value;
		away3d.materials.MaterialBase.prototype.set_mipmap.call(this,value);
		return value;
	}
	,get_normalMap: function() {
		return this._screenPass.get_normalMap();
	}
	,set_normalMap: function(value) {
		this._screenPass.set_normalMap(value);
		return value;
	}
	,get_specularMap: function() {
		return this._screenPass.get_specularMethod().get_texture();
	}
	,set_specularMap: function(value) {
		if(this._screenPass.get_specularMethod() != null) this._screenPass.get_specularMethod().set_texture(value); else throw new openfl.errors.Error("No specular method was set to assign the specularGlossMap to");
		return value;
	}
	,get_gloss: function() {
		if(this._screenPass.get_specularMethod() != null) return this._screenPass.get_specularMethod().get_gloss(); else return 0;
	}
	,set_gloss: function(value) {
		if(this._screenPass.get_specularMethod() != null) this._screenPass.get_specularMethod().set_gloss(value);
		return value;
	}
	,get_ambient: function() {
		return this._screenPass.get_ambientMethod().get_ambient();
	}
	,set_ambient: function(value) {
		this._screenPass.get_ambientMethod().set_ambient(value);
		return value;
	}
	,get_specular: function() {
		if(this._screenPass.get_specularMethod() != null) return this._screenPass.get_specularMethod().get_specular(); else return 0;
	}
	,set_specular: function(value) {
		if(this._screenPass.get_specularMethod() != null) this._screenPass.get_specularMethod().set_specular(value);
		return value;
	}
	,get_ambientColor: function() {
		return this._screenPass.get_ambientMethod().get_ambientColor();
	}
	,set_ambientColor: function(value) {
		this._screenPass.get_ambientMethod().set_ambientColor(value);
		return value;
	}
	,get_specularColor: function() {
		return this._screenPass.get_specularMethod().get_specularColor();
	}
	,set_specularColor: function(value) {
		this._screenPass.get_specularMethod().set_specularColor(value);
		return value;
	}
	,get_alphaBlending: function() {
		return this._alphaBlending;
	}
	,set_alphaBlending: function(value) {
		this._alphaBlending = value;
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		return value;
	}
	,updateMaterial: function(context) {
		if(this._screenPass._passesDirty) {
			this.clearPasses();
			if(this._screenPass._passes != null) {
				var len = this._screenPass._passes.length;
				var i = 0;
				while(i < len) {
					this.addPass(this._screenPass._passes[i]);
					++i;
				}
			}
			this.addPass(this._screenPass);
			this._screenPass._passesDirty = false;
		}
	}
	,set_lightPicker: function(value) {
		away3d.materials.MaterialBase.prototype.set_lightPicker.call(this,value);
		this._screenPass.set_lightPicker(value);
		return value;
	}
	,__class__: away3d.materials.SinglePassMaterialBase
	,__properties__: $extend(away3d.materials.MaterialBase.prototype.__properties__,{set_alphaBlending:"set_alphaBlending",get_alphaBlending:"get_alphaBlending",set_specularColor:"set_specularColor",get_specularColor:"get_specularColor",set_ambientColor:"set_ambientColor",get_ambientColor:"get_ambientColor",set_specular:"set_specular",get_specular:"get_specular",set_ambient:"set_ambient",get_ambient:"get_ambient",set_gloss:"set_gloss",get_gloss:"get_gloss",set_specularMap:"set_specularMap",get_specularMap:"get_specularMap",set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",get_numMethods:"get_numMethods",set_specularMethod:"set_specularMethod",get_specularMethod:"get_specularMethod",set_normalMethod:"set_normalMethod",get_normalMethod:"get_normalMethod",set_diffuseMethod:"set_diffuseMethod",get_diffuseMethod:"get_diffuseMethod",set_shadowMethod:"set_shadowMethod",get_shadowMethod:"get_shadowMethod",set_ambientMethod:"set_ambientMethod",get_ambientMethod:"get_ambientMethod",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_diffuseLightSources:"set_diffuseLightSources",get_diffuseLightSources:"get_diffuseLightSources",set_specularLightSources:"set_specularLightSources",get_specularLightSources:"get_specularLightSources",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold",set_enableLightFallOff:"set_enableLightFallOff",get_enableLightFallOff:"get_enableLightFallOff"})
});
away3d.materials.TextureMaterial = function(texture,smooth,repeat,mipmap,anisotropy) {
	if(mipmap == null) mipmap = true;
	if(repeat == null) repeat = false;
	if(smooth == null) smooth = true;
	away3d.materials.SinglePassMaterialBase.call(this);
	this.set_texture(texture);
	this.set_smooth(smooth);
	this.set_repeat(repeat);
	this.set_mipmap(mipmap);
	this.set_anisotropy(anisotropy == null?away3d.textures.Anisotropy.ANISOTROPIC2X:anisotropy);
};
$hxClasses["away3d.materials.TextureMaterial"] = away3d.materials.TextureMaterial;
away3d.materials.TextureMaterial.__name__ = ["away3d","materials","TextureMaterial"];
away3d.materials.TextureMaterial.__super__ = away3d.materials.SinglePassMaterialBase;
away3d.materials.TextureMaterial.prototype = $extend(away3d.materials.SinglePassMaterialBase.prototype,{
	get_animateUVs: function() {
		return this._screenPass.get_animateUVs();
	}
	,set_animateUVs: function(value) {
		this._screenPass.set_animateUVs(value);
		return value;
	}
	,get_alpha: function() {
		if(this._screenPass.get_colorTransform() != null) return this._screenPass.get_colorTransform().alphaMultiplier; else return 1;
	}
	,set_alpha: function(value) {
		if(value > 1) value = 1; else if(value < 0) value = 0;
		if(this.get_colorTransform() == null) this.set_colorTransform(new openfl.geom.ColorTransform());
		this.get_colorTransform().alphaMultiplier = value;
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		this._screenPass.setBlendMode(this.get_blendMode() == openfl.display.BlendMode.NORMAL && this.get_requiresBlending()?openfl.display.BlendMode.LAYER:this.get_blendMode());
		return value;
	}
	,get_texture: function() {
		return this._screenPass.get_diffuseMethod().get_texture();
	}
	,set_texture: function(value) {
		this._screenPass.get_diffuseMethod().set_texture(value);
		return value;
	}
	,get_ambientTexture: function() {
		return this._screenPass.get_ambientMethod().get_texture();
	}
	,set_ambientTexture: function(value) {
		this._screenPass.get_ambientMethod().set_texture(value);
		this._screenPass.get_diffuseMethod().set_useAmbientTexture(js.Boot.__cast(value != null , Bool));
		return value;
	}
	,__class__: away3d.materials.TextureMaterial
	,__properties__: $extend(away3d.materials.SinglePassMaterialBase.prototype.__properties__,{set_ambientTexture:"set_ambientTexture",get_ambientTexture:"get_ambientTexture",set_texture:"set_texture",get_texture:"get_texture",set_alpha:"set_alpha",get_alpha:"get_alpha",set_animateUVs:"set_animateUVs",get_animateUVs:"get_animateUVs"})
});
away3d.materials.compilation.MethodDependencyCounter = function() {
	this._usesGlobalPosFragment = false;
};
$hxClasses["away3d.materials.compilation.MethodDependencyCounter"] = away3d.materials.compilation.MethodDependencyCounter;
away3d.materials.compilation.MethodDependencyCounter.__name__ = ["away3d","materials","compilation","MethodDependencyCounter"];
away3d.materials.compilation.MethodDependencyCounter.prototype = {
	reset: function() {
		this._projectionDependencies = 0;
		this._normalDependencies = 0;
		this._viewDirDependencies = 0;
		this._uvDependencies = 0;
		this._secondaryUVDependencies = 0;
		this._globalPosDependencies = 0;
		this._tangentDependencies = 0;
		this._usesGlobalPosFragment = false;
	}
	,setPositionedLights: function(numPointLights,lightSourceMask) {
		this._numPointLights = numPointLights;
		this._lightSourceMask = lightSourceMask;
	}
	,includeMethodVO: function(methodVO) {
		if(methodVO.needsProjection) ++this._projectionDependencies;
		if(methodVO.needsGlobalVertexPos) {
			++this._globalPosDependencies;
			if(methodVO.needsGlobalFragmentPos) this._usesGlobalPosFragment = true;
		} else if(methodVO.needsGlobalFragmentPos) {
			++this._globalPosDependencies;
			this._usesGlobalPosFragment = true;
		}
		if(methodVO.needsNormals) ++this._normalDependencies;
		if(methodVO.needsTangents) ++this._tangentDependencies;
		if(methodVO.needsView) ++this._viewDirDependencies;
		if(methodVO.needsUV) ++this._uvDependencies;
		if(methodVO.needsSecondaryUV) ++this._secondaryUVDependencies;
	}
	,get_tangentDependencies: function() {
		return this._tangentDependencies;
	}
	,get_usesGlobalPosFragment: function() {
		return this._usesGlobalPosFragment;
	}
	,get_projectionDependencies: function() {
		return this._projectionDependencies;
	}
	,get_normalDependencies: function() {
		return this._normalDependencies;
	}
	,get_viewDirDependencies: function() {
		return this._viewDirDependencies;
	}
	,get_uvDependencies: function() {
		return this._uvDependencies;
	}
	,get_secondaryUVDependencies: function() {
		return this._secondaryUVDependencies;
	}
	,get_globalPosDependencies: function() {
		return this._globalPosDependencies;
	}
	,addWorldSpaceDependencies: function(fragmentLights) {
		if(this._viewDirDependencies > 0) ++this._globalPosDependencies;
		if(this._numPointLights > 0 && (this._lightSourceMask & away3d.materials.LightSources.LIGHTS) == 1) {
			++this._globalPosDependencies;
			if(fragmentLights) this._usesGlobalPosFragment = true;
		}
	}
	,__class__: away3d.materials.compilation.MethodDependencyCounter
	,__properties__: {get_globalPosDependencies:"get_globalPosDependencies",get_secondaryUVDependencies:"get_secondaryUVDependencies",get_uvDependencies:"get_uvDependencies",get_viewDirDependencies:"get_viewDirDependencies",get_normalDependencies:"get_normalDependencies",get_projectionDependencies:"get_projectionDependencies",get_usesGlobalPosFragment:"get_usesGlobalPosFragment",get_tangentDependencies:"get_tangentDependencies"}
};
haxe.ds.StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref["$" + i];
		}};
	}
	,__class__: haxe.ds.StringMap
};
away3d.materials.compilation.RegisterPool = function(regName,regCount,persistent) {
	if(persistent == null) persistent = true;
	this._regName = regName;
	this._regCount = regCount;
	this._persistent = persistent;
	this.initRegisters(regName,regCount);
};
$hxClasses["away3d.materials.compilation.RegisterPool"] = away3d.materials.compilation.RegisterPool;
away3d.materials.compilation.RegisterPool.__name__ = ["away3d","materials","compilation","RegisterPool"];
away3d.materials.compilation.RegisterPool._initPool = function(regName,regCount) {
	var hash = regName + regCount;
	if(away3d.materials.compilation.RegisterPool._regPool.get(hash) != null) return hash;
	var vectorRegisters = new Array();
	away3d.materials.compilation.RegisterPool._regPool.set(hash,vectorRegisters);
	var registerComponents = new Array();
	away3d.materials.compilation.RegisterPool._regCompsPool.set(hash,registerComponents);
	var i;
	var _g = 0;
	while(_g < regCount) {
		var i1 = _g++;
		vectorRegisters[i1] = new away3d.materials.compilation.ShaderRegisterElement(regName,i1);
		var j;
		var _g1 = 0;
		while(_g1 < 4) {
			var j1 = _g1++;
			if(registerComponents[j1] == null) registerComponents[j1] = new Array();
			registerComponents[j1][i1] = new away3d.materials.compilation.ShaderRegisterElement(regName,i1,j1);
		}
	}
	return hash;
};
away3d.materials.compilation.RegisterPool.prototype = {
	requestFreeVectorReg: function() {
		var i;
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(!this.isRegisterUsed(i1)) {
				if(this._persistent) this._usedVectorCount[i1]++;
				return this._vectorRegisters[i1];
			}
		}
		throw new openfl.errors.Error("Register overflow!");
		return null;
	}
	,requestFreeRegComponent: function() {
		var i;
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			if((function($this) {
				var $r;
				var a = $this._usedVectorCount[i1];
				var aNeg = a < 0;
				var bNeg = 0 < 0;
				$r = aNeg != bNeg?aNeg:a > 0;
				return $r;
			}(this))) continue;
			var j;
			var _g2 = 0;
			while(_g2 < 4) {
				var j1 = _g2++;
				if((function($this) {
					var $r;
					var $int = $this._usedSingleCount[j1][i1];
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) == 0) {
					if(this._persistent) this._usedSingleCount[j1][i1]++;
					return this._registerComponents[j1][i1];
				}
			}
		}
		throw new openfl.errors.Error("Register overflow!");
		return null;
	}
	,addUsage: function(register,usageCount) {
		if(register._component > -1) {
			var a = this._usedSingleCount[register._component][register.get_index()];
			this._usedSingleCount[register._component][register.get_index()] = a + usageCount;
		} else {
			var a1 = this._usedVectorCount[register.get_index()];
			this._usedVectorCount[register.get_index()] = a1 + usageCount;
		}
	}
	,removeUsage: function(register) {
		if(register._component > -1) {
			if((function($this) {
				var $r;
				var a = --$this._usedSingleCount[register._component][register.get_index()];
				$r = (function($this) {
					var $r;
					var aNeg = 0 < 0;
					var bNeg = a < 0;
					$r = aNeg != bNeg?aNeg:0 > a;
					return $r;
				}($this));
				return $r;
			}(this))) throw new openfl.errors.Error("More usages removed than exist!");
		} else if((function($this) {
			var $r;
			var a1 = --$this._usedVectorCount[register.get_index()];
			$r = (function($this) {
				var $r;
				var aNeg1 = 0 < 0;
				var bNeg1 = a1 < 0;
				$r = aNeg1 != bNeg1?aNeg1:0 > a1;
				return $r;
			}($this));
			return $r;
		}(this))) throw new openfl.errors.Error("More usages removed than exist!");
	}
	,dispose: function() {
		this._vectorRegisters = null;
		this._registerComponents = null;
		this._usedSingleCount = null;
		this._usedVectorCount = null;
	}
	,hasRegisteredRegs: function() {
		var i;
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(this.isRegisterUsed(i1)) return true;
		}
		return false;
	}
	,initRegisters: function(regName,regCount) {
		var hash = away3d.materials.compilation.RegisterPool._initPool(regName,regCount);
		this._vectorRegisters = away3d.materials.compilation.RegisterPool._regPool.get(hash);
		this._registerComponents = away3d.materials.compilation.RegisterPool._regCompsPool.get(hash);
		this._usedVectorCount = new Array();
		this._usedSingleCount = new Array();
		this._usedSingleCount[0] = new Array();
		this._usedSingleCount[1] = new Array();
		this._usedSingleCount[2] = new Array();
		this._usedSingleCount[3] = new Array();
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedVectorCount),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[0]),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[1]),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[2]),regCount,0);
		away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(this._usedSingleCount[3]),regCount,0);
	}
	,isRegisterUsed: function(index) {
		if((function($this) {
			var $r;
			var a = $this._usedVectorCount[index];
			var aNeg = a < 0;
			var bNeg = 0 < 0;
			$r = aNeg != bNeg?aNeg:a > 0;
			return $r;
		}(this))) return true;
		var i;
		var _g = 0;
		while(_g < 4) {
			var i1 = _g++;
			if((function($this) {
				var $r;
				var a1 = $this._usedSingleCount[i1][index];
				var aNeg1 = a1 < 0;
				var bNeg1 = 0 < 0;
				$r = aNeg1 != bNeg1?aNeg1:a1 > 0;
				return $r;
			}(this))) return true;
		}
		return false;
	}
	,__class__: away3d.materials.compilation.RegisterPool
};
away3d.materials.compilation.ShaderCompiler = function(profile) {
	this._preserveAlpha = true;
	this._commonsDataIndex = -1;
	this._uvBufferIndex = -1;
	this._uvTransformIndex = -1;
	this._secondaryUVBufferIndex = -1;
	this._normalBufferIndex = -1;
	this._tangentBufferIndex = -1;
	this._lightFragmentConstantIndex = -1;
	this._sceneMatrixIndex = -1;
	this._sceneNormalMatrixIndex = -1;
	this._cameraPositionIndex = -1;
	this._probeWeightsIndex = -1;
	this._sharedRegisters = new away3d.materials.compilation.ShaderRegisterData();
	this._dependencyCounter = new away3d.materials.compilation.MethodDependencyCounter();
	this._profile = profile;
	this.initRegisterCache(profile);
};
$hxClasses["away3d.materials.compilation.ShaderCompiler"] = away3d.materials.compilation.ShaderCompiler;
away3d.materials.compilation.ShaderCompiler.__name__ = ["away3d","materials","compilation","ShaderCompiler"];
away3d.materials.compilation.ShaderCompiler.prototype = {
	get_enableLightFallOff: function() {
		return this._enableLightFallOff;
	}
	,set_enableLightFallOff: function(value) {
		this._enableLightFallOff = value;
		return value;
	}
	,get_needUVAnimation: function() {
		return this._needUVAnimation;
	}
	,get_UVTarget: function() {
		return this._UVTarget;
	}
	,get_UVSource: function() {
		return this._UVSource;
	}
	,get_forceSeperateMVP: function() {
		return this._forceSeperateMVP;
	}
	,set_forceSeperateMVP: function(value) {
		this._forceSeperateMVP = value;
		return value;
	}
	,initRegisterCache: function(profile) {
		this._registerCache = new away3d.materials.compilation.ShaderRegisterCache(profile);
		this._registerCache.set_vertexAttributesOffset(1);
		this._registerCache.reset();
	}
	,get_animateUVs: function() {
		return this._animateUVs;
	}
	,set_animateUVs: function(value) {
		this._animateUVs = value;
		return value;
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		return value;
	}
	,get_preserveAlpha: function() {
		return this._preserveAlpha;
	}
	,set_preserveAlpha: function(value) {
		this._preserveAlpha = value;
		return value;
	}
	,setTextureSampling: function(smooth,repeat,mipmap,anisotropy) {
		this._smooth = smooth;
		this._repeat = repeat;
		this._mipmap = mipmap;
		this._anisotropy = anisotropy;
	}
	,setConstantDataBuffers: function(vertexConstantData,fragmentConstantData) {
		this._vertexConstantData = vertexConstantData;
		this._fragmentConstantData = fragmentConstantData;
	}
	,get_methodSetup: function() {
		return this._methodSetup;
	}
	,set_methodSetup: function(value) {
		this._methodSetup = value;
		return value;
	}
	,compile: function() {
		this.initRegisterIndices();
		this.initLightData();
		this._animatableAttributes = ["va0"];
		this._animationTargetRegisters = ["vt0"];
		this._vertexCode = "";
		this._fragmentCode = "";
		this._sharedRegisters.localPosition = this._registerCache.getFreeVertexVectorTemp();
		this._registerCache.addVertexTempUsages(this._sharedRegisters.localPosition,1);
		this.createCommons();
		this.calculateDependencies();
		this.updateMethodRegisters();
		var i = 0;
		while(i < 4) {
			this._registerCache.getFreeVertexConstant();
			++i;
		}
		this.createNormalRegisters();
		if(this._dependencyCounter.get_globalPosDependencies() > 0 || this._forceSeperateMVP) this.compileGlobalPositionCode();
		this.compileProjectionCode();
		this.compileMethodsCode();
		this.compileFragmentOutput();
		this._fragmentPostLightCode = this.get_fragmentCode();
	}
	,createNormalRegisters: function() {
	}
	,compileMethodsCode: function() {
		if(this._dependencyCounter.get_uvDependencies() > 0) this.compileUVCode();
		if(this._dependencyCounter.get_secondaryUVDependencies() > 0) this.compileSecondaryUVCode();
		if(this._dependencyCounter.get_normalDependencies() > 0) this.compileNormalCode();
		if(this._dependencyCounter.get_viewDirDependencies() > 0) this.compileViewDirCode();
		this.compileLightingCode();
		this._fragmentLightCode = this._fragmentCode;
		this._fragmentCode = "";
		this.compileMethods();
	}
	,compileLightingCode: function() {
	}
	,compileViewDirCode: function() {
	}
	,compileNormalCode: function() {
	}
	,compileUVCode: function() {
		var uvAttributeReg = this._registerCache.getFreeVertexAttribute();
		this._uvBufferIndex = uvAttributeReg.get_index();
		var varying = this._registerCache.getFreeVarying();
		this._sharedRegisters.uvVarying = varying;
		if(this.get_animateUVs()) {
			var uvTransform1 = this._registerCache.getFreeVertexConstant();
			var uvTransform2 = this._registerCache.getFreeVertexConstant();
			this._uvTransformIndex = uvTransform1.get_index() * 4;
			this._vertexCode += "dp4 " + Std.string(varying) + ".x, " + Std.string(uvAttributeReg) + ", " + Std.string(uvTransform1) + "\n" + "dp4 " + Std.string(varying) + ".y, " + Std.string(uvAttributeReg) + ", " + Std.string(uvTransform2) + "\n" + "mov " + Std.string(varying) + ".zw, " + Std.string(uvAttributeReg) + ".zw \n";
		} else {
			this._uvTransformIndex = -1;
			this._needUVAnimation = true;
			this._UVTarget = varying.toString();
			this._UVSource = uvAttributeReg.toString();
		}
	}
	,compileSecondaryUVCode: function() {
		var uvAttributeReg = this._registerCache.getFreeVertexAttribute();
		this._secondaryUVBufferIndex = uvAttributeReg.get_index();
		this._sharedRegisters.secondaryUVVarying = this._registerCache.getFreeVarying();
		this._vertexCode += "mov " + Std.string(this._sharedRegisters.secondaryUVVarying) + ", " + Std.string(uvAttributeReg) + "\n";
	}
	,compileGlobalPositionCode: function() {
		this._sharedRegisters.globalPositionVertex = this._registerCache.getFreeVertexVectorTemp();
		this._registerCache.addVertexTempUsages(this._sharedRegisters.globalPositionVertex,this._dependencyCounter.get_globalPosDependencies());
		var positionMatrixReg = this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._sceneMatrixIndex = positionMatrixReg.get_index() * 4;
		this._vertexCode += "m44 " + Std.string(this._sharedRegisters.globalPositionVertex) + ", " + Std.string(this._sharedRegisters.localPosition) + ", " + Std.string(positionMatrixReg) + "\n";
		if(this._dependencyCounter.get_usesGlobalPosFragment()) {
			this._sharedRegisters.globalPositionVarying = this._registerCache.getFreeVarying();
			this._vertexCode += "mov " + Std.string(this._sharedRegisters.globalPositionVarying) + ", " + Std.string(this._sharedRegisters.globalPositionVertex) + "\n";
		}
	}
	,compileProjectionCode: function() {
		var pos;
		if(this._dependencyCounter.get_globalPosDependencies() > 0 || this._forceSeperateMVP) pos = this._sharedRegisters.globalPositionVertex.toString(); else pos = this._animationTargetRegisters[0];
		var code;
		if(this._dependencyCounter.get_projectionDependencies() > 0) {
			this._sharedRegisters.projectionFragment = this._registerCache.getFreeVarying();
			code = "m44 vt5, " + pos + ", vc0\t\t\n" + "mov " + Std.string(this._sharedRegisters.projectionFragment) + ", vt5\n" + "mov op, vt5\n";
		} else code = "m44 op, " + pos + ", vc0\t\t\n";
		this._vertexCode += code;
	}
	,compileFragmentOutput: function() {
		this._fragmentCode += "mov " + Std.string(this._registerCache.get_fragmentOutputRegister()) + ", " + Std.string(this._sharedRegisters.shadedTarget) + "\n";
		this._registerCache.removeFragmentTempUsage(this._sharedRegisters.shadedTarget);
	}
	,initRegisterIndices: function() {
		this._commonsDataIndex = -1;
		this._cameraPositionIndex = -1;
		this._uvBufferIndex = -1;
		this._uvTransformIndex = -1;
		this._secondaryUVBufferIndex = -1;
		this._normalBufferIndex = -1;
		this._tangentBufferIndex = -1;
		this._lightFragmentConstantIndex = -1;
		this._sceneMatrixIndex = -1;
		this._sceneNormalMatrixIndex = -1;
		this._probeWeightsIndex = -1;
	}
	,initLightData: function() {
		this._numLights = this._numPointLights + this._numDirectionalLights;
		this._numProbeRegisters = Math.ceil(this._numLightProbes / 4);
		if(this._methodSetup._specularMethod != null) this._combinedLightSources = this._specularLightSources | this._diffuseLightSources; else this._combinedLightSources = this._diffuseLightSources;
		this._usingSpecularMethod = js.Boot.__cast(this._methodSetup._specularMethod != null && (this.usesLightsForSpecular() || this.usesProbesForSpecular()) , Bool);
	}
	,createCommons: function() {
		this._sharedRegisters.commons = this._registerCache.getFreeFragmentConstant();
		this._commonsDataIndex = this._sharedRegisters.commons.get_index() * 4;
	}
	,calculateDependencies: function() {
		this._dependencyCounter.reset();
		var methods = this._methodSetup._methods;
		var len;
		this.setupAndCountMethodDependencies(this._methodSetup._diffuseMethod,this._methodSetup._diffuseMethodVO);
		if(this._methodSetup._shadowMethod != null) this.setupAndCountMethodDependencies(this._methodSetup._shadowMethod,this._methodSetup._shadowMethodVO);
		this.setupAndCountMethodDependencies(this._methodSetup._ambientMethod,this._methodSetup._ambientMethodVO);
		if(this._usingSpecularMethod) this.setupAndCountMethodDependencies(this._methodSetup._specularMethod,this._methodSetup._specularMethodVO);
		if(this._methodSetup._colorTransformMethod != null) this.setupAndCountMethodDependencies(this._methodSetup._colorTransformMethod,this._methodSetup._colorTransformMethodVO);
		len = methods.length;
		var i = 0;
		while(i < len) {
			this.setupAndCountMethodDependencies(methods[i].method,methods[i].data);
			++i;
		}
		if(this.get_usesNormals()) this.setupAndCountMethodDependencies(this._methodSetup._normalMethod,this._methodSetup._normalMethodVO);
		this._dependencyCounter.setPositionedLights(this._numPointLights,this._combinedLightSources);
	}
	,setupAndCountMethodDependencies: function(method,methodVO) {
		this.setupMethod(method,methodVO);
		this._dependencyCounter.includeMethodVO(methodVO);
	}
	,setupMethod: function(method,methodVO) {
		method.reset();
		methodVO.reset();
		methodVO.vertexData = this._vertexConstantData;
		methodVO.fragmentData = this._fragmentConstantData;
		methodVO.useSmoothTextures = this._smooth;
		methodVO.repeatTextures = this._repeat;
		methodVO.useMipmapping = this._mipmap;
		methodVO.anisotropy = this._anisotropy;
		methodVO.useLightFallOff = this._enableLightFallOff && this._profile != "baselineConstrained";
		methodVO.numLights = this._numLights + this._numLightProbes;
		method.initVO(methodVO);
	}
	,get_commonsDataIndex: function() {
		return this._commonsDataIndex;
	}
	,updateMethodRegisters: function() {
		this._methodSetup._normalMethod.set_sharedRegisters(this._sharedRegisters);
		this._methodSetup._diffuseMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.set_sharedRegisters(this._sharedRegisters);
		this._methodSetup._ambientMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._specularMethod != null) this._methodSetup._specularMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.set_sharedRegisters(this._sharedRegisters);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		while(i < len) {
			methods[i].method.set_sharedRegisters(this._sharedRegisters);
			++i;
		}
	}
	,get_numUsedVertexConstants: function() {
		return this._registerCache.get_numUsedVertexConstants();
	}
	,get_numUsedFragmentConstants: function() {
		return this._registerCache.get_numUsedFragmentConstants();
	}
	,get_numUsedStreams: function() {
		return this._registerCache.get_numUsedStreams();
	}
	,get_numUsedTextures: function() {
		return this._registerCache.get_numUsedTextures();
	}
	,get_numUsedVaryings: function() {
		return this._registerCache.get_numUsedVaryings();
	}
	,usesLightsForSpecular: function() {
		return this._numLights > 0 && (this._specularLightSources & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,usesLightsForDiffuse: function() {
		return this._numLights > 0 && (this._diffuseLightSources & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,dispose: function() {
		this.cleanUpMethods();
		this._registerCache.dispose();
		this._registerCache = null;
		this._sharedRegisters = null;
	}
	,cleanUpMethods: function() {
		if(this._methodSetup._normalMethod != null) this._methodSetup._normalMethod.cleanCompilationData();
		if(this._methodSetup._diffuseMethod != null) this._methodSetup._diffuseMethod.cleanCompilationData();
		if(this._methodSetup._ambientMethod != null) this._methodSetup._ambientMethod.cleanCompilationData();
		if(this._methodSetup._specularMethod != null) this._methodSetup._specularMethod.cleanCompilationData();
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.cleanCompilationData();
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.cleanCompilationData();
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		while(i < len) {
			methods[i].method.cleanCompilationData();
			++i;
		}
	}
	,get_specularLightSources: function() {
		return this._specularLightSources;
	}
	,set_specularLightSources: function(value) {
		this._specularLightSources = value;
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._diffuseLightSources;
	}
	,set_diffuseLightSources: function(value) {
		this._diffuseLightSources = value;
		return value;
	}
	,usesProbesForSpecular: function() {
		return this._numLightProbes > 0 && (this._specularLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesProbesForDiffuse: function() {
		return this._numLightProbes > 0 && (this._diffuseLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesProbes: function() {
		return this._numLightProbes > 0 && ((this._diffuseLightSources | this._specularLightSources) & away3d.materials.LightSources.PROBES) != 0;
	}
	,get_uvBufferIndex: function() {
		return this._uvBufferIndex;
	}
	,get_uvTransformIndex: function() {
		return this._uvTransformIndex;
	}
	,get_secondaryUVBufferIndex: function() {
		return this._secondaryUVBufferIndex;
	}
	,get_normalBufferIndex: function() {
		return this._normalBufferIndex;
	}
	,get_tangentBufferIndex: function() {
		return this._tangentBufferIndex;
	}
	,get_lightFragmentConstantIndex: function() {
		return this._lightFragmentConstantIndex;
	}
	,get_cameraPositionIndex: function() {
		return this._cameraPositionIndex;
	}
	,get_sceneMatrixIndex: function() {
		return this._sceneMatrixIndex;
	}
	,get_sceneNormalMatrixIndex: function() {
		return this._sceneNormalMatrixIndex;
	}
	,get_probeWeightsIndex: function() {
		return this._probeWeightsIndex;
	}
	,get_vertexCode: function() {
		return this._vertexCode;
	}
	,get_fragmentCode: function() {
		return this._fragmentCode;
	}
	,get_fragmentLightCode: function() {
		return this._fragmentLightCode;
	}
	,get_fragmentPostLightCode: function() {
		return this._fragmentPostLightCode;
	}
	,get_shadedTarget: function() {
		return this._sharedRegisters.shadedTarget.toString();
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,set_numPointLights: function(numPointLights) {
		this._numPointLights = numPointLights;
		return numPointLights;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,set_numDirectionalLights: function(value) {
		this._numDirectionalLights = value;
		return value;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,set_numLightProbes: function(value) {
		this._numLightProbes = value;
		return value;
	}
	,get_usingSpecularMethod: function() {
		return this._usingSpecularMethod;
	}
	,get_animatableAttributes: function() {
		return this._animatableAttributes;
	}
	,get_animationTargetRegisters: function() {
		return this._animationTargetRegisters;
	}
	,get_usesNormals: function() {
		return this._dependencyCounter.get_normalDependencies() > 0 && this._methodSetup._normalMethod.get_hasOutput();
	}
	,usesLights: function() {
		return this._numLights > 0 && (this._combinedLightSources & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,compileMethods: function() {
		var methods = this._methodSetup._methods;
		var numMethods = methods.length;
		var method;
		var data;
		var alphaReg = null;
		if(this._preserveAlpha) {
			alphaReg = this._registerCache.getFreeFragmentSingleTemp();
			this._registerCache.addFragmentTempUsages(alphaReg,1);
			this._fragmentCode += "mov " + Std.string(alphaReg) + ", " + Std.string(this._sharedRegisters.shadedTarget) + ".w\n";
		}
		var i = 0;
		while(i < numMethods) {
			method = methods[i].method;
			data = methods[i].data;
			this._vertexCode += method.getVertexCode(data,this._registerCache);
			if(data.needsGlobalVertexPos || data.needsGlobalFragmentPos) this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
			this._fragmentCode += method.getFragmentCode(data,this._registerCache,this._sharedRegisters.shadedTarget);
			if(data.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
			if(data.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
			++i;
		}
		if(this._preserveAlpha) {
			this._fragmentCode += "mov " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(alphaReg) + "\n";
			this._registerCache.removeFragmentTempUsage(alphaReg);
		}
		if(this._methodSetup._colorTransformMethod != null) {
			this._vertexCode += this._methodSetup._colorTransformMethod.getVertexCode(this._methodSetup._colorTransformMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._colorTransformMethod.getFragmentCode(this._methodSetup._colorTransformMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		}
	}
	,get_lightProbeDiffuseIndices: function() {
		return this._lightProbeDiffuseIndices;
	}
	,get_lightProbeSpecularIndices: function() {
		return this._lightProbeSpecularIndices;
	}
	,__class__: away3d.materials.compilation.ShaderCompiler
	,__properties__: {get_lightProbeSpecularIndices:"get_lightProbeSpecularIndices",get_lightProbeDiffuseIndices:"get_lightProbeDiffuseIndices",get_usesNormals:"get_usesNormals",get_animationTargetRegisters:"get_animationTargetRegisters",get_animatableAttributes:"get_animatableAttributes",get_usingSpecularMethod:"get_usingSpecularMethod",set_numLightProbes:"set_numLightProbes",get_numLightProbes:"get_numLightProbes",set_numDirectionalLights:"set_numDirectionalLights",get_numDirectionalLights:"get_numDirectionalLights",set_numPointLights:"set_numPointLights",get_numPointLights:"get_numPointLights",get_shadedTarget:"get_shadedTarget",get_fragmentPostLightCode:"get_fragmentPostLightCode",get_fragmentLightCode:"get_fragmentLightCode",get_fragmentCode:"get_fragmentCode",get_vertexCode:"get_vertexCode",get_probeWeightsIndex:"get_probeWeightsIndex",get_sceneNormalMatrixIndex:"get_sceneNormalMatrixIndex",get_sceneMatrixIndex:"get_sceneMatrixIndex",get_cameraPositionIndex:"get_cameraPositionIndex",get_lightFragmentConstantIndex:"get_lightFragmentConstantIndex",get_tangentBufferIndex:"get_tangentBufferIndex",get_normalBufferIndex:"get_normalBufferIndex",get_secondaryUVBufferIndex:"get_secondaryUVBufferIndex",get_uvTransformIndex:"get_uvTransformIndex",get_uvBufferIndex:"get_uvBufferIndex",set_diffuseLightSources:"set_diffuseLightSources",get_diffuseLightSources:"get_diffuseLightSources",set_specularLightSources:"set_specularLightSources",get_specularLightSources:"get_specularLightSources",get_numUsedVaryings:"get_numUsedVaryings",get_numUsedTextures:"get_numUsedTextures",get_numUsedStreams:"get_numUsedStreams",get_numUsedFragmentConstants:"get_numUsedFragmentConstants",get_numUsedVertexConstants:"get_numUsedVertexConstants",get_commonsDataIndex:"get_commonsDataIndex",set_methodSetup:"set_methodSetup",get_methodSetup:"get_methodSetup",set_preserveAlpha:"set_preserveAlpha",get_preserveAlpha:"get_preserveAlpha",set_alphaPremultiplied:"set_alphaPremultiplied",get_alphaPremultiplied:"get_alphaPremultiplied",set_animateUVs:"set_animateUVs",get_animateUVs:"get_animateUVs",set_forceSeperateMVP:"set_forceSeperateMVP",get_forceSeperateMVP:"get_forceSeperateMVP",get_UVSource:"get_UVSource",get_UVTarget:"get_UVTarget",get_needUVAnimation:"get_needUVAnimation",set_enableLightFallOff:"set_enableLightFallOff",get_enableLightFallOff:"get_enableLightFallOff"}
};
away3d.materials.compilation.ShaderRegisterData = function() {
};
$hxClasses["away3d.materials.compilation.ShaderRegisterData"] = away3d.materials.compilation.ShaderRegisterData;
away3d.materials.compilation.ShaderRegisterData.__name__ = ["away3d","materials","compilation","ShaderRegisterData"];
away3d.materials.compilation.ShaderRegisterData.prototype = {
	__class__: away3d.materials.compilation.ShaderRegisterData
};
away3d.materials.compilation.ShaderRegisterElement = function(regName,index,component) {
	if(component == null) component = -1;
	this._component = component;
	this._regName = regName;
	this._index = index;
	this._toStr = this._regName;
	if(this._index >= 0) this._toStr += this._index;
	if(component > -1) this._toStr += "." + away3d.materials.compilation.ShaderRegisterElement.COMPONENTS[component];
};
$hxClasses["away3d.materials.compilation.ShaderRegisterElement"] = away3d.materials.compilation.ShaderRegisterElement;
away3d.materials.compilation.ShaderRegisterElement.__name__ = ["away3d","materials","compilation","ShaderRegisterElement"];
away3d.materials.compilation.ShaderRegisterElement.prototype = {
	toString: function() {
		return this._toStr;
	}
	,get_regName: function() {
		return this._regName;
	}
	,get_index: function() {
		return this._index;
	}
	,__class__: away3d.materials.compilation.ShaderRegisterElement
	,__properties__: {get_index:"get_index",get_regName:"get_regName"}
};
away3d.materials.compilation.SuperShaderCompiler = function(profile) {
	away3d.materials.compilation.ShaderCompiler.call(this,profile);
};
$hxClasses["away3d.materials.compilation.SuperShaderCompiler"] = away3d.materials.compilation.SuperShaderCompiler;
away3d.materials.compilation.SuperShaderCompiler.__name__ = ["away3d","materials","compilation","SuperShaderCompiler"];
away3d.materials.compilation.SuperShaderCompiler.__super__ = away3d.materials.compilation.ShaderCompiler;
away3d.materials.compilation.SuperShaderCompiler.prototype = $extend(away3d.materials.compilation.ShaderCompiler.prototype,{
	initLightData: function() {
		away3d.materials.compilation.ShaderCompiler.prototype.initLightData.call(this);
		this._pointLightRegisters = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),this._numPointLights * 3);
		this._dirLightRegisters = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),this._numDirectionalLights * 3);
	}
	,calculateDependencies: function() {
		away3d.materials.compilation.ShaderCompiler.prototype.calculateDependencies.call(this);
		this._dependencyCounter.addWorldSpaceDependencies(true);
	}
	,compileNormalCode: function() {
		var normalMatrix = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),3);
		this._sharedRegisters.normalFragment = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.normalFragment,this._dependencyCounter.get_normalDependencies());
		if(this._methodSetup._normalMethod.get_hasOutput() && !this._methodSetup._normalMethod.get_tangentSpace()) {
			this._vertexCode += this._methodSetup._normalMethod.getVertexCode(this._methodSetup._normalMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._normalMethod.getFragmentCode(this._methodSetup._normalMethodVO,this._registerCache,this._sharedRegisters.normalFragment);
			return;
		}
		this._sharedRegisters.normalVarying = this._registerCache.getFreeVarying();
		normalMatrix[0] = this._registerCache.getFreeVertexConstant();
		normalMatrix[1] = this._registerCache.getFreeVertexConstant();
		normalMatrix[2] = this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._sceneNormalMatrixIndex = normalMatrix[0].get_index() * 4;
		if(this._methodSetup._normalMethod.get_hasOutput()) {
			this.compileTangentVertexCode(normalMatrix);
			this.compileTangentNormalMapFragmentCode();
		} else {
			this._vertexCode += "m33 " + Std.string(this._sharedRegisters.normalVarying) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(normalMatrix[0]) + "\n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".w, " + Std.string(this._sharedRegisters.animatedNormal) + ".w\t\n";
			this._fragmentCode += "nrm " + Std.string(this._sharedRegisters.normalFragment) + ".xyz, " + Std.string(this._sharedRegisters.normalVarying) + "\n" + "mov " + Std.string(this._sharedRegisters.normalFragment) + ".w, " + Std.string(this._sharedRegisters.normalVarying) + ".w\t\t\n";
			if(this._dependencyCounter.get_tangentDependencies() > 0) {
				this._sharedRegisters.tangentInput = this._registerCache.getFreeVertexAttribute();
				this._tangentBufferIndex = this._sharedRegisters.tangentInput.get_index();
				this._sharedRegisters.tangentVarying = this._registerCache.getFreeVarying();
				this._vertexCode += "mov " + Std.string(this._sharedRegisters.tangentVarying) + ", " + Std.string(this._sharedRegisters.tangentInput) + "\n";
			}
		}
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.animatedNormal);
	}
	,createNormalRegisters: function() {
		if(this._dependencyCounter.get_normalDependencies() > 0) {
			this._sharedRegisters.normalInput = this._registerCache.getFreeVertexAttribute();
			this._normalBufferIndex = this._sharedRegisters.normalInput.get_index();
			this._sharedRegisters.animatedNormal = this._registerCache.getFreeVertexVectorTemp();
			this._registerCache.addVertexTempUsages(this._sharedRegisters.animatedNormal,1);
			this._animatableAttributes.push(this._sharedRegisters.normalInput.toString());
			this._animationTargetRegisters.push(this._sharedRegisters.animatedNormal.toString());
		}
		if(this._methodSetup._normalMethod.get_hasOutput()) {
			this._sharedRegisters.tangentInput = this._registerCache.getFreeVertexAttribute();
			this._tangentBufferIndex = this._sharedRegisters.tangentInput.get_index();
			this._sharedRegisters.animatedTangent = this._registerCache.getFreeVertexVectorTemp();
			this._registerCache.addVertexTempUsages(this._sharedRegisters.animatedTangent,1);
			this._animatableAttributes.push(this._sharedRegisters.tangentInput.toString());
			this._animationTargetRegisters.push(this._sharedRegisters.animatedTangent.toString());
		}
	}
	,compileTangentVertexCode: function(matrix) {
		this._sharedRegisters.tangentVarying = this._registerCache.getFreeVarying();
		this._sharedRegisters.bitangentVarying = this._registerCache.getFreeVarying();
		this._vertexCode += "m33 " + Std.string(this._sharedRegisters.animatedNormal) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(matrix[0]) + "\n" + "nrm " + Std.string(this._sharedRegisters.animatedNormal) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + "\n";
		this._vertexCode += "m33 " + Std.string(this._sharedRegisters.animatedTangent) + ".xyz, " + Std.string(this._sharedRegisters.animatedTangent) + ", " + Std.string(matrix[0]) + "\n" + "nrm " + Std.string(this._sharedRegisters.animatedTangent) + ".xyz, " + Std.string(this._sharedRegisters.animatedTangent) + "\n";
		var bitanTemp = this._registerCache.getFreeVertexVectorTemp();
		this._vertexCode += "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".x  \n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".x  \n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".z  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".z  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "crs " + Std.string(bitanTemp) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(this._sharedRegisters.animatedTangent) + "\n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".y, " + Std.string(bitanTemp) + ".x    \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".y, " + Std.string(bitanTemp) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".y, " + Std.string(bitanTemp) + ".z    \n";
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.animatedTangent);
	}
	,compileTangentNormalMapFragmentCode: function() {
		var t;
		var b;
		var n;
		t = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(t,1);
		b = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(b,1);
		n = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(n,1);
		this._fragmentCode += "nrm " + Std.string(t) + ".xyz, " + Std.string(this._sharedRegisters.tangentVarying) + "\n" + "mov " + Std.string(t) + ".w, " + Std.string(this._sharedRegisters.tangentVarying) + ".w\t\n" + "nrm " + Std.string(b) + ".xyz, " + Std.string(this._sharedRegisters.bitangentVarying) + "\n" + "nrm " + Std.string(n) + ".xyz, " + Std.string(this._sharedRegisters.normalVarying) + "\n";
		var temp = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(temp,1);
		this._fragmentCode += this._methodSetup._normalMethod.getFragmentCode(this._methodSetup._normalMethodVO,this._registerCache,temp) + "m33 " + Std.string(this._sharedRegisters.normalFragment) + ".xyz, " + Std.string(temp) + ", " + Std.string(t) + "\t\n" + "mov " + Std.string(this._sharedRegisters.normalFragment) + ".w,   " + Std.string(this._sharedRegisters.normalVarying) + ".w\t\t\t\n";
		this._registerCache.removeFragmentTempUsage(temp);
		if(this._methodSetup._normalMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		if(this._methodSetup._normalMethodVO.needsGlobalVertexPos || this._methodSetup._normalMethodVO.needsGlobalFragmentPos) this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
		this._registerCache.removeFragmentTempUsage(b);
		this._registerCache.removeFragmentTempUsage(t);
		this._registerCache.removeFragmentTempUsage(n);
	}
	,compileViewDirCode: function() {
		var cameraPositionReg = this._registerCache.getFreeVertexConstant();
		this._sharedRegisters.viewDirVarying = this._registerCache.getFreeVarying();
		this._sharedRegisters.viewDirFragment = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.viewDirFragment,this._dependencyCounter.get_viewDirDependencies());
		this._cameraPositionIndex = cameraPositionReg.get_index() * 4;
		this._vertexCode += "sub " + Std.string(this._sharedRegisters.viewDirVarying) + ", " + Std.string(cameraPositionReg) + ", " + Std.string(this._sharedRegisters.globalPositionVertex) + "\n";
		this._fragmentCode += "nrm " + Std.string(this._sharedRegisters.viewDirFragment) + ".xyz, " + Std.string(this._sharedRegisters.viewDirVarying) + "\n" + "mov " + Std.string(this._sharedRegisters.viewDirFragment) + ".w,   " + Std.string(this._sharedRegisters.viewDirVarying) + ".w \t\t\n";
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
	}
	,compileLightingCode: function() {
		var shadowReg = null;
		this._sharedRegisters.shadedTarget = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.shadedTarget,1);
		this._vertexCode += this._methodSetup._diffuseMethod.getVertexCode(this._methodSetup._diffuseMethodVO,this._registerCache);
		this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentPreLightingCode(this._methodSetup._diffuseMethodVO,this._registerCache);
		if(this._usingSpecularMethod) {
			this._vertexCode += this._methodSetup._specularMethod.getVertexCode(this._methodSetup._specularMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._specularMethod.getFragmentPreLightingCode(this._methodSetup._specularMethodVO,this._registerCache);
		}
		if(this.usesLights()) {
			this.initLightRegisters();
			this.compileDirectionalLightCode();
			this.compilePointLightCode();
		}
		if(this.usesProbes()) this.compileLightProbeCode();
		this._vertexCode += this._methodSetup._ambientMethod.getVertexCode(this._methodSetup._ambientMethodVO,this._registerCache);
		this._fragmentCode += this._methodSetup._ambientMethod.getFragmentCode(this._methodSetup._ambientMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		if(this._methodSetup._ambientMethodVO.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
		if(this._methodSetup._ambientMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		if(this._methodSetup._shadowMethod != null) {
			this._vertexCode += this._methodSetup._shadowMethod.getVertexCode(this._methodSetup._shadowMethodVO,this._registerCache);
			if(this._dependencyCounter.get_normalDependencies() == 0) {
				shadowReg = this._registerCache.getFreeFragmentVectorTemp();
				this._registerCache.addFragmentTempUsages(shadowReg,1);
			} else shadowReg = this._sharedRegisters.normalFragment;
			this._methodSetup._diffuseMethod.set_shadowRegister(shadowReg);
			this._fragmentCode += this._methodSetup._shadowMethod.getFragmentCode(this._methodSetup._shadowMethodVO,this._registerCache,shadowReg);
		}
		this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentPostLightingCode(this._methodSetup._diffuseMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		if(this._alphaPremultiplied) this._fragmentCode += "add " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.commons) + ".z\n" + "div " + Std.string(this._sharedRegisters.shadedTarget) + ".xyz, " + Std.string(this._sharedRegisters.shadedTarget) + ", " + Std.string(this._sharedRegisters.shadedTarget) + ".w\n" + "sub " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.commons) + ".z\n" + "sat " + Std.string(this._sharedRegisters.shadedTarget) + ".xyz, " + Std.string(this._sharedRegisters.shadedTarget) + "\n";
		if(this._methodSetup._diffuseMethodVO.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
		if(this._methodSetup._diffuseMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		if(this._usingSpecularMethod) {
			this._methodSetup._specularMethod.set_shadowRegister(shadowReg);
			this._fragmentCode += this._methodSetup._specularMethod.getFragmentPostLightingCode(this._methodSetup._specularMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
			if(this._methodSetup._specularMethodVO.needsNormals) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
			if(this._methodSetup._specularMethodVO.needsView) this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		}
	}
	,initLightRegisters: function() {
		var i = 0;
		var len;
		len = this._dirLightRegisters.length;
		i = 0;
		while(i < len) {
			this._dirLightRegisters[i] = this._registerCache.getFreeFragmentConstant();
			if(this._lightFragmentConstantIndex == -1) this._lightFragmentConstantIndex = this._dirLightRegisters[i].get_index() * 4;
			++i;
		}
		len = this._pointLightRegisters.length;
		i = 0;
		while(i < len) {
			this._pointLightRegisters[i] = this._registerCache.getFreeFragmentConstant();
			if(this._lightFragmentConstantIndex == -1) this._lightFragmentConstantIndex = this._pointLightRegisters[i].get_index() * 4;
			++i;
		}
	}
	,compileDirectionalLightCode: function() {
		var diffuseColorReg;
		var specularColorReg;
		var lightDirReg;
		var regIndex = 0;
		var addSpec = this._usingSpecularMethod && this.usesLightsForSpecular();
		var addDiff = this.usesLightsForDiffuse();
		if(!(addSpec || addDiff)) return;
		var i = 0;
		while(i < this._numDirectionalLights) {
			lightDirReg = this._dirLightRegisters[regIndex++];
			diffuseColorReg = this._dirLightRegisters[regIndex++];
			specularColorReg = this._dirLightRegisters[regIndex++];
			if(addDiff) this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerLight(this._methodSetup._diffuseMethodVO,lightDirReg,diffuseColorReg,this._registerCache);
			if(addSpec) this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerLight(this._methodSetup._specularMethodVO,lightDirReg,specularColorReg,this._registerCache);
			++i;
		}
	}
	,compilePointLightCode: function() {
		var diffuseColorReg;
		var specularColorReg;
		var lightPosReg;
		var lightDirReg;
		var regIndex = 0;
		var addSpec = this._usingSpecularMethod && this.usesLightsForSpecular();
		var addDiff = this.usesLightsForDiffuse();
		if(!(addSpec || addDiff)) return;
		var i = 0;
		while(i < this._numPointLights) {
			lightPosReg = this._pointLightRegisters[regIndex++];
			diffuseColorReg = this._pointLightRegisters[regIndex++];
			specularColorReg = this._pointLightRegisters[regIndex++];
			lightDirReg = this._registerCache.getFreeFragmentVectorTemp();
			this._registerCache.addFragmentTempUsages(lightDirReg,1);
			this._fragmentCode += "sub " + Std.string(lightDirReg) + ", " + Std.string(lightPosReg) + ", " + Std.string(this._sharedRegisters.globalPositionVarying) + "\n" + "dp3 " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ", " + Std.string(lightDirReg) + "\n" + "sub " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w, " + Std.string(diffuseColorReg) + ".w\n" + "mul " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w, " + Std.string(specularColorReg) + ".w\n" + "sat " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w\n" + "sub " + Std.string(lightDirReg) + ".w, " + Std.string(lightPosReg) + ".w, " + Std.string(lightDirReg) + ".w\n" + "nrm " + Std.string(lightDirReg) + ".xyz, " + Std.string(lightDirReg) + "\n";
			if(this._lightFragmentConstantIndex == -1) this._lightFragmentConstantIndex = lightPosReg.get_index() * 4;
			if(addDiff) this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerLight(this._methodSetup._diffuseMethodVO,lightDirReg,diffuseColorReg,this._registerCache);
			if(addSpec) this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerLight(this._methodSetup._specularMethodVO,lightDirReg,specularColorReg,this._registerCache);
			this._registerCache.removeFragmentTempUsage(lightDirReg);
			++i;
		}
	}
	,compileLightProbeCode: function() {
		var weightReg;
		var weightComponents = [".x",".y",".z",".w"];
		var weightRegisters = new Array();
		var i = 0;
		var texReg;
		var addSpec = this._usingSpecularMethod && this.usesProbesForSpecular();
		var addDiff = this.usesProbesForDiffuse();
		if(!(addSpec || addDiff)) return;
		if(addDiff) this._lightProbeDiffuseIndices = new Array();
		if(addSpec) this._lightProbeSpecularIndices = new Array();
		i = 0;
		while(i < this._numProbeRegisters) {
			weightRegisters[i] = this._registerCache.getFreeFragmentConstant();
			if(i == 0) this._probeWeightsIndex = weightRegisters[i].get_index() * 4;
			++i;
		}
		i = 0;
		while(i < this._numLightProbes) {
			weightReg = weightRegisters[Math.floor(i / 4)].toString() + weightComponents[i % 4];
			if(addDiff) {
				texReg = this._registerCache.getFreeTextureReg();
				this._lightProbeDiffuseIndices[i] = texReg.get_index();
				this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerProbe(this._methodSetup._diffuseMethodVO,texReg,weightReg,this._registerCache);
			}
			if(addSpec) {
				texReg = this._registerCache.getFreeTextureReg();
				this._lightProbeSpecularIndices[i] = texReg.get_index();
				this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerProbe(this._methodSetup._specularMethodVO,texReg,weightReg,this._registerCache);
			}
			++i;
		}
	}
	,__class__: away3d.materials.compilation.SuperShaderCompiler
});
away3d.materials.lightpickers = {};
away3d.materials.lightpickers.LightPickerBase = function() {
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.lightpickers.LightPickerBase"] = away3d.materials.lightpickers.LightPickerBase;
away3d.materials.lightpickers.LightPickerBase.__name__ = ["away3d","materials","lightpickers","LightPickerBase"];
away3d.materials.lightpickers.LightPickerBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.lightpickers.LightPickerBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.materials.lightpickers.LightPickerBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	dispose: function() {
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.LIGHT_PICKER;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,get_numCastingDirectionalLights: function() {
		return this._numCastingDirectionalLights;
	}
	,get_numCastingPointLights: function() {
		return this._numCastingPointLights;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,get_pointLights: function() {
		return this._pointLights;
	}
	,get_directionalLights: function() {
		return this._directionalLights;
	}
	,get_castingPointLights: function() {
		return this._castingPointLights;
	}
	,get_castingDirectionalLights: function() {
		return this._castingDirectionalLights;
	}
	,get_lightProbes: function() {
		return this._lightProbes;
	}
	,get_lightProbeWeights: function() {
		return this._lightProbeWeights;
	}
	,get_allPickedLights: function() {
		return this._allPickedLights;
	}
	,collectLights: function(renderable,entityCollector) {
		this.updateProbeWeights(renderable);
	}
	,updateProbeWeights: function(renderable) {
		var objectPos = renderable.get_sourceEntity().get_scenePosition();
		var lightPos;
		var rx = objectPos.x;
		var ry = objectPos.y;
		var rz = objectPos.z;
		var dx;
		var dy;
		var dz;
		var w;
		var total = 0;
		var i;
		i = 0;
		while(i < this._numLightProbes) {
			lightPos = this._lightProbes[i].get_scenePosition();
			dx = rx - lightPos.x;
			dy = ry - lightPos.y;
			dz = rz - lightPos.z;
			w = dx * dx + dy * dy + dz * dz;
			if(w > .00001) w = 1 / w; else w = 50000000;
			this._lightProbeWeights[i] = w;
			total += w;
			++i;
		}
		total = 1 / total;
		i = 0;
		while(i < this._numLightProbes) {
			this._lightProbeWeights[i] *= total;
			++i;
		}
	}
	,__class__: away3d.materials.lightpickers.LightPickerBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_allPickedLights:"get_allPickedLights",get_lightProbeWeights:"get_lightProbeWeights",get_lightProbes:"get_lightProbes",get_castingDirectionalLights:"get_castingDirectionalLights",get_castingPointLights:"get_castingPointLights",get_directionalLights:"get_directionalLights",get_pointLights:"get_pointLights",get_numLightProbes:"get_numLightProbes",get_numCastingPointLights:"get_numCastingPointLights",get_numCastingDirectionalLights:"get_numCastingDirectionalLights",get_numPointLights:"get_numPointLights",get_numDirectionalLights:"get_numDirectionalLights",get_assetType:"get_assetType"})
});
away3d.materials.methods = {};
away3d.materials.methods.ShadingMethodBase = function() {
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.methods.ShadingMethodBase"] = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.ShadingMethodBase.__name__ = ["away3d","materials","methods","ShadingMethodBase"];
away3d.materials.methods.ShadingMethodBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.materials.methods.ShadingMethodBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	initVO: function(vo) {
	}
	,initConstants: function(vo) {
	}
	,get_sharedRegisters: function() {
		return this._sharedRegisters;
	}
	,set_sharedRegisters: function(value) {
		this._sharedRegisters = value;
		return value;
	}
	,get_passes: function() {
		return this._passes;
	}
	,dispose: function() {
	}
	,createMethodVO: function() {
		return new away3d.materials.methods.MethodVO();
	}
	,reset: function() {
		this.cleanCompilationData();
	}
	,cleanCompilationData: function() {
	}
	,getVertexCode: function(vo,regCache) {
		return "";
	}
	,activate: function(vo,stage3DProxy) {
	}
	,setRenderState: function(vo,renderable,stage3DProxy,camera) {
	}
	,deactivate: function(vo,stage3DProxy) {
	}
	,getTex2DSampleCode: function(vo,targetReg,inputReg,texture,uvReg,forceWrap) {
		var wrap;
		if(vo.repeatTextures) wrap = "wrap"; else wrap = "clamp";
		if(forceWrap != null) wrap = forceWrap;
		var filter;
		var format = this.getFormatStringForTexture(texture);
		var enableMipMaps = vo.useMipmapping && texture.get_hasMipMaps();
		if(vo.useSmoothTextures) if(enableMipMaps) filter = "linear,miplinear"; else filter = "linear"; else if(enableMipMaps) filter = "nearest,mipnearest"; else filter = "nearest";
		if(uvReg == null) uvReg = this._sharedRegisters.uvVarying;
		return "tex " + Std.string(targetReg) + ", " + Std.string(uvReg) + ", " + Std.string(inputReg) + " <2d," + filter + "," + format + wrap + ">\n";
	}
	,getTexCubeSampleCode: function(vo,targetReg,inputReg,texture,uvReg) {
		var filter;
		var format = this.getFormatStringForTexture(texture);
		var enableMipMaps = vo.useMipmapping && texture.get_hasMipMaps();
		if(vo.useSmoothTextures) if(enableMipMaps) filter = "linear,miplinear"; else filter = "linear"; else if(enableMipMaps) filter = "nearest,mipnearest"; else filter = "nearest";
		return "tex " + Std.string(targetReg) + ", " + Std.string(uvReg) + ", " + Std.string(inputReg) + " <cube," + format + filter + ">\n";
	}
	,getFormatStringForTexture: function(texture) {
		var _sw0_ = texture.get_format();
		switch(_sw0_[1]) {
		case 1:
			return "dxt1,";
		case 2:
			return "dxt5,";
		default:
			return "";
		}
	}
	,invalidateShaderProgram: function() {
		this.dispatchEvent(new away3d.events.ShadingMethodEvent(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED));
	}
	,copyFrom: function(method) {
	}
	,getSmoothingFilter: function(smooth,anisotropy) {
		if(smooth) switch(anisotropy[1]) {
		case 1:
			return openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X;
		case 2:
			return openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X;
		case 3:
			return openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X;
		case 4:
			return openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X;
		case 0:
			return openfl.display3D.Context3DTextureFilter.LINEAR;
		} else return openfl.display3D.Context3DTextureFilter.NEAREST;
	}
	,__class__: away3d.materials.methods.ShadingMethodBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_passes:"get_passes",set_sharedRegisters:"set_sharedRegisters",get_sharedRegisters:"get_sharedRegisters"})
});
away3d.materials.methods.BasicAmbientMethod = function() {
	this._ambientColor = 16777215;
	this._ambientR = 0;
	this._ambientG = 0;
	this._ambientB = 0;
	this._ambient = 1;
	this._lightAmbientR = 0;
	this._lightAmbientG = 0;
	this._lightAmbientB = 0;
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicAmbientMethod"] = away3d.materials.methods.BasicAmbientMethod;
away3d.materials.methods.BasicAmbientMethod.__name__ = ["away3d","materials","methods","BasicAmbientMethod"];
away3d.materials.methods.BasicAmbientMethod.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.BasicAmbientMethod.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	initVO: function(vo) {
		vo.needsUV = this._useTexture;
	}
	,initConstants: function(vo) {
		var this1 = vo.fragmentData;
		var key = vo.fragmentConstantsIndex + 3;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = 1;
	}
	,get_ambient: function() {
		return this._ambient;
	}
	,set_ambient: function(value) {
		this._ambient = value;
		return value;
	}
	,get_ambientColor: function() {
		return this._ambientColor;
	}
	,set_ambientColor: function(value) {
		this._ambientColor = value;
		return value;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value , Bool);
		this._texture = value;
		return value;
	}
	,copyFrom: function(method) {
		var diff;
		diff = js.Boot.__cast(method , away3d.materials.methods.BasicAmbientMethod);
		this.set_ambient(diff.get_ambient());
		this.set_ambientColor(diff.get_ambientColor());
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.ShadingMethodBase.prototype.cleanCompilationData.call(this);
		this._ambientInputRegister = null;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		var code = "";
		if(this._useTexture) {
			this._ambientInputRegister = regCache.getFreeTextureReg();
			vo.texturesIndex = this._ambientInputRegister.get_index();
			code += this.getTex2DSampleCode(vo,targetReg,this._ambientInputRegister,this._texture) + "div " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".w\n";
		} else {
			this._ambientInputRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._ambientInputRegister.get_index() * 4;
			code += "mov " + Std.string(targetReg) + ", " + Std.string(this._ambientInputRegister) + "\n";
		}
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		if(this._useTexture) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
	}
	,updateAmbient: function() {
		this._ambientR = (this._ambientColor >> 16 & 255) / 255 * this._ambient * this._lightAmbientR;
		this._ambientG = (this._ambientColor >> 8 & 255) / 255 * this._ambient * this._lightAmbientG;
		this._ambientB = (this._ambientColor & 255) / 255 * this._ambient * this._lightAmbientB;
	}
	,setRenderState: function(vo,renderable,stage3DProxy,camera) {
		this.updateAmbient();
		if(!this._useTexture) {
			var index = vo.fragmentConstantsIndex;
			var data = vo.fragmentData;
			if(!data.fixed) {
				if(index >= data.length) data.length = index + 1;
				if(data.data.length < data.length) {
					var data1;
					var this1;
					this1 = new Array(data.data.length + 10);
					data1 = this1;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
					data.data = data1;
				}
			}
			data.data[index] = this._ambientR;
			var key = index + 1;
			if(!data.fixed) {
				if(key >= data.length) data.length = key + 1;
				if(data.data.length < data.length) {
					var data2;
					var this2;
					this2 = new Array(data.data.length + 10);
					data2 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
					data.data = data2;
				}
			}
			data.data[key] = this._ambientG;
			var key1 = index + 2;
			if(!data.fixed) {
				if(key1 >= data.length) data.length = key1 + 1;
				if(data.data.length < data.length) {
					var data3;
					var this3;
					this3 = new Array(data.data.length + 10);
					data3 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
					data.data = data3;
				}
			}
			data.data[key1] = this._ambientB;
		}
	}
	,__class__: away3d.materials.methods.BasicAmbientMethod
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{set_texture:"set_texture",get_texture:"get_texture",set_ambientColor:"set_ambientColor",get_ambientColor:"get_ambientColor",set_ambient:"set_ambient",get_ambient:"get_ambient"})
});
away3d.materials.methods.LightingMethodBase = function() {
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.LightingMethodBase"] = away3d.materials.methods.LightingMethodBase;
away3d.materials.methods.LightingMethodBase.__name__ = ["away3d","materials","methods","LightingMethodBase"];
away3d.materials.methods.LightingMethodBase.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.LightingMethodBase.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	getFragmentPreLightingCode: function(vo,regCache) {
		return "";
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		return "";
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		return "";
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		return "";
	}
	,__class__: away3d.materials.methods.LightingMethodBase
});
away3d.materials.methods.BasicDiffuseMethod = function() {
	this._diffuseColor = 16777215;
	this._diffuseR = 1;
	this._diffuseG = 1;
	this._diffuseB = 1;
	this._diffuseA = 1;
	this._alphaThreshold = 0;
	away3d.materials.methods.LightingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicDiffuseMethod"] = away3d.materials.methods.BasicDiffuseMethod;
away3d.materials.methods.BasicDiffuseMethod.__name__ = ["away3d","materials","methods","BasicDiffuseMethod"];
away3d.materials.methods.BasicDiffuseMethod.__super__ = away3d.materials.methods.LightingMethodBase;
away3d.materials.methods.BasicDiffuseMethod.prototype = $extend(away3d.materials.methods.LightingMethodBase.prototype,{
	get_useAmbientTexture: function() {
		return this._useAmbientTexture;
	}
	,set_useAmbientTexture: function(value) {
		if(this._useAmbientTexture == value) return value;
		this._useAmbientTexture = value;
		this.invalidateShaderProgram();
		return value;
	}
	,initVO: function(vo) {
		vo.needsUV = this._useTexture;
		vo.needsNormals = vo.numLights > 0;
	}
	,generateMip: function(stage3DProxy) {
		if(this._useTexture) this._texture.getTextureForStage3D(stage3DProxy);
	}
	,get_diffuseAlpha: function() {
		return this._diffuseA;
	}
	,set_diffuseAlpha: function(value) {
		this._diffuseA = value;
		return value;
	}
	,get_diffuseColor: function() {
		return this._diffuseColor;
	}
	,set_diffuseColor: function(diffuseColor) {
		this._diffuseColor = diffuseColor;
		this.updateDiffuse();
		return diffuseColor;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value != null , Bool);
		this._texture = value;
		return value;
	}
	,get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		if(value == this._alphaThreshold) return value;
		if(value == 0 || this._alphaThreshold == 0) this.invalidateShaderProgram();
		this._alphaThreshold = value;
		return value;
	}
	,dispose: function() {
		this._texture = null;
	}
	,copyFrom: function(method) {
		var diff;
		diff = js.Boot.__cast(method , away3d.materials.methods.BasicDiffuseMethod);
		this.set_alphaThreshold(diff.get_alphaThreshold());
		this.set_texture(diff.get_texture());
		this.set_useAmbientTexture(diff.get_useAmbientTexture());
		this.set_diffuseAlpha(diff.get_diffuseAlpha());
		this.set_diffuseColor(diff.get_diffuseColor());
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.LightingMethodBase.prototype.cleanCompilationData.call(this);
		this._shadowRegister = null;
		this._totalLightColorReg = null;
		this._diffuseInputRegister = null;
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		var code = "";
		this._isFirstLight = true;
		if(vo.numLights > 0) {
			this._totalLightColorReg = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(this._totalLightColorReg,1);
		}
		return code;
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		code += "dp3 " + Std.string(t) + ".x, " + Std.string(lightDirReg) + ", " + Std.string(this._sharedRegisters.normalFragment) + "\n" + "max " + Std.string(t) + ".w, " + Std.string(t) + ".x, " + Std.string(this._sharedRegisters.commons) + ".y\n";
		if(vo.useLightFallOff) code += "mul " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(lightDirReg) + ".w\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		code += "mul " + Std.string(t) + ", " + Std.string(t) + ".w, " + Std.string(lightColReg) + "\n";
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		code += "tex " + Std.string(t) + ", " + Std.string(this._sharedRegisters.normalFragment) + ", " + Std.string(cubeMapReg) + " <cube,linear,miplinear>\n" + "mul " + Std.string(t) + ".xyz, " + Std.string(t) + ".xyz, " + weightRegister + "\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		var code = "";
		var albedo;
		var cutOffReg;
		if(vo.numLights > 0) {
			if(this._shadowRegister != null) code += this.applyShadow(vo,regCache);
			albedo = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(albedo,1);
		} else albedo = targetReg;
		if(this._useTexture) {
			this._diffuseInputRegister = regCache.getFreeTextureReg();
			vo.texturesIndex = this._diffuseInputRegister.get_index();
			code += this.getTex2DSampleCode(vo,albedo,this._diffuseInputRegister,this._texture);
			if(this._alphaThreshold > 0) {
				cutOffReg = regCache.getFreeFragmentConstant();
				vo.fragmentConstantsIndex = cutOffReg.get_index() * 4;
				code += "sub " + Std.string(albedo) + ".w, " + Std.string(albedo) + ".w, " + Std.string(cutOffReg) + ".x\n" + "kil " + Std.string(albedo) + ".w\n" + "add " + Std.string(albedo) + ".w, " + Std.string(albedo) + ".w, " + Std.string(cutOffReg) + ".x\n";
			}
		} else {
			this._diffuseInputRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._diffuseInputRegister.get_index() * 4;
			code += "mov " + Std.string(albedo) + ", " + Std.string(this._diffuseInputRegister) + "\n";
		}
		if(vo.numLights == 0) return code;
		code += "sat " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._totalLightColorReg) + "\n";
		if(this._useAmbientTexture) code += "mul " + Std.string(albedo) + ".xyz, " + Std.string(albedo) + ", " + Std.string(this._totalLightColorReg) + "\n" + "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n" + "sub " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n" + "add " + Std.string(targetReg) + ".xyz, " + Std.string(albedo) + ", " + Std.string(targetReg) + "\n"; else {
			code += "add " + Std.string(targetReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(targetReg) + "\n";
			if(this._useTexture) code += "mul " + Std.string(targetReg) + ".xyz, " + Std.string(albedo) + ", " + Std.string(targetReg) + "\n" + "mov " + Std.string(targetReg) + ".w, " + Std.string(albedo) + ".w\n"; else code += "mul " + Std.string(targetReg) + ".xyz, " + Std.string(this._diffuseInputRegister) + ", " + Std.string(targetReg) + "\n" + "mov " + Std.string(targetReg) + ".w, " + Std.string(this._diffuseInputRegister) + ".w\n";
		}
		regCache.removeFragmentTempUsage(this._totalLightColorReg);
		regCache.removeFragmentTempUsage(albedo);
		return code;
	}
	,applyShadow: function(vo,regCache) {
		return "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._shadowRegister) + ".w\n";
	}
	,activate: function(vo,stage3DProxy) {
		if(this._useTexture) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
			if(this._alphaThreshold > 0) {
				var this1 = vo.fragmentData;
				var key = vo.fragmentConstantsIndex;
				if(!this1.fixed) {
					if(key >= this1.length) this1.length = key + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[key] = this._alphaThreshold;
			}
		} else {
			var index = vo.fragmentConstantsIndex;
			var data1 = vo.fragmentData;
			if(!data1.fixed) {
				if(index >= data1.length) data1.length = index + 1;
				if(data1.data.length < data1.length) {
					var data2;
					var this3;
					this3 = new Array(data1.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(data1.data,0,data2,0,data1.data.length);
					data1.data = data2;
				}
			}
			data1.data[index] = this._diffuseR;
			var key1 = index + 1;
			if(!data1.fixed) {
				if(key1 >= data1.length) data1.length = key1 + 1;
				if(data1.data.length < data1.length) {
					var data3;
					var this4;
					this4 = new Array(data1.data.length + 10);
					data3 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(data1.data,0,data3,0,data1.data.length);
					data1.data = data3;
				}
			}
			data1.data[key1] = this._diffuseG;
			var key2 = index + 2;
			if(!data1.fixed) {
				if(key2 >= data1.length) data1.length = key2 + 1;
				if(data1.data.length < data1.length) {
					var data4;
					var this5;
					this5 = new Array(data1.data.length + 10);
					data4 = this5;
					haxe.ds._Vector.Vector_Impl_.blit(data1.data,0,data4,0,data1.data.length);
					data1.data = data4;
				}
			}
			data1.data[key2] = this._diffuseB;
			var key3 = index + 3;
			if(!data1.fixed) {
				if(key3 >= data1.length) data1.length = key3 + 1;
				if(data1.data.length < data1.length) {
					var data5;
					var this6;
					this6 = new Array(data1.data.length + 10);
					data5 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(data1.data,0,data5,0,data1.data.length);
					data1.data = data5;
				}
			}
			data1.data[key3] = this._diffuseA;
		}
	}
	,updateDiffuse: function() {
		this._diffuseR = (this._diffuseColor >> 16 & 255) / 255;
		this._diffuseG = (this._diffuseColor >> 8 & 255) / 255;
		this._diffuseB = (this._diffuseColor & 255) / 255;
	}
	,set_shadowRegister: function(value) {
		this._shadowRegister = value;
		return value;
	}
	,__class__: away3d.materials.methods.BasicDiffuseMethod
	,__properties__: $extend(away3d.materials.methods.LightingMethodBase.prototype.__properties__,{set_shadowRegister:"set_shadowRegister",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold",set_texture:"set_texture",get_texture:"get_texture",set_diffuseColor:"set_diffuseColor",get_diffuseColor:"get_diffuseColor",set_diffuseAlpha:"set_diffuseAlpha",get_diffuseAlpha:"get_diffuseAlpha",set_useAmbientTexture:"set_useAmbientTexture",get_useAmbientTexture:"get_useAmbientTexture"})
});
away3d.materials.methods.BasicNormalMethod = function() {
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicNormalMethod"] = away3d.materials.methods.BasicNormalMethod;
away3d.materials.methods.BasicNormalMethod.__name__ = ["away3d","materials","methods","BasicNormalMethod"];
away3d.materials.methods.BasicNormalMethod.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.BasicNormalMethod.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	initVO: function(vo) {
		vo.needsUV = js.Boot.__cast(this._texture != null , Bool);
	}
	,get_tangentSpace: function() {
		return true;
	}
	,get_hasOutput: function() {
		return this._useTexture;
	}
	,copyFrom: function(method) {
		this.set_normalMap((js.Boot.__cast(method , away3d.materials.methods.BasicNormalMethod)).get_normalMap());
	}
	,get_normalMap: function() {
		return this._texture;
	}
	,set_normalMap: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value != null , Bool);
		this._texture = value;
		return value;
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.ShadingMethodBase.prototype.cleanCompilationData.call(this);
		this._normalTextureRegister = null;
	}
	,dispose: function() {
		if(this._texture != null) this._texture = null;
	}
	,activate: function(vo,stage3DProxy) {
		if(vo.texturesIndex >= 0) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		this._normalTextureRegister = regCache.getFreeTextureReg();
		vo.texturesIndex = this._normalTextureRegister.get_index();
		return this.getTex2DSampleCode(vo,targetReg,this._normalTextureRegister,this._texture) + "sub " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(this._sharedRegisters.commons) + ".xxx\t\n" + "nrm " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz\t\t\t\t\t\t\t\n";
	}
	,__class__: away3d.materials.methods.BasicNormalMethod
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",get_hasOutput:"get_hasOutput",get_tangentSpace:"get_tangentSpace"})
});
away3d.materials.methods.BasicSpecularMethod = function() {
	this._gloss = 50;
	this._specular = 1;
	this._specularColor = 16777215;
	this._specularR = 1;
	this._specularG = 1;
	this._specularB = 1;
	away3d.materials.methods.LightingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicSpecularMethod"] = away3d.materials.methods.BasicSpecularMethod;
away3d.materials.methods.BasicSpecularMethod.__name__ = ["away3d","materials","methods","BasicSpecularMethod"];
away3d.materials.methods.BasicSpecularMethod.__super__ = away3d.materials.methods.LightingMethodBase;
away3d.materials.methods.BasicSpecularMethod.prototype = $extend(away3d.materials.methods.LightingMethodBase.prototype,{
	initVO: function(vo) {
		vo.needsUV = this._useTexture;
		vo.needsNormals = vo.numLights > 0;
		vo.needsView = vo.numLights > 0;
	}
	,get_gloss: function() {
		return this._gloss;
	}
	,set_gloss: function(value) {
		this._gloss = value;
		return value;
	}
	,get_specular: function() {
		return this._specular;
	}
	,set_specular: function(value) {
		if(value == this._specular) return value;
		this._specular = value;
		this.updateSpecular();
		return value;
	}
	,get_specularColor: function() {
		return this._specularColor;
	}
	,set_specularColor: function(value) {
		if((function($this) {
			var $r;
			var $int = $this._specularColor;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == (function($this) {
			var $r;
			var int1 = value;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this))) return value;
		if((function($this) {
			var $r;
			var int2 = $this._specularColor;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) == 0 || (function($this) {
			var $r;
			var int3 = value;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)) == 0) this.invalidateShaderProgram();
		this._specularColor = value;
		this.updateSpecular();
		return value;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(js.Boot.__cast(value != null , Bool) != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) this.invalidateShaderProgram();
		this._useTexture = js.Boot.__cast(value != null , Bool);
		this._texture = value;
		return value;
	}
	,copyFrom: function(method) {
		var spec;
		spec = js.Boot.__cast(method , away3d.materials.methods.BasicSpecularMethod);
		this.set_texture(spec.get_texture());
		this.set_specular(spec.get_specular());
		this.set_specularColor(spec.get_specularColor());
		this.set_gloss(spec.get_gloss());
	}
	,cleanCompilationData: function() {
		away3d.materials.methods.LightingMethodBase.prototype.cleanCompilationData.call(this);
		this._shadowRegister = null;
		this._totalLightColorReg = null;
		this._specularTextureRegister = null;
		this._specularTexData = null;
		this._specularDataRegister = null;
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		var code = "";
		this._isFirstLight = true;
		if(vo.numLights > 0) {
			this._specularDataRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._specularDataRegister.get_index() * 4;
			if(this._useTexture) {
				this._specularTexData = regCache.getFreeFragmentVectorTemp();
				regCache.addFragmentTempUsages(this._specularTexData,1);
				this._specularTextureRegister = regCache.getFreeTextureReg();
				vo.texturesIndex = this._specularTextureRegister.get_index();
				code = this.getTex2DSampleCode(vo,this._specularTexData,this._specularTextureRegister,this._texture);
			} else this._specularTextureRegister = null;
			this._totalLightColorReg = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(this._totalLightColorReg,1);
		}
		return code;
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		var viewDirReg = this._sharedRegisters.viewDirFragment;
		var normalReg = this._sharedRegisters.normalFragment;
		code += "add " + Std.string(t) + ", " + Std.string(lightDirReg) + ", " + Std.string(viewDirReg) + "\n" + "nrm " + Std.string(t) + ".xyz, " + Std.string(t) + "\n" + "dp3 " + Std.string(t) + ".w, " + Std.string(normalReg) + ", " + Std.string(t) + "\n" + "sat " + Std.string(t) + ".w, " + Std.string(t) + ".w\n";
		if(this._useTexture) code += "mul " + Std.string(this._specularTexData) + ".w, " + Std.string(this._specularTexData) + ".y, " + Std.string(this._specularDataRegister) + ".w\n" + "pow " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(this._specularTexData) + ".w\n"; else code += "pow " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(this._specularDataRegister) + ".w\n";
		if(vo.useLightFallOff) code += "mul " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(lightDirReg) + ".w\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		code += "mul " + Std.string(t) + ".xyz, " + Std.string(lightColReg) + ", " + Std.string(t) + ".w\n";
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) t = this._totalLightColorReg; else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		var normalReg = this._sharedRegisters.normalFragment;
		var viewDirReg = this._sharedRegisters.viewDirFragment;
		code += "dp3 " + Std.string(t) + ".w, " + Std.string(normalReg) + ", " + Std.string(viewDirReg) + "\n" + "add " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(t) + ".w\n" + "mul " + Std.string(t) + ", " + Std.string(t) + ".w, " + Std.string(normalReg) + "\n" + "sub " + Std.string(t) + ", " + Std.string(t) + ", " + Std.string(viewDirReg) + "\n" + "tex " + Std.string(t) + ", " + Std.string(t) + ", " + Std.string(cubeMapReg) + " <cube," + (vo.useSmoothTextures?"linear":"nearest") + ",miplinear>\n" + "mul " + Std.string(t) + ".xyz, " + Std.string(t) + ", " + weightRegister + "\n";
		if(this._modulateMethod != null) code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		var code = "";
		if(vo.numLights == 0) return code;
		if(this._shadowRegister != null) code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._shadowRegister) + ".w\n";
		if(this._useTexture) {
			code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._specularTexData) + ".x\n";
			regCache.removeFragmentTempUsage(this._specularTexData);
		}
		code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._specularDataRegister) + "\n" + "add " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n";
		regCache.removeFragmentTempUsage(this._totalLightColorReg);
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		if(vo.numLights == 0) return;
		if(this._useTexture) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures?openfl.display3D.Context3DWrapMode.REPEAT:openfl.display3D.Context3DWrapMode.CLAMP,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping?openfl.display3D.Context3DMipFilter.MIPLINEAR:openfl.display3D.Context3DMipFilter.MIPNONE);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
		var index = vo.fragmentConstantsIndex;
		var data = vo.fragmentData;
		if(!data.fixed) {
			if(index >= data.length) data.length = index + 1;
			if(data.data.length < data.length) {
				var data1;
				var this1;
				this1 = new Array(data.data.length + 10);
				data1 = this1;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
				data.data = data1;
			}
		}
		data.data[index] = this._specularR;
		var key = index + 1;
		if(!data.fixed) {
			if(key >= data.length) data.length = key + 1;
			if(data.data.length < data.length) {
				var data2;
				var this2;
				this2 = new Array(data.data.length + 10);
				data2 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
				data.data = data2;
			}
		}
		data.data[key] = this._specularG;
		var key1 = index + 2;
		if(!data.fixed) {
			if(key1 >= data.length) data.length = key1 + 1;
			if(data.data.length < data.length) {
				var data3;
				var this3;
				this3 = new Array(data.data.length + 10);
				data3 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
				data.data = data3;
			}
		}
		data.data[key1] = this._specularB;
		var key2 = index + 3;
		if(!data.fixed) {
			if(key2 >= data.length) data.length = key2 + 1;
			if(data.data.length < data.length) {
				var data4;
				var this4;
				this4 = new Array(data.data.length + 10);
				data4 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
				data.data = data4;
			}
		}
		data.data[key2] = this._gloss;
	}
	,updateSpecular: function() {
		this._specularR = (function($this) {
			var $r;
			var $int = $this._specularColor >> 16 & 255;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int1 = 255;
			$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
			return $r;
		}(this)) * this._specular;
		this._specularG = (function($this) {
			var $r;
			var int2 = $this._specularColor >> 8 & 255;
			$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int3 = 255;
			$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
			return $r;
		}(this)) * this._specular;
		this._specularB = (function($this) {
			var $r;
			var int4 = $this._specularColor & 255;
			$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
			return $r;
		}(this)) / (function($this) {
			var $r;
			var int5 = 255;
			$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
			return $r;
		}(this)) * this._specular;
	}
	,set_shadowRegister: function(shadowReg) {
		this._shadowRegister = shadowReg;
		return shadowReg;
	}
	,__class__: away3d.materials.methods.BasicSpecularMethod
	,__properties__: $extend(away3d.materials.methods.LightingMethodBase.prototype.__properties__,{set_shadowRegister:"set_shadowRegister",set_texture:"set_texture",get_texture:"get_texture",set_specularColor:"set_specularColor",get_specularColor:"get_specularColor",set_specular:"set_specular",get_specular:"get_specular",set_gloss:"set_gloss",get_gloss:"get_gloss"})
});
away3d.materials.methods.EffectMethodBase = function() {
	away3d.materials.methods.ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.EffectMethodBase"] = away3d.materials.methods.EffectMethodBase;
away3d.materials.methods.EffectMethodBase.__name__ = ["away3d","materials","methods","EffectMethodBase"];
away3d.materials.methods.EffectMethodBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.methods.EffectMethodBase.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.EffectMethodBase.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	get_assetType: function() {
		return away3d.library.assets.Asset3DType.EFFECTS_METHOD;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		throw new away3d.errors.AbstractMethodError();
		return "";
	}
	,__class__: away3d.materials.methods.EffectMethodBase
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{get_assetType:"get_assetType"})
});
away3d.materials.methods.ColorTransformMethod = function() {
	away3d.materials.methods.EffectMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.ColorTransformMethod"] = away3d.materials.methods.ColorTransformMethod;
away3d.materials.methods.ColorTransformMethod.__name__ = ["away3d","materials","methods","ColorTransformMethod"];
away3d.materials.methods.ColorTransformMethod.__super__ = away3d.materials.methods.EffectMethodBase;
away3d.materials.methods.ColorTransformMethod.prototype = $extend(away3d.materials.methods.EffectMethodBase.prototype,{
	get_colorTransform: function() {
		return this._colorTransform;
	}
	,set_colorTransform: function(value) {
		this._colorTransform = value;
		return value;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		var code = "";
		var colorMultReg = regCache.getFreeFragmentConstant();
		var colorOffsReg = regCache.getFreeFragmentConstant();
		vo.fragmentConstantsIndex = colorMultReg.get_index() * 4;
		code += "mul " + Std.string(targetReg) + ", " + targetReg.toString() + ", " + Std.string(colorMultReg) + "\n" + "add " + Std.string(targetReg) + ", " + targetReg.toString() + ", " + Std.string(colorOffsReg) + "\n";
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		var inv = 0.00392156862745098;
		var index = vo.fragmentConstantsIndex;
		var data = vo.fragmentData;
		if(!data.fixed) {
			if(index >= data.length) data.length = index + 1;
			if(data.data.length < data.length) {
				var data1;
				var this1;
				this1 = new Array(data.data.length + 10);
				data1 = this1;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
				data.data = data1;
			}
		}
		data.data[index] = this._colorTransform.redMultiplier;
		var key = index + 1;
		if(!data.fixed) {
			if(key >= data.length) data.length = key + 1;
			if(data.data.length < data.length) {
				var data2;
				var this2;
				this2 = new Array(data.data.length + 10);
				data2 = this2;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
				data.data = data2;
			}
		}
		data.data[key] = this._colorTransform.greenMultiplier;
		var key1 = index + 2;
		if(!data.fixed) {
			if(key1 >= data.length) data.length = key1 + 1;
			if(data.data.length < data.length) {
				var data3;
				var this3;
				this3 = new Array(data.data.length + 10);
				data3 = this3;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
				data.data = data3;
			}
		}
		data.data[key1] = this._colorTransform.blueMultiplier;
		var key2 = index + 3;
		if(!data.fixed) {
			if(key2 >= data.length) data.length = key2 + 1;
			if(data.data.length < data.length) {
				var data4;
				var this4;
				this4 = new Array(data.data.length + 10);
				data4 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
				data.data = data4;
			}
		}
		data.data[key2] = this._colorTransform.alphaMultiplier;
		var key3 = index + 4;
		if(!data.fixed) {
			if(key3 >= data.length) data.length = key3 + 1;
			if(data.data.length < data.length) {
				var data5;
				var this5;
				this5 = new Array(data.data.length + 10);
				data5 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data5,0,data.data.length);
				data.data = data5;
			}
		}
		data.data[key3] = this._colorTransform.redOffset * inv;
		var key4 = index + 5;
		if(!data.fixed) {
			if(key4 >= data.length) data.length = key4 + 1;
			if(data.data.length < data.length) {
				var data6;
				var this6;
				this6 = new Array(data.data.length + 10);
				data6 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data6,0,data.data.length);
				data.data = data6;
			}
		}
		data.data[key4] = this._colorTransform.greenOffset * inv;
		var key5 = index + 6;
		if(!data.fixed) {
			if(key5 >= data.length) data.length = key5 + 1;
			if(data.data.length < data.length) {
				var data7;
				var this7;
				this7 = new Array(data.data.length + 10);
				data7 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data7,0,data.data.length);
				data.data = data7;
			}
		}
		data.data[key5] = this._colorTransform.blueOffset * inv;
		var key6 = index + 7;
		if(!data.fixed) {
			if(key6 >= data.length) data.length = key6 + 1;
			if(data.data.length < data.length) {
				var data8;
				var this8;
				this8 = new Array(data.data.length + 10);
				data8 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data8,0,data.data.length);
				data.data = data8;
			}
		}
		data.data[key6] = this._colorTransform.alphaOffset * inv;
	}
	,__class__: away3d.materials.methods.ColorTransformMethod
	,__properties__: $extend(away3d.materials.methods.EffectMethodBase.prototype.__properties__,{set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"})
});
away3d.materials.methods.MethodVO = function() {
	this.useLightFallOff = true;
};
$hxClasses["away3d.materials.methods.MethodVO"] = away3d.materials.methods.MethodVO;
away3d.materials.methods.MethodVO.__name__ = ["away3d","materials","methods","MethodVO"];
away3d.materials.methods.MethodVO.prototype = {
	reset: function() {
		this.texturesIndex = -1;
		this.vertexConstantsIndex = -1;
		this.fragmentConstantsIndex = -1;
		this.useMipmapping = true;
		this.anisotropy = away3d.textures.Anisotropy.ANISOTROPIC2X;
		this.useSmoothTextures = true;
		this.repeatTextures = false;
		this.needsProjection = false;
		this.needsView = false;
		this.needsNormals = false;
		this.needsTangents = false;
		this.needsUV = false;
		this.needsSecondaryUV = false;
		this.needsGlobalVertexPos = false;
		this.needsGlobalFragmentPos = false;
		this.numLights = 0;
		this.useLightFallOff = true;
	}
	,__class__: away3d.materials.methods.MethodVO
};
away3d.materials.methods.MethodVOSet = function(method) {
	this.method = method;
	this.data = method.createMethodVO();
};
$hxClasses["away3d.materials.methods.MethodVOSet"] = away3d.materials.methods.MethodVOSet;
away3d.materials.methods.MethodVOSet.__name__ = ["away3d","materials","methods","MethodVOSet"];
away3d.materials.methods.MethodVOSet.prototype = {
	__class__: away3d.materials.methods.MethodVOSet
};
away3d.materials.methods.ShaderMethodSetup = function() {
	this._methods = new Array();
	this._normalMethod = new away3d.materials.methods.BasicNormalMethod();
	this._ambientMethod = new away3d.materials.methods.BasicAmbientMethod();
	this._diffuseMethod = new away3d.materials.methods.BasicDiffuseMethod();
	this._specularMethod = new away3d.materials.methods.BasicSpecularMethod();
	this._normalMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._diffuseMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._specularMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._ambientMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	this._normalMethodVO = this._normalMethod.createMethodVO();
	this._ambientMethodVO = this._ambientMethod.createMethodVO();
	this._diffuseMethodVO = this._diffuseMethod.createMethodVO();
	this._specularMethodVO = this._specularMethod.createMethodVO();
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["away3d.materials.methods.ShaderMethodSetup"] = away3d.materials.methods.ShaderMethodSetup;
away3d.materials.methods.ShaderMethodSetup.__name__ = ["away3d","materials","methods","ShaderMethodSetup"];
away3d.materials.methods.ShaderMethodSetup.__super__ = openfl.events.EventDispatcher;
away3d.materials.methods.ShaderMethodSetup.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	onShaderInvalidated: function(event) {
		this.invalidateShaderProgram();
	}
	,invalidateShaderProgram: function() {
		this.dispatchEvent(new away3d.events.ShadingMethodEvent(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED));
	}
	,get_normalMethod: function() {
		return this._normalMethod;
	}
	,set_normalMethod: function(value) {
		if(this._normalMethod != null) this._normalMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(value != null) {
			if(this._normalMethod != null) value.copyFrom(this._normalMethod);
			this._normalMethodVO = value.createMethodVO();
			value.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		}
		this._normalMethod = value;
		if(value != null) this.invalidateShaderProgram();
		return value;
	}
	,get_ambientMethod: function() {
		return this._ambientMethod;
	}
	,set_ambientMethod: function(value) {
		if(this._ambientMethod != null) this._ambientMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(value != null) {
			if(this._ambientMethod != null) value.copyFrom(this._ambientMethod);
			value.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._ambientMethodVO = value.createMethodVO();
		}
		this._ambientMethod = value;
		if(value != null) this.invalidateShaderProgram();
		return value;
	}
	,get_shadowMethod: function() {
		return this._shadowMethod;
	}
	,set_shadowMethod: function(value) {
		if(this._shadowMethod != null) this._shadowMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this._shadowMethod = value;
		if(this._shadowMethod != null) {
			this._shadowMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._shadowMethodVO = this._shadowMethod.createMethodVO();
		} else this._shadowMethodVO = null;
		this.invalidateShaderProgram();
		return value;
	}
	,get_diffuseMethod: function() {
		return this._diffuseMethod;
	}
	,set_diffuseMethod: function(value) {
		if(this._diffuseMethod != null) this._diffuseMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(value != null) {
			if(this._diffuseMethod != null) value.copyFrom(this._diffuseMethod);
			value.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._diffuseMethodVO = value.createMethodVO();
		}
		this._diffuseMethod = value;
		if(value != null) this.invalidateShaderProgram();
		return value;
	}
	,get_specularMethod: function() {
		return this._specularMethod;
	}
	,set_specularMethod: function(value) {
		if(this._specularMethod != null) {
			this._specularMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			if(value != null) value.copyFrom(this._specularMethod);
		}
		this._specularMethod = value;
		if(this._specularMethod != null) {
			this._specularMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._specularMethodVO = this._specularMethod.createMethodVO();
		} else this._specularMethodVO = null;
		this.invalidateShaderProgram();
		return value;
	}
	,get_colorTransformMethod: function() {
		return this._colorTransformMethod;
	}
	,set_colorTransformMethod: function(value) {
		if(this._colorTransformMethod == value) return value;
		if(this._colorTransformMethod != null) this._colorTransformMethod.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		if(this._colorTransformMethod == null || value == null) this.invalidateShaderProgram();
		this._colorTransformMethod = value;
		if(this._colorTransformMethod != null) {
			this._colorTransformMethod.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this._colorTransformMethodVO = this._colorTransformMethod.createMethodVO();
		} else this._colorTransformMethodVO = null;
		return value;
	}
	,dispose: function() {
		this.clearListeners(this._normalMethod);
		this.clearListeners(this._diffuseMethod);
		this.clearListeners(this._shadowMethod);
		this.clearListeners(this._ambientMethod);
		this.clearListeners(this._specularMethod);
		var i = 0;
		while(i < this._methods.length) {
			this.clearListeners(this._methods[i].method);
			++i;
		}
		this._methods = null;
	}
	,clearListeners: function(method) {
		if(method != null) method.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	}
	,addMethod: function(method) {
		this._methods.push(new away3d.materials.methods.MethodVOSet(method));
		method.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this.invalidateShaderProgram();
	}
	,hasMethod: function(method) {
		return this.getMethodSetForMethod(method) != null;
	}
	,addMethodAt: function(method,index) {
		var x = new away3d.materials.methods.MethodVOSet(method);
		this._methods.splice(index,0,x);
		method.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this.invalidateShaderProgram();
	}
	,getMethodAt: function(index) {
		if(index > this._methods.length - 1) return null;
		return this._methods[index].method;
	}
	,get_numMethods: function() {
		return this._methods.length;
	}
	,removeMethod: function(method) {
		var methodSet = this.getMethodSetForMethod(method);
		if(methodSet != null) {
			var index = Lambda.indexOf(this._methods,methodSet);
			this._methods.splice(index,1);
			method.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
			this.invalidateShaderProgram();
		}
	}
	,getMethodSetForMethod: function(method) {
		var len = this._methods.length;
		var i = 0;
		while(i < len) {
			if(this._methods[i].method == method) return this._methods[i];
			++i;
		}
		return null;
	}
	,__class__: away3d.materials.methods.ShaderMethodSetup
	,__properties__: {get_numMethods:"get_numMethods",set_colorTransformMethod:"set_colorTransformMethod",get_colorTransformMethod:"get_colorTransformMethod",set_specularMethod:"set_specularMethod",get_specularMethod:"get_specularMethod",set_diffuseMethod:"set_diffuseMethod",get_diffuseMethod:"get_diffuseMethod",set_shadowMethod:"set_shadowMethod",get_shadowMethod:"get_shadowMethod",set_ambientMethod:"set_ambientMethod",get_ambientMethod:"get_ambientMethod",set_normalMethod:"set_normalMethod",get_normalMethod:"get_normalMethod"}
});
away3d.materials.methods.ShadowMapMethodBase = function(castingLight) {
	this._epsilon = .02;
	this._alpha = 1;
	away3d.materials.methods.ShadingMethodBase.call(this);
	this._castingLight = castingLight;
	castingLight.set_castsShadows(true);
	this._shadowMapper = castingLight.get_shadowMapper();
};
$hxClasses["away3d.materials.methods.ShadowMapMethodBase"] = away3d.materials.methods.ShadowMapMethodBase;
away3d.materials.methods.ShadowMapMethodBase.__name__ = ["away3d","materials","methods","ShadowMapMethodBase"];
away3d.materials.methods.ShadowMapMethodBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.materials.methods.ShadowMapMethodBase.__super__ = away3d.materials.methods.ShadingMethodBase;
away3d.materials.methods.ShadowMapMethodBase.prototype = $extend(away3d.materials.methods.ShadingMethodBase.prototype,{
	get_assetType: function() {
		return away3d.library.assets.Asset3DType.SHADOW_MAP_METHOD;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		this._alpha = value;
		return value;
	}
	,get_castingLight: function() {
		return this._castingLight;
	}
	,get_epsilon: function() {
		return this._epsilon;
	}
	,set_epsilon: function(value) {
		this._epsilon = value;
		return value;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,__class__: away3d.materials.methods.ShadowMapMethodBase
	,__properties__: $extend(away3d.materials.methods.ShadingMethodBase.prototype.__properties__,{set_epsilon:"set_epsilon",get_epsilon:"get_epsilon",get_castingLight:"get_castingLight",set_alpha:"set_alpha",get_alpha:"get_alpha",get_assetType:"get_assetType"})
});
away3d.materials.passes = {};
away3d.materials.passes.MaterialPassBase = function(renderToTexture) {
	if(renderToTexture == null) renderToTexture = false;
	openfl.events.EventDispatcher.call(this);
	this._program3Ds = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._program3Dids = [-1,-1,-1,-1,-1,-1,-1,-1];
	this._context3Ds = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromA(new Array()),8);
	this._smooth = true;
	this._repeat = false;
	this._mipmap = true;
	this._anisotropy = away3d.textures.Anisotropy.ANISOTROPIC2X;
	this._depthCompareMode = 515;
	this._blendFactorSource = 1;
	this._blendFactorDest = 0;
	this._animatableAttributes = ["va0"];
	this._animationTargetRegisters = ["vt0"];
	this._shadedTarget = "ft0";
	this._defaultCulling = 1028;
	this._writeDepth = true;
	this._renderToTexture = renderToTexture;
	this._numUsedStreams = 1;
	this._numUsedVertexConstants = 5;
};
$hxClasses["away3d.materials.passes.MaterialPassBase"] = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.MaterialPassBase.__name__ = ["away3d","materials","passes","MaterialPassBase"];
away3d.materials.passes.MaterialPassBase.__super__ = openfl.events.EventDispatcher;
away3d.materials.passes.MaterialPassBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_material: function() {
		return this._material;
	}
	,set_material: function(value) {
		this._material = value;
		return this._material;
	}
	,get_writeDepth: function() {
		return this._writeDepth;
	}
	,set_writeDepth: function(value) {
		this._writeDepth = value;
		return this._writeDepth;
	}
	,get_mipmap: function() {
		return this._mipmap;
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) return this._mipmap;
		this._mipmap = value;
		this.invalidateShaderProgram();
		return this._mipmap;
	}
	,get_anisotropy: function() {
		return this._anisotropy;
	}
	,set_anisotropy: function(value) {
		if(this._anisotropy == value) return this._anisotropy;
		this._anisotropy = value;
		this.invalidateShaderProgram();
		return this._anisotropy;
	}
	,get_smooth: function() {
		return this._smooth;
	}
	,set_smooth: function(value) {
		if(this._smooth == value) return this._smooth;
		this._smooth = value;
		this.invalidateShaderProgram();
		return this._smooth;
	}
	,get_repeat: function() {
		return this._repeat;
	}
	,set_repeat: function(value) {
		if(this._repeat == value) return this._repeat;
		this._repeat = value;
		this.invalidateShaderProgram();
		return this._repeat;
	}
	,get_bothSides: function() {
		return this._bothSides;
	}
	,set_bothSides: function(value) {
		this._bothSides = value;
		return this._bothSides;
	}
	,get_depthCompareMode: function() {
		return this._depthCompareMode;
	}
	,set_depthCompareMode: function(value) {
		this._depthCompareMode = value;
		return this._depthCompareMode;
	}
	,get_animationSet: function() {
		return this._animationSet;
	}
	,set_animationSet: function(value) {
		if(this._animationSet == value) return this._animationSet;
		this._animationSet = value;
		this.invalidateShaderProgram();
		return this._animationSet;
	}
	,get_renderToTexture: function() {
		return this._renderToTexture;
	}
	,dispose: function() {
		if(this._lightPicker != null) this._lightPicker.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onLightsChange));
		var i = 0;
		var _g = 0;
		while(_g < 8) {
			var i1 = _g++;
			if(this._program3Ds[i1] != null) {
				away3d.core.managers.AGALProgram3DCache.getInstanceFromIndex(i1).freeProgram3D(this._program3Dids[i1]);
				this._program3Ds[i1] = null;
			}
		}
	}
	,get_numUsedStreams: function() {
		return this._numUsedStreams;
	}
	,get_numUsedVertexConstants: function() {
		return this._numUsedVertexConstants;
	}
	,get_numUsedVaryings: function() {
		return this._numUsedVaryings;
	}
	,get_numUsedFragmentConstants: function() {
		return this._numUsedFragmentConstants;
	}
	,get_needFragmentAnimation: function() {
		return this._needFragmentAnimation;
	}
	,get_needUVAnimation: function() {
		return this._needUVAnimation;
	}
	,updateAnimationState: function(renderable,stage3DProxy,camera) {
		renderable.get_animator().setRenderState(stage3DProxy,renderable,this._numUsedVertexConstants,this._numUsedStreams,camera);
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		throw new away3d.errors.AbstractMethodError();
	}
	,getVertexCode: function() {
		throw new away3d.errors.AbstractMethodError();
		return "";
	}
	,getFragmentCode: function(fragmentAnimatorCode) {
		throw new away3d.errors.AbstractMethodError();
		return "";
	}
	,setBlendMode: function(value) {
		switch(value[1]) {
		case 10:
			this._blendFactorSource = 1;
			this._blendFactorDest = 0;
			this._enableBlending = false;
			break;
		case 7:
			this._blendFactorSource = 770;
			this._blendFactorDest = 771;
			this._enableBlending = true;
			break;
		case 9:
			this._blendFactorSource = 0;
			this._blendFactorDest = 768;
			this._enableBlending = true;
			break;
		case 0:
			this._blendFactorSource = 770;
			this._blendFactorDest = 1;
			this._enableBlending = true;
			break;
		case 1:
			this._blendFactorSource = 0;
			this._blendFactorDest = 770;
			this._enableBlending = true;
			break;
		default:
			throw new openfl.errors.Error("Unsupported blend mode!");
		}
	}
	,activate: function(stage3DProxy,camera) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		context.setDepthTest(this._writeDepth && !this._enableBlending,this._depthCompareMode);
		if(this._enableBlending) context.setBlendFactors(this._blendFactorSource,this._blendFactorDest);
		if(this._context3Ds[contextIndex] != context || this._program3Ds[contextIndex] == null) {
			this._context3Ds[contextIndex] = context;
			this.updateProgram(stage3DProxy);
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
		}
		var prevUsed = away3d.materials.passes.MaterialPassBase._previousUsedStreams[contextIndex];
		var _g = this._numUsedStreams;
		while(_g < prevUsed) {
			var i = _g++;
			context.setVertexBufferAt(i,null);
		}
		prevUsed = away3d.materials.passes.MaterialPassBase._previousUsedTexs[contextIndex];
		var _g1 = this._numUsedTextures;
		while(_g1 < prevUsed) {
			var i1 = _g1++;
			context.setTextureAt(i1,null);
		}
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) this._animationSet.activate(stage3DProxy,this);
		context.setProgram(this._program3Ds[contextIndex]);
		context.setCulling(this._bothSides?0:this._defaultCulling);
		if(this._renderToTexture) {
			this._oldTarget = stage3DProxy.get_renderTarget();
			this._oldSurface = stage3DProxy.get_renderSurfaceSelector();
			this._oldDepthStencil = stage3DProxy.get_enableDepthAndStencil();
			this._oldRect = stage3DProxy.get_scissorRect();
		}
	}
	,deactivate: function(stage3DProxy) {
		var index = stage3DProxy._stage3DIndex;
		away3d.materials.passes.MaterialPassBase._previousUsedStreams[index] = this._numUsedStreams;
		away3d.materials.passes.MaterialPassBase._previousUsedTexs[index] = this._numUsedTextures;
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) this._animationSet.deactivate(stage3DProxy,this);
		if(this._renderToTexture) {
			stage3DProxy.setRenderTarget(this._oldTarget,this._oldDepthStencil,this._oldSurface);
			stage3DProxy.set_scissorRect(this._oldRect);
		}
		stage3DProxy._context3D.setDepthTest(true,515);
	}
	,invalidateShaderProgram: function(updateMaterial) {
		if(updateMaterial == null) updateMaterial = true;
		var i = 0;
		var _g = 0;
		while(_g < 8) {
			var i1 = _g++;
			this._program3Ds[i1] = null;
		}
		if(this._material != null && updateMaterial) this._material.invalidatePasses(this);
	}
	,updateProgram: function(stage3DProxy) {
		var animatorCode = "";
		var UVAnimatorCode = "";
		var fragmentAnimatorCode = "";
		var vertexCode = this.getVertexCode();
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) {
			animatorCode = this._animationSet.getAGALVertexCode(this,(function($this) {
				var $r;
				var value = $this._animatableAttributes;
				var vectorData = new openfl.VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)),(function($this) {
				var $r;
				var value1 = $this._animationTargetRegisters;
				var vectorData1 = new openfl.VectorData();
				vectorData1.length = value1.length;
				vectorData1.fixed = true;
				{
					var vec1;
					var this2;
					this2 = new Array(value1.length);
					vec1 = this2;
					var _g11 = 0;
					var _g2 = value1.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						vec1[i1] = value1[i1];
					}
					vectorData1.data = vec1;
				}
				$r = vectorData1;
				return $r;
			}(this)),stage3DProxy.get_profile());
			if(this._needFragmentAnimation) fragmentAnimatorCode = this._animationSet.getAGALFragmentCode(this,this._shadedTarget,stage3DProxy.get_profile());
			if(this._needUVAnimation) UVAnimatorCode = this._animationSet.getAGALUVCode(this,this._UVSource,this._UVTarget);
			this._animationSet.doneAGALCode(this);
		} else {
			var len = this._animatableAttributes.length;
			var i2 = 0;
			var _g3 = 0;
			while(_g3 < len) {
				var i3 = _g3++;
				animatorCode += "mov " + this._animationTargetRegisters[i3] + ", " + this._animatableAttributes[i3] + "\n";
			}
			if(this._needUVAnimation) UVAnimatorCode = "mov " + this._UVTarget + "," + this._UVSource + "\n";
		}
		vertexCode = animatorCode + UVAnimatorCode + vertexCode;
		var fragmentCode = this.getFragmentCode(fragmentAnimatorCode);
		if(away3d.debug.Debug.active) {
			haxe.Log.trace("Compiling AGAL Code:",{ fileName : "MaterialPassBase.hx", lineNumber : 546, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace("--------------------",{ fileName : "MaterialPassBase.hx", lineNumber : 547, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace(vertexCode,{ fileName : "MaterialPassBase.hx", lineNumber : 548, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace("--------------------",{ fileName : "MaterialPassBase.hx", lineNumber : 549, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe.Log.trace(fragmentCode,{ fileName : "MaterialPassBase.hx", lineNumber : 550, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
		}
		away3d.core.managers.AGALProgram3DCache.getInstance(stage3DProxy).setProgram3D(this,vertexCode,fragmentCode);
	}
	,get_lightPicker: function() {
		return this._lightPicker;
	}
	,set_lightPicker: function(value) {
		if(this._lightPicker != null) this._lightPicker.removeEventListener(openfl.events.Event.CHANGE,$bind(this,this.onLightsChange));
		this._lightPicker = value;
		if(this._lightPicker != null) this._lightPicker.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onLightsChange));
		this.updateLights();
		return this._lightPicker;
	}
	,onLightsChange: function(event) {
		this.updateLights();
	}
	,updateLights: function() {
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		this.invalidateShaderProgram(false);
		return this._alphaPremultiplied;
	}
	,__class__: away3d.materials.passes.MaterialPassBase
	,__properties__: {set_alphaPremultiplied:"set_alphaPremultiplied",get_alphaPremultiplied:"get_alphaPremultiplied",set_lightPicker:"set_lightPicker",get_lightPicker:"get_lightPicker",get_needUVAnimation:"get_needUVAnimation",get_needFragmentAnimation:"get_needFragmentAnimation",get_numUsedFragmentConstants:"get_numUsedFragmentConstants",get_numUsedVaryings:"get_numUsedVaryings",get_numUsedVertexConstants:"get_numUsedVertexConstants",get_numUsedStreams:"get_numUsedStreams",get_renderToTexture:"get_renderToTexture",set_animationSet:"set_animationSet",get_animationSet:"get_animationSet",set_depthCompareMode:"set_depthCompareMode",get_depthCompareMode:"get_depthCompareMode",set_bothSides:"set_bothSides",get_bothSides:"get_bothSides",set_anisotropy:"set_anisotropy",get_anisotropy:"get_anisotropy",set_repeat:"set_repeat",get_repeat:"get_repeat",set_smooth:"set_smooth",get_smooth:"get_smooth",set_mipmap:"set_mipmap",get_mipmap:"get_mipmap",set_writeDepth:"set_writeDepth",get_writeDepth:"get_writeDepth",set_material:"set_material",get_material:"get_material"}
});
away3d.materials.passes.CompiledPass = function(material) {
	this._numDirectionalLights = 0;
	this._numPointLights = 0;
	this._numLightProbes = 0;
	this._specularLightSources = 1;
	this._diffuseLightSources = 3;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this._vertexConstantData = this1;
	var this3;
	this3 = new openfl.VectorData();
	var this4;
	this4 = new Array(0);
	this3.data = this4;
	this3.length = 0;
	this3.fixed = false;
	this._fragmentConstantData = this3;
	this._preserveAlpha = true;
	this._enableLightFallOff = true;
	this._material = material;
	this.init();
	away3d.materials.passes.MaterialPassBase.call(this);
};
$hxClasses["away3d.materials.passes.CompiledPass"] = away3d.materials.passes.CompiledPass;
away3d.materials.passes.CompiledPass.__name__ = ["away3d","materials","passes","CompiledPass"];
away3d.materials.passes.CompiledPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.CompiledPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	get_enableLightFallOff: function() {
		return this._enableLightFallOff;
	}
	,set_enableLightFallOff: function(value) {
		if(value != this._enableLightFallOff) this.invalidateShaderProgram(true);
		this._enableLightFallOff = value;
		return value;
	}
	,get_forceSeparateMVP: function() {
		return this._forceSeparateMVP;
	}
	,set_forceSeparateMVP: function(value) {
		this._forceSeparateMVP = value;
		return value;
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,updateProgram: function(stage3DProxy) {
		this.reset(stage3DProxy.get_profile());
		away3d.materials.passes.MaterialPassBase.prototype.updateProgram.call(this,stage3DProxy);
	}
	,reset: function(profile) {
		this.initCompiler(profile);
		this.updateShaderProperties();
		this.initConstantData();
		this.cleanUp();
	}
	,updateUsedOffsets: function() {
		this._numUsedVertexConstants = this._compiler.get_numUsedVertexConstants();
		this._numUsedFragmentConstants = this._compiler.get_numUsedFragmentConstants();
		this._numUsedStreams = this._compiler.get_numUsedStreams();
		this._numUsedTextures = this._compiler.get_numUsedTextures();
		this._numUsedVaryings = this._compiler.get_numUsedVaryings();
		this._numUsedFragmentConstants = this._compiler.get_numUsedFragmentConstants();
	}
	,initConstantData: function() {
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this._vertexConstantData),this._numUsedVertexConstants * 4,0);
		away3d.utils.ArrayUtils.reSize(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB(this._fragmentConstantData),this._numUsedFragmentConstants * 4,0);
		this.initCommonsData();
		if(this._uvTransformIndex >= 0) this.initUVTransformData();
		if(this._cameraPositionIndex >= 0) {
			var this1 = this._vertexConstantData;
			var key = this._cameraPositionIndex + 3;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = 1;
		}
		this.updateMethodConstants();
	}
	,initCompiler: function(profile) {
		this._compiler = this.createCompiler(profile);
		this._compiler.set_forceSeperateMVP(this._forceSeparateMVP);
		this._compiler.set_numPointLights(this._numPointLights);
		this._compiler.set_numDirectionalLights(this._numDirectionalLights);
		this._compiler.set_numLightProbes(this._numLightProbes);
		this._compiler.set_methodSetup(this._methodSetup);
		this._compiler.set_diffuseLightSources(this._diffuseLightSources);
		this._compiler.set_specularLightSources(this._specularLightSources);
		this._compiler.setTextureSampling(this._smooth,this._repeat,this._mipmap,this._anisotropy);
		this._compiler.setConstantDataBuffers(this._vertexConstantData,this._fragmentConstantData);
		this._compiler.set_animateUVs(this._animateUVs);
		this._compiler.set_alphaPremultiplied(this._alphaPremultiplied && this._enableBlending);
		this._compiler.set_preserveAlpha(this._preserveAlpha && this._enableBlending);
		this._compiler.set_enableLightFallOff(this._enableLightFallOff);
		this._compiler.compile();
	}
	,createCompiler: function(profile) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,updateShaderProperties: function() {
		this._animatableAttributes = this._compiler.get_animatableAttributes();
		this._animationTargetRegisters = this._compiler.get_animationTargetRegisters();
		this._vertexCode = this._compiler.get_vertexCode();
		this._fragmentLightCode = this._compiler.get_fragmentLightCode();
		this._framentPostLightCode = this._compiler.get_fragmentPostLightCode();
		this._shadedTarget = this._compiler.get_shadedTarget();
		this._usingSpecularMethod = this._compiler.get_usingSpecularMethod();
		this._usesNormals = this._compiler.get_usesNormals();
		this._needUVAnimation = this._compiler.get_needUVAnimation();
		this._UVSource = this._compiler.get_UVSource();
		this._UVTarget = this._compiler.get_UVTarget();
		this.updateRegisterIndices();
		this.updateUsedOffsets();
	}
	,updateRegisterIndices: function() {
		this._uvBufferIndex = this._compiler.get_uvBufferIndex();
		this._uvTransformIndex = this._compiler.get_uvTransformIndex();
		this._secondaryUVBufferIndex = this._compiler.get_secondaryUVBufferIndex();
		this._normalBufferIndex = this._compiler.get_normalBufferIndex();
		this._tangentBufferIndex = this._compiler.get_tangentBufferIndex();
		this._lightFragmentConstantIndex = this._compiler.get_lightFragmentConstantIndex();
		this._cameraPositionIndex = this._compiler.get_cameraPositionIndex();
		this._commonsDataIndex = this._compiler.get_commonsDataIndex();
		this._sceneMatrixIndex = this._compiler.get_sceneMatrixIndex();
		this._sceneNormalMatrixIndex = this._compiler.get_sceneNormalMatrixIndex();
		this._probeWeightsIndex = this._compiler.get_probeWeightsIndex();
		this._lightProbeDiffuseIndices = this._compiler.get_lightProbeDiffuseIndices();
		this._lightProbeSpecularIndices = this._compiler.get_lightProbeSpecularIndices();
	}
	,get_preserveAlpha: function() {
		return this._preserveAlpha;
	}
	,set_preserveAlpha: function(value) {
		if(this._preserveAlpha == value) return value;
		this._preserveAlpha = value;
		this.invalidateShaderProgram();
		return value;
	}
	,get_animateUVs: function() {
		return this._animateUVs;
	}
	,set_animateUVs: function(value) {
		if(this._animateUVs == value) return value;
		this._animateUVs = value;
		this.invalidateShaderProgram();
		return value;
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) return value;
		away3d.materials.passes.MaterialPassBase.prototype.set_mipmap.call(this,value);
		return value;
	}
	,set_anisotropy: function(value) {
		if(this._anisotropy == value) return value;
		away3d.materials.passes.MaterialPassBase.prototype.set_anisotropy.call(this,value);
		return value;
	}
	,get_normalMap: function() {
		return this._methodSetup._normalMethod.get_normalMap();
	}
	,set_normalMap: function(value) {
		this._methodSetup._normalMethod.set_normalMap(value);
		return value;
	}
	,get_normalMethod: function() {
		return this._methodSetup.get_normalMethod();
	}
	,set_normalMethod: function(value) {
		this._methodSetup.set_normalMethod(value);
		return value;
	}
	,get_ambientMethod: function() {
		return this._methodSetup.get_ambientMethod();
	}
	,set_ambientMethod: function(value) {
		this._methodSetup.set_ambientMethod(value);
		return value;
	}
	,get_shadowMethod: function() {
		return this._methodSetup.get_shadowMethod();
	}
	,set_shadowMethod: function(value) {
		this._methodSetup.set_shadowMethod(value);
		return value;
	}
	,get_diffuseMethod: function() {
		return this._methodSetup.get_diffuseMethod();
	}
	,set_diffuseMethod: function(value) {
		this._methodSetup.set_diffuseMethod(value);
		return value;
	}
	,get_specularMethod: function() {
		return this._methodSetup.get_specularMethod();
	}
	,set_specularMethod: function(value) {
		this._methodSetup.set_specularMethod(value);
		return value;
	}
	,init: function() {
		this._methodSetup = new away3d.materials.methods.ShaderMethodSetup();
		this._methodSetup.addEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
	}
	,dispose: function() {
		away3d.materials.passes.MaterialPassBase.prototype.dispose.call(this);
		this._methodSetup.removeEventListener(away3d.events.ShadingMethodEvent.SHADER_INVALIDATED,$bind(this,this.onShaderInvalidated));
		this._methodSetup.dispose();
		this._methodSetup = null;
	}
	,invalidateShaderProgram: function(updateMaterial) {
		if(updateMaterial == null) updateMaterial = true;
		var oldPasses = this._passes;
		this._passes = new Array();
		if(this._methodSetup != null) this.addPassesFromMethods();
		if(oldPasses == null || this._passes.length != oldPasses.length) {
			this._passesDirty = true;
			return;
		}
		var i = 0;
		while(i < this._passes.length) {
			if(this._passes[i] != oldPasses[i]) {
				this._passesDirty = true;
				return;
			}
			++i;
		}
		away3d.materials.passes.MaterialPassBase.prototype.invalidateShaderProgram.call(this,updateMaterial);
	}
	,addPassesFromMethods: function() {
		if(this._methodSetup._normalMethod != null && this._methodSetup._normalMethod.get_hasOutput()) this.addPasses(this._methodSetup._normalMethod.get_passes());
		if(this._methodSetup._ambientMethod != null) this.addPasses(this._methodSetup._ambientMethod.get_passes());
		if(this._methodSetup._shadowMethod != null) this.addPasses(this._methodSetup._shadowMethod.get_passes());
		if(this._methodSetup._diffuseMethod != null) this.addPasses(this._methodSetup._diffuseMethod.get_passes());
		if(this._methodSetup._specularMethod != null) this.addPasses(this._methodSetup._specularMethod.get_passes());
	}
	,addPasses: function(passes) {
		if(passes == null) return;
		var len = passes.length;
		var i = 0;
		while(i < len) {
			passes[i].set_material(this.get_material());
			passes[i].set_lightPicker(this._lightPicker);
			this._passes.push(passes[i]);
			++i;
		}
	}
	,initUVTransformData: function() {
		var this1 = this._vertexConstantData;
		var key = this._uvTransformIndex;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = 1;
		var this3 = this._vertexConstantData;
		var key1 = this._uvTransformIndex + 1;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = 0;
		var this5 = this._vertexConstantData;
		var key2 = this._uvTransformIndex + 2;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = 0;
		var this7 = this._vertexConstantData;
		var key3 = this._uvTransformIndex + 3;
		if(!this7.fixed) {
			if(key3 >= this7.length) this7.length = key3 + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[key3] = 0;
		var this9 = this._vertexConstantData;
		var key4 = this._uvTransformIndex + 4;
		if(!this9.fixed) {
			if(key4 >= this9.length) this9.length = key4 + 1;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[key4] = 0;
		var this11 = this._vertexConstantData;
		var key5 = this._uvTransformIndex + 5;
		if(!this11.fixed) {
			if(key5 >= this11.length) this11.length = key5 + 1;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[key5] = 1;
		var this13 = this._vertexConstantData;
		var key6 = this._uvTransformIndex + 6;
		if(!this13.fixed) {
			if(key6 >= this13.length) this13.length = key6 + 1;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[key6] = 0;
		var this15 = this._vertexConstantData;
		var key7 = this._uvTransformIndex + 7;
		if(!this15.fixed) {
			if(key7 >= this15.length) this15.length = key7 + 1;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[key7] = 0;
	}
	,initCommonsData: function() {
		var this1 = this._fragmentConstantData;
		var key = this._commonsDataIndex;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = .5;
		var this3 = this._fragmentConstantData;
		var key1 = this._commonsDataIndex + 1;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = 0;
		var this5 = this._fragmentConstantData;
		var key2 = this._commonsDataIndex + 2;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = 0.00392156862745098;
		var this7 = this._fragmentConstantData;
		var key3 = this._commonsDataIndex + 3;
		if(!this7.fixed) {
			if(key3 >= this7.length) this7.length = key3 + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[key3] = 1;
	}
	,cleanUp: function() {
		this._compiler.dispose();
		this._compiler = null;
	}
	,updateMethodConstants: function() {
		if(this._methodSetup._normalMethod != null) this._methodSetup._normalMethod.initConstants(this._methodSetup._normalMethodVO);
		if(this._methodSetup._diffuseMethod != null) this._methodSetup._diffuseMethod.initConstants(this._methodSetup._diffuseMethodVO);
		if(this._methodSetup._ambientMethod != null) this._methodSetup._ambientMethod.initConstants(this._methodSetup._ambientMethodVO);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.initConstants(this._methodSetup._specularMethodVO);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.initConstants(this._methodSetup._shadowMethodVO);
	}
	,updateLightConstants: function() {
	}
	,updateProbes: function(stage3DProxy) {
	}
	,onShaderInvalidated: function(event) {
		this.invalidateShaderProgram();
	}
	,getVertexCode: function() {
		return this._vertexCode;
	}
	,getFragmentCode: function(animatorCode) {
		return this._fragmentLightCode + animatorCode + this._framentPostLightCode;
	}
	,activate: function(stage3DProxy,camera) {
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(this._usesNormals) this._methodSetup._normalMethod.activate(this._methodSetup._normalMethodVO,stage3DProxy);
		this._methodSetup._ambientMethod.activate(this._methodSetup._ambientMethodVO,stage3DProxy);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.activate(this._methodSetup._shadowMethodVO,stage3DProxy);
		this._methodSetup._diffuseMethod.activate(this._methodSetup._diffuseMethodVO,stage3DProxy);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.activate(this._methodSetup._specularMethodVO,stage3DProxy);
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var i = 0;
		var context = stage3DProxy._context3D;
		if(this._uvBufferIndex >= 0) renderable.activateUVBuffer(this._uvBufferIndex,stage3DProxy);
		if(this._secondaryUVBufferIndex >= 0) renderable.activateSecondaryUVBuffer(this._secondaryUVBufferIndex,stage3DProxy);
		if(this._normalBufferIndex >= 0) renderable.activateVertexNormalBuffer(this._normalBufferIndex,stage3DProxy);
		if(this._tangentBufferIndex >= 0) renderable.activateVertexTangentBuffer(this._tangentBufferIndex,stage3DProxy);
		if(this._animateUVs) {
			var uvTransform = renderable.get_uvTransform();
			if(uvTransform != null) {
				var this1 = this._vertexConstantData;
				var key = this._uvTransformIndex;
				if(!this1.fixed) {
					if(key >= this1.length) this1.length = key + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[key] = uvTransform.a;
				var this3 = this._vertexConstantData;
				var key1 = this._uvTransformIndex + 1;
				if(!this3.fixed) {
					if(key1 >= this3.length) this3.length = key1 + 1;
					if(this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
						this3.data = data1;
					}
				}
				this3.data[key1] = uvTransform.b;
				var this5 = this._vertexConstantData;
				var key2 = this._uvTransformIndex + 3;
				if(!this5.fixed) {
					if(key2 >= this5.length) this5.length = key2 + 1;
					if(this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
						this5.data = data2;
					}
				}
				this5.data[key2] = uvTransform.tx;
				var this7 = this._vertexConstantData;
				var key3 = this._uvTransformIndex + 4;
				if(!this7.fixed) {
					if(key3 >= this7.length) this7.length = key3 + 1;
					if(this7.data.length < this7.length) {
						var data3;
						var this8;
						this8 = new Array(this7.data.length + 10);
						data3 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
						this7.data = data3;
					}
				}
				this7.data[key3] = uvTransform.c;
				var this9 = this._vertexConstantData;
				var key4 = this._uvTransformIndex + 5;
				if(!this9.fixed) {
					if(key4 >= this9.length) this9.length = key4 + 1;
					if(this9.data.length < this9.length) {
						var data4;
						var this10;
						this10 = new Array(this9.data.length + 10);
						data4 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
						this9.data = data4;
					}
				}
				this9.data[key4] = uvTransform.d;
				var this11 = this._vertexConstantData;
				var key5 = this._uvTransformIndex + 7;
				if(!this11.fixed) {
					if(key5 >= this11.length) this11.length = key5 + 1;
					if(this11.data.length < this11.length) {
						var data5;
						var this12;
						this12 = new Array(this11.data.length + 10);
						data5 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
						this11.data = data5;
					}
				}
				this11.data[key5] = uvTransform.ty;
			} else {
				var this13 = this._vertexConstantData;
				var key6 = this._uvTransformIndex;
				if(!this13.fixed) {
					if(key6 >= this13.length) this13.length = key6 + 1;
					if(this13.data.length < this13.length) {
						var data6;
						var this14;
						this14 = new Array(this13.data.length + 10);
						data6 = this14;
						haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
						this13.data = data6;
					}
				}
				this13.data[key6] = 1;
				var this15 = this._vertexConstantData;
				var key7 = this._uvTransformIndex + 1;
				if(!this15.fixed) {
					if(key7 >= this15.length) this15.length = key7 + 1;
					if(this15.data.length < this15.length) {
						var data7;
						var this16;
						this16 = new Array(this15.data.length + 10);
						data7 = this16;
						haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
						this15.data = data7;
					}
				}
				this15.data[key7] = 0;
				var this17 = this._vertexConstantData;
				var key8 = this._uvTransformIndex + 3;
				if(!this17.fixed) {
					if(key8 >= this17.length) this17.length = key8 + 1;
					if(this17.data.length < this17.length) {
						var data8;
						var this18;
						this18 = new Array(this17.data.length + 10);
						data8 = this18;
						haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
						this17.data = data8;
					}
				}
				this17.data[key8] = 0;
				var this19 = this._vertexConstantData;
				var key9 = this._uvTransformIndex + 4;
				if(!this19.fixed) {
					if(key9 >= this19.length) this19.length = key9 + 1;
					if(this19.data.length < this19.length) {
						var data9;
						var this20;
						this20 = new Array(this19.data.length + 10);
						data9 = this20;
						haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
						this19.data = data9;
					}
				}
				this19.data[key9] = 0;
				var this21 = this._vertexConstantData;
				var key10 = this._uvTransformIndex + 5;
				if(!this21.fixed) {
					if(key10 >= this21.length) this21.length = key10 + 1;
					if(this21.data.length < this21.length) {
						var data10;
						var this22;
						this22 = new Array(this21.data.length + 10);
						data10 = this22;
						haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
						this21.data = data10;
					}
				}
				this21.data[key10] = 1;
				var this23 = this._vertexConstantData;
				var key11 = this._uvTransformIndex + 7;
				if(!this23.fixed) {
					if(key11 >= this23.length) this23.length = key11 + 1;
					if(this23.data.length < this23.length) {
						var data11;
						var this24;
						this24 = new Array(this23.data.length + 10);
						data11 = this24;
						haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
						this23.data = data11;
					}
				}
				this23.data[key11] = 0;
			}
		}
		this._ambientLightR = this._ambientLightG = this._ambientLightB = 0;
		if(this.usesLights()) this.updateLightConstants();
		if(this.usesProbes()) this.updateProbes(stage3DProxy);
		if(this._sceneMatrixIndex >= 0) {
			renderable.getRenderSceneTransform(camera).copyRawDataTo(this._vertexConstantData,this._sceneMatrixIndex,true);
			viewProjection.copyRawDataTo(this._vertexConstantData,0,true);
		} else {
			var matrix3D = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
			matrix3D.copyFrom(renderable.getRenderSceneTransform(camera));
			matrix3D.append(viewProjection);
			matrix3D.copyRawDataTo(this._vertexConstantData,0,true);
		}
		if(this._sceneNormalMatrixIndex >= 0) renderable.get_inverseSceneTransform().copyRawDataTo(this._vertexConstantData,this._sceneNormalMatrixIndex,false);
		if(this._usesNormals) this._methodSetup._normalMethod.setRenderState(this._methodSetup._normalMethodVO,renderable,stage3DProxy,camera);
		var ambientMethod = this._methodSetup._ambientMethod;
		ambientMethod._lightAmbientR = this._ambientLightR;
		ambientMethod._lightAmbientG = this._ambientLightG;
		ambientMethod._lightAmbientB = this._ambientLightB;
		ambientMethod.setRenderState(this._methodSetup._ambientMethodVO,renderable,stage3DProxy,camera);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.setRenderState(this._methodSetup._shadowMethodVO,renderable,stage3DProxy,camera);
		this._methodSetup._diffuseMethod.setRenderState(this._methodSetup._diffuseMethodVO,renderable,stage3DProxy,camera);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.setRenderState(this._methodSetup._specularMethodVO,renderable,stage3DProxy,camera);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.setRenderState(this._methodSetup._colorTransformMethodVO,renderable,stage3DProxy,camera);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		i = 0;
		while(i < len) {
			var set = methods[i];
			set.method.setRenderState(set.data,renderable,stage3DProxy,camera);
			++i;
		}
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,0,(function($this) {
			var $r;
			var this25 = $this._vertexConstantData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this25.data.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					value.push(this25.data[i1]);
				}
			}
			$r = value;
			return $r;
		}(this)),this._numUsedVertexConstants);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
			var $r;
			var this26 = $this._fragmentConstantData;
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this26.data.length;
				while(_g11 < _g2) {
					var i2 = _g11++;
					value1.push(this26.data[i2]);
				}
			}
			$r = value1;
			return $r;
		}(this)),this._numUsedFragmentConstants);
		renderable.activateVertexBuffer(0,stage3DProxy);
		context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,usesProbes: function() {
		return this._numLightProbes > 0 && ((this._diffuseLightSources | this._specularLightSources) & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesLights: function() {
		return (this._numPointLights > 0 || this._numDirectionalLights > 0) && ((this._diffuseLightSources | this._specularLightSources) & away3d.materials.LightSources.LIGHTS) != 0;
	}
	,deactivate: function(stage3DProxy) {
		away3d.materials.passes.MaterialPassBase.prototype.deactivate.call(this,stage3DProxy);
		if(this._usesNormals) this._methodSetup._normalMethod.deactivate(this._methodSetup._normalMethodVO,stage3DProxy);
		this._methodSetup._ambientMethod.deactivate(this._methodSetup._ambientMethodVO,stage3DProxy);
		if(this._methodSetup._shadowMethod != null) this._methodSetup._shadowMethod.deactivate(this._methodSetup._shadowMethodVO,stage3DProxy);
		this._methodSetup._diffuseMethod.deactivate(this._methodSetup._diffuseMethodVO,stage3DProxy);
		if(this._usingSpecularMethod) this._methodSetup._specularMethod.deactivate(this._methodSetup._specularMethodVO,stage3DProxy);
	}
	,get_specularLightSources: function() {
		return this._specularLightSources;
	}
	,set_specularLightSources: function(value) {
		this._specularLightSources = value;
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._diffuseLightSources;
	}
	,set_diffuseLightSources: function(value) {
		this._diffuseLightSources = value;
		return value;
	}
	,__class__: away3d.materials.passes.CompiledPass
	,__properties__: $extend(away3d.materials.passes.MaterialPassBase.prototype.__properties__,{set_diffuseLightSources:"set_diffuseLightSources",get_diffuseLightSources:"get_diffuseLightSources",set_specularLightSources:"set_specularLightSources",get_specularLightSources:"get_specularLightSources",set_specularMethod:"set_specularMethod",get_specularMethod:"get_specularMethod",set_diffuseMethod:"set_diffuseMethod",get_diffuseMethod:"get_diffuseMethod",set_shadowMethod:"set_shadowMethod",get_shadowMethod:"get_shadowMethod",set_ambientMethod:"set_ambientMethod",get_ambientMethod:"get_ambientMethod",set_normalMethod:"set_normalMethod",get_normalMethod:"get_normalMethod",set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",set_animateUVs:"set_animateUVs",get_animateUVs:"get_animateUVs",set_preserveAlpha:"set_preserveAlpha",get_preserveAlpha:"get_preserveAlpha",get_numLightProbes:"get_numLightProbes",get_numDirectionalLights:"get_numDirectionalLights",get_numPointLights:"get_numPointLights",set_forceSeparateMVP:"set_forceSeparateMVP",get_forceSeparateMVP:"get_forceSeparateMVP",set_enableLightFallOff:"set_enableLightFallOff",get_enableLightFallOff:"get_enableLightFallOff"})
});
away3d.materials.passes.DepthMapPass = function() {
	this._alphaThreshold = 0;
	away3d.materials.passes.MaterialPassBase.call(this);
	var value = [1.0,255.0,65025.0,16581375.0,0.00392156862745098,0.00392156862745098,0.00392156862745098,0.0,0.0,0.0,0.0,0.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	this._data = vectorData;
};
$hxClasses["away3d.materials.passes.DepthMapPass"] = away3d.materials.passes.DepthMapPass;
away3d.materials.passes.DepthMapPass.__name__ = ["away3d","materials","passes","DepthMapPass"];
away3d.materials.passes.DepthMapPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.DepthMapPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		if(value == this._alphaThreshold) return value;
		if(value == 0 || this._alphaThreshold == 0) this.invalidateShaderProgram();
		this._alphaThreshold = value;
		var this1 = this._data;
		if(!this1.fixed) {
			if(8 >= this1.length) this1.length = 9;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[8] = this._alphaThreshold;
		return value;
	}
	,get_alphaMask: function() {
		return this._alphaMask;
	}
	,set_alphaMask: function(value) {
		this._alphaMask = value;
		return value;
	}
	,getVertexCode: function() {
		var code;
		code = "m44 vt1, vt0, vc0\t\t\n" + "mov op, vt1\t\n";
		if(this._alphaThreshold > 0) {
			this._numUsedTextures = 1;
			this._numUsedStreams = 2;
			code += "mov v0, vt1\n" + "mov v1, va1\n";
		} else {
			this._numUsedTextures = 0;
			this._numUsedStreams = 1;
			code += "mov v0, vt1\n";
		}
		return code;
	}
	,getFragmentCode: function(code) {
		var wrap;
		if(this._repeat) wrap = "wrap"; else wrap = "clamp";
		var filter;
		if(this._smooth) if(this._mipmap) filter = "linear,miplinear"; else filter = "linear"; else if(this._mipmap) filter = "nearest,mipnearest"; else filter = "nearest";
		var codeF = "div ft2, v0, v0.w\t\t\n" + "mul ft0, fc0, ft2.z\t\n" + "frc ft0, ft0\t\t\t\n" + "mul ft1, ft0.yzww, fc1\t\n";
		if(this._alphaThreshold > 0) {
			var format;
			var _g = this._alphaMask.get_format();
			switch(_g[1]) {
			case 1:
				format = "dxt1,";
				break;
			case 2:
				format = "dxt5,";
				break;
			default:
				format = "";
			}
			codeF += "tex ft3, v1, fs0 <2d," + filter + "," + format + wrap + ">\n" + "sub ft3.w, ft3.w, fc2.x\n" + "kil ft3.w\n";
		}
		codeF += "sub oc, ft0, ft1\t\t\n";
		return codeF;
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		if(this._alphaThreshold > 0) renderable.activateUVBuffer(1,stage3DProxy);
		var context = stage3DProxy._context3D;
		var matrix = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		matrix.copyFrom(renderable.getRenderSceneTransform(camera));
		matrix.append(viewProjection);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,matrix,true);
		renderable.activateVertexBuffer(0,stage3DProxy);
		context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(this._alphaThreshold > 0) {
			context.setTextureAt(0,this._alphaMask.getTextureForStage3D(stage3DProxy));
			context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
				var $r;
				var this1 = $this._data;
				var value = new Array();
				{
					var _g1 = 0;
					var _g = this1.data.length;
					while(_g1 < _g) {
						var i = _g1++;
						value.push(this1.data[i]);
					}
				}
				$r = value;
				return $r;
			}(this)),3);
		} else context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
			var $r;
			var this2 = $this._data;
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this2.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value1.push(this2.data[i1]);
				}
			}
			$r = value1;
			return $r;
		}(this)),2);
	}
	,__class__: away3d.materials.passes.DepthMapPass
	,__properties__: $extend(away3d.materials.passes.MaterialPassBase.prototype.__properties__,{set_alphaMask:"set_alphaMask",get_alphaMask:"get_alphaMask",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold"})
});
away3d.materials.passes.DistanceMapPass = function() {
	away3d.materials.passes.MaterialPassBase.call(this);
	var value = [1.0,255.0,65025.0,16581375.0,0.00392156862745098,0.00392156862745098,0.00392156862745098,0.0,0.0,0.0,0.0,0.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	this._fragmentData = vectorData;
	var value1 = [0.0,0.0,0.0,1.0];
	var vectorData1 = new openfl.VectorData();
	vectorData1.length = value1.length;
	vectorData1.fixed = true;
	var vec1;
	var this2;
	this2 = new Array(value1.length);
	vec1 = this2;
	var _g11 = 0;
	var _g2 = value1.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		vec1[i1] = value1[i1];
	}
	vectorData1.data = vec1;
	this._vertexData = vectorData1;
	this._numUsedVertexConstants = 9;
};
$hxClasses["away3d.materials.passes.DistanceMapPass"] = away3d.materials.passes.DistanceMapPass;
away3d.materials.passes.DistanceMapPass.__name__ = ["away3d","materials","passes","DistanceMapPass"];
away3d.materials.passes.DistanceMapPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.DistanceMapPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1;
		if(value == this._alphaThreshold) return value;
		if(value == 0 || this._alphaThreshold == 0) this.invalidateShaderProgram();
		this._alphaThreshold = value;
		var this1 = this._fragmentData;
		if(!this1.fixed) {
			if(8 >= this1.length) this1.length = 9;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[8] = this._alphaThreshold;
		return value;
	}
	,get_alphaMask: function() {
		return this._alphaMask;
	}
	,set_alphaMask: function(value) {
		this._alphaMask = value;
		return value;
	}
	,getVertexCode: function() {
		var code;
		code = "m44 op, vt0, vc0\t\t\n" + "m44 vt1, vt0, vc5\t\t\n" + "sub v0, vt1, vc9\t\t\n";
		if(this._alphaThreshold > 0) {
			code += "mov v1, va1\n";
			this._numUsedTextures = 1;
			this._numUsedStreams = 2;
		} else {
			this._numUsedTextures = 0;
			this._numUsedStreams = 1;
		}
		return code;
	}
	,getFragmentCode: function(animationCode) {
		var code;
		var wrap;
		if(this._repeat) wrap = "wrap"; else wrap = "clamp";
		var filter;
		if(this._smooth) if(this._mipmap) filter = "linear,miplinear"; else filter = "linear"; else if(this._mipmap) filter = "nearest,mipnearest"; else filter = "nearest";
		code = "dp3 ft2.z, v0.xyz, v0.xyz\t\n" + "mul ft0, fc0, ft2.z\t\n" + "frc ft0, ft0\t\t\t\n" + "mul ft1, ft0.yzww, fc1\t\n";
		if(this._alphaThreshold > 0) {
			var format;
			var _sw1_ = this._alphaMask.get_format();
			switch(_sw1_[1]) {
			case 1:
				format = "dxt1,";
				break;
			case 2:
				format = "dxt5,";
				break;
			default:
				format = "";
			}
			code += "tex ft3, v1, fs0 <2d," + filter + "," + format + wrap + ">\n" + "sub ft3.w, ft3.w, fc2.x\n" + "kil ft3.w\n";
		}
		code += "sub oc, ft0, ft1\t\t\n";
		return code;
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var context = stage3DProxy._context3D;
		var pos = camera.get_scenePosition();
		var this1 = this._vertexData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = pos.x;
		var this3 = this._vertexData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = pos.y;
		var this5 = this._vertexData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = pos.z;
		var this7 = this._vertexData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = 1;
		var sceneTransform = renderable.getRenderSceneTransform(camera);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,5,sceneTransform,true);
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,9,(function($this) {
			var $r;
			var this9 = $this._vertexData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this9.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this9.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this)),1);
		if(this._alphaThreshold > 0) renderable.activateUVBuffer(1,stage3DProxy);
		var matrix = away3d.core.math.Matrix3DUtils.get_CALCULATION_MATRIX();
		matrix.copyFrom(sceneTransform);
		matrix.append(viewProjection);
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,matrix,true);
		renderable.activateVertexBuffer(0,stage3DProxy);
		context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		var f = camera.get_lens().get_far();
		f = 1 / (2 * f * f);
		var this1 = this._fragmentData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = f;
		var this3 = this._fragmentData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = 255.0 * f;
		var this5 = this._fragmentData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = 65025.0 * f;
		var this7 = this._fragmentData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = 16581375.0 * f;
		if(this._alphaThreshold > 0) {
			context.setTextureAt(0,this._alphaMask.getTextureForStage3D(stage3DProxy));
			context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
				var $r;
				var this9 = $this._fragmentData;
				var value = new Array();
				{
					var _g1 = 0;
					var _g = this9.data.length;
					while(_g1 < _g) {
						var i = _g1++;
						value.push(this9.data[i]);
					}
				}
				$r = value;
				return $r;
			}(this)),3);
		} else context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.FRAGMENT,0,(function($this) {
			var $r;
			var this10 = $this._fragmentData;
			var value1 = new Array();
			{
				var _g11 = 0;
				var _g2 = this10.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value1.push(this10.data[i1]);
				}
			}
			$r = value1;
			return $r;
		}(this)),2);
	}
	,__class__: away3d.materials.passes.DistanceMapPass
	,__properties__: $extend(away3d.materials.passes.MaterialPassBase.prototype.__properties__,{set_alphaMask:"set_alphaMask",get_alphaMask:"get_alphaMask",set_alphaThreshold:"set_alphaThreshold",get_alphaThreshold:"get_alphaThreshold"})
});
away3d.materials.passes.SegmentPass = function(thickness) {
	this._constants = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),4,0);
	this._calcMatrix = new openfl.geom.Matrix3D();
	this._thickness = thickness;
	var this3 = this._constants;
	if(!this3.fixed) {
		if(1 >= this3.length) this3.length = 2;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
	}
	this3.data[1] = 0.00392156862745098;
	away3d.materials.passes.MaterialPassBase.call(this);
};
$hxClasses["away3d.materials.passes.SegmentPass"] = away3d.materials.passes.SegmentPass;
away3d.materials.passes.SegmentPass.__name__ = ["away3d","materials","passes","SegmentPass"];
away3d.materials.passes.SegmentPass.__super__ = away3d.materials.passes.MaterialPassBase;
away3d.materials.passes.SegmentPass.prototype = $extend(away3d.materials.passes.MaterialPassBase.prototype,{
	getVertexCode: function() {
		return "m44 vt0, va0, vc8\t\t\t\n" + "m44 vt1, va1, vc8\t\t\t\n" + "sub vt2, vt1, vt0 \t\t\t\n" + "slt vt5.x, vt0.z, vc7.z\t\t\t\n" + "sub vt5.y, vc5.x, vt5.x\t\t\t\n" + "add vt4.x, vt0.z, vc7.z\t\t\t\n" + "sub vt4.y, vt0.z, vt1.z\t\t\t\n" + "seq vt4.z, vt4.y vc6.x\t\t\t\n" + "add vt4.y, vt4.y, vt4.z\t\t\t\n" + "div vt4.z, vt4.x, vt4.y\t\t\t\n" + "mul vt4.xyz, vt4.zzz, vt2.xyz\t\n" + "add vt3.xyz, vt0.xyz, vt4.xyz\t\n" + "mov vt3.w, vc5.x\t\t\t\n" + "mul vt0, vt0, vt5.yyyy\t\t\t\n" + "mul vt3, vt3, vt5.xxxx\t\t\t\n" + "add vt0, vt0, vt3\t\t\t\t\n" + "sub vt2, vt1, vt0 \t\t\t\n" + "nrm vt2.xyz, vt2.xyz\t\t\t\n" + "nrm vt5.xyz, vt0.xyz\t\t\t\n" + "mov vt5.w, vc5.x\t\t\t\t\n" + "crs vt3.xyz, vt2, vt5\t\t\t\n" + "nrm vt3.xyz, vt3.xyz\t\t\t\n" + "mul vt3.xyz, vt3.xyz, va2.xxx\t\n" + "mov vt3.w, vc5.x\t\t\t\n" + "dp3 vt4.x, vt0, vc6\t\t\t\n" + "mul vt4.x, vt4.x, vc7.x\t\t\t\n" + "mul vt3.xyz, vt3.xyz, vt4.xxx\t\n" + "add vt0.xyz, vt0.xyz, vt3.xyz\t\n" + "m44 op, vt0, vc0\t\t\t\n" + "mov v0, va3\t\t\t\t\n";
	}
	,getFragmentCode: function(animationCode) {
		return "mov oc, v0\n";
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var context = stage3DProxy._context3D;
		this._calcMatrix.copyFrom(renderable.get_sourceEntity().get_sceneTransform());
		this._calcMatrix.append(camera.get_inverseSceneTransform());
		var subSetCount = (js.Boot.__cast(renderable , away3d.entities.SegmentSet)).get_subSetCount();
		if((js.Boot.__cast(renderable , away3d.entities.SegmentSet)).get_hasData()) {
			var i = 0;
			while(i < subSetCount) {
				renderable.activateVertexBuffer(i,stage3DProxy);
				context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,8,this._calcMatrix,true);
				context.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
				++i;
			}
		}
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d.materials.passes.MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(stage3DProxy.get_scissorRect() != null) {
			var this1 = this._constants;
			var value = this._thickness / Math.min(stage3DProxy.get_scissorRect().width,stage3DProxy.get_scissorRect().height);
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = value;
		} else {
			var this3 = this._constants;
			var value1 = this._thickness / Math.min(stage3DProxy.get_width(),stage3DProxy.get_height());
			if(!this3.fixed) {
				if(0 >= this3.length) this3.length = 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[0] = value1;
		}
		var this5 = this._constants;
		var value2 = camera.get_lens().get_near();
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = value2;
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,5,(function($this) {
			var $r;
			var this7 = away3d.materials.passes.SegmentPass.ONE_VECTOR;
			var value3 = new Array();
			{
				var _g1 = 0;
				var _g = this7.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value3.push(this7.data[i]);
				}
			}
			$r = value3;
			return $r;
		}(this)));
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,6,(function($this) {
			var $r;
			var this8 = away3d.materials.passes.SegmentPass.FRONT_VECTOR;
			var value4 = new Array();
			{
				var _g11 = 0;
				var _g2 = this8.data.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					value4.push(this8.data[i1]);
				}
			}
			$r = value4;
			return $r;
		}(this)));
		context.setProgramConstantsFromVector(openfl.display3D.Context3DProgramType.VERTEX,7,(function($this) {
			var $r;
			var this9 = $this._constants;
			var value5 = new Array();
			{
				var _g12 = 0;
				var _g3 = this9.data.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					value5.push(this9.data[i2]);
				}
			}
			$r = value5;
			return $r;
		}(this)));
		context.setProgramConstantsFromMatrix(openfl.display3D.Context3DProgramType.VERTEX,0,camera.get_lens().get_matrix(),true);
	}
	,deactivate: function(stage3DProxy) {
		var context = stage3DProxy._context3D;
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
		context.setVertexBufferAt(2,null);
		context.setVertexBufferAt(3,null);
	}
	,__class__: away3d.materials.passes.SegmentPass
});
away3d.materials.passes.SuperShaderPass = function(material) {
	this._includeCasters = true;
	away3d.materials.passes.CompiledPass.call(this,material);
	this._needFragmentAnimation = true;
};
$hxClasses["away3d.materials.passes.SuperShaderPass"] = away3d.materials.passes.SuperShaderPass;
away3d.materials.passes.SuperShaderPass.__name__ = ["away3d","materials","passes","SuperShaderPass"];
away3d.materials.passes.SuperShaderPass.__super__ = away3d.materials.passes.CompiledPass;
away3d.materials.passes.SuperShaderPass.prototype = $extend(away3d.materials.passes.CompiledPass.prototype,{
	createCompiler: function(profile) {
		return new away3d.materials.compilation.SuperShaderCompiler(profile);
	}
	,get_includeCasters: function() {
		return this._includeCasters;
	}
	,set_includeCasters: function(value) {
		if(this._includeCasters == value) return this._includeCasters;
		this._includeCasters = value;
		this.invalidateShaderProgram();
		return this._includeCasters;
	}
	,get_colorTransform: function() {
		if(this._methodSetup.get_colorTransformMethod() != null) return this._methodSetup._colorTransformMethod.get_colorTransform(); else return null;
	}
	,set_colorTransform: function(value) {
		if(value != null) {
			if(this.get_colorTransformMethod() == null) this.set_colorTransformMethod(new away3d.materials.methods.ColorTransformMethod());
			this._methodSetup._colorTransformMethod.set_colorTransform(value);
		} else if(value == null) {
			if(this._methodSetup._colorTransformMethod != null) this.set_colorTransformMethod(null);
			this.set_colorTransformMethod(this._methodSetup._colorTransformMethod = null);
		}
		return value;
	}
	,get_colorTransformMethod: function() {
		return this._methodSetup.get_colorTransformMethod();
	}
	,set_colorTransformMethod: function(value) {
		this._methodSetup.set_colorTransformMethod(value);
		return value;
	}
	,addMethod: function(method) {
		this._methodSetup.addMethod(method);
	}
	,get_numMethods: function() {
		return this._methodSetup.get_numMethods();
	}
	,hasMethod: function(method) {
		return this._methodSetup.hasMethod(method);
	}
	,getMethodAt: function(index) {
		return this._methodSetup.getMethodAt(index);
	}
	,addMethodAt: function(method,index) {
		this._methodSetup.addMethodAt(method,index);
	}
	,removeMethod: function(method) {
		this._methodSetup.removeMethod(method);
	}
	,updateLights: function() {
		away3d.materials.passes.CompiledPass.prototype.updateLights.call(this);
		if(this._lightPicker != null && !this._ignoreLights) {
			this._numPointLights = this._lightPicker.get_numPointLights();
			this._numDirectionalLights = this._lightPicker.get_numDirectionalLights();
			this._numLightProbes = this._lightPicker.get_numLightProbes();
			if(this._includeCasters) {
				this._numPointLights += this._lightPicker.get_numCastingPointLights();
				this._numDirectionalLights += this._lightPicker.get_numCastingDirectionalLights();
			}
		} else {
			this._numPointLights = 0;
			this._numDirectionalLights = 0;
			this._numLightProbes = 0;
		}
		this.invalidateShaderProgram();
	}
	,activate: function(stage3DProxy,camera) {
		away3d.materials.passes.CompiledPass.prototype.activate.call(this,stage3DProxy,camera);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.activate(this._methodSetup._colorTransformMethodVO,stage3DProxy);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			var set = methods[i];
			set.method.activate(set.data,stage3DProxy);
		}
		if(this._cameraPositionIndex >= 0) {
			var pos = camera.get_scenePosition();
			var this1 = this._vertexConstantData;
			var key = this._cameraPositionIndex;
			if(!this1.fixed) {
				if(key >= this1.length) this1.length = key + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[key] = pos.x;
			var this3 = this._vertexConstantData;
			var key1 = this._cameraPositionIndex + 1;
			if(!this3.fixed) {
				if(key1 >= this3.length) this3.length = key1 + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[key1] = pos.y;
			var this5 = this._vertexConstantData;
			var key2 = this._cameraPositionIndex + 2;
			if(!this5.fixed) {
				if(key2 >= this5.length) this5.length = key2 + 1;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[key2] = pos.z;
		}
	}
	,deactivate: function(stage3DProxy) {
		away3d.materials.passes.CompiledPass.prototype.deactivate.call(this,stage3DProxy);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.deactivate(this._methodSetup._colorTransformMethodVO,stage3DProxy);
		var set;
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			set = methods[i1];
			set.method.deactivate(set.data,stage3DProxy);
		}
	}
	,addPassesFromMethods: function() {
		away3d.materials.passes.CompiledPass.prototype.addPassesFromMethods.call(this);
		if(this._methodSetup._colorTransformMethod != null) this.addPasses(this._methodSetup._colorTransformMethod.get_passes());
		var methods = this._methodSetup._methods;
		var i = 0;
		var _g1 = 0;
		var _g = methods.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.addPasses(methods[i1].method.get_passes());
		}
	}
	,usesProbesForSpecular: function() {
		return this._numLightProbes > 0 && (this._specularLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,usesProbesForDiffuse: function() {
		return this._numLightProbes > 0 && (this._diffuseLightSources & away3d.materials.LightSources.PROBES) != 0;
	}
	,updateMethodConstants: function() {
		away3d.materials.passes.CompiledPass.prototype.updateMethodConstants.call(this);
		if(this._methodSetup._colorTransformMethod != null) this._methodSetup._colorTransformMethod.initConstants(this._methodSetup._colorTransformMethodVO);
		var methods = this._methodSetup._methods;
		var len = methods.length;
		var i = 0;
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			methods[i1].method.initConstants(methods[i1].data);
		}
	}
	,updateLightConstants: function() {
		var dirLight;
		var pointLight;
		var i;
		var k;
		var len;
		var dirPos;
		var total = 0;
		var numLightTypes;
		if(this._includeCasters) numLightTypes = 2; else numLightTypes = 1;
		k = this._lightFragmentConstantIndex;
		var castVal;
		var _g = 0;
		while(_g < numLightTypes) {
			var castVal1 = _g++;
			var dirLights;
			if(castVal1 != 0) dirLights = this._lightPicker.get_castingDirectionalLights(); else dirLights = this._lightPicker.get_directionalLights();
			len = dirLights.length;
			total += len;
			var _g1 = 0;
			while(_g1 < len) {
				var i1 = _g1++;
				dirLight = dirLights[i1];
				dirPos = dirLight.get_sceneDirection();
				this._ambientLightR += dirLight._ambientR;
				this._ambientLightG += dirLight._ambientG;
				this._ambientLightB += dirLight._ambientB;
				var this1 = this._fragmentConstantData;
				var key = k++;
				if(!this1.fixed) {
					if(key >= this1.length) this1.length = key + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[key] = -dirPos.x;
				var this3 = this._fragmentConstantData;
				var key1 = k++;
				if(!this3.fixed) {
					if(key1 >= this3.length) this3.length = key1 + 1;
					if(this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
						this3.data = data1;
					}
				}
				this3.data[key1] = -dirPos.y;
				var this5 = this._fragmentConstantData;
				var key2 = k++;
				if(!this5.fixed) {
					if(key2 >= this5.length) this5.length = key2 + 1;
					if(this5.data.length < this5.length) {
						var data2;
						var this6;
						this6 = new Array(this5.data.length + 10);
						data2 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
						this5.data = data2;
					}
				}
				this5.data[key2] = -dirPos.z;
				var this7 = this._fragmentConstantData;
				var key3 = k++;
				if(!this7.fixed) {
					if(key3 >= this7.length) this7.length = key3 + 1;
					if(this7.data.length < this7.length) {
						var data3;
						var this8;
						this8 = new Array(this7.data.length + 10);
						data3 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
						this7.data = data3;
					}
				}
				this7.data[key3] = 1;
				var this9 = this._fragmentConstantData;
				var key4 = k++;
				if(!this9.fixed) {
					if(key4 >= this9.length) this9.length = key4 + 1;
					if(this9.data.length < this9.length) {
						var data4;
						var this10;
						this10 = new Array(this9.data.length + 10);
						data4 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
						this9.data = data4;
					}
				}
				this9.data[key4] = dirLight._diffuseR;
				var this11 = this._fragmentConstantData;
				var key5 = k++;
				if(!this11.fixed) {
					if(key5 >= this11.length) this11.length = key5 + 1;
					if(this11.data.length < this11.length) {
						var data5;
						var this12;
						this12 = new Array(this11.data.length + 10);
						data5 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
						this11.data = data5;
					}
				}
				this11.data[key5] = dirLight._diffuseG;
				var this13 = this._fragmentConstantData;
				var key6 = k++;
				if(!this13.fixed) {
					if(key6 >= this13.length) this13.length = key6 + 1;
					if(this13.data.length < this13.length) {
						var data6;
						var this14;
						this14 = new Array(this13.data.length + 10);
						data6 = this14;
						haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
						this13.data = data6;
					}
				}
				this13.data[key6] = dirLight._diffuseB;
				var this15 = this._fragmentConstantData;
				var key7 = k++;
				if(!this15.fixed) {
					if(key7 >= this15.length) this15.length = key7 + 1;
					if(this15.data.length < this15.length) {
						var data7;
						var this16;
						this16 = new Array(this15.data.length + 10);
						data7 = this16;
						haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
						this15.data = data7;
					}
				}
				this15.data[key7] = 1;
				var this17 = this._fragmentConstantData;
				var key8 = k++;
				if(!this17.fixed) {
					if(key8 >= this17.length) this17.length = key8 + 1;
					if(this17.data.length < this17.length) {
						var data8;
						var this18;
						this18 = new Array(this17.data.length + 10);
						data8 = this18;
						haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
						this17.data = data8;
					}
				}
				this17.data[key8] = dirLight._specularR;
				var this19 = this._fragmentConstantData;
				var key9 = k++;
				if(!this19.fixed) {
					if(key9 >= this19.length) this19.length = key9 + 1;
					if(this19.data.length < this19.length) {
						var data9;
						var this20;
						this20 = new Array(this19.data.length + 10);
						data9 = this20;
						haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
						this19.data = data9;
					}
				}
				this19.data[key9] = dirLight._specularG;
				var this21 = this._fragmentConstantData;
				var key10 = k++;
				if(!this21.fixed) {
					if(key10 >= this21.length) this21.length = key10 + 1;
					if(this21.data.length < this21.length) {
						var data10;
						var this22;
						this22 = new Array(this21.data.length + 10);
						data10 = this22;
						haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
						this21.data = data10;
					}
				}
				this21.data[key10] = dirLight._specularB;
				var this23 = this._fragmentConstantData;
				var key11 = k++;
				if(!this23.fixed) {
					if(key11 >= this23.length) this23.length = key11 + 1;
					if(this23.data.length < this23.length) {
						var data11;
						var this24;
						this24 = new Array(this23.data.length + 10);
						data11 = this24;
						haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
						this23.data = data11;
					}
				}
				this23.data[key11] = 1;
			}
		}
		if(this._numDirectionalLights > total) {
			i = k + (this._numDirectionalLights - total) * 12;
			while((function($this) {
				var $r;
				var aNeg = i < 0;
				var bNeg = k < 0;
				$r = aNeg != bNeg?aNeg:i > k;
				return $r;
			}(this))) {
				var this25 = this._fragmentConstantData;
				var key12 = k++;
				if(!this25.fixed) {
					if(key12 >= this25.length) this25.length = key12 + 1;
					if(this25.data.length < this25.length) {
						var data12;
						var this26;
						this26 = new Array(this25.data.length + 10);
						data12 = this26;
						haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
						this25.data = data12;
					}
				}
				this25.data[key12] = 0;
			}
		}
		total = 0;
		var _g2 = 0;
		while(_g2 < numLightTypes) {
			var castVal2 = _g2++;
			var pointLights;
			if(castVal2 != 0) pointLights = this._lightPicker.get_castingPointLights(); else pointLights = this._lightPicker.get_pointLights();
			len = pointLights.length;
			var _g11 = 0;
			while(_g11 < len) {
				var i2 = _g11++;
				pointLight = pointLights[i2];
				dirPos = pointLight.get_scenePosition();
				this._ambientLightR += pointLight._ambientR;
				this._ambientLightG += pointLight._ambientG;
				this._ambientLightB += pointLight._ambientB;
				var this27 = this._fragmentConstantData;
				var key13 = k++;
				if(!this27.fixed) {
					if(key13 >= this27.length) this27.length = key13 + 1;
					if(this27.data.length < this27.length) {
						var data13;
						var this28;
						this28 = new Array(this27.data.length + 10);
						data13 = this28;
						haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
						this27.data = data13;
					}
				}
				this27.data[key13] = dirPos.x;
				var this29 = this._fragmentConstantData;
				var key14 = k++;
				if(!this29.fixed) {
					if(key14 >= this29.length) this29.length = key14 + 1;
					if(this29.data.length < this29.length) {
						var data14;
						var this30;
						this30 = new Array(this29.data.length + 10);
						data14 = this30;
						haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
						this29.data = data14;
					}
				}
				this29.data[key14] = dirPos.y;
				var this31 = this._fragmentConstantData;
				var key15 = k++;
				if(!this31.fixed) {
					if(key15 >= this31.length) this31.length = key15 + 1;
					if(this31.data.length < this31.length) {
						var data15;
						var this32;
						this32 = new Array(this31.data.length + 10);
						data15 = this32;
						haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
						this31.data = data15;
					}
				}
				this31.data[key15] = dirPos.z;
				var this33 = this._fragmentConstantData;
				var key16 = k++;
				if(!this33.fixed) {
					if(key16 >= this33.length) this33.length = key16 + 1;
					if(this33.data.length < this33.length) {
						var data16;
						var this34;
						this34 = new Array(this33.data.length + 10);
						data16 = this34;
						haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
						this33.data = data16;
					}
				}
				this33.data[key16] = 1;
				var this35 = this._fragmentConstantData;
				var key17 = k++;
				if(!this35.fixed) {
					if(key17 >= this35.length) this35.length = key17 + 1;
					if(this35.data.length < this35.length) {
						var data17;
						var this36;
						this36 = new Array(this35.data.length + 10);
						data17 = this36;
						haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
						this35.data = data17;
					}
				}
				this35.data[key17] = pointLight._diffuseR;
				var this37 = this._fragmentConstantData;
				var key18 = k++;
				if(!this37.fixed) {
					if(key18 >= this37.length) this37.length = key18 + 1;
					if(this37.data.length < this37.length) {
						var data18;
						var this38;
						this38 = new Array(this37.data.length + 10);
						data18 = this38;
						haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
						this37.data = data18;
					}
				}
				this37.data[key18] = pointLight._diffuseG;
				var this39 = this._fragmentConstantData;
				var key19 = k++;
				if(!this39.fixed) {
					if(key19 >= this39.length) this39.length = key19 + 1;
					if(this39.data.length < this39.length) {
						var data19;
						var this40;
						this40 = new Array(this39.data.length + 10);
						data19 = this40;
						haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
						this39.data = data19;
					}
				}
				this39.data[key19] = pointLight._diffuseB;
				var this41 = this._fragmentConstantData;
				var key20 = k++;
				if(!this41.fixed) {
					if(key20 >= this41.length) this41.length = key20 + 1;
					if(this41.data.length < this41.length) {
						var data20;
						var this42;
						this42 = new Array(this41.data.length + 10);
						data20 = this42;
						haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
						this41.data = data20;
					}
				}
				this41.data[key20] = pointLight._radius * pointLight._radius;
				var this43 = this._fragmentConstantData;
				var key21 = k++;
				if(!this43.fixed) {
					if(key21 >= this43.length) this43.length = key21 + 1;
					if(this43.data.length < this43.length) {
						var data21;
						var this44;
						this44 = new Array(this43.data.length + 10);
						data21 = this44;
						haxe.ds._Vector.Vector_Impl_.blit(this43.data,0,data21,0,this43.data.length);
						this43.data = data21;
					}
				}
				this43.data[key21] = pointLight._specularR;
				var this45 = this._fragmentConstantData;
				var key22 = k++;
				if(!this45.fixed) {
					if(key22 >= this45.length) this45.length = key22 + 1;
					if(this45.data.length < this45.length) {
						var data22;
						var this46;
						this46 = new Array(this45.data.length + 10);
						data22 = this46;
						haxe.ds._Vector.Vector_Impl_.blit(this45.data,0,data22,0,this45.data.length);
						this45.data = data22;
					}
				}
				this45.data[key22] = pointLight._specularG;
				var this47 = this._fragmentConstantData;
				var key23 = k++;
				if(!this47.fixed) {
					if(key23 >= this47.length) this47.length = key23 + 1;
					if(this47.data.length < this47.length) {
						var data23;
						var this48;
						this48 = new Array(this47.data.length + 10);
						data23 = this48;
						haxe.ds._Vector.Vector_Impl_.blit(this47.data,0,data23,0,this47.data.length);
						this47.data = data23;
					}
				}
				this47.data[key23] = pointLight._specularB;
				var this49 = this._fragmentConstantData;
				var key24 = k++;
				if(!this49.fixed) {
					if(key24 >= this49.length) this49.length = key24 + 1;
					if(this49.data.length < this49.length) {
						var data24;
						var this50;
						this50 = new Array(this49.data.length + 10);
						data24 = this50;
						haxe.ds._Vector.Vector_Impl_.blit(this49.data,0,data24,0,this49.data.length);
						this49.data = data24;
					}
				}
				this49.data[key24] = pointLight._fallOffFactor;
			}
		}
		if(this._numPointLights > total) {
			i = k + (total - this._numPointLights) * 12;
			var _g3 = k;
			while(_g3 < i) {
				var k1 = _g3++;
				var this51 = this._fragmentConstantData;
				if(!this51.fixed) {
					if(k1 >= this51.length) this51.length = k1 + 1;
					if(this51.data.length < this51.length) {
						var data25;
						var this52;
						this52 = new Array(this51.data.length + 10);
						data25 = this52;
						haxe.ds._Vector.Vector_Impl_.blit(this51.data,0,data25,0,this51.data.length);
						this51.data = data25;
					}
				}
				this51.data[k1] = 0;
			}
		}
	}
	,updateProbes: function(stage3DProxy) {
		var probe;
		var lightProbes = this._lightPicker.get_lightProbes();
		var weights = this._lightPicker.get_lightProbeWeights();
		var len = lightProbes.length;
		var addDiff = this.usesProbesForDiffuse();
		var addSpec = this._methodSetup._specularMethod != null && this.usesProbesForSpecular();
		var context = stage3DProxy._context3D;
		if(!(addDiff || addSpec)) return;
		var i = 0;
		var _g = 0;
		while(_g < len) {
			var i1 = _g++;
			probe = lightProbes[i1];
			if(addDiff) context.setTextureAt(this._lightProbeDiffuseIndices[i1],probe.get_diffuseMap().getTextureForStage3D(stage3DProxy));
			if(addSpec) context.setTextureAt(this._lightProbeSpecularIndices[i1],probe.get_specularMap().getTextureForStage3D(stage3DProxy));
		}
		var this1 = this._fragmentConstantData;
		var key = this._probeWeightsIndex;
		if(!this1.fixed) {
			if(key >= this1.length) this1.length = key + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[key] = weights[0];
		var this3 = this._fragmentConstantData;
		var key1 = this._probeWeightsIndex + 1;
		if(!this3.fixed) {
			if(key1 >= this3.length) this3.length = key1 + 1;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[key1] = weights[1];
		var this5 = this._fragmentConstantData;
		var key2 = this._probeWeightsIndex + 2;
		if(!this5.fixed) {
			if(key2 >= this5.length) this5.length = key2 + 1;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[key2] = weights[2];
		var this7 = this._fragmentConstantData;
		var key3 = this._probeWeightsIndex + 3;
		if(!this7.fixed) {
			if(key3 >= this7.length) this7.length = key3 + 1;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[key3] = weights[3];
	}
	,get_ignoreLights: function() {
		return this._ignoreLights;
	}
	,set_ignoreLights: function(ignoreLights) {
		this._ignoreLights = ignoreLights;
		return this._ignoreLights;
	}
	,__class__: away3d.materials.passes.SuperShaderPass
	,__properties__: $extend(away3d.materials.passes.CompiledPass.prototype.__properties__,{set_ignoreLights:"set_ignoreLights",get_ignoreLights:"get_ignoreLights",get_numMethods:"get_numMethods",set_colorTransformMethod:"set_colorTransformMethod",get_colorTransformMethod:"get_colorTransformMethod",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_includeCasters:"set_includeCasters",get_includeCasters:"get_includeCasters"})
});
away3d.materials.utils = {};
away3d.materials.utils.DefaultMaterialManager = function() { };
$hxClasses["away3d.materials.utils.DefaultMaterialManager"] = away3d.materials.utils.DefaultMaterialManager;
away3d.materials.utils.DefaultMaterialManager.__name__ = ["away3d","materials","utils","DefaultMaterialManager"];
away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData = null;
away3d.materials.utils.DefaultMaterialManager._defaultMaterial = null;
away3d.materials.utils.DefaultMaterialManager._defaultTexture = null;
away3d.materials.utils.DefaultMaterialManager.getDefaultMaterial = function(renderable) {
	if(away3d.materials.utils.DefaultMaterialManager._defaultTexture == null) away3d.materials.utils.DefaultMaterialManager.createDefaultTexture();
	if(away3d.materials.utils.DefaultMaterialManager._defaultMaterial == null) away3d.materials.utils.DefaultMaterialManager.createDefaultMaterial();
	return away3d.materials.utils.DefaultMaterialManager._defaultMaterial;
};
away3d.materials.utils.DefaultMaterialManager.getDefaultTexture = function(renderable) {
	if(away3d.materials.utils.DefaultMaterialManager._defaultTexture == null) away3d.materials.utils.DefaultMaterialManager.createDefaultTexture();
	return away3d.materials.utils.DefaultMaterialManager._defaultTexture;
};
away3d.materials.utils.DefaultMaterialManager.createDefaultTexture = function() {
	away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData = new openfl.display.BitmapData(8,8,false,0);
	var i = 0;
	var j;
	i = 0;
	while(i < 8) {
		j = 0;
		while(j < 8) {
			if((j & 1 ^ i & 1) == 1) away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData.setPixel(i,j,16777215);
			j++;
		}
		i++;
	}
	away3d.materials.utils.DefaultMaterialManager._defaultTexture = new away3d.textures.BitmapTexture(away3d.materials.utils.DefaultMaterialManager._defaultTextureBitmapData);
	away3d.materials.utils.DefaultMaterialManager._defaultTexture.set_name("defaultTexture");
};
away3d.materials.utils.DefaultMaterialManager.createDefaultMaterial = function() {
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial = new away3d.materials.TextureMaterial(away3d.materials.utils.DefaultMaterialManager._defaultTexture);
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial.set_mipmap(false);
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial.set_smooth(false);
	away3d.materials.utils.DefaultMaterialManager._defaultMaterial.set_name("defaultMaterial");
};
away3d.materials.utils.MipmapGenerator = function() { };
$hxClasses["away3d.materials.utils.MipmapGenerator"] = away3d.materials.utils.MipmapGenerator;
away3d.materials.utils.MipmapGenerator.__name__ = ["away3d","materials","utils","MipmapGenerator"];
away3d.materials.utils.MipmapGenerator.generateMipMaps = function(source,target,mipmap,alpha,side) {
	if(side == null) side = -1;
	if(alpha == null) alpha = false;
	var w = source.width;
	var h = source.height;
	var i = 0;
	var regen = mipmap != null;
	away3d.materials.utils.MipmapGenerator._rect.width = w;
	away3d.materials.utils.MipmapGenerator._rect.height = h;
	while(w >= 1 || h >= 1) {
		mipmap = new openfl.display.BitmapData(w > 1?w:1,h > 1?h:1,alpha,0);
		away3d.materials.utils.MipmapGenerator._matrix.a = away3d.materials.utils.MipmapGenerator._rect.width / source.width;
		away3d.materials.utils.MipmapGenerator._matrix.d = away3d.materials.utils.MipmapGenerator._rect.height / source.height;
		mipmap.draw(source,away3d.materials.utils.MipmapGenerator._matrix,null,null,null,true);
		if(js.Boot.__instanceof(target,openfl.display3D.textures.Texture)) (js.Boot.__cast(target , openfl.display3D.textures.Texture)).uploadFromBitmapData(mipmap,i++); else (js.Boot.__cast(target , openfl.display3D.textures.CubeTexture)).uploadFromBitmapData(mipmap,side,i++);
		w >>= 1;
		h >>= 1;
		if(w > 1) away3d.materials.utils.MipmapGenerator._rect.width = w; else away3d.materials.utils.MipmapGenerator._rect.width = 1;
		if(h > 1) away3d.materials.utils.MipmapGenerator._rect.height = h; else away3d.materials.utils.MipmapGenerator._rect.height = 1;
	}
};
away3d.primitives = {};
away3d.primitives.PrimitiveBase = function() {
	away3d.core.base.Geometry.call(this);
	this._geomDirty = true;
	this._uvDirty = true;
	this._subGeometry = new away3d.core.base.CompactSubGeometry();
	this._subGeometry.set_autoGenerateDummyUVs(false);
	this.addSubGeometry(this._subGeometry);
};
$hxClasses["away3d.primitives.PrimitiveBase"] = away3d.primitives.PrimitiveBase;
away3d.primitives.PrimitiveBase.__name__ = ["away3d","primitives","PrimitiveBase"];
away3d.primitives.PrimitiveBase.__super__ = away3d.core.base.Geometry;
away3d.primitives.PrimitiveBase.prototype = $extend(away3d.core.base.Geometry.prototype,{
	get_subGeometries: function() {
		if(this._geomDirty) this.updateGeometry();
		if(this._uvDirty) this.updateUVs();
		return away3d.core.base.Geometry.prototype.get_subGeometries.call(this);
	}
	,clone: function() {
		if(this._geomDirty) this.updateGeometry();
		if(this._uvDirty) this.updateUVs();
		return away3d.core.base.Geometry.prototype.clone.call(this);
	}
	,scale: function(scale) {
		if(this._geomDirty) this.updateGeometry();
		away3d.core.base.Geometry.prototype.scale.call(this,scale);
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) scaleV = 1;
		if(scaleU == null) scaleU = 1;
		if(this._uvDirty) this.updateUVs();
		away3d.core.base.Geometry.prototype.scaleUV.call(this,scaleU,scaleV);
	}
	,applyTransformation: function(transform) {
		if(this._geomDirty) this.updateGeometry();
		away3d.core.base.Geometry.prototype.applyTransformation.call(this,transform);
	}
	,buildGeometry: function(target) {
		throw new away3d.errors.AbstractMethodError();
	}
	,buildUVs: function(target) {
		throw new away3d.errors.AbstractMethodError();
	}
	,invalidateGeometry: function() {
		this._geomDirty = true;
	}
	,invalidateUVs: function() {
		this._uvDirty = true;
	}
	,updateGeometry: function() {
		this.buildGeometry(this._subGeometry);
		this._geomDirty = false;
	}
	,updateUVs: function() {
		this.buildUVs(this._subGeometry);
		this._uvDirty = false;
	}
	,validate: function() {
		if(this._geomDirty) this.updateGeometry();
		if(this._uvDirty) this.updateUVs();
	}
	,__class__: away3d.primitives.PrimitiveBase
});
away3d.primitives.CubeGeometry = function(width,height,depth,segmentsW,segmentsH,segmentsD,tile6) {
	if(tile6 == null) tile6 = true;
	if(segmentsD == null) segmentsD = 1;
	if(segmentsH == null) segmentsH = 1;
	if(segmentsW == null) segmentsW = 1;
	if(depth == null) depth = 100;
	if(height == null) height = 100;
	if(width == null) width = 100;
	away3d.primitives.PrimitiveBase.call(this);
	this._width = width;
	this._height = height;
	this._depth = depth;
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
	this._segmentsD = segmentsD;
	this._tile6 = tile6;
};
$hxClasses["away3d.primitives.CubeGeometry"] = away3d.primitives.CubeGeometry;
away3d.primitives.CubeGeometry.__name__ = ["away3d","primitives","CubeGeometry"];
away3d.primitives.CubeGeometry.__super__ = away3d.primitives.PrimitiveBase;
away3d.primitives.CubeGeometry.prototype = $extend(away3d.primitives.PrimitiveBase.prototype,{
	get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		this._depth = value;
		this.invalidateGeometry();
		return value;
	}
	,get_tile6: function() {
		return this._tile6;
	}
	,set_tile6: function(value) {
		this._tile6 = value;
		this.invalidateUVs();
		return value;
	}
	,get_segmentsW: function() {
		return this._segmentsW;
	}
	,set_segmentsW: function(value) {
		this._segmentsW = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsH: function() {
		return this._segmentsH;
	}
	,set_segmentsH: function(value) {
		this._segmentsH = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsD: function() {
		return this._segmentsD;
	}
	,set_segmentsD: function(value) {
		this._segmentsD = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,buildGeometry: function(target) {
		var data;
		var indices;
		var tl = 0;
		var tr = 0;
		var bl = 0;
		var br = 0;
		var i = 0;
		var j = 0;
		var inc = 0;
		var vidx = 0;
		var fidx = 0;
		var hw = 0;
		var hh = 0;
		var hd = 0;
		var dw = 0;
		var dh = 0;
		var dd = 0;
		var outer_pos;
		var numVerts = ((this._segmentsW + 1) * (this._segmentsH + 1) + (this._segmentsW + 1) * (this._segmentsD + 1) + (this._segmentsH + 1) * (this._segmentsD + 1)) * 2 | 0;
		var stride = target.get_vertexStride();
		var skip = stride - 9;
		if(numVerts == target.get_numVertices()) {
			data = target.get_vertexData();
			indices = target.get_indexData();
			if(indices == null) indices = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this1;
				this1 = new openfl.VectorData();
				{
					var this2;
					this2 = new Array(0);
					this1.data = this2;
				}
				this1.length = 0;
				this1.fixed = false;
				$r = this1;
				return $r;
			}(this))),(this._segmentsW * this._segmentsH + this._segmentsW * this._segmentsD + this._segmentsH * this._segmentsD) * 12 | 0,0);
		} else {
			data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this3;
				this3 = new openfl.VectorData();
				{
					var this4;
					this4 = new Array(0);
					this3.data = this4;
				}
				this3.length = 0;
				this3.fixed = false;
				$r = this3;
				return $r;
			}(this))),numVerts * stride,0);
			indices = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this5;
				this5 = new openfl.VectorData();
				{
					var this6;
					this6 = new Array(0);
					this5.data = this6;
				}
				this5.length = 0;
				this5.fixed = false;
				$r = this5;
				return $r;
			}(this))),(this._segmentsW * this._segmentsH + this._segmentsW * this._segmentsD + this._segmentsH * this._segmentsD) * 12 | 0,0);
			this.invalidateUVs();
		}
		vidx = target.get_vertexOffset();
		fidx = 0;
		hw = this._width / 2;
		hh = this._height / 2;
		hd = this._depth / 2;
		dw = this._width / this._segmentsW;
		dh = this._height / this._segmentsH;
		dd = this._depth / this._segmentsD;
		i = 0;
		while(i <= this._segmentsW) {
			outer_pos = -hw + i * dw;
			j = 0;
			while(j <= this._segmentsH) {
				var key = vidx++;
				if(!data.fixed) {
					if(key >= data.length) data.length = key + 1;
					if(data.data.length < data.length) {
						var data1;
						var this7;
						this7 = new Array(data.data.length + 10);
						data1 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
						data.data = data1;
					}
				}
				data.data[key] = outer_pos;
				var key1 = vidx++;
				if(!data.fixed) {
					if(key1 >= data.length) data.length = key1 + 1;
					if(data.data.length < data.length) {
						var data2;
						var this8;
						this8 = new Array(data.data.length + 10);
						data2 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
						data.data = data2;
					}
				}
				data.data[key1] = -hh + j * dh;
				var key2 = vidx++;
				if(!data.fixed) {
					if(key2 >= data.length) data.length = key2 + 1;
					if(data.data.length < data.length) {
						var data3;
						var this9;
						this9 = new Array(data.data.length + 10);
						data3 = this9;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
						data.data = data3;
					}
				}
				data.data[key2] = -hd;
				var key3 = vidx++;
				if(!data.fixed) {
					if(key3 >= data.length) data.length = key3 + 1;
					if(data.data.length < data.length) {
						var data4;
						var this10;
						this10 = new Array(data.data.length + 10);
						data4 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
						data.data = data4;
					}
				}
				data.data[key3] = 0;
				var key4 = vidx++;
				if(!data.fixed) {
					if(key4 >= data.length) data.length = key4 + 1;
					if(data.data.length < data.length) {
						var data5;
						var this11;
						this11 = new Array(data.data.length + 10);
						data5 = this11;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data5,0,data.data.length);
						data.data = data5;
					}
				}
				data.data[key4] = 0;
				var key5 = vidx++;
				if(!data.fixed) {
					if(key5 >= data.length) data.length = key5 + 1;
					if(data.data.length < data.length) {
						var data6;
						var this12;
						this12 = new Array(data.data.length + 10);
						data6 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data6,0,data.data.length);
						data.data = data6;
					}
				}
				data.data[key5] = -1;
				var key6 = vidx++;
				if(!data.fixed) {
					if(key6 >= data.length) data.length = key6 + 1;
					if(data.data.length < data.length) {
						var data7;
						var this13;
						this13 = new Array(data.data.length + 10);
						data7 = this13;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data7,0,data.data.length);
						data.data = data7;
					}
				}
				data.data[key6] = 1;
				var key7 = vidx++;
				if(!data.fixed) {
					if(key7 >= data.length) data.length = key7 + 1;
					if(data.data.length < data.length) {
						var data8;
						var this14;
						this14 = new Array(data.data.length + 10);
						data8 = this14;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data8,0,data.data.length);
						data.data = data8;
					}
				}
				data.data[key7] = 0;
				var key8 = vidx++;
				if(!data.fixed) {
					if(key8 >= data.length) data.length = key8 + 1;
					if(data.data.length < data.length) {
						var data9;
						var this15;
						this15 = new Array(data.data.length + 10);
						data9 = this15;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data9,0,data.data.length);
						data.data = data9;
					}
				}
				data.data[key8] = 0;
				vidx += skip;
				var key9 = vidx++;
				if(!data.fixed) {
					if(key9 >= data.length) data.length = key9 + 1;
					if(data.data.length < data.length) {
						var data10;
						var this16;
						this16 = new Array(data.data.length + 10);
						data10 = this16;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data10,0,data.data.length);
						data.data = data10;
					}
				}
				data.data[key9] = outer_pos;
				var key10 = vidx++;
				if(!data.fixed) {
					if(key10 >= data.length) data.length = key10 + 1;
					if(data.data.length < data.length) {
						var data11;
						var this17;
						this17 = new Array(data.data.length + 10);
						data11 = this17;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data11,0,data.data.length);
						data.data = data11;
					}
				}
				data.data[key10] = -hh + j * dh;
				var key11 = vidx++;
				if(!data.fixed) {
					if(key11 >= data.length) data.length = key11 + 1;
					if(data.data.length < data.length) {
						var data12;
						var this18;
						this18 = new Array(data.data.length + 10);
						data12 = this18;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data12,0,data.data.length);
						data.data = data12;
					}
				}
				data.data[key11] = hd;
				var key12 = vidx++;
				if(!data.fixed) {
					if(key12 >= data.length) data.length = key12 + 1;
					if(data.data.length < data.length) {
						var data13;
						var this19;
						this19 = new Array(data.data.length + 10);
						data13 = this19;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data13,0,data.data.length);
						data.data = data13;
					}
				}
				data.data[key12] = 0;
				var key13 = vidx++;
				if(!data.fixed) {
					if(key13 >= data.length) data.length = key13 + 1;
					if(data.data.length < data.length) {
						var data14;
						var this20;
						this20 = new Array(data.data.length + 10);
						data14 = this20;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data14,0,data.data.length);
						data.data = data14;
					}
				}
				data.data[key13] = 0;
				var key14 = vidx++;
				if(!data.fixed) {
					if(key14 >= data.length) data.length = key14 + 1;
					if(data.data.length < data.length) {
						var data15;
						var this21;
						this21 = new Array(data.data.length + 10);
						data15 = this21;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data15,0,data.data.length);
						data.data = data15;
					}
				}
				data.data[key14] = 1;
				var key15 = vidx++;
				if(!data.fixed) {
					if(key15 >= data.length) data.length = key15 + 1;
					if(data.data.length < data.length) {
						var data16;
						var this22;
						this22 = new Array(data.data.length + 10);
						data16 = this22;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data16,0,data.data.length);
						data.data = data16;
					}
				}
				data.data[key15] = -1;
				var key16 = vidx++;
				if(!data.fixed) {
					if(key16 >= data.length) data.length = key16 + 1;
					if(data.data.length < data.length) {
						var data17;
						var this23;
						this23 = new Array(data.data.length + 10);
						data17 = this23;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data17,0,data.data.length);
						data.data = data17;
					}
				}
				data.data[key16] = 0;
				var key17 = vidx++;
				if(!data.fixed) {
					if(key17 >= data.length) data.length = key17 + 1;
					if(data.data.length < data.length) {
						var data18;
						var this24;
						this24 = new Array(data.data.length + 10);
						data18 = this24;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data18,0,data.data.length);
						data.data = data18;
					}
				}
				data.data[key17] = 0;
				vidx += skip;
				if(i > 0 && j > 0) {
					tl = 2 * ((i - 1) * (this._segmentsH + 1) + (j - 1)) | 0;
					tr = 2 * (i * (this._segmentsH + 1) + (j - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					var key18 = fidx++;
					if(!indices.fixed) {
						if(key18 >= indices.length) indices.length = key18 + 1;
						if(indices.data.length < indices.length) {
							var data19;
							var this25;
							this25 = new Array(indices.data.length + 10);
							data19 = this25;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data19,0,indices.data.length);
							indices.data = data19;
						}
					}
					indices.data[key18] = tl;
					var key19 = fidx++;
					if(!indices.fixed) {
						if(key19 >= indices.length) indices.length = key19 + 1;
						if(indices.data.length < indices.length) {
							var data20;
							var this26;
							this26 = new Array(indices.data.length + 10);
							data20 = this26;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data20,0,indices.data.length);
							indices.data = data20;
						}
					}
					indices.data[key19] = bl;
					var key20 = fidx++;
					if(!indices.fixed) {
						if(key20 >= indices.length) indices.length = key20 + 1;
						if(indices.data.length < indices.length) {
							var data21;
							var this27;
							this27 = new Array(indices.data.length + 10);
							data21 = this27;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data21,0,indices.data.length);
							indices.data = data21;
						}
					}
					indices.data[key20] = br;
					var key21 = fidx++;
					if(!indices.fixed) {
						if(key21 >= indices.length) indices.length = key21 + 1;
						if(indices.data.length < indices.length) {
							var data22;
							var this28;
							this28 = new Array(indices.data.length + 10);
							data22 = this28;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data22,0,indices.data.length);
							indices.data = data22;
						}
					}
					indices.data[key21] = tl;
					var key22 = fidx++;
					if(!indices.fixed) {
						if(key22 >= indices.length) indices.length = key22 + 1;
						if(indices.data.length < indices.length) {
							var data23;
							var this29;
							this29 = new Array(indices.data.length + 10);
							data23 = this29;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data23,0,indices.data.length);
							indices.data = data23;
						}
					}
					indices.data[key22] = br;
					var key23 = fidx++;
					if(!indices.fixed) {
						if(key23 >= indices.length) indices.length = key23 + 1;
						if(indices.data.length < indices.length) {
							var data24;
							var this30;
							this30 = new Array(indices.data.length + 10);
							data24 = this30;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data24,0,indices.data.length);
							indices.data = data24;
						}
					}
					indices.data[key23] = tr;
					var key24 = fidx++;
					if(!indices.fixed) {
						if(key24 >= indices.length) indices.length = key24 + 1;
						if(indices.data.length < indices.length) {
							var data25;
							var this31;
							this31 = new Array(indices.data.length + 10);
							data25 = this31;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data25,0,indices.data.length);
							indices.data = data25;
						}
					}
					indices.data[key24] = tr + 1;
					var key25 = fidx++;
					if(!indices.fixed) {
						if(key25 >= indices.length) indices.length = key25 + 1;
						if(indices.data.length < indices.length) {
							var data26;
							var this32;
							this32 = new Array(indices.data.length + 10);
							data26 = this32;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data26,0,indices.data.length);
							indices.data = data26;
						}
					}
					indices.data[key25] = br + 1;
					var key26 = fidx++;
					if(!indices.fixed) {
						if(key26 >= indices.length) indices.length = key26 + 1;
						if(indices.data.length < indices.length) {
							var data27;
							var this33;
							this33 = new Array(indices.data.length + 10);
							data27 = this33;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data27,0,indices.data.length);
							indices.data = data27;
						}
					}
					indices.data[key26] = bl + 1;
					var key27 = fidx++;
					if(!indices.fixed) {
						if(key27 >= indices.length) indices.length = key27 + 1;
						if(indices.data.length < indices.length) {
							var data28;
							var this34;
							this34 = new Array(indices.data.length + 10);
							data28 = this34;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data28,0,indices.data.length);
							indices.data = data28;
						}
					}
					indices.data[key27] = tr + 1;
					var key28 = fidx++;
					if(!indices.fixed) {
						if(key28 >= indices.length) indices.length = key28 + 1;
						if(indices.data.length < indices.length) {
							var data29;
							var this35;
							this35 = new Array(indices.data.length + 10);
							data29 = this35;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data29,0,indices.data.length);
							indices.data = data29;
						}
					}
					indices.data[key28] = bl + 1;
					var key29 = fidx++;
					if(!indices.fixed) {
						if(key29 >= indices.length) indices.length = key29 + 1;
						if(indices.data.length < indices.length) {
							var data30;
							var this36;
							this36 = new Array(indices.data.length + 10);
							data30 = this36;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data30,0,indices.data.length);
							indices.data = data30;
						}
					}
					indices.data[key29] = tl + 1;
				}
				j++;
			}
			i++;
		}
		inc += 2 * (this._segmentsW + 1) * (this._segmentsH + 1) | 0;
		i = 0;
		while(i <= this._segmentsW) {
			outer_pos = -hw + i * dw;
			j = 0;
			while(j <= this._segmentsD) {
				var key30 = vidx++;
				if(!data.fixed) {
					if(key30 >= data.length) data.length = key30 + 1;
					if(data.data.length < data.length) {
						var data31;
						var this37;
						this37 = new Array(data.data.length + 10);
						data31 = this37;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data31,0,data.data.length);
						data.data = data31;
					}
				}
				data.data[key30] = outer_pos;
				var key31 = vidx++;
				if(!data.fixed) {
					if(key31 >= data.length) data.length = key31 + 1;
					if(data.data.length < data.length) {
						var data32;
						var this38;
						this38 = new Array(data.data.length + 10);
						data32 = this38;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data32,0,data.data.length);
						data.data = data32;
					}
				}
				data.data[key31] = hh;
				var key32 = vidx++;
				if(!data.fixed) {
					if(key32 >= data.length) data.length = key32 + 1;
					if(data.data.length < data.length) {
						var data33;
						var this39;
						this39 = new Array(data.data.length + 10);
						data33 = this39;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data33,0,data.data.length);
						data.data = data33;
					}
				}
				data.data[key32] = -hd + j * dd;
				var key33 = vidx++;
				if(!data.fixed) {
					if(key33 >= data.length) data.length = key33 + 1;
					if(data.data.length < data.length) {
						var data34;
						var this40;
						this40 = new Array(data.data.length + 10);
						data34 = this40;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data34,0,data.data.length);
						data.data = data34;
					}
				}
				data.data[key33] = 0;
				var key34 = vidx++;
				if(!data.fixed) {
					if(key34 >= data.length) data.length = key34 + 1;
					if(data.data.length < data.length) {
						var data35;
						var this41;
						this41 = new Array(data.data.length + 10);
						data35 = this41;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data35,0,data.data.length);
						data.data = data35;
					}
				}
				data.data[key34] = 1;
				var key35 = vidx++;
				if(!data.fixed) {
					if(key35 >= data.length) data.length = key35 + 1;
					if(data.data.length < data.length) {
						var data36;
						var this42;
						this42 = new Array(data.data.length + 10);
						data36 = this42;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data36,0,data.data.length);
						data.data = data36;
					}
				}
				data.data[key35] = 0;
				var key36 = vidx++;
				if(!data.fixed) {
					if(key36 >= data.length) data.length = key36 + 1;
					if(data.data.length < data.length) {
						var data37;
						var this43;
						this43 = new Array(data.data.length + 10);
						data37 = this43;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data37,0,data.data.length);
						data.data = data37;
					}
				}
				data.data[key36] = 1;
				var key37 = vidx++;
				if(!data.fixed) {
					if(key37 >= data.length) data.length = key37 + 1;
					if(data.data.length < data.length) {
						var data38;
						var this44;
						this44 = new Array(data.data.length + 10);
						data38 = this44;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data38,0,data.data.length);
						data.data = data38;
					}
				}
				data.data[key37] = 0;
				var key38 = vidx++;
				if(!data.fixed) {
					if(key38 >= data.length) data.length = key38 + 1;
					if(data.data.length < data.length) {
						var data39;
						var this45;
						this45 = new Array(data.data.length + 10);
						data39 = this45;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data39,0,data.data.length);
						data.data = data39;
					}
				}
				data.data[key38] = 0;
				vidx += skip;
				var key39 = vidx++;
				if(!data.fixed) {
					if(key39 >= data.length) data.length = key39 + 1;
					if(data.data.length < data.length) {
						var data40;
						var this46;
						this46 = new Array(data.data.length + 10);
						data40 = this46;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data40,0,data.data.length);
						data.data = data40;
					}
				}
				data.data[key39] = outer_pos;
				var key40 = vidx++;
				if(!data.fixed) {
					if(key40 >= data.length) data.length = key40 + 1;
					if(data.data.length < data.length) {
						var data41;
						var this47;
						this47 = new Array(data.data.length + 10);
						data41 = this47;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data41,0,data.data.length);
						data.data = data41;
					}
				}
				data.data[key40] = -hh;
				var key41 = vidx++;
				if(!data.fixed) {
					if(key41 >= data.length) data.length = key41 + 1;
					if(data.data.length < data.length) {
						var data42;
						var this48;
						this48 = new Array(data.data.length + 10);
						data42 = this48;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data42,0,data.data.length);
						data.data = data42;
					}
				}
				data.data[key41] = -hd + j * dd;
				var key42 = vidx++;
				if(!data.fixed) {
					if(key42 >= data.length) data.length = key42 + 1;
					if(data.data.length < data.length) {
						var data43;
						var this49;
						this49 = new Array(data.data.length + 10);
						data43 = this49;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data43,0,data.data.length);
						data.data = data43;
					}
				}
				data.data[key42] = 0;
				var key43 = vidx++;
				if(!data.fixed) {
					if(key43 >= data.length) data.length = key43 + 1;
					if(data.data.length < data.length) {
						var data44;
						var this50;
						this50 = new Array(data.data.length + 10);
						data44 = this50;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data44,0,data.data.length);
						data.data = data44;
					}
				}
				data.data[key43] = -1;
				var key44 = vidx++;
				if(!data.fixed) {
					if(key44 >= data.length) data.length = key44 + 1;
					if(data.data.length < data.length) {
						var data45;
						var this51;
						this51 = new Array(data.data.length + 10);
						data45 = this51;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data45,0,data.data.length);
						data.data = data45;
					}
				}
				data.data[key44] = 0;
				var key45 = vidx++;
				if(!data.fixed) {
					if(key45 >= data.length) data.length = key45 + 1;
					if(data.data.length < data.length) {
						var data46;
						var this52;
						this52 = new Array(data.data.length + 10);
						data46 = this52;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data46,0,data.data.length);
						data.data = data46;
					}
				}
				data.data[key45] = 1;
				var key46 = vidx++;
				if(!data.fixed) {
					if(key46 >= data.length) data.length = key46 + 1;
					if(data.data.length < data.length) {
						var data47;
						var this53;
						this53 = new Array(data.data.length + 10);
						data47 = this53;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data47,0,data.data.length);
						data.data = data47;
					}
				}
				data.data[key46] = 0;
				var key47 = vidx++;
				if(!data.fixed) {
					if(key47 >= data.length) data.length = key47 + 1;
					if(data.data.length < data.length) {
						var data48;
						var this54;
						this54 = new Array(data.data.length + 10);
						data48 = this54;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data48,0,data.data.length);
						data.data = data48;
					}
				}
				data.data[key47] = 0;
				vidx += skip;
				if(i > 0 && j > 0) {
					tl = inc + 2 * ((i - 1) * (this._segmentsD + 1) + (j - 1)) | 0;
					tr = inc + 2 * (i * (this._segmentsD + 1) + (j - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					var key48 = fidx++;
					if(!indices.fixed) {
						if(key48 >= indices.length) indices.length = key48 + 1;
						if(indices.data.length < indices.length) {
							var data49;
							var this55;
							this55 = new Array(indices.data.length + 10);
							data49 = this55;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data49,0,indices.data.length);
							indices.data = data49;
						}
					}
					indices.data[key48] = tl;
					var key49 = fidx++;
					if(!indices.fixed) {
						if(key49 >= indices.length) indices.length = key49 + 1;
						if(indices.data.length < indices.length) {
							var data50;
							var this56;
							this56 = new Array(indices.data.length + 10);
							data50 = this56;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data50,0,indices.data.length);
							indices.data = data50;
						}
					}
					indices.data[key49] = bl;
					var key50 = fidx++;
					if(!indices.fixed) {
						if(key50 >= indices.length) indices.length = key50 + 1;
						if(indices.data.length < indices.length) {
							var data51;
							var this57;
							this57 = new Array(indices.data.length + 10);
							data51 = this57;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data51,0,indices.data.length);
							indices.data = data51;
						}
					}
					indices.data[key50] = br;
					var key51 = fidx++;
					if(!indices.fixed) {
						if(key51 >= indices.length) indices.length = key51 + 1;
						if(indices.data.length < indices.length) {
							var data52;
							var this58;
							this58 = new Array(indices.data.length + 10);
							data52 = this58;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data52,0,indices.data.length);
							indices.data = data52;
						}
					}
					indices.data[key51] = tl;
					var key52 = fidx++;
					if(!indices.fixed) {
						if(key52 >= indices.length) indices.length = key52 + 1;
						if(indices.data.length < indices.length) {
							var data53;
							var this59;
							this59 = new Array(indices.data.length + 10);
							data53 = this59;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data53,0,indices.data.length);
							indices.data = data53;
						}
					}
					indices.data[key52] = br;
					var key53 = fidx++;
					if(!indices.fixed) {
						if(key53 >= indices.length) indices.length = key53 + 1;
						if(indices.data.length < indices.length) {
							var data54;
							var this60;
							this60 = new Array(indices.data.length + 10);
							data54 = this60;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data54,0,indices.data.length);
							indices.data = data54;
						}
					}
					indices.data[key53] = tr;
					var key54 = fidx++;
					if(!indices.fixed) {
						if(key54 >= indices.length) indices.length = key54 + 1;
						if(indices.data.length < indices.length) {
							var data55;
							var this61;
							this61 = new Array(indices.data.length + 10);
							data55 = this61;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data55,0,indices.data.length);
							indices.data = data55;
						}
					}
					indices.data[key54] = tr + 1;
					var key55 = fidx++;
					if(!indices.fixed) {
						if(key55 >= indices.length) indices.length = key55 + 1;
						if(indices.data.length < indices.length) {
							var data56;
							var this62;
							this62 = new Array(indices.data.length + 10);
							data56 = this62;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data56,0,indices.data.length);
							indices.data = data56;
						}
					}
					indices.data[key55] = br + 1;
					var key56 = fidx++;
					if(!indices.fixed) {
						if(key56 >= indices.length) indices.length = key56 + 1;
						if(indices.data.length < indices.length) {
							var data57;
							var this63;
							this63 = new Array(indices.data.length + 10);
							data57 = this63;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data57,0,indices.data.length);
							indices.data = data57;
						}
					}
					indices.data[key56] = bl + 1;
					var key57 = fidx++;
					if(!indices.fixed) {
						if(key57 >= indices.length) indices.length = key57 + 1;
						if(indices.data.length < indices.length) {
							var data58;
							var this64;
							this64 = new Array(indices.data.length + 10);
							data58 = this64;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data58,0,indices.data.length);
							indices.data = data58;
						}
					}
					indices.data[key57] = tr + 1;
					var key58 = fidx++;
					if(!indices.fixed) {
						if(key58 >= indices.length) indices.length = key58 + 1;
						if(indices.data.length < indices.length) {
							var data59;
							var this65;
							this65 = new Array(indices.data.length + 10);
							data59 = this65;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data59,0,indices.data.length);
							indices.data = data59;
						}
					}
					indices.data[key58] = bl + 1;
					var key59 = fidx++;
					if(!indices.fixed) {
						if(key59 >= indices.length) indices.length = key59 + 1;
						if(indices.data.length < indices.length) {
							var data60;
							var this66;
							this66 = new Array(indices.data.length + 10);
							data60 = this66;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data60,0,indices.data.length);
							indices.data = data60;
						}
					}
					indices.data[key59] = tl + 1;
				}
				j++;
			}
			i++;
		}
		inc += 2 * (this._segmentsW + 1) * (this._segmentsD + 1) | 0;
		i = 0;
		while(i <= this._segmentsD) {
			outer_pos = hd - i * dd;
			j = 0;
			while(j <= this._segmentsH) {
				var key60 = vidx++;
				if(!data.fixed) {
					if(key60 >= data.length) data.length = key60 + 1;
					if(data.data.length < data.length) {
						var data61;
						var this67;
						this67 = new Array(data.data.length + 10);
						data61 = this67;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data61,0,data.data.length);
						data.data = data61;
					}
				}
				data.data[key60] = -hw;
				var key61 = vidx++;
				if(!data.fixed) {
					if(key61 >= data.length) data.length = key61 + 1;
					if(data.data.length < data.length) {
						var data62;
						var this68;
						this68 = new Array(data.data.length + 10);
						data62 = this68;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data62,0,data.data.length);
						data.data = data62;
					}
				}
				data.data[key61] = -hh + j * dh;
				var key62 = vidx++;
				if(!data.fixed) {
					if(key62 >= data.length) data.length = key62 + 1;
					if(data.data.length < data.length) {
						var data63;
						var this69;
						this69 = new Array(data.data.length + 10);
						data63 = this69;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data63,0,data.data.length);
						data.data = data63;
					}
				}
				data.data[key62] = outer_pos;
				var key63 = vidx++;
				if(!data.fixed) {
					if(key63 >= data.length) data.length = key63 + 1;
					if(data.data.length < data.length) {
						var data64;
						var this70;
						this70 = new Array(data.data.length + 10);
						data64 = this70;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data64,0,data.data.length);
						data.data = data64;
					}
				}
				data.data[key63] = -1;
				var key64 = vidx++;
				if(!data.fixed) {
					if(key64 >= data.length) data.length = key64 + 1;
					if(data.data.length < data.length) {
						var data65;
						var this71;
						this71 = new Array(data.data.length + 10);
						data65 = this71;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data65,0,data.data.length);
						data.data = data65;
					}
				}
				data.data[key64] = 0;
				var key65 = vidx++;
				if(!data.fixed) {
					if(key65 >= data.length) data.length = key65 + 1;
					if(data.data.length < data.length) {
						var data66;
						var this72;
						this72 = new Array(data.data.length + 10);
						data66 = this72;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data66,0,data.data.length);
						data.data = data66;
					}
				}
				data.data[key65] = 0;
				var key66 = vidx++;
				if(!data.fixed) {
					if(key66 >= data.length) data.length = key66 + 1;
					if(data.data.length < data.length) {
						var data67;
						var this73;
						this73 = new Array(data.data.length + 10);
						data67 = this73;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data67,0,data.data.length);
						data.data = data67;
					}
				}
				data.data[key66] = 0;
				var key67 = vidx++;
				if(!data.fixed) {
					if(key67 >= data.length) data.length = key67 + 1;
					if(data.data.length < data.length) {
						var data68;
						var this74;
						this74 = new Array(data.data.length + 10);
						data68 = this74;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data68,0,data.data.length);
						data.data = data68;
					}
				}
				data.data[key67] = 0;
				var key68 = vidx++;
				if(!data.fixed) {
					if(key68 >= data.length) data.length = key68 + 1;
					if(data.data.length < data.length) {
						var data69;
						var this75;
						this75 = new Array(data.data.length + 10);
						data69 = this75;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data69,0,data.data.length);
						data.data = data69;
					}
				}
				data.data[key68] = -1;
				vidx += skip;
				var key69 = vidx++;
				if(!data.fixed) {
					if(key69 >= data.length) data.length = key69 + 1;
					if(data.data.length < data.length) {
						var data70;
						var this76;
						this76 = new Array(data.data.length + 10);
						data70 = this76;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data70,0,data.data.length);
						data.data = data70;
					}
				}
				data.data[key69] = hw;
				var key70 = vidx++;
				if(!data.fixed) {
					if(key70 >= data.length) data.length = key70 + 1;
					if(data.data.length < data.length) {
						var data71;
						var this77;
						this77 = new Array(data.data.length + 10);
						data71 = this77;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data71,0,data.data.length);
						data.data = data71;
					}
				}
				data.data[key70] = -hh + j * dh;
				var key71 = vidx++;
				if(!data.fixed) {
					if(key71 >= data.length) data.length = key71 + 1;
					if(data.data.length < data.length) {
						var data72;
						var this78;
						this78 = new Array(data.data.length + 10);
						data72 = this78;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data72,0,data.data.length);
						data.data = data72;
					}
				}
				data.data[key71] = outer_pos;
				var key72 = vidx++;
				if(!data.fixed) {
					if(key72 >= data.length) data.length = key72 + 1;
					if(data.data.length < data.length) {
						var data73;
						var this79;
						this79 = new Array(data.data.length + 10);
						data73 = this79;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data73,0,data.data.length);
						data.data = data73;
					}
				}
				data.data[key72] = 1;
				var key73 = vidx++;
				if(!data.fixed) {
					if(key73 >= data.length) data.length = key73 + 1;
					if(data.data.length < data.length) {
						var data74;
						var this80;
						this80 = new Array(data.data.length + 10);
						data74 = this80;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data74,0,data.data.length);
						data.data = data74;
					}
				}
				data.data[key73] = 0;
				var key74 = vidx++;
				if(!data.fixed) {
					if(key74 >= data.length) data.length = key74 + 1;
					if(data.data.length < data.length) {
						var data75;
						var this81;
						this81 = new Array(data.data.length + 10);
						data75 = this81;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data75,0,data.data.length);
						data.data = data75;
					}
				}
				data.data[key74] = 0;
				var key75 = vidx++;
				if(!data.fixed) {
					if(key75 >= data.length) data.length = key75 + 1;
					if(data.data.length < data.length) {
						var data76;
						var this82;
						this82 = new Array(data.data.length + 10);
						data76 = this82;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data76,0,data.data.length);
						data.data = data76;
					}
				}
				data.data[key75] = 0;
				var key76 = vidx++;
				if(!data.fixed) {
					if(key76 >= data.length) data.length = key76 + 1;
					if(data.data.length < data.length) {
						var data77;
						var this83;
						this83 = new Array(data.data.length + 10);
						data77 = this83;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data77,0,data.data.length);
						data.data = data77;
					}
				}
				data.data[key76] = 0;
				var key77 = vidx++;
				if(!data.fixed) {
					if(key77 >= data.length) data.length = key77 + 1;
					if(data.data.length < data.length) {
						var data78;
						var this84;
						this84 = new Array(data.data.length + 10);
						data78 = this84;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data78,0,data.data.length);
						data.data = data78;
					}
				}
				data.data[key77] = 1;
				vidx += skip;
				if(i > 0 && j > 0) {
					tl = inc + 2 * ((i - 1) * (this._segmentsH + 1) + (j - 1)) | 0;
					tr = inc + 2 * (i * (this._segmentsH + 1) + (j - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					var key78 = fidx++;
					if(!indices.fixed) {
						if(key78 >= indices.length) indices.length = key78 + 1;
						if(indices.data.length < indices.length) {
							var data79;
							var this85;
							this85 = new Array(indices.data.length + 10);
							data79 = this85;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data79,0,indices.data.length);
							indices.data = data79;
						}
					}
					indices.data[key78] = tl;
					var key79 = fidx++;
					if(!indices.fixed) {
						if(key79 >= indices.length) indices.length = key79 + 1;
						if(indices.data.length < indices.length) {
							var data80;
							var this86;
							this86 = new Array(indices.data.length + 10);
							data80 = this86;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data80,0,indices.data.length);
							indices.data = data80;
						}
					}
					indices.data[key79] = bl;
					var key80 = fidx++;
					if(!indices.fixed) {
						if(key80 >= indices.length) indices.length = key80 + 1;
						if(indices.data.length < indices.length) {
							var data81;
							var this87;
							this87 = new Array(indices.data.length + 10);
							data81 = this87;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data81,0,indices.data.length);
							indices.data = data81;
						}
					}
					indices.data[key80] = br;
					var key81 = fidx++;
					if(!indices.fixed) {
						if(key81 >= indices.length) indices.length = key81 + 1;
						if(indices.data.length < indices.length) {
							var data82;
							var this88;
							this88 = new Array(indices.data.length + 10);
							data82 = this88;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data82,0,indices.data.length);
							indices.data = data82;
						}
					}
					indices.data[key81] = tl;
					var key82 = fidx++;
					if(!indices.fixed) {
						if(key82 >= indices.length) indices.length = key82 + 1;
						if(indices.data.length < indices.length) {
							var data83;
							var this89;
							this89 = new Array(indices.data.length + 10);
							data83 = this89;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data83,0,indices.data.length);
							indices.data = data83;
						}
					}
					indices.data[key82] = br;
					var key83 = fidx++;
					if(!indices.fixed) {
						if(key83 >= indices.length) indices.length = key83 + 1;
						if(indices.data.length < indices.length) {
							var data84;
							var this90;
							this90 = new Array(indices.data.length + 10);
							data84 = this90;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data84,0,indices.data.length);
							indices.data = data84;
						}
					}
					indices.data[key83] = tr;
					var key84 = fidx++;
					if(!indices.fixed) {
						if(key84 >= indices.length) indices.length = key84 + 1;
						if(indices.data.length < indices.length) {
							var data85;
							var this91;
							this91 = new Array(indices.data.length + 10);
							data85 = this91;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data85,0,indices.data.length);
							indices.data = data85;
						}
					}
					indices.data[key84] = tr + 1;
					var key85 = fidx++;
					if(!indices.fixed) {
						if(key85 >= indices.length) indices.length = key85 + 1;
						if(indices.data.length < indices.length) {
							var data86;
							var this92;
							this92 = new Array(indices.data.length + 10);
							data86 = this92;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data86,0,indices.data.length);
							indices.data = data86;
						}
					}
					indices.data[key85] = br + 1;
					var key86 = fidx++;
					if(!indices.fixed) {
						if(key86 >= indices.length) indices.length = key86 + 1;
						if(indices.data.length < indices.length) {
							var data87;
							var this93;
							this93 = new Array(indices.data.length + 10);
							data87 = this93;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data87,0,indices.data.length);
							indices.data = data87;
						}
					}
					indices.data[key86] = bl + 1;
					var key87 = fidx++;
					if(!indices.fixed) {
						if(key87 >= indices.length) indices.length = key87 + 1;
						if(indices.data.length < indices.length) {
							var data88;
							var this94;
							this94 = new Array(indices.data.length + 10);
							data88 = this94;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data88,0,indices.data.length);
							indices.data = data88;
						}
					}
					indices.data[key87] = tr + 1;
					var key88 = fidx++;
					if(!indices.fixed) {
						if(key88 >= indices.length) indices.length = key88 + 1;
						if(indices.data.length < indices.length) {
							var data89;
							var this95;
							this95 = new Array(indices.data.length + 10);
							data89 = this95;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data89,0,indices.data.length);
							indices.data = data89;
						}
					}
					indices.data[key88] = bl + 1;
					var key89 = fidx++;
					if(!indices.fixed) {
						if(key89 >= indices.length) indices.length = key89 + 1;
						if(indices.data.length < indices.length) {
							var data90;
							var this96;
							this96 = new Array(indices.data.length + 10);
							data90 = this96;
							haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data90,0,indices.data.length);
							indices.data = data90;
						}
					}
					indices.data[key89] = tl + 1;
				}
				j++;
			}
			i++;
		}
		target.updateData(data);
		target.updateIndexData(indices);
	}
	,buildUVs: function(target) {
		var i = 0;
		var j;
		var uidx;
		var data;
		var u_tile_dim;
		var v_tile_dim;
		var u_tile_step;
		var v_tile_step;
		var tl0u;
		var tl0v;
		var tl1u;
		var tl1v;
		var du;
		var dv;
		var stride = target.get_UVStride();
		var numUvs = ((this._segmentsW + 1) * (this._segmentsH + 1) + (this._segmentsW + 1) * (this._segmentsD + 1) + (this._segmentsH + 1) * (this._segmentsD + 1)) * 2 * stride | 0;
		var skip = stride - 2;
		if(target.get_UVData() != null && numUvs == (function($this) {
			var $r;
			var this1 = target.get_UVData();
			$r = this1.length;
			return $r;
		}(this))) data = target.get_UVData(); else {
			data = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
				var $r;
				var this2;
				this2 = new openfl.VectorData();
				{
					var this3;
					this3 = new Array(0);
					this2.data = this3;
				}
				this2.length = 0;
				this2.fixed = false;
				$r = this2;
				return $r;
			}(this))),numUvs,0);
			this.invalidateGeometry();
		}
		if(this._tile6) {
			u_tile_dim = u_tile_step = 0.33333333333333331;
			v_tile_dim = v_tile_step = 0.5;
		} else {
			u_tile_dim = v_tile_dim = 1;
			u_tile_step = v_tile_step = 0;
		}
		uidx = target.get_UVOffset();
		tl0u = u_tile_step;
		tl0v = v_tile_step;
		tl1u = 2 * u_tile_step;
		tl1v = 0 * v_tile_step;
		du = u_tile_dim / this._segmentsW;
		dv = v_tile_dim / this._segmentsH;
		i = 0;
		while(i <= this._segmentsW) {
			j = 0;
			while(j <= this._segmentsH) {
				var key = uidx++;
				var value = (tl0u + i * du) * target.get_scaleU();
				if(!data.fixed) {
					if(key >= data.length) data.length = key + 1;
					if(data.data.length < data.length) {
						var data1;
						var this4;
						this4 = new Array(data.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data1,0,data.data.length);
						data.data = data1;
					}
				}
				data.data[key] = value;
				var key1 = uidx++;
				var value1 = (tl0v + (v_tile_dim - j * dv)) * target.get_scaleV();
				if(!data.fixed) {
					if(key1 >= data.length) data.length = key1 + 1;
					if(data.data.length < data.length) {
						var data2;
						var this5;
						this5 = new Array(data.data.length + 10);
						data2 = this5;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data2,0,data.data.length);
						data.data = data2;
					}
				}
				data.data[key1] = value1;
				uidx += skip;
				var key2 = uidx++;
				var value2 = (tl1u + (u_tile_dim - i * du)) * target.get_scaleU();
				if(!data.fixed) {
					if(key2 >= data.length) data.length = key2 + 1;
					if(data.data.length < data.length) {
						var data3;
						var this6;
						this6 = new Array(data.data.length + 10);
						data3 = this6;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data3,0,data.data.length);
						data.data = data3;
					}
				}
				data.data[key2] = value2;
				var key3 = uidx++;
				var value3 = (tl1v + (v_tile_dim - j * dv)) * target.get_scaleV();
				if(!data.fixed) {
					if(key3 >= data.length) data.length = key3 + 1;
					if(data.data.length < data.length) {
						var data4;
						var this7;
						this7 = new Array(data.data.length + 10);
						data4 = this7;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data4,0,data.data.length);
						data.data = data4;
					}
				}
				data.data[key3] = value3;
				uidx += skip;
				j++;
			}
			i++;
		}
		tl0u = u_tile_step;
		tl0v = 0 * v_tile_step;
		tl1u = 0 * u_tile_step;
		tl1v = 0 * v_tile_step;
		du = u_tile_dim / this._segmentsW;
		dv = v_tile_dim / this._segmentsD;
		i = 0;
		while(i <= this._segmentsW) {
			j = 0;
			while(j <= this._segmentsD) {
				var key4 = uidx++;
				var value4 = (tl0u + i * du) * target.get_scaleU();
				if(!data.fixed) {
					if(key4 >= data.length) data.length = key4 + 1;
					if(data.data.length < data.length) {
						var data5;
						var this8;
						this8 = new Array(data.data.length + 10);
						data5 = this8;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data5,0,data.data.length);
						data.data = data5;
					}
				}
				data.data[key4] = value4;
				var key5 = uidx++;
				var value5 = (tl0v + (v_tile_dim - j * dv)) * target.get_scaleV();
				if(!data.fixed) {
					if(key5 >= data.length) data.length = key5 + 1;
					if(data.data.length < data.length) {
						var data6;
						var this9;
						this9 = new Array(data.data.length + 10);
						data6 = this9;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data6,0,data.data.length);
						data.data = data6;
					}
				}
				data.data[key5] = value5;
				uidx += skip;
				var key6 = uidx++;
				var value6 = (tl1u + i * du) * target.get_scaleU();
				if(!data.fixed) {
					if(key6 >= data.length) data.length = key6 + 1;
					if(data.data.length < data.length) {
						var data7;
						var this10;
						this10 = new Array(data.data.length + 10);
						data7 = this10;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data7,0,data.data.length);
						data.data = data7;
					}
				}
				data.data[key6] = value6;
				var key7 = uidx++;
				var value7 = (tl1v + j * dv) * target.get_scaleV();
				if(!data.fixed) {
					if(key7 >= data.length) data.length = key7 + 1;
					if(data.data.length < data.length) {
						var data8;
						var this11;
						this11 = new Array(data.data.length + 10);
						data8 = this11;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data8,0,data.data.length);
						data.data = data8;
					}
				}
				data.data[key7] = value7;
				uidx += skip;
				j++;
			}
			i++;
		}
		tl0u = 0 * u_tile_step;
		tl0v = v_tile_step;
		tl1u = 2 * u_tile_step;
		tl1v = v_tile_step;
		du = u_tile_dim / this._segmentsD;
		dv = v_tile_dim / this._segmentsH;
		i = 0;
		while(i <= this._segmentsD) {
			j = 0;
			while(j <= this._segmentsH) {
				var key8 = uidx++;
				var value8 = (tl0u + i * du) * target.get_scaleU();
				if(!data.fixed) {
					if(key8 >= data.length) data.length = key8 + 1;
					if(data.data.length < data.length) {
						var data9;
						var this12;
						this12 = new Array(data.data.length + 10);
						data9 = this12;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data9,0,data.data.length);
						data.data = data9;
					}
				}
				data.data[key8] = value8;
				var key9 = uidx++;
				var value9 = (tl0v + (v_tile_dim - j * dv)) * target.get_scaleV();
				if(!data.fixed) {
					if(key9 >= data.length) data.length = key9 + 1;
					if(data.data.length < data.length) {
						var data10;
						var this13;
						this13 = new Array(data.data.length + 10);
						data10 = this13;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data10,0,data.data.length);
						data.data = data10;
					}
				}
				data.data[key9] = value9;
				uidx += skip;
				var key10 = uidx++;
				var value10 = (tl1u + (u_tile_dim - i * du)) * target.get_scaleU();
				if(!data.fixed) {
					if(key10 >= data.length) data.length = key10 + 1;
					if(data.data.length < data.length) {
						var data11;
						var this14;
						this14 = new Array(data.data.length + 10);
						data11 = this14;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data11,0,data.data.length);
						data.data = data11;
					}
				}
				data.data[key10] = value10;
				var key11 = uidx++;
				var value11 = (tl1v + (v_tile_dim - j * dv)) * target.get_scaleV();
				if(!data.fixed) {
					if(key11 >= data.length) data.length = key11 + 1;
					if(data.data.length < data.length) {
						var data12;
						var this15;
						this15 = new Array(data.data.length + 10);
						data12 = this15;
						haxe.ds._Vector.Vector_Impl_.blit(data.data,0,data12,0,data.data.length);
						data.data = data12;
					}
				}
				data.data[key11] = value11;
				uidx += skip;
				j++;
			}
			i++;
		}
		target.updateData(data);
	}
	,__class__: away3d.primitives.CubeGeometry
	,__properties__: $extend(away3d.primitives.PrimitiveBase.prototype.__properties__,{set_segmentsD:"set_segmentsD",get_segmentsD:"get_segmentsD",set_segmentsH:"set_segmentsH",get_segmentsH:"get_segmentsH",set_segmentsW:"set_segmentsW",get_segmentsW:"get_segmentsW",set_tile6:"set_tile6",get_tile6:"get_tile6",set_depth:"set_depth",get_depth:"get_depth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
away3d.primitives.data = {};
away3d.primitives.data.Segment = function(start,end,anchor,colorStart,colorEnd,thickness) {
	if(thickness == null) thickness = 1;
	if(colorEnd == null) colorEnd = 3355443;
	if(colorStart == null) colorStart = 3355443;
	this._index = -1;
	this._subSetIndex = -1;
	anchor = null;
	this._thickness = thickness * .5;
	this._start = start;
	this._end = end;
	this.set_startColor(colorStart);
	this.set_endColor(colorEnd);
};
$hxClasses["away3d.primitives.data.Segment"] = away3d.primitives.data.Segment;
away3d.primitives.data.Segment.__name__ = ["away3d","primitives","data","Segment"];
away3d.primitives.data.Segment.prototype = {
	updateSegment: function(start,end,anchor,colorStart,colorEnd,thickness) {
		if(thickness == null) thickness = 1;
		if(colorEnd == null) colorEnd = 3355443;
		if(colorStart == null) colorStart = 3355443;
		anchor = null;
		this._start = start;
		this._end = end;
		if(this._startColor != colorStart) this.set_startColor(colorStart);
		if(this._endColor != colorEnd) this.set_endColor(colorEnd);
		this._thickness = thickness * .5;
		this.update();
	}
	,get_start: function() {
		return this._start;
	}
	,set_start: function(value) {
		this._start = value;
		this.update();
		return value;
	}
	,get_end: function() {
		return this._end;
	}
	,set_end: function(value) {
		this._end = value;
		this.update();
		return value;
	}
	,get_thickness: function() {
		return this._thickness * 2;
	}
	,set_thickness: function(value) {
		this._thickness = value * .5;
		this.update();
		return value;
	}
	,get_startColor: function() {
		return this._startColor;
	}
	,set_startColor: function(color) {
		this._startR = (color >> 16 & 255) / 255;
		this._startG = (color >> 8 & 255) / 255;
		this._startB = (color & 255) / 255;
		this._startColor = color;
		this.update();
		return color;
	}
	,get_endColor: function() {
		return this._endColor;
	}
	,set_endColor: function(color) {
		this._endR = (color >> 16 & 255) / 255;
		this._endG = (color >> 8 & 255) / 255;
		this._endB = (color & 255) / 255;
		this._endColor = color;
		this.update();
		return color;
	}
	,dispose: function() {
		this._start = null;
		this._end = null;
	}
	,get_index: function() {
		return this._index;
	}
	,set_index: function(ind) {
		this._index = ind;
		return ind;
	}
	,get_subSetIndex: function() {
		return this._subSetIndex;
	}
	,set_subSetIndex: function(ind) {
		this._subSetIndex = ind;
		return ind;
	}
	,set_segmentsBase: function(segBase) {
		this._segmentsBase = segBase;
		return segBase;
	}
	,update: function() {
		if(this._segmentsBase == null) return;
		this._segmentsBase.updateSegment(this);
	}
	,__class__: away3d.primitives.data.Segment
	,__properties__: {set_segmentsBase:"set_segmentsBase",set_subSetIndex:"set_subSetIndex",get_subSetIndex:"get_subSetIndex",set_index:"set_index",get_index:"get_index",set_endColor:"set_endColor",get_endColor:"get_endColor",set_startColor:"set_startColor",get_startColor:"get_startColor",set_thickness:"set_thickness",get_thickness:"get_thickness",set_end:"set_end",get_end:"get_end",set_start:"set_start",get_start:"get_start"}
};
away3d.primitives.LineSegment = function(v0,v1,color0,color1,thickness) {
	if(thickness == null) thickness = 1;
	if(color1 == null) color1 = 3355443;
	if(color0 == null) color0 = 3355443;
	this.TYPE = "line";
	away3d.primitives.data.Segment.call(this,v0,v1,null,color0,color1,thickness);
};
$hxClasses["away3d.primitives.LineSegment"] = away3d.primitives.LineSegment;
away3d.primitives.LineSegment.__name__ = ["away3d","primitives","LineSegment"];
away3d.primitives.LineSegment.__super__ = away3d.primitives.data.Segment;
away3d.primitives.LineSegment.prototype = $extend(away3d.primitives.data.Segment.prototype,{
	__class__: away3d.primitives.LineSegment
});
away3d.primitives.WireframePrimitiveBase = function(color,thickness) {
	if(thickness == null) thickness = 1;
	if(color == null) color = 16777215;
	this._geomDirty = true;
	if(thickness <= 0) thickness = 1;
	this._color = color;
	this._thickness = thickness;
	this.set_mouseEnabled(this.set_mouseChildren(false));
	away3d.entities.SegmentSet.call(this);
};
$hxClasses["away3d.primitives.WireframePrimitiveBase"] = away3d.primitives.WireframePrimitiveBase;
away3d.primitives.WireframePrimitiveBase.__name__ = ["away3d","primitives","WireframePrimitiveBase"];
away3d.primitives.WireframePrimitiveBase.__super__ = away3d.entities.SegmentSet;
away3d.primitives.WireframePrimitiveBase.prototype = $extend(away3d.entities.SegmentSet.prototype,{
	get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		this._color = value;
		var $it0 = this._segments.iterator();
		while( $it0.hasNext() ) {
			var segRef = $it0.next();
			segRef.segment.set_startColor(segRef.segment.set_endColor(value));
		}
		return value;
	}
	,get_thickness: function() {
		return this._thickness;
	}
	,set_thickness: function(value) {
		this._thickness = value;
		var $it0 = this._segments.iterator();
		while( $it0.hasNext() ) {
			var segRef = $it0.next();
			segRef.segment.set_thickness(segRef.segment.set_thickness(value));
		}
		return value;
	}
	,removeAllSegments: function() {
		away3d.entities.SegmentSet.prototype.removeAllSegments.call(this);
	}
	,get_bounds: function() {
		if(this._geomDirty) this.updateGeometry();
		return away3d.entities.SegmentSet.prototype.get_bounds.call(this);
	}
	,buildGeometry: function() {
		throw new away3d.errors.AbstractMethodError();
	}
	,invalidateGeometry: function() {
		this._geomDirty = true;
		this.invalidateBounds();
	}
	,updateGeometry: function() {
		this.buildGeometry();
		this._geomDirty = false;
	}
	,updateOrAddSegment: function(index,v0,v1) {
		var segment;
		var s;
		var e;
		if((segment = this.getSegment(index)) != null) {
			s = segment.get_start();
			e = segment.get_end();
			s.x = v0.x;
			s.y = v0.y;
			s.z = v0.z;
			e.x = v1.x;
			e.y = v1.y;
			e.z = v1.z;
			segment.updateSegment(s,e,null,this._color,this._color,this._thickness);
		} else this.addSegment(new away3d.primitives.LineSegment(new openfl.geom.Vector3D(v0.x,v0.y,v0.z,v0.w),new openfl.geom.Vector3D(v1.x,v1.y,v1.z,v1.w),this._color,this._color,this._thickness));
	}
	,updateMouseChildren: function() {
		this._ancestorsAllowMouseEnabled = false;
	}
	,__class__: away3d.primitives.WireframePrimitiveBase
	,__properties__: $extend(away3d.entities.SegmentSet.prototype.__properties__,{set_thickness:"set_thickness",get_thickness:"get_thickness",set_color:"set_color",get_color:"get_color"})
});
away3d.primitives.WireframeCube = function(width,height,depth,color,thickness) {
	if(thickness == null) thickness = 1;
	if(color == null) color = 16777215;
	if(depth == null) depth = 100;
	if(height == null) height = 100;
	if(width == null) width = 100;
	away3d.primitives.WireframePrimitiveBase.call(this,color,thickness);
	this._width = width;
	this._height = height;
	this._depth = depth;
};
$hxClasses["away3d.primitives.WireframeCube"] = away3d.primitives.WireframeCube;
away3d.primitives.WireframeCube.__name__ = ["away3d","primitives","WireframeCube"];
away3d.primitives.WireframeCube.__super__ = away3d.primitives.WireframePrimitiveBase;
away3d.primitives.WireframeCube.prototype = $extend(away3d.primitives.WireframePrimitiveBase.prototype,{
	get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(value <= 0) throw new openfl.errors.Error("Value needs to be greater than 0");
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		this._depth = value;
		this.invalidateGeometry();
		return value;
	}
	,buildGeometry: function() {
		var v0 = new openfl.geom.Vector3D();
		var v1 = new openfl.geom.Vector3D();
		var hw = this._width * .5;
		var hh = this._height * .5;
		var hd = this._depth * .5;
		v0.x = -hw;
		v0.y = hh;
		v0.z = -hd;
		v1.x = -hw;
		v1.y = -hh;
		v1.z = -hd;
		this.updateOrAddSegment(0,v0,v1);
		v0.z = hd;
		v1.z = hd;
		this.updateOrAddSegment(1,v0,v1);
		v0.x = hw;
		v1.x = hw;
		this.updateOrAddSegment(2,v0,v1);
		v0.z = -hd;
		v1.z = -hd;
		this.updateOrAddSegment(3,v0,v1);
		v0.x = -hw;
		v0.y = -hh;
		v0.z = -hd;
		v1.x = hw;
		v1.y = -hh;
		v1.z = -hd;
		this.updateOrAddSegment(4,v0,v1);
		v0.y = hh;
		v1.y = hh;
		this.updateOrAddSegment(5,v0,v1);
		v0.z = hd;
		v1.z = hd;
		this.updateOrAddSegment(6,v0,v1);
		v0.y = -hh;
		v1.y = -hh;
		this.updateOrAddSegment(7,v0,v1);
		v0.x = -hw;
		v0.y = -hh;
		v0.z = -hd;
		v1.x = -hw;
		v1.y = -hh;
		v1.z = hd;
		this.updateOrAddSegment(8,v0,v1);
		v0.y = hh;
		v1.y = hh;
		this.updateOrAddSegment(9,v0,v1);
		v0.x = hw;
		v1.x = hw;
		this.updateOrAddSegment(10,v0,v1);
		v0.y = -hh;
		v1.y = -hh;
		this.updateOrAddSegment(11,v0,v1);
	}
	,__class__: away3d.primitives.WireframeCube
	,__properties__: $extend(away3d.primitives.WireframePrimitiveBase.prototype.__properties__,{set_depth:"set_depth",get_depth:"get_depth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
away3d.primitives.WireframeSphere = function(radius,segmentsW,segmentsH,color,thickness) {
	if(thickness == null) thickness = 1;
	if(color == null) color = 16777215;
	if(segmentsH == null) segmentsH = 12;
	if(segmentsW == null) segmentsW = 16;
	if(radius == null) radius = 50;
	away3d.primitives.WireframePrimitiveBase.call(this,color,thickness);
	this._radius = radius;
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
};
$hxClasses["away3d.primitives.WireframeSphere"] = away3d.primitives.WireframeSphere;
away3d.primitives.WireframeSphere.__name__ = ["away3d","primitives","WireframeSphere"];
away3d.primitives.WireframeSphere.__super__ = away3d.primitives.WireframePrimitiveBase;
away3d.primitives.WireframeSphere.prototype = $extend(away3d.primitives.WireframePrimitiveBase.prototype,{
	buildGeometry: function() {
		var vertices;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vertices = this1;
		var v0 = new openfl.geom.Vector3D();
		var v1 = new openfl.geom.Vector3D();
		var i = 0;
		var j = 0;
		var numVerts = 0;
		var index = 0;
		j = 0;
		while(j <= this._segmentsH) {
			var horangle = Math.PI * j / this._segmentsH;
			var z = -this._radius * Math.cos(horangle);
			var ringradius = this._radius * Math.sin(horangle);
			i = 0;
			while(i <= this._segmentsW) {
				var verangle = 2 * Math.PI * i / this._segmentsW;
				var x = ringradius * Math.cos(verangle);
				var y = ringradius * Math.sin(verangle);
				var key = numVerts++;
				if(!vertices.fixed) {
					if(key >= vertices.length) vertices.length = key + 1;
					if(vertices.data.length < vertices.length) {
						var data;
						var this3;
						this3 = new Array(vertices.data.length + 10);
						data = this3;
						haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data,0,vertices.data.length);
						vertices.data = data;
					}
				}
				vertices.data[key] = x;
				var key1 = numVerts++;
				if(!vertices.fixed) {
					if(key1 >= vertices.length) vertices.length = key1 + 1;
					if(vertices.data.length < vertices.length) {
						var data1;
						var this4;
						this4 = new Array(vertices.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data1,0,vertices.data.length);
						vertices.data = data1;
					}
				}
				vertices.data[key1] = -z;
				var key2 = numVerts++;
				if(!vertices.fixed) {
					if(key2 >= vertices.length) vertices.length = key2 + 1;
					if(vertices.data.length < vertices.length) {
						var data2;
						var this5;
						this5 = new Array(vertices.data.length + 10);
						data2 = this5;
						haxe.ds._Vector.Vector_Impl_.blit(vertices.data,0,data2,0,vertices.data.length);
						vertices.data = data2;
					}
				}
				vertices.data[key2] = y;
				++i;
			}
			++j;
		}
		j = 1;
		while(j <= this._segmentsH) {
			i = 1;
			while(i <= this._segmentsW) {
				var a = ((this._segmentsW + 1) * j + i) * 3;
				var b = ((this._segmentsW + 1) * j + i - 1) * 3;
				var c = ((this._segmentsW + 1) * (j - 1) + i - 1) * 3;
				var d = ((this._segmentsW + 1) * (j - 1) + i) * 3;
				if(j == this._segmentsH) {
					v0.x = vertices.data[c];
					v0.y = vertices.data[c + 1];
					v0.z = vertices.data[c + 2];
					v1.x = vertices.data[d];
					v1.y = vertices.data[d + 1];
					v1.z = vertices.data[d + 2];
					this.updateOrAddSegment(index++,v0,v1);
					v0.x = vertices.data[a];
					v0.y = vertices.data[a + 1];
					v0.z = vertices.data[a + 2];
					this.updateOrAddSegment(index++,v0,v1);
				} else if(j == 1) {
					v1.x = vertices.data[b];
					v1.y = vertices.data[b + 1];
					v1.z = vertices.data[b + 2];
					v0.x = vertices.data[c];
					v0.y = vertices.data[c + 1];
					v0.z = vertices.data[c + 2];
					this.updateOrAddSegment(index++,v0,v1);
				} else {
					v1.x = vertices.data[b];
					v1.y = vertices.data[b + 1];
					v1.z = vertices.data[b + 2];
					v0.x = vertices.data[c];
					v0.y = vertices.data[c + 1];
					v0.z = vertices.data[c + 2];
					this.updateOrAddSegment(index++,v0,v1);
					v1.x = vertices.data[d];
					v1.y = vertices.data[d + 1];
					v1.z = vertices.data[d + 2];
					this.updateOrAddSegment(index++,v0,v1);
				}
				++i;
			}
			++j;
		}
	}
	,__class__: away3d.primitives.WireframeSphere
});
away3d.textures = {};
away3d.textures.Anisotropy = $hxClasses["away3d.textures.Anisotropy"] = { __ename__ : ["away3d","textures","Anisotropy"], __constructs__ : ["NONE","ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X"] };
away3d.textures.Anisotropy.NONE = ["NONE",0];
away3d.textures.Anisotropy.NONE.toString = $estr;
away3d.textures.Anisotropy.NONE.__enum__ = away3d.textures.Anisotropy;
away3d.textures.Anisotropy.ANISOTROPIC2X = ["ANISOTROPIC2X",1];
away3d.textures.Anisotropy.ANISOTROPIC2X.toString = $estr;
away3d.textures.Anisotropy.ANISOTROPIC2X.__enum__ = away3d.textures.Anisotropy;
away3d.textures.Anisotropy.ANISOTROPIC4X = ["ANISOTROPIC4X",2];
away3d.textures.Anisotropy.ANISOTROPIC4X.toString = $estr;
away3d.textures.Anisotropy.ANISOTROPIC4X.__enum__ = away3d.textures.Anisotropy;
away3d.textures.Anisotropy.ANISOTROPIC8X = ["ANISOTROPIC8X",3];
away3d.textures.Anisotropy.ANISOTROPIC8X.toString = $estr;
away3d.textures.Anisotropy.ANISOTROPIC8X.__enum__ = away3d.textures.Anisotropy;
away3d.textures.Anisotropy.ANISOTROPIC16X = ["ANISOTROPIC16X",4];
away3d.textures.Anisotropy.ANISOTROPIC16X.toString = $estr;
away3d.textures.Anisotropy.ANISOTROPIC16X.__enum__ = away3d.textures.Anisotropy;
away3d.textures.TextureProxyBase = function() {
	this._format = openfl.display3D.Context3DTextureFormat.BGRA;
	this._hasMipmaps = true;
	this._textures = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this1;
		this1 = new openfl.VectorData();
		{
			var this2;
			this2 = new Array(0);
			this1.data = this2;
		}
		this1.length = 0;
		this1.fixed = false;
		$r = this1;
		return $r;
	}(this))),8);
	this._dirty = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
		var $r;
		var this3;
		this3 = new openfl.VectorData();
		{
			var this4;
			this4 = new Array(0);
			this3.data = this4;
		}
		this3.length = 0;
		this3.fixed = false;
		$r = this3;
		return $r;
	}(this))),8);
	away3d.library.assets.NamedAssetBase.call(this);
};
$hxClasses["away3d.textures.TextureProxyBase"] = away3d.textures.TextureProxyBase;
away3d.textures.TextureProxyBase.__name__ = ["away3d","textures","TextureProxyBase"];
away3d.textures.TextureProxyBase.__interfaces__ = [away3d.library.assets.IAsset];
away3d.textures.TextureProxyBase.__super__ = away3d.library.assets.NamedAssetBase;
away3d.textures.TextureProxyBase.prototype = $extend(away3d.library.assets.NamedAssetBase.prototype,{
	get_hasMipMaps: function() {
		return this._hasMipmaps;
	}
	,get_format: function() {
		return this._format;
	}
	,get_assetType: function() {
		return away3d.library.assets.Asset3DType.TEXTURE;
	}
	,get_width: function() {
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_width: function(value) {
		if(value == this._width) return value;
		this._width = value;
		return value;
	}
	,set_height: function(value) {
		if(value == this._height) return value;
		this._height = value;
		return value;
	}
	,getTextureForStage3D: function(stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var tex = this._textures.data[contextIndex];
		var context = stage3DProxy._context3D;
		if(tex == null || this._dirty.data[contextIndex] != context) {
			var this1 = this._textures;
			var value = tex = this.createTexture(context);
			if(!this1.fixed) {
				if(contextIndex >= this1.length) this1.length = contextIndex + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[contextIndex] = value;
			var this3 = this._dirty;
			if(!this3.fixed) {
				if(contextIndex >= this3.length) this3.length = contextIndex + 1;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[contextIndex] = context;
			this.uploadContent(tex);
		}
		return tex;
	}
	,uploadContent: function(texture) {
		throw new away3d.errors.AbstractMethodError();
	}
	,setSize: function(width,height) {
		if(this._width != width || this._height != height) this.invalidateSize();
		this._width = width;
		this._height = height;
	}
	,invalidateContent: function() {
		var i = 0;
		while(i < 8) {
			var this1 = this._dirty;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = null;
			++i;
		}
	}
	,invalidateSize: function() {
		var tex;
		var i = 0;
		while(i < 8) {
			tex = this._textures.data[i];
			if(tex != null) {
				tex.dispose();
				var this1 = this._textures;
				if(!this1.fixed) {
					if(i >= this1.length) this1.length = i + 1;
					if(this1.data.length < this1.length) {
						var data;
						var this2;
						this2 = new Array(this1.data.length + 10);
						data = this2;
						haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
						this1.data = data;
					}
				}
				this1.data[i] = null;
				var this3 = this._dirty;
				if(!this3.fixed) {
					if(i >= this3.length) this3.length = i + 1;
					if(this3.data.length < this3.length) {
						var data1;
						var this4;
						this4 = new Array(this3.data.length + 10);
						data1 = this4;
						haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
						this3.data = data1;
					}
				}
				this3.data[i] = null;
			}
			++i;
		}
	}
	,createTexture: function(context) {
		throw new away3d.errors.AbstractMethodError();
		return null;
	}
	,dispose: function() {
		var i = 0;
		while(i < 8) {
			if(this._textures.data[i] != null) this._textures.data[i].dispose();
			++i;
		}
	}
	,__class__: away3d.textures.TextureProxyBase
	,__properties__: $extend(away3d.library.assets.NamedAssetBase.prototype.__properties__,{get_height:"get_height",get_width:"get_width",get_assetType:"get_assetType",get_format:"get_format",get_hasMipMaps:"get_hasMipMaps"})
});
away3d.textures.Texture2DBase = function() {
	away3d.textures.TextureProxyBase.call(this);
};
$hxClasses["away3d.textures.Texture2DBase"] = away3d.textures.Texture2DBase;
away3d.textures.Texture2DBase.__name__ = ["away3d","textures","Texture2DBase"];
away3d.textures.Texture2DBase.__super__ = away3d.textures.TextureProxyBase;
away3d.textures.Texture2DBase.prototype = $extend(away3d.textures.TextureProxyBase.prototype,{
	createTexture: function(context) {
		return context.createTexture(this._width,this._height,openfl.display3D.Context3DTextureFormat.BGRA,false);
	}
	,__class__: away3d.textures.Texture2DBase
});
away3d.textures.BitmapTexture = function(bitmapData,generateMipmaps) {
	if(generateMipmaps == null) generateMipmaps = true;
	away3d.textures.Texture2DBase.call(this);
	this._bitmapData = bitmapData;
	this.setSize(this._bitmapData.width,this._bitmapData.height);
	this._generateMipmaps = this._hasMipmaps = generateMipmaps;
};
$hxClasses["away3d.textures.BitmapTexture"] = away3d.textures.BitmapTexture;
away3d.textures.BitmapTexture.__name__ = ["away3d","textures","BitmapTexture"];
away3d.textures.BitmapTexture.__super__ = away3d.textures.Texture2DBase;
away3d.textures.BitmapTexture.prototype = $extend(away3d.textures.Texture2DBase.prototype,{
	get_bitmapData: function() {
		return this._bitmapData;
	}
	,set_bitmapData: function(value) {
		if(value == this._bitmapData) return null;
		if(!away3d.tools.utils.TextureUtils.isBitmapDataValid(value)) throw new openfl.errors.Error("Invalid bitmapData: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(value.width,value.height);
		this._bitmapData = value;
		if(this._generateMipmaps) this.getMipMapHolder();
		return value;
	}
	,uploadContent: function(texture) {
		(js.Boot.__cast(texture , openfl.display3D.textures.Texture)).uploadFromBitmapData(this._bitmapData,0);
	}
	,getMipMapHolder: function() {
		var newW;
		var newH;
		newW = this._bitmapData.width;
		newH = this._bitmapData.height;
		if(this._mipMapHolder != null) {
			if(this._mipMapHolder.width == newW && this._bitmapData.height == newH) return;
			this.freeMipMapHolder();
		}
		if(away3d.textures.BitmapTexture._mipMaps[newW] == null) {
			away3d.textures.BitmapTexture._mipMaps[newW] = [];
			away3d.textures.BitmapTexture._mipMapUses[newW] = [];
		}
		if(away3d.textures.BitmapTexture._mipMaps[newW][newH] == null) {
			this._mipMapHolder = away3d.textures.BitmapTexture._mipMaps[newW][newH] = new openfl.display.BitmapData(newW,newH,true);
			away3d.textures.BitmapTexture._mipMapUses[newW][newH] = 1;
		} else {
			away3d.textures.BitmapTexture._mipMapUses[newW][newH] = away3d.textures.BitmapTexture._mipMapUses[newW][newH] + 1;
			this._mipMapHolder = away3d.textures.BitmapTexture._mipMaps[newW][newH];
		}
	}
	,freeMipMapHolder: function() {
		var holderWidth = this._mipMapHolder.width;
		var holderHeight = this._mipMapHolder.height;
		if(--away3d.textures.BitmapTexture._mipMapUses[holderWidth][holderHeight] == 0) {
			away3d.textures.BitmapTexture._mipMaps[holderWidth][holderHeight].dispose();
			away3d.textures.BitmapTexture._mipMaps[holderWidth][holderHeight] = null;
		}
	}
	,dispose: function() {
		away3d.textures.Texture2DBase.prototype.dispose.call(this);
		if(this._mipMapHolder != null) this.freeMipMapHolder();
	}
	,__class__: away3d.textures.BitmapTexture
	,__properties__: $extend(away3d.textures.Texture2DBase.prototype.__properties__,{set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
away3d.textures.CubeTextureBase = function() {
	away3d.textures.TextureProxyBase.call(this);
};
$hxClasses["away3d.textures.CubeTextureBase"] = away3d.textures.CubeTextureBase;
away3d.textures.CubeTextureBase.__name__ = ["away3d","textures","CubeTextureBase"];
away3d.textures.CubeTextureBase.__super__ = away3d.textures.TextureProxyBase;
away3d.textures.CubeTextureBase.prototype = $extend(away3d.textures.TextureProxyBase.prototype,{
	get_size: function() {
		return this._width;
	}
	,createTexture: function(context) {
		return context.createCubeTexture(this.get_width(),openfl.display3D.Context3DTextureFormat.BGRA,false);
	}
	,__class__: away3d.textures.CubeTextureBase
	,__properties__: $extend(away3d.textures.TextureProxyBase.prototype.__properties__,{get_size:"get_size"})
});
away3d.textures.RenderCubeTexture = function(size) {
	away3d.textures.CubeTextureBase.call(this);
	this.setSize(size,size);
};
$hxClasses["away3d.textures.RenderCubeTexture"] = away3d.textures.RenderCubeTexture;
away3d.textures.RenderCubeTexture.__name__ = ["away3d","textures","RenderCubeTexture"];
away3d.textures.RenderCubeTexture.__super__ = away3d.textures.CubeTextureBase;
away3d.textures.RenderCubeTexture.prototype = $extend(away3d.textures.CubeTextureBase.prototype,{
	set_size: function(value) {
		if(value == this._width) return value;
		if(!away3d.tools.utils.TextureUtils.isDimensionValid(value)) throw new openfl.errors.Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(value,value);
		return value;
	}
	,uploadContent: function(texture) {
		var bmd = new openfl.display.BitmapData(this._width,this._height,false,0);
		var i = 0;
		while(i < 6) {
			(js.Boot.__cast(texture , openfl.display3D.textures.CubeTexture)).uploadFromBitmapData(bmd,i,0);
			++i;
		}
		bmd.dispose();
	}
	,createTexture: function(context) {
		return context.createCubeTexture(this._width,openfl.display3D.Context3DTextureFormat.BGRA,true);
	}
	,__class__: away3d.textures.RenderCubeTexture
});
away3d.textures.RenderTexture = function(_width,_height) {
	away3d.textures.Texture2DBase.call(this);
	this.setSize(_width,_height);
};
$hxClasses["away3d.textures.RenderTexture"] = away3d.textures.RenderTexture;
away3d.textures.RenderTexture.__name__ = ["away3d","textures","RenderTexture"];
away3d.textures.RenderTexture.__super__ = away3d.textures.Texture2DBase;
away3d.textures.RenderTexture.prototype = $extend(away3d.textures.Texture2DBase.prototype,{
	set_width: function(value) {
		if(value == this._width) return value;
		if(!away3d.tools.utils.TextureUtils.isDimensionValid(value)) throw new openfl.errors.Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(value,this._height);
		return value;
	}
	,set_height: function(value) {
		if(value == this._height) return value;
		if(!away3d.tools.utils.TextureUtils.isDimensionValid(value)) throw new openfl.errors.Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048");
		this.invalidateContent();
		this.setSize(this._width,value);
		return value;
	}
	,uploadContent: function(texture) {
	}
	,createTexture: function(context) {
		return context.createTexture(this.get_width(),this.get_height(),openfl.display3D.Context3DTextureFormat.BGRA,true);
	}
	,__class__: away3d.textures.RenderTexture
});
away3d.tools = {};
away3d.tools.utils = {};
away3d.tools.utils.GeomUtil = function() { };
$hxClasses["away3d.tools.utils.GeomUtil"] = away3d.tools.utils.GeomUtil;
away3d.tools.utils.GeomUtil.__name__ = ["away3d","tools","utils","GeomUtil"];
away3d.tools.utils.GeomUtil.fromVectors = function(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset) {
	if(triangleOffset == null) triangleOffset = 0;
	var LIMIT_VERTS = 196605;
	var LIMIT_INDICES = 983025;
	var subs;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	subs = this1;
	if(uvs != null && uvs.length == 0) uvs = null;
	if(normals != null && normals.length == 0) normals = null;
	if(tangents != null && tangents.length == 0) tangents = null;
	if(weights != null && weights.length == 0) weights = null;
	if(jointIndices != null && jointIndices.length == 0) jointIndices = null;
	if(indices.length >= LIMIT_INDICES || verts.length >= LIMIT_VERTS) {
		var i = 0;
		var len;
		var outIndex;
		var j;
		var splitVerts;
		var this3;
		this3 = new openfl.VectorData();
		var this4;
		this4 = new Array(0);
		this3.data = this4;
		this3.length = 0;
		this3.fixed = false;
		splitVerts = this3;
		var splitIndices;
		var this5;
		this5 = new openfl.VectorData();
		var this6;
		this6 = new Array(0);
		this5.data = this6;
		this5.length = 0;
		this5.fixed = false;
		splitIndices = this5;
		var splitUvs;
		if(uvs != null) {
			var this7;
			this7 = new openfl.VectorData();
			var this8;
			this8 = new Array(0);
			this7.data = this8;
			this7.length = 0;
			this7.fixed = false;
			splitUvs = this7;
		} else splitUvs = null;
		var splitNormals;
		if(normals != null) {
			var this9;
			this9 = new openfl.VectorData();
			var this10;
			this10 = new Array(0);
			this9.data = this10;
			this9.length = 0;
			this9.fixed = false;
			splitNormals = this9;
		} else splitNormals = null;
		var splitTangents;
		if(tangents != null) {
			var this11;
			this11 = new openfl.VectorData();
			var this12;
			this12 = new Array(0);
			this11.data = this12;
			this11.length = 0;
			this11.fixed = false;
			splitTangents = this11;
		} else splitTangents = null;
		var splitWeights;
		if(weights != null) {
			var this13;
			this13 = new openfl.VectorData();
			var this14;
			this14 = new Array(0);
			this13.data = this14;
			this13.length = 0;
			this13.fixed = false;
			splitWeights = this13;
		} else splitWeights = null;
		var splitJointIndices;
		if(jointIndices != null) {
			var this15;
			this15 = new openfl.VectorData();
			var this16;
			this16 = new Array(0);
			this15.data = this16;
			this15.length = 0;
			this15.fixed = false;
			splitJointIndices = this15;
		} else splitJointIndices = null;
		var mappings = away3d.utils.ArrayUtils.Prefill(away3d.utils._ArrayUtils.AcceptEither_Impl_.fromB((function($this) {
			var $r;
			var this17;
			this17 = new openfl.VectorData();
			{
				var this18;
				this18 = new Array(0);
				this17.data = this18;
			}
			this17.length = 0;
			this17.fixed = false;
			$r = this17;
			return $r;
		}(this))),verts.length / 3 | 0,0);
		i = mappings.length;
		while(i-- > 0) {
			if(!mappings.fixed) {
				if(i >= mappings.length) mappings.length = i + 1;
				if(mappings.data.length < mappings.length) {
					var data;
					var this19;
					this19 = new Array(mappings.data.length + 10);
					data = this19;
					haxe.ds._Vector.Vector_Impl_.blit(mappings.data,0,data,0,mappings.data.length);
					mappings.data = data;
				}
			}
			mappings.data[i] = -1;
		}
		var originalIndex;
		var splitIndex;
		var o0;
		var o1;
		var o2;
		var s0;
		var s1;
		var s2;
		var su;
		var ou;
		var sv;
		var ov;
		outIndex = 0;
		len = indices.length;
		i = 0;
		while(i < len) {
			splitIndex = splitVerts.length + 6;
			if(outIndex + 2 >= LIMIT_INDICES || splitIndex >= LIMIT_VERTS) {
				var x = away3d.tools.utils.GeomUtil.constructSubGeometry(splitVerts,splitIndices,splitUvs,splitNormals,splitTangents,splitWeights,splitJointIndices,triangleOffset);
				if(!subs.fixed) {
					subs.length++;
					if(subs.data.length < subs.length) {
						var data1;
						var this20;
						this20 = new Array(subs.data.length + 10);
						data1 = this20;
						haxe.ds._Vector.Vector_Impl_.blit(subs.data,0,data1,0,subs.data.length);
						subs.data = data1;
					}
					subs.data[subs.length - 1] = x;
				}
				subs.length;
				var this21;
				this21 = new openfl.VectorData();
				var this22;
				this22 = new Array(0);
				this21.data = this22;
				this21.length = 0;
				this21.fixed = false;
				splitVerts = this21;
				var this23;
				this23 = new openfl.VectorData();
				var this24;
				this24 = new Array(0);
				this23.data = this24;
				this23.length = 0;
				this23.fixed = false;
				splitIndices = this23;
				if(uvs != null) {
					var this25;
					this25 = new openfl.VectorData();
					var this26;
					this26 = new Array(0);
					this25.data = this26;
					this25.length = 0;
					this25.fixed = false;
					splitUvs = this25;
				} else splitUvs = null;
				if(normals != null) {
					var this27;
					this27 = new openfl.VectorData();
					var this28;
					this28 = new Array(0);
					this27.data = this28;
					this27.length = 0;
					this27.fixed = false;
					splitNormals = this27;
				} else splitNormals = null;
				if(tangents != null) {
					var this29;
					this29 = new openfl.VectorData();
					var this30;
					this30 = new Array(0);
					this29.data = this30;
					this29.length = 0;
					this29.fixed = false;
					splitTangents = this29;
				} else splitTangents = null;
				if(weights != null) {
					var this31;
					this31 = new openfl.VectorData();
					var this32;
					this32 = new Array(0);
					this31.data = this32;
					this31.length = 0;
					this31.fixed = false;
					splitWeights = this31;
				} else splitWeights = null;
				if(jointIndices != null) {
					var this33;
					this33 = new openfl.VectorData();
					var this34;
					this34 = new Array(0);
					this33.data = this34;
					this33.length = 0;
					this33.fixed = false;
					splitJointIndices = this33;
				} else splitJointIndices = null;
				splitIndex = 0;
				j = mappings.length;
				while(j-- > 0) {
					if(!mappings.fixed) {
						if(j >= mappings.length) mappings.length = j + 1;
						if(mappings.data.length < mappings.length) {
							var data2;
							var this35;
							this35 = new Array(mappings.data.length + 10);
							data2 = this35;
							haxe.ds._Vector.Vector_Impl_.blit(mappings.data,0,data2,0,mappings.data.length);
							mappings.data = data2;
						}
					}
					mappings.data[j] = -1;
				}
				outIndex = 0;
			}
			j = 0;
			while(j < 3) {
				originalIndex = indices.data[i + j];
				if(mappings.data[originalIndex] >= 0) splitIndex = mappings.data[originalIndex]; else {
					o0 = originalIndex * 3;
					o1 = originalIndex * 3 + 1;
					o2 = originalIndex * 3 + 2;
					splitIndex = splitVerts.length / 3 | 0;
					s0 = splitIndex * 3;
					s1 = splitIndex * 3 + 1;
					s2 = splitIndex * 3 + 2;
					if(!splitVerts.fixed) {
						if(s0 >= splitVerts.length) splitVerts.length = s0 + 1;
						if(splitVerts.data.length < splitVerts.length) {
							var data3;
							var this36;
							this36 = new Array(splitVerts.data.length + 10);
							data3 = this36;
							haxe.ds._Vector.Vector_Impl_.blit(splitVerts.data,0,data3,0,splitVerts.data.length);
							splitVerts.data = data3;
						}
					}
					splitVerts.data[s0] = verts.data[o0];
					if(!splitVerts.fixed) {
						if(s1 >= splitVerts.length) splitVerts.length = s1 + 1;
						if(splitVerts.data.length < splitVerts.length) {
							var data4;
							var this37;
							this37 = new Array(splitVerts.data.length + 10);
							data4 = this37;
							haxe.ds._Vector.Vector_Impl_.blit(splitVerts.data,0,data4,0,splitVerts.data.length);
							splitVerts.data = data4;
						}
					}
					splitVerts.data[s1] = verts.data[o1];
					if(!splitVerts.fixed) {
						if(s2 >= splitVerts.length) splitVerts.length = s2 + 1;
						if(splitVerts.data.length < splitVerts.length) {
							var data5;
							var this38;
							this38 = new Array(splitVerts.data.length + 10);
							data5 = this38;
							haxe.ds._Vector.Vector_Impl_.blit(splitVerts.data,0,data5,0,splitVerts.data.length);
							splitVerts.data = data5;
						}
					}
					splitVerts.data[s2] = verts.data[o2];
					if(uvs != null) {
						su = splitIndex * 2;
						sv = splitIndex * 2 + 1;
						ou = originalIndex * 2;
						ov = originalIndex * 2 + 1;
						if(!splitUvs.fixed) {
							if(su >= splitUvs.length) splitUvs.length = su + 1;
							if(splitUvs.data.length < splitUvs.length) {
								var data6;
								var this39;
								this39 = new Array(splitUvs.data.length + 10);
								data6 = this39;
								haxe.ds._Vector.Vector_Impl_.blit(splitUvs.data,0,data6,0,splitUvs.data.length);
								splitUvs.data = data6;
							}
						}
						splitUvs.data[su] = uvs.data[ou];
						if(!splitUvs.fixed) {
							if(sv >= splitUvs.length) splitUvs.length = sv + 1;
							if(splitUvs.data.length < splitUvs.length) {
								var data7;
								var this40;
								this40 = new Array(splitUvs.data.length + 10);
								data7 = this40;
								haxe.ds._Vector.Vector_Impl_.blit(splitUvs.data,0,data7,0,splitUvs.data.length);
								splitUvs.data = data7;
							}
						}
						splitUvs.data[sv] = uvs.data[ov];
					}
					if(normals != null) {
						if(!splitNormals.fixed) {
							if(s0 >= splitNormals.length) splitNormals.length = s0 + 1;
							if(splitNormals.data.length < splitNormals.length) {
								var data8;
								var this41;
								this41 = new Array(splitNormals.data.length + 10);
								data8 = this41;
								haxe.ds._Vector.Vector_Impl_.blit(splitNormals.data,0,data8,0,splitNormals.data.length);
								splitNormals.data = data8;
							}
						}
						splitNormals.data[s0] = normals.data[o0];
						if(!splitNormals.fixed) {
							if(s1 >= splitNormals.length) splitNormals.length = s1 + 1;
							if(splitNormals.data.length < splitNormals.length) {
								var data9;
								var this42;
								this42 = new Array(splitNormals.data.length + 10);
								data9 = this42;
								haxe.ds._Vector.Vector_Impl_.blit(splitNormals.data,0,data9,0,splitNormals.data.length);
								splitNormals.data = data9;
							}
						}
						splitNormals.data[s1] = normals.data[o1];
						if(!splitNormals.fixed) {
							if(s2 >= splitNormals.length) splitNormals.length = s2 + 1;
							if(splitNormals.data.length < splitNormals.length) {
								var data10;
								var this43;
								this43 = new Array(splitNormals.data.length + 10);
								data10 = this43;
								haxe.ds._Vector.Vector_Impl_.blit(splitNormals.data,0,data10,0,splitNormals.data.length);
								splitNormals.data = data10;
							}
						}
						splitNormals.data[s2] = normals.data[o2];
					}
					if(tangents != null) {
						if(!splitTangents.fixed) {
							if(s0 >= splitTangents.length) splitTangents.length = s0 + 1;
							if(splitTangents.data.length < splitTangents.length) {
								var data11;
								var this44;
								this44 = new Array(splitTangents.data.length + 10);
								data11 = this44;
								haxe.ds._Vector.Vector_Impl_.blit(splitTangents.data,0,data11,0,splitTangents.data.length);
								splitTangents.data = data11;
							}
						}
						splitTangents.data[s0] = tangents.data[o0];
						if(!splitTangents.fixed) {
							if(s1 >= splitTangents.length) splitTangents.length = s1 + 1;
							if(splitTangents.data.length < splitTangents.length) {
								var data12;
								var this45;
								this45 = new Array(splitTangents.data.length + 10);
								data12 = this45;
								haxe.ds._Vector.Vector_Impl_.blit(splitTangents.data,0,data12,0,splitTangents.data.length);
								splitTangents.data = data12;
							}
						}
						splitTangents.data[s1] = tangents.data[o1];
						if(!splitTangents.fixed) {
							if(s2 >= splitTangents.length) splitTangents.length = s2 + 1;
							if(splitTangents.data.length < splitTangents.length) {
								var data13;
								var this46;
								this46 = new Array(splitTangents.data.length + 10);
								data13 = this46;
								haxe.ds._Vector.Vector_Impl_.blit(splitTangents.data,0,data13,0,splitTangents.data.length);
								splitTangents.data = data13;
							}
						}
						splitTangents.data[s2] = tangents.data[o2];
					}
					if(weights != null) {
						if(!splitWeights.fixed) {
							if(s0 >= splitWeights.length) splitWeights.length = s0 + 1;
							if(splitWeights.data.length < splitWeights.length) {
								var data14;
								var this47;
								this47 = new Array(splitWeights.data.length + 10);
								data14 = this47;
								haxe.ds._Vector.Vector_Impl_.blit(splitWeights.data,0,data14,0,splitWeights.data.length);
								splitWeights.data = data14;
							}
						}
						splitWeights.data[s0] = weights.data[o0];
						if(!splitWeights.fixed) {
							if(s1 >= splitWeights.length) splitWeights.length = s1 + 1;
							if(splitWeights.data.length < splitWeights.length) {
								var data15;
								var this48;
								this48 = new Array(splitWeights.data.length + 10);
								data15 = this48;
								haxe.ds._Vector.Vector_Impl_.blit(splitWeights.data,0,data15,0,splitWeights.data.length);
								splitWeights.data = data15;
							}
						}
						splitWeights.data[s1] = weights.data[o1];
						if(!splitWeights.fixed) {
							if(s2 >= splitWeights.length) splitWeights.length = s2 + 1;
							if(splitWeights.data.length < splitWeights.length) {
								var data16;
								var this49;
								this49 = new Array(splitWeights.data.length + 10);
								data16 = this49;
								haxe.ds._Vector.Vector_Impl_.blit(splitWeights.data,0,data16,0,splitWeights.data.length);
								splitWeights.data = data16;
							}
						}
						splitWeights.data[s2] = weights.data[o2];
					}
					if(jointIndices != null) {
						if(!splitJointIndices.fixed) {
							if(s0 >= splitJointIndices.length) splitJointIndices.length = s0 + 1;
							if(splitJointIndices.data.length < splitJointIndices.length) {
								var data17;
								var this50;
								this50 = new Array(splitJointIndices.data.length + 10);
								data17 = this50;
								haxe.ds._Vector.Vector_Impl_.blit(splitJointIndices.data,0,data17,0,splitJointIndices.data.length);
								splitJointIndices.data = data17;
							}
						}
						splitJointIndices.data[s0] = jointIndices.data[o0];
						if(!splitJointIndices.fixed) {
							if(s1 >= splitJointIndices.length) splitJointIndices.length = s1 + 1;
							if(splitJointIndices.data.length < splitJointIndices.length) {
								var data18;
								var this51;
								this51 = new Array(splitJointIndices.data.length + 10);
								data18 = this51;
								haxe.ds._Vector.Vector_Impl_.blit(splitJointIndices.data,0,data18,0,splitJointIndices.data.length);
								splitJointIndices.data = data18;
							}
						}
						splitJointIndices.data[s1] = jointIndices.data[o1];
						if(!splitJointIndices.fixed) {
							if(s2 >= splitJointIndices.length) splitJointIndices.length = s2 + 1;
							if(splitJointIndices.data.length < splitJointIndices.length) {
								var data19;
								var this52;
								this52 = new Array(splitJointIndices.data.length + 10);
								data19 = this52;
								haxe.ds._Vector.Vector_Impl_.blit(splitJointIndices.data,0,data19,0,splitJointIndices.data.length);
								splitJointIndices.data = data19;
							}
						}
						splitJointIndices.data[s2] = jointIndices.data[o2];
					}
					if(!mappings.fixed) {
						if(originalIndex >= mappings.length) mappings.length = originalIndex + 1;
						if(mappings.data.length < mappings.length) {
							var data20;
							var this53;
							this53 = new Array(mappings.data.length + 10);
							data20 = this53;
							haxe.ds._Vector.Vector_Impl_.blit(mappings.data,0,data20,0,mappings.data.length);
							mappings.data = data20;
						}
					}
					mappings.data[originalIndex] = splitIndex;
				}
				var key = outIndex + j;
				if(!splitIndices.fixed) {
					if(key >= splitIndices.length) splitIndices.length = key + 1;
					if(splitIndices.data.length < splitIndices.length) {
						var data21;
						var this54;
						this54 = new Array(splitIndices.data.length + 10);
						data21 = this54;
						haxe.ds._Vector.Vector_Impl_.blit(splitIndices.data,0,data21,0,splitIndices.data.length);
						splitIndices.data = data21;
					}
				}
				splitIndices.data[key] = splitIndex;
				j++;
			}
			outIndex += 3;
			i += 3;
		}
		if(splitVerts.length > 0) {
			var x1 = away3d.tools.utils.GeomUtil.constructSubGeometry(splitVerts,splitIndices,splitUvs,splitNormals,splitTangents,splitWeights,splitJointIndices,triangleOffset);
			if(!subs.fixed) {
				subs.length++;
				if(subs.data.length < subs.length) {
					var data22;
					var this55;
					this55 = new Array(subs.data.length + 10);
					data22 = this55;
					haxe.ds._Vector.Vector_Impl_.blit(subs.data,0,data22,0,subs.data.length);
					subs.data = data22;
				}
				subs.data[subs.length - 1] = x1;
			}
			subs.length;
		}
	} else {
		var x2 = away3d.tools.utils.GeomUtil.constructSubGeometry(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset);
		if(!subs.fixed) {
			subs.length++;
			if(subs.data.length < subs.length) {
				var data23;
				var this56;
				this56 = new Array(subs.data.length + 10);
				data23 = this56;
				haxe.ds._Vector.Vector_Impl_.blit(subs.data,0,data23,0,subs.data.length);
				subs.data = data23;
			}
			subs.data[subs.length - 1] = x2;
		}
		subs.length;
	}
	return subs;
};
away3d.tools.utils.GeomUtil.constructSubGeometry = function(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset) {
	var sub;
	if(weights != null && jointIndices != null) {
		sub = new away3d.core.base.SkinnedSubGeometry(weights.length / (verts.length / 3) | 0);
		(js.Boot.__cast(sub , away3d.core.base.SkinnedSubGeometry)).updateJointWeightsData(weights);
		(js.Boot.__cast(sub , away3d.core.base.SkinnedSubGeometry)).updateJointIndexData(jointIndices);
	} else sub = new away3d.core.base.CompactSubGeometry();
	sub.updateIndexData(indices);
	sub.fromVectors(verts,uvs,normals,tangents);
	return sub;
};
away3d.tools.utils.GeomUtil.interleaveBuffers = function(numVertices,vertices,normals,tangents,uvs,suvs) {
	var i = 0;
	var compIndex;
	var uvCompIndex;
	var interleavedCompIndex;
	var interleavedBuffer;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	interleavedBuffer = this1;
	i = 0;
	while(i < numVertices) {
		uvCompIndex = i * 2;
		compIndex = i * 3;
		interleavedCompIndex = i * 13;
		if(!interleavedBuffer.fixed) {
			if(interleavedCompIndex >= interleavedBuffer.length) interleavedBuffer.length = interleavedCompIndex + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data;
				var this3;
				this3 = new Array(interleavedBuffer.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data;
			}
		}
		if(vertices != null) interleavedBuffer.data[interleavedCompIndex] = vertices.data[compIndex]; else interleavedBuffer.data[interleavedCompIndex] = 0;
		var key = interleavedCompIndex + 1;
		if(!interleavedBuffer.fixed) {
			if(key >= interleavedBuffer.length) interleavedBuffer.length = key + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data1;
				var this4;
				this4 = new Array(interleavedBuffer.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data1,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data1;
			}
		}
		if(vertices != null) interleavedBuffer.data[key] = vertices.data[compIndex + 1]; else interleavedBuffer.data[key] = 0;
		var key1 = interleavedCompIndex + 2;
		if(!interleavedBuffer.fixed) {
			if(key1 >= interleavedBuffer.length) interleavedBuffer.length = key1 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data2;
				var this5;
				this5 = new Array(interleavedBuffer.data.length + 10);
				data2 = this5;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data2,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data2;
			}
		}
		if(vertices != null) interleavedBuffer.data[key1] = vertices.data[compIndex + 2]; else interleavedBuffer.data[key1] = 0;
		var key2 = interleavedCompIndex + 3;
		if(!interleavedBuffer.fixed) {
			if(key2 >= interleavedBuffer.length) interleavedBuffer.length = key2 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data3;
				var this6;
				this6 = new Array(interleavedBuffer.data.length + 10);
				data3 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data3,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data3;
			}
		}
		if(normals != null) interleavedBuffer.data[key2] = normals.data[compIndex]; else interleavedBuffer.data[key2] = 0;
		var key3 = interleavedCompIndex + 4;
		if(!interleavedBuffer.fixed) {
			if(key3 >= interleavedBuffer.length) interleavedBuffer.length = key3 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data4;
				var this7;
				this7 = new Array(interleavedBuffer.data.length + 10);
				data4 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data4,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data4;
			}
		}
		if(normals != null) interleavedBuffer.data[key3] = normals.data[compIndex + 1]; else interleavedBuffer.data[key3] = 0;
		var key4 = interleavedCompIndex + 5;
		if(!interleavedBuffer.fixed) {
			if(key4 >= interleavedBuffer.length) interleavedBuffer.length = key4 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data5;
				var this8;
				this8 = new Array(interleavedBuffer.data.length + 10);
				data5 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data5,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data5;
			}
		}
		if(normals != null) interleavedBuffer.data[key4] = normals.data[compIndex + 2]; else interleavedBuffer.data[key4] = 0;
		var key5 = interleavedCompIndex + 6;
		if(!interleavedBuffer.fixed) {
			if(key5 >= interleavedBuffer.length) interleavedBuffer.length = key5 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data6;
				var this9;
				this9 = new Array(interleavedBuffer.data.length + 10);
				data6 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data6,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data6;
			}
		}
		if(tangents != null) interleavedBuffer.data[key5] = tangents.data[compIndex]; else interleavedBuffer.data[key5] = 0;
		var key6 = interleavedCompIndex + 7;
		if(!interleavedBuffer.fixed) {
			if(key6 >= interleavedBuffer.length) interleavedBuffer.length = key6 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data7;
				var this10;
				this10 = new Array(interleavedBuffer.data.length + 10);
				data7 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data7,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data7;
			}
		}
		if(tangents != null) interleavedBuffer.data[key6] = tangents.data[compIndex + 1]; else interleavedBuffer.data[key6] = 0;
		var key7 = interleavedCompIndex + 8;
		if(!interleavedBuffer.fixed) {
			if(key7 >= interleavedBuffer.length) interleavedBuffer.length = key7 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data8;
				var this11;
				this11 = new Array(interleavedBuffer.data.length + 10);
				data8 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data8,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data8;
			}
		}
		if(tangents != null) interleavedBuffer.data[key7] = tangents.data[compIndex + 2]; else interleavedBuffer.data[key7] = 0;
		var key8 = interleavedCompIndex + 9;
		if(!interleavedBuffer.fixed) {
			if(key8 >= interleavedBuffer.length) interleavedBuffer.length = key8 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data9;
				var this12;
				this12 = new Array(interleavedBuffer.data.length + 10);
				data9 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data9,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data9;
			}
		}
		if(uvs != null) interleavedBuffer.data[key8] = uvs.data[uvCompIndex]; else interleavedBuffer.data[key8] = 0;
		var key9 = interleavedCompIndex + 10;
		if(!interleavedBuffer.fixed) {
			if(key9 >= interleavedBuffer.length) interleavedBuffer.length = key9 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data10;
				var this13;
				this13 = new Array(interleavedBuffer.data.length + 10);
				data10 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data10,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data10;
			}
		}
		if(uvs != null) interleavedBuffer.data[key9] = uvs.data[uvCompIndex + 1]; else interleavedBuffer.data[key9] = 0;
		var key10 = interleavedCompIndex + 11;
		if(!interleavedBuffer.fixed) {
			if(key10 >= interleavedBuffer.length) interleavedBuffer.length = key10 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data11;
				var this14;
				this14 = new Array(interleavedBuffer.data.length + 10);
				data11 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data11,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data11;
			}
		}
		if(suvs != null) interleavedBuffer.data[key10] = suvs.data[uvCompIndex]; else interleavedBuffer.data[key10] = 0;
		var key11 = interleavedCompIndex + 12;
		if(!interleavedBuffer.fixed) {
			if(key11 >= interleavedBuffer.length) interleavedBuffer.length = key11 + 1;
			if(interleavedBuffer.data.length < interleavedBuffer.length) {
				var data12;
				var this15;
				this15 = new Array(interleavedBuffer.data.length + 10);
				data12 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(interleavedBuffer.data,0,data12,0,interleavedBuffer.data.length);
				interleavedBuffer.data = data12;
			}
		}
		if(suvs != null) interleavedBuffer.data[key11] = suvs.data[uvCompIndex + 1]; else interleavedBuffer.data[key11] = 0;
		++i;
	}
	return interleavedBuffer;
};
away3d.tools.utils.GeomUtil.getMeshSubgeometryIndex = function(subGeometry) {
	var index = 0;
	var subGeometries = subGeometry.get_parentGeometry().get_subGeometries();
	var i = 0;
	while(i < subGeometries.length) {
		if(subGeometries.data[i] == subGeometry) {
			index = i;
			break;
		}
		++i;
	}
	return index;
};
away3d.tools.utils.GeomUtil.getMeshSubMeshIndex = function(subMesh) {
	var index = 0;
	var subMeshes = subMesh.get_parentMesh().get_subMeshes();
	var i = 0;
	while(i < subMeshes.length) {
		if(subMeshes.data[i] == subMesh) {
			index = i;
			break;
		}
		++i;
	}
	return index;
};
away3d.tools.utils.TextureUtils = function() { };
$hxClasses["away3d.tools.utils.TextureUtils"] = away3d.tools.utils.TextureUtils;
away3d.tools.utils.TextureUtils.__name__ = ["away3d","tools","utils","TextureUtils"];
away3d.tools.utils.TextureUtils.isBitmapDataValid = function(bitmapData) {
	if(bitmapData == null) return true;
	return away3d.tools.utils.TextureUtils.isDimensionValid(bitmapData.width) && away3d.tools.utils.TextureUtils.isDimensionValid(bitmapData.height);
};
away3d.tools.utils.TextureUtils.isDimensionValid = function(d) {
	return d >= 1 && d <= away3d.tools.utils.TextureUtils.MAX_SIZE && away3d.tools.utils.TextureUtils.isPowerOfTwo(d);
};
away3d.tools.utils.TextureUtils.isPowerOfTwo = function(value) {
	if(value > 0) return (value & -value) == value; else return false;
};
away3d.tools.utils.TextureUtils.getBestPowerOf2 = function(value) {
	var p = 1;
	while(p < value) p <<= 1;
	if(p > away3d.tools.utils.TextureUtils.MAX_SIZE) p = away3d.tools.utils.TextureUtils.MAX_SIZE;
	return p;
};
var box2D = {};
box2D.collision = {};
box2D.collision.B2AABB = function() {
	this.lowerBound = new box2D.common.math.B2Vec2();
	this.upperBound = new box2D.common.math.B2Vec2();
};
$hxClasses["box2D.collision.B2AABB"] = box2D.collision.B2AABB;
box2D.collision.B2AABB.__name__ = ["box2D","collision","B2AABB"];
box2D.collision.B2AABB.prototype = {
	isValid: function() {
		var dX = this.upperBound.x - this.lowerBound.x;
		var dY = this.upperBound.y - this.lowerBound.y;
		var valid = dX >= 0.0 && dY >= 0.0;
		valid = valid && this.lowerBound.isValid() && this.upperBound.isValid();
		return valid;
	}
	,getCenter: function() {
		return new box2D.common.math.B2Vec2((this.lowerBound.x + this.upperBound.x) / 2,(this.lowerBound.y + this.upperBound.y) / 2);
	}
	,getExtents: function() {
		return new box2D.common.math.B2Vec2((this.upperBound.x - this.lowerBound.x) / 2,(this.upperBound.y - this.lowerBound.y) / 2);
	}
	,contains: function(aabb) {
		var result = true;
		result = result && this.lowerBound.x <= aabb.lowerBound.x;
		result = result && this.lowerBound.y <= aabb.lowerBound.y;
		result = result && aabb.upperBound.x <= this.upperBound.x;
		result = result && aabb.upperBound.y <= this.upperBound.y;
		return result;
	}
	,rayCast: function(output,input) {
		var tmin = -Number.MAX_VALUE;
		var tmax = Number.MAX_VALUE;
		var pX = input.p1.x;
		var pY = input.p1.y;
		var dX = input.p2.x - input.p1.x;
		var dY = input.p2.y - input.p1.y;
		var absDX = Math.abs(dX);
		var absDY = Math.abs(dY);
		var normal = output.normal;
		var inv_d;
		var t1;
		var t2;
		var t3;
		var s;
		if(absDX < Number.MIN_VALUE) {
			if(pX < this.lowerBound.x || this.upperBound.x < pX) return false;
		} else {
			inv_d = 1.0 / dX;
			t1 = (this.lowerBound.x - pX) * inv_d;
			t2 = (this.upperBound.x - pX) * inv_d;
			s = -1.0;
			if(t1 > t2) {
				t3 = t1;
				t1 = t2;
				t2 = t3;
				s = 1.0;
			}
			if(t1 > tmin) {
				normal.x = s;
				normal.y = 0;
				tmin = t1;
			}
			tmax = Math.min(tmax,t2);
			if(tmin > tmax) return false;
		}
		if(absDY < Number.MIN_VALUE) {
			if(pY < this.lowerBound.y || this.upperBound.y < pY) return false;
		} else {
			inv_d = 1.0 / dY;
			t1 = (this.lowerBound.y - pY) * inv_d;
			t2 = (this.upperBound.y - pY) * inv_d;
			s = -1.0;
			if(t1 > t2) {
				t3 = t1;
				t1 = t2;
				t2 = t3;
				s = 1.0;
			}
			if(t1 > tmin) {
				normal.y = s;
				normal.x = 0;
				tmin = t1;
			}
			tmax = Math.min(tmax,t2);
			if(tmin > tmax) return false;
		}
		output.fraction = tmin;
		return true;
	}
	,testOverlap: function(other) {
		var d1X = other.lowerBound.x - this.upperBound.x;
		var d1Y = other.lowerBound.y - this.upperBound.y;
		var d2X = this.lowerBound.x - other.upperBound.x;
		var d2Y = this.lowerBound.y - other.upperBound.y;
		if(d1X > 0.0 || d1Y > 0.0) return false;
		if(d2X > 0.0 || d2Y > 0.0) return false;
		return true;
	}
	,combine: function(aabb1,aabb2) {
		this.lowerBound.x = Math.min(aabb1.lowerBound.x,aabb2.lowerBound.x);
		this.lowerBound.y = Math.min(aabb1.lowerBound.y,aabb2.lowerBound.y);
		this.upperBound.x = Math.max(aabb1.upperBound.x,aabb2.upperBound.x);
		this.upperBound.y = Math.max(aabb1.upperBound.y,aabb2.upperBound.y);
	}
	,__class__: box2D.collision.B2AABB
};
box2D.common = {};
box2D.common.math = {};
box2D.common.math.B2Vec2 = function(x_,y_) {
	if(y_ == null) y_ = 0;
	if(x_ == null) x_ = 0;
	this.x = x_;
	this.y = y_;
};
$hxClasses["box2D.common.math.B2Vec2"] = box2D.common.math.B2Vec2;
box2D.common.math.B2Vec2.__name__ = ["box2D","common","math","B2Vec2"];
box2D.common.math.B2Vec2.make = function(x_,y_) {
	return new box2D.common.math.B2Vec2(x_,y_);
};
box2D.common.math.B2Vec2.prototype = {
	setZero: function() {
		this.x = 0.0;
		this.y = 0.0;
	}
	,set: function(x_,y_) {
		if(y_ == null) y_ = 0;
		if(x_ == null) x_ = 0;
		this.x = x_;
		this.y = y_;
	}
	,setV: function(v) {
		this.x = v.x;
		this.y = v.y;
	}
	,getNegative: function() {
		return new box2D.common.math.B2Vec2(-this.x,-this.y);
	}
	,negativeSelf: function() {
		this.x = -this.x;
		this.y = -this.y;
	}
	,copy: function() {
		return new box2D.common.math.B2Vec2(this.x,this.y);
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
	}
	,subtract: function(v) {
		this.x -= v.x;
		this.y -= v.y;
	}
	,multiply: function(a) {
		this.x *= a;
		this.y *= a;
	}
	,mulM: function(A) {
		var tX = this.x;
		this.x = A.col1.x * tX + A.col2.x * this.y;
		this.y = A.col1.y * tX + A.col2.y * this.y;
	}
	,mulTM: function(A) {
		var tX = box2D.common.math.B2Math.dot(this,A.col1);
		this.y = box2D.common.math.B2Math.dot(this,A.col2);
		this.x = tX;
	}
	,crossVF: function(s) {
		var tX = this.x;
		this.x = s * this.y;
		this.y = -s * tX;
	}
	,crossFV: function(s) {
		var tX = this.x;
		this.x = -s * this.y;
		this.y = s * tX;
	}
	,minV: function(b) {
		if(this.x < b.x) this.x = this.x; else this.x = b.x;
		if(this.y < b.y) this.y = this.y; else this.y = b.y;
	}
	,maxV: function(b) {
		if(this.x > b.x) this.x = this.x; else this.x = b.x;
		if(this.y > b.y) this.y = this.y; else this.y = b.y;
	}
	,abs: function() {
		if(this.x < 0) this.x = -this.x;
		if(this.y < 0) this.y = -this.y;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,normalize: function() {
		var length = Math.sqrt(this.x * this.x + this.y * this.y);
		if(length < Number.MIN_VALUE) return 0.0;
		var invLength = 1.0 / length;
		this.x *= invLength;
		this.y *= invLength;
		return length;
	}
	,isValid: function() {
		return box2D.common.math.B2Math.isValid(this.x) && box2D.common.math.B2Math.isValid(this.y);
	}
	,__class__: box2D.common.math.B2Vec2
};
box2D.collision.ClipVertex = function() {
	this.v = new box2D.common.math.B2Vec2();
	this.id = new box2D.collision.B2ContactID();
};
$hxClasses["box2D.collision.ClipVertex"] = box2D.collision.ClipVertex;
box2D.collision.ClipVertex.__name__ = ["box2D","collision","ClipVertex"];
box2D.collision.ClipVertex.prototype = {
	set: function(other) {
		this.v.setV(other.v);
		this.id.set(other.id);
	}
	,__class__: box2D.collision.ClipVertex
};
box2D.collision.B2ContactID = function() {
	this._key = 0;
	this.features = new box2D.collision.Features();
	this.features._m_id = this;
};
$hxClasses["box2D.collision.B2ContactID"] = box2D.collision.B2ContactID;
box2D.collision.B2ContactID.__name__ = ["box2D","collision","B2ContactID"];
box2D.collision.B2ContactID.prototype = {
	set: function(id) {
		this.set_key(id._key);
	}
	,copy: function() {
		var id = new box2D.collision.B2ContactID();
		id.set_key(this.get_key());
		return id;
	}
	,get_key: function() {
		return this._key;
	}
	,set_key: function(value) {
		this._key = value;
		this.features._referenceEdge = this._key & 255;
		this.features._incidentEdge = (this._key & 65280) >> 8 & 255;
		this.features._incidentVertex = (this._key & 16711680) >> 16 & 255;
		this.features._flip = (this._key & -16777216) >> 24 & 255;
		return this._key;
	}
	,__class__: box2D.collision.B2ContactID
	,__properties__: {set_key:"set_key",get_key:"get_key"}
};
box2D.collision.Features = function() {
	this._flip = 0;
	this._incidentVertex = 0;
	this._incidentEdge = 0;
	this._referenceEdge = 0;
};
$hxClasses["box2D.collision.Features"] = box2D.collision.Features;
box2D.collision.Features.__name__ = ["box2D","collision","Features"];
box2D.collision.Features.prototype = {
	get_referenceEdge: function() {
		return this._referenceEdge;
	}
	,set_referenceEdge: function(value) {
		this._referenceEdge = value;
		this._m_id._key = this._m_id._key & -256 | this._referenceEdge & 255;
		return value;
	}
	,get_incidentEdge: function() {
		return this._incidentEdge;
	}
	,set_incidentEdge: function(value) {
		this._incidentEdge = value;
		this._m_id._key = this._m_id._key & -65281 | this._incidentEdge << 8 & 65280;
		return value;
	}
	,get_incidentVertex: function() {
		return this._incidentVertex;
	}
	,set_incidentVertex: function(value) {
		this._incidentVertex = value;
		this._m_id._key = this._m_id._key & -16711681 | this._incidentVertex << 16 & 16711680;
		return value;
	}
	,get_flip: function() {
		return this._flip;
	}
	,set_flip: function(value) {
		this._flip = value;
		this._m_id._key = this._m_id._key & 16777215 | this._flip << 24 & -16777216;
		return value;
	}
	,__class__: box2D.collision.Features
	,__properties__: {set_flip:"set_flip",get_flip:"get_flip",set_incidentVertex:"set_incidentVertex",get_incidentVertex:"get_incidentVertex",set_incidentEdge:"set_incidentEdge",get_incidentEdge:"get_incidentEdge",set_referenceEdge:"set_referenceEdge",get_referenceEdge:"get_referenceEdge"}
};
box2D.collision.B2Collision = function() { };
$hxClasses["box2D.collision.B2Collision"] = box2D.collision.B2Collision;
box2D.collision.B2Collision.__name__ = ["box2D","collision","B2Collision"];
box2D.collision.B2Collision.clipSegmentToLine = function(vOut,vIn,normal,offset) {
	var cv;
	var numOut = 0;
	cv = vIn[0];
	var vIn0 = cv.v;
	cv = vIn[1];
	var vIn1 = cv.v;
	var distance0 = normal.x * vIn0.x + normal.y * vIn0.y - offset;
	var distance1 = normal.x * vIn1.x + normal.y * vIn1.y - offset;
	if(distance0 <= 0.0) vOut[numOut++].set(vIn[0]);
	if(distance1 <= 0.0) vOut[numOut++].set(vIn[1]);
	if(distance0 * distance1 < 0.0) {
		var interp = distance0 / (distance0 - distance1);
		cv = vOut[numOut];
		var tVec = cv.v;
		tVec.x = vIn0.x + interp * (vIn1.x - vIn0.x);
		tVec.y = vIn0.y + interp * (vIn1.y - vIn0.y);
		cv = vOut[numOut];
		var cv2;
		if(distance0 > 0.0) {
			cv2 = vIn[0];
			cv.id = cv2.id;
		} else {
			cv2 = vIn[1];
			cv.id = cv2.id;
		}
		++numOut;
	}
	return numOut;
};
box2D.collision.B2Collision.edgeSeparation = function(poly1,xf1,edge1,poly2,xf2) {
	var count1 = poly1.m_vertexCount;
	var vertices1 = poly1.m_vertices;
	var normals1 = poly1.m_normals;
	var count2 = poly2.m_vertexCount;
	var vertices2 = poly2.m_vertices;
	var tMat;
	var tVec;
	tMat = xf1.R;
	tVec = normals1[edge1];
	var normal1WorldX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
	var normal1WorldY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
	tMat = xf2.R;
	var normal1X = tMat.col1.x * normal1WorldX + tMat.col1.y * normal1WorldY;
	var normal1Y = tMat.col2.x * normal1WorldX + tMat.col2.y * normal1WorldY;
	var index = 0;
	var minDot = Number.MAX_VALUE;
	var _g = 0;
	while(_g < count2) {
		var i = _g++;
		tVec = vertices2[i];
		var dot = tVec.x * normal1X + tVec.y * normal1Y;
		if(dot < minDot) {
			minDot = dot;
			index = i;
		}
	}
	tVec = vertices1[edge1];
	tMat = xf1.R;
	var v1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var v1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	tVec = vertices2[index];
	tMat = xf2.R;
	var v2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var v2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	v2X -= v1X;
	v2Y -= v1Y;
	var separation = v2X * normal1WorldX + v2Y * normal1WorldY;
	return separation;
};
box2D.collision.B2Collision.findMaxSeparation = function(edgeIndex,poly1,xf1,poly2,xf2) {
	var count1 = poly1.m_vertexCount;
	var normals1 = poly1.m_normals;
	var tVec;
	var tMat;
	tMat = xf2.R;
	tVec = poly2.m_centroid;
	var dX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var dY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	tMat = xf1.R;
	tVec = poly1.m_centroid;
	dX -= xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	dY -= xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	var dLocal1X = dX * xf1.R.col1.x + dY * xf1.R.col1.y;
	var dLocal1Y = dX * xf1.R.col2.x + dY * xf1.R.col2.y;
	var edge = 0;
	var maxDot = -Number.MAX_VALUE;
	var _g = 0;
	while(_g < count1) {
		var i = _g++;
		tVec = normals1[i];
		var dot = tVec.x * dLocal1X + tVec.y * dLocal1Y;
		if(dot > maxDot) {
			maxDot = dot;
			edge = i;
		}
	}
	var s = box2D.collision.B2Collision.edgeSeparation(poly1,xf1,edge,poly2,xf2);
	var prevEdge;
	if(edge - 1 >= 0) prevEdge = edge - 1; else prevEdge = count1 - 1;
	var sPrev = box2D.collision.B2Collision.edgeSeparation(poly1,xf1,prevEdge,poly2,xf2);
	var nextEdge;
	if(edge + 1 < count1) nextEdge = edge + 1; else nextEdge = 0;
	var sNext = box2D.collision.B2Collision.edgeSeparation(poly1,xf1,nextEdge,poly2,xf2);
	var bestEdge;
	var bestSeparation;
	var increment;
	if(sPrev > s && sPrev > sNext) {
		increment = -1;
		bestEdge = prevEdge;
		bestSeparation = sPrev;
	} else if(sNext > s) {
		increment = 1;
		bestEdge = nextEdge;
		bestSeparation = sNext;
	} else {
		edgeIndex[0] = edge;
		return s;
	}
	while(true) {
		if(increment == -1) if(bestEdge - 1 >= 0) edge = bestEdge - 1; else edge = count1 - 1; else if(bestEdge + 1 < count1) edge = bestEdge + 1; else edge = 0;
		s = box2D.collision.B2Collision.edgeSeparation(poly1,xf1,edge,poly2,xf2);
		if(s > bestSeparation) {
			bestEdge = edge;
			bestSeparation = s;
		} else break;
	}
	edgeIndex[0] = bestEdge;
	return bestSeparation;
};
box2D.collision.B2Collision.findIncidentEdge = function(c,poly1,xf1,edge1,poly2,xf2) {
	var count1 = poly1.m_vertexCount;
	var normals1 = poly1.m_normals;
	var count2 = poly2.m_vertexCount;
	var vertices2 = poly2.m_vertices;
	var normals2 = poly2.m_normals;
	var tMat;
	var tVec;
	tMat = xf1.R;
	tVec = normals1[edge1];
	var normal1X = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
	var normal1Y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
	tMat = xf2.R;
	var tX = tMat.col1.x * normal1X + tMat.col1.y * normal1Y;
	normal1Y = tMat.col2.x * normal1X + tMat.col2.y * normal1Y;
	normal1X = tX;
	var index = 0;
	var minDot = Number.MAX_VALUE;
	var _g = 0;
	while(_g < count2) {
		var i = _g++;
		tVec = normals2[i];
		var dot = normal1X * tVec.x + normal1Y * tVec.y;
		if(dot < minDot) {
			minDot = dot;
			index = i;
		}
	}
	var tClip;
	var i1 = index;
	var i2;
	if(i1 + 1 < count2) i2 = i1 + 1; else i2 = 0;
	tClip = c[0];
	tVec = vertices2[i1];
	tMat = xf2.R;
	tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	tClip.id.features.set_referenceEdge(edge1);
	tClip.id.features.set_incidentEdge(i1);
	tClip.id.features.set_incidentVertex(0);
	tClip = c[1];
	tVec = vertices2[i2];
	tMat = xf2.R;
	tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	tClip.id.features.set_referenceEdge(edge1);
	tClip.id.features.set_incidentEdge(i2);
	tClip.id.features.set_incidentVertex(1);
};
box2D.collision.B2Collision.makeClipPointVector = function() {
	var r = new Array();
	r[0] = new box2D.collision.ClipVertex();
	r[1] = new box2D.collision.ClipVertex();
	return r;
};
box2D.collision.B2Collision.collidePolygons = function(manifold,polyA,xfA,polyB,xfB) {
	var cv;
	manifold.m_pointCount = 0;
	var totalRadius = polyA.m_radius + polyB.m_radius;
	var edgeA = 0;
	box2D.collision.B2Collision.s_edgeAO[0] = edgeA;
	var separationA = box2D.collision.B2Collision.findMaxSeparation(box2D.collision.B2Collision.s_edgeAO,polyA,xfA,polyB,xfB);
	edgeA = box2D.collision.B2Collision.s_edgeAO[0];
	if(separationA > totalRadius) return;
	var edgeB = 0;
	box2D.collision.B2Collision.s_edgeBO[0] = edgeB;
	var separationB = box2D.collision.B2Collision.findMaxSeparation(box2D.collision.B2Collision.s_edgeBO,polyB,xfB,polyA,xfA);
	edgeB = box2D.collision.B2Collision.s_edgeBO[0];
	if(separationB > totalRadius) return;
	var poly1;
	var poly2;
	var xf1;
	var xf2;
	var edge1;
	var flip;
	var k_relativeTol = 0.98;
	var k_absoluteTol = 0.001;
	var tMat;
	if(separationB > k_relativeTol * separationA + k_absoluteTol) {
		poly1 = polyB;
		poly2 = polyA;
		xf1 = xfB;
		xf2 = xfA;
		edge1 = edgeB;
		manifold.m_type = box2D.collision.B2ManifoldType.FACE_B;
		flip = 1;
	} else {
		poly1 = polyA;
		poly2 = polyB;
		xf1 = xfA;
		xf2 = xfB;
		edge1 = edgeA;
		manifold.m_type = box2D.collision.B2ManifoldType.FACE_A;
		flip = 0;
	}
	var incidentEdge = box2D.collision.B2Collision.s_incidentEdge;
	box2D.collision.B2Collision.findIncidentEdge(incidentEdge,poly1,xf1,edge1,poly2,xf2);
	var count1 = poly1.m_vertexCount;
	var vertices1 = poly1.m_vertices;
	var local_v11 = vertices1[edge1];
	var local_v12;
	if(edge1 + 1 < count1) local_v12 = vertices1[edge1 + 1 | 0]; else local_v12 = vertices1[0];
	var localTangent = box2D.collision.B2Collision.s_localTangent;
	localTangent.set(local_v12.x - local_v11.x,local_v12.y - local_v11.y);
	localTangent.normalize();
	var localNormal = box2D.collision.B2Collision.s_localNormal;
	localNormal.x = localTangent.y;
	localNormal.y = -localTangent.x;
	var planePoint = box2D.collision.B2Collision.s_planePoint;
	planePoint.set(0.5 * (local_v11.x + local_v12.x),0.5 * (local_v11.y + local_v12.y));
	var tangent = box2D.collision.B2Collision.s_tangent;
	tMat = xf1.R;
	tangent.x = tMat.col1.x * localTangent.x + tMat.col2.x * localTangent.y;
	tangent.y = tMat.col1.y * localTangent.x + tMat.col2.y * localTangent.y;
	var tangent2 = box2D.collision.B2Collision.s_tangent2;
	tangent2.x = -tangent.x;
	tangent2.y = -tangent.y;
	var normal = box2D.collision.B2Collision.s_normal;
	normal.x = tangent.y;
	normal.y = -tangent.x;
	var v11 = box2D.collision.B2Collision.s_v11;
	var v12 = box2D.collision.B2Collision.s_v12;
	v11.x = xf1.position.x + (tMat.col1.x * local_v11.x + tMat.col2.x * local_v11.y);
	v11.y = xf1.position.y + (tMat.col1.y * local_v11.x + tMat.col2.y * local_v11.y);
	v12.x = xf1.position.x + (tMat.col1.x * local_v12.x + tMat.col2.x * local_v12.y);
	v12.y = xf1.position.y + (tMat.col1.y * local_v12.x + tMat.col2.y * local_v12.y);
	var frontOffset = normal.x * v11.x + normal.y * v11.y;
	var sideOffset1 = -tangent.x * v11.x - tangent.y * v11.y + totalRadius;
	var sideOffset2 = tangent.x * v12.x + tangent.y * v12.y + totalRadius;
	var clipPoints1 = box2D.collision.B2Collision.s_clipPoints1;
	var clipPoints2 = box2D.collision.B2Collision.s_clipPoints2;
	var np;
	np = box2D.collision.B2Collision.clipSegmentToLine(clipPoints1,incidentEdge,tangent2,sideOffset1);
	if(np < 2) return;
	np = box2D.collision.B2Collision.clipSegmentToLine(clipPoints2,clipPoints1,tangent,sideOffset2);
	if(np < 2) return;
	manifold.m_localPlaneNormal.setV(localNormal);
	manifold.m_localPoint.setV(planePoint);
	var pointCount = 0;
	var _g1 = 0;
	var _g = box2D.common.B2Settings.b2_maxManifoldPoints;
	while(_g1 < _g) {
		var i = _g1++;
		cv = clipPoints2[i];
		var separation = normal.x * cv.v.x + normal.y * cv.v.y - frontOffset;
		if(separation <= totalRadius) {
			var cp = manifold.m_points[pointCount];
			tMat = xf2.R;
			var tX = cv.v.x - xf2.position.x;
			var tY = cv.v.y - xf2.position.y;
			cp.m_localPoint.x = tX * tMat.col1.x + tY * tMat.col1.y;
			cp.m_localPoint.y = tX * tMat.col2.x + tY * tMat.col2.y;
			cp.m_id.set(cv.id);
			cp.m_id.features.set_flip(flip);
			++pointCount;
		}
	}
	manifold.m_pointCount = pointCount;
};
box2D.collision.B2Collision.collideCircles = function(manifold,circle1,xf1,circle2,xf2) {
	manifold.m_pointCount = 0;
	var tMat;
	var tVec;
	tMat = xf1.R;
	tVec = circle1.m_p;
	var p1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var p1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	tMat = xf2.R;
	tVec = circle2.m_p;
	var p2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var p2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	var dX = p2X - p1X;
	var dY = p2Y - p1Y;
	var distSqr = dX * dX + dY * dY;
	var radius = circle1.m_radius + circle2.m_radius;
	if(distSqr > radius * radius) return;
	manifold.m_type = box2D.collision.B2ManifoldType.CIRCLES;
	manifold.m_localPoint.setV(circle1.m_p);
	manifold.m_localPlaneNormal.setZero();
	manifold.m_pointCount = 1;
	manifold.m_points[0].m_localPoint.setV(circle2.m_p);
	manifold.m_points[0].m_id.set_key(0);
};
box2D.collision.B2Collision.collidePolygonAndCircle = function(manifold,polygon,xf1,circle,xf2) {
	manifold.m_pointCount = 0;
	var tPoint;
	var dX;
	var dY;
	var positionX;
	var positionY;
	var tVec;
	var tMat;
	tMat = xf2.R;
	tVec = circle.m_p;
	var cX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var cY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	dX = cX - xf1.position.x;
	dY = cY - xf1.position.y;
	tMat = xf1.R;
	var cLocalX = dX * tMat.col1.x + dY * tMat.col1.y;
	var cLocalY = dX * tMat.col2.x + dY * tMat.col2.y;
	var dist;
	var normalIndex = 0;
	var separation = -Number.MAX_VALUE;
	var radius = polygon.m_radius + circle.m_radius;
	var vertexCount = polygon.m_vertexCount;
	var vertices = polygon.m_vertices;
	var normals = polygon.m_normals;
	var _g = 0;
	while(_g < vertexCount) {
		var i = _g++;
		tVec = vertices[i];
		dX = cLocalX - tVec.x;
		dY = cLocalY - tVec.y;
		tVec = normals[i];
		var s = tVec.x * dX + tVec.y * dY;
		if(s > radius) return;
		if(s > separation) {
			separation = s;
			normalIndex = i;
		}
	}
	var vertIndex1 = normalIndex;
	var vertIndex2;
	if(vertIndex1 + 1 < vertexCount) vertIndex2 = vertIndex1 + 1; else vertIndex2 = 0;
	var v1 = vertices[vertIndex1];
	var v2 = vertices[vertIndex2];
	if(separation < Number.MIN_VALUE) {
		manifold.m_pointCount = 1;
		manifold.m_type = box2D.collision.B2ManifoldType.FACE_A;
		manifold.m_localPlaneNormal.setV(normals[normalIndex]);
		manifold.m_localPoint.x = 0.5 * (v1.x + v2.x);
		manifold.m_localPoint.y = 0.5 * (v1.y + v2.y);
		manifold.m_points[0].m_localPoint.setV(circle.m_p);
		manifold.m_points[0].m_id.set_key(0);
		return;
	}
	var u1 = (cLocalX - v1.x) * (v2.x - v1.x) + (cLocalY - v1.y) * (v2.y - v1.y);
	var u2 = (cLocalX - v2.x) * (v1.x - v2.x) + (cLocalY - v2.y) * (v1.y - v2.y);
	if(u1 <= 0.0) {
		if((cLocalX - v1.x) * (cLocalX - v1.x) + (cLocalY - v1.y) * (cLocalY - v1.y) > radius * radius) return;
		manifold.m_pointCount = 1;
		manifold.m_type = box2D.collision.B2ManifoldType.FACE_A;
		manifold.m_localPlaneNormal.x = cLocalX - v1.x;
		manifold.m_localPlaneNormal.y = cLocalY - v1.y;
		manifold.m_localPlaneNormal.normalize();
		manifold.m_localPoint.setV(v1);
		manifold.m_points[0].m_localPoint.setV(circle.m_p);
		manifold.m_points[0].m_id.set_key(0);
	} else if(u2 <= 0) {
		if((cLocalX - v2.x) * (cLocalX - v2.x) + (cLocalY - v2.y) * (cLocalY - v2.y) > radius * radius) return;
		manifold.m_pointCount = 1;
		manifold.m_type = box2D.collision.B2ManifoldType.FACE_A;
		manifold.m_localPlaneNormal.x = cLocalX - v2.x;
		manifold.m_localPlaneNormal.y = cLocalY - v2.y;
		manifold.m_localPlaneNormal.normalize();
		manifold.m_localPoint.setV(v2);
		manifold.m_points[0].m_localPoint.setV(circle.m_p);
		manifold.m_points[0].m_id.set_key(0);
	} else {
		var faceCenterX = 0.5 * (v1.x + v2.x);
		var faceCenterY = 0.5 * (v1.y + v2.y);
		separation = (cLocalX - faceCenterX) * normals[vertIndex1].x + (cLocalY - faceCenterY) * normals[vertIndex1].y;
		if(separation > radius) return;
		manifold.m_pointCount = 1;
		manifold.m_type = box2D.collision.B2ManifoldType.FACE_A;
		manifold.m_localPlaneNormal.x = normals[vertIndex1].x;
		manifold.m_localPlaneNormal.y = normals[vertIndex1].y;
		manifold.m_localPlaneNormal.normalize();
		manifold.m_localPoint.set(faceCenterX,faceCenterY);
		manifold.m_points[0].m_localPoint.setV(circle.m_p);
		manifold.m_points[0].m_id.set_key(0);
	}
};
box2D.collision.B2Collision.testOverlap = function(a,b) {
	var t1 = b.lowerBound;
	var t2 = a.upperBound;
	var d1X = t1.x - t2.x;
	var d1Y = t1.y - t2.y;
	t1 = a.lowerBound;
	t2 = b.upperBound;
	var d2X = t1.x - t2.x;
	var d2Y = t1.y - t2.y;
	if(d1X > 0.0 || d1Y > 0.0) return false;
	if(d2X > 0.0 || d2Y > 0.0) return false;
	return true;
};
box2D.collision.B2ContactPoint = function() {
	this.position = new box2D.common.math.B2Vec2();
	this.velocity = new box2D.common.math.B2Vec2();
	this.normal = new box2D.common.math.B2Vec2();
	this.id = new box2D.collision.B2ContactID();
};
$hxClasses["box2D.collision.B2ContactPoint"] = box2D.collision.B2ContactPoint;
box2D.collision.B2ContactPoint.__name__ = ["box2D","collision","B2ContactPoint"];
box2D.collision.B2ContactPoint.prototype = {
	__class__: box2D.collision.B2ContactPoint
};
box2D.collision.B2Simplex = function() {
	this.m_count = 0;
	this.m_v1 = new box2D.collision.B2SimplexVertex();
	this.m_v2 = new box2D.collision.B2SimplexVertex();
	this.m_v3 = new box2D.collision.B2SimplexVertex();
	this.m_vertices = new Array();
	this.m_vertices[0] = this.m_v1;
	this.m_vertices[1] = this.m_v2;
	this.m_vertices[2] = this.m_v3;
};
$hxClasses["box2D.collision.B2Simplex"] = box2D.collision.B2Simplex;
box2D.collision.B2Simplex.__name__ = ["box2D","collision","B2Simplex"];
box2D.collision.B2Simplex.prototype = {
	readCache: function(cache,proxyA,transformA,proxyB,transformB) {
		box2D.common.B2Settings.b2Assert(0 <= cache.count && cache.count <= 3);
		var wALocal;
		var wBLocal;
		this.m_count = cache.count;
		var vertices = this.m_vertices;
		var v;
		var _g1 = 0;
		var _g = this.m_count;
		while(_g1 < _g) {
			var i = _g1++;
			v = vertices[i];
			v.indexA = cache.indexA[i];
			v.indexB = cache.indexB[i];
			wALocal = proxyA.getVertex(v.indexA);
			wBLocal = proxyB.getVertex(v.indexB);
			v.wA = box2D.common.math.B2Math.mulX(transformA,wALocal);
			v.wB = box2D.common.math.B2Math.mulX(transformB,wBLocal);
			v.w = box2D.common.math.B2Math.subtractVV(v.wB,v.wA);
			v.a = 0;
		}
		if(this.m_count > 1) {
			var metric1 = cache.metric;
			var metric2 = this.getMetric();
			if(metric2 < .5 * metric1 || 2.0 * metric1 < metric2 || metric2 < Number.MIN_VALUE) this.m_count = 0;
		}
		if(this.m_count == 0) {
			v = vertices[0];
			v.indexA = 0;
			v.indexB = 0;
			wALocal = proxyA.getVertex(0);
			wBLocal = proxyB.getVertex(0);
			v.wA = box2D.common.math.B2Math.mulX(transformA,wALocal);
			v.wB = box2D.common.math.B2Math.mulX(transformB,wBLocal);
			v.w = box2D.common.math.B2Math.subtractVV(v.wB,v.wA);
			this.m_count = 1;
		}
	}
	,writeCache: function(cache) {
		cache.metric = this.getMetric();
		cache.count = this.m_count | 0;
		var vertices = this.m_vertices;
		var _g1 = 0;
		var _g = this.m_count;
		while(_g1 < _g) {
			var i = _g1++;
			cache.indexA[i] = vertices[i].indexA | 0;
			cache.indexB[i] = vertices[i].indexB | 0;
		}
	}
	,getSearchDirection: function() {
		var _g = this.m_count;
		switch(_g) {
		case 1:
			return this.m_v1.w.getNegative();
		case 2:
			var e12 = box2D.common.math.B2Math.subtractVV(this.m_v2.w,this.m_v1.w);
			var sgn = box2D.common.math.B2Math.crossVV(e12,this.m_v1.w.getNegative());
			if(sgn > 0.0) return box2D.common.math.B2Math.crossFV(1.0,e12); else return box2D.common.math.B2Math.crossVF(e12,1.0);
			break;
		default:
			box2D.common.B2Settings.b2Assert(false);
			return new box2D.common.math.B2Vec2();
		}
	}
	,getClosestPoint: function() {
		var _g = this.m_count;
		switch(_g) {
		case 0:
			box2D.common.B2Settings.b2Assert(false);
			return new box2D.common.math.B2Vec2();
		case 1:
			return this.m_v1.w;
		case 2:
			return new box2D.common.math.B2Vec2(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x,this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
		default:
			box2D.common.B2Settings.b2Assert(false);
			return new box2D.common.math.B2Vec2();
		}
	}
	,getWitnessPoints: function(pA,pB) {
		var _g = this.m_count;
		switch(_g) {
		case 0:
			box2D.common.B2Settings.b2Assert(false);
			break;
		case 1:
			pA.setV(this.m_v1.wA);
			pB.setV(this.m_v1.wB);
			break;
		case 2:
			pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
			pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
			pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
			pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
			break;
		case 3:
			pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
			pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
			break;
		default:
			box2D.common.B2Settings.b2Assert(false);
		}
	}
	,getMetric: function() {
		var _g = this.m_count;
		switch(_g) {
		case 0:
			box2D.common.B2Settings.b2Assert(false);
			return 0.0;
		case 1:
			return 0.0;
		case 2:
			return box2D.common.math.B2Math.subtractVV(this.m_v1.w,this.m_v2.w).length();
		case 3:
			return box2D.common.math.B2Math.crossVV(box2D.common.math.B2Math.subtractVV(this.m_v2.w,this.m_v1.w),box2D.common.math.B2Math.subtractVV(this.m_v3.w,this.m_v1.w));
		default:
			box2D.common.B2Settings.b2Assert(false);
			return 0.0;
		}
	}
	,solve2: function() {
		var w1 = this.m_v1.w;
		var w2 = this.m_v2.w;
		var e12 = box2D.common.math.B2Math.subtractVV(w2,w1);
		var d12_2 = -(w1.x * e12.x + w1.y * e12.y);
		if(d12_2 <= 0.0) {
			this.m_v1.a = 1.0;
			this.m_count = 1;
			return;
		}
		var d12_1 = w2.x * e12.x + w2.y * e12.y;
		if(d12_1 <= 0.0) {
			this.m_v2.a = 1.0;
			this.m_count = 1;
			this.m_v1.set(this.m_v2);
			return;
		}
		var inv_d12 = 1.0 / (d12_1 + d12_2);
		this.m_v1.a = d12_1 * inv_d12;
		this.m_v2.a = d12_2 * inv_d12;
		this.m_count = 2;
	}
	,solve3: function() {
		var w1 = this.m_v1.w;
		var w2 = this.m_v2.w;
		var w3 = this.m_v3.w;
		var e12 = box2D.common.math.B2Math.subtractVV(w2,w1);
		var w1e12 = box2D.common.math.B2Math.dot(w1,e12);
		var w2e12 = box2D.common.math.B2Math.dot(w2,e12);
		var d12_1 = w2e12;
		var d12_2 = -w1e12;
		var e13 = box2D.common.math.B2Math.subtractVV(w3,w1);
		var w1e13 = box2D.common.math.B2Math.dot(w1,e13);
		var w3e13 = box2D.common.math.B2Math.dot(w3,e13);
		var d13_1 = w3e13;
		var d13_2 = -w1e13;
		var e23 = box2D.common.math.B2Math.subtractVV(w3,w2);
		var w2e23 = box2D.common.math.B2Math.dot(w2,e23);
		var w3e23 = box2D.common.math.B2Math.dot(w3,e23);
		var d23_1 = w3e23;
		var d23_2 = -w2e23;
		var n123 = box2D.common.math.B2Math.crossVV(e12,e13);
		var d123_1 = n123 * box2D.common.math.B2Math.crossVV(w2,w3);
		var d123_2 = n123 * box2D.common.math.B2Math.crossVV(w3,w1);
		var d123_3 = n123 * box2D.common.math.B2Math.crossVV(w1,w2);
		if(d12_2 <= 0.0 && d13_2 <= 0.0) {
			this.m_v1.a = 1.0;
			this.m_count = 1;
			return;
		}
		if(d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {
			var inv_d12 = 1.0 / (d12_1 + d12_2);
			this.m_v1.a = d12_1 * inv_d12;
			this.m_v2.a = d12_2 * inv_d12;
			this.m_count = 2;
			return;
		}
		if(d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {
			var inv_d13 = 1.0 / (d13_1 + d13_2);
			this.m_v1.a = d13_1 * inv_d13;
			this.m_v3.a = d13_2 * inv_d13;
			this.m_count = 2;
			this.m_v2.set(this.m_v3);
			return;
		}
		if(d12_1 <= 0.0 && d23_2 <= 0.0) {
			this.m_v2.a = 1.0;
			this.m_count = 1;
			this.m_v1.set(this.m_v2);
			return;
		}
		if(d13_1 <= 0.0 && d23_1 <= 0.0) {
			this.m_v3.a = 1.0;
			this.m_count = 1;
			this.m_v1.set(this.m_v3);
			return;
		}
		if(d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {
			var inv_d23 = 1.0 / (d23_1 + d23_2);
			this.m_v2.a = d23_1 * inv_d23;
			this.m_v3.a = d23_2 * inv_d23;
			this.m_count = 2;
			this.m_v1.set(this.m_v3);
			return;
		}
		var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);
		this.m_v1.a = d123_1 * inv_d123;
		this.m_v2.a = d123_2 * inv_d123;
		this.m_v3.a = d123_3 * inv_d123;
		this.m_count = 3;
	}
	,__class__: box2D.collision.B2Simplex
};
box2D.collision.B2SimplexVertex = function() {
	this.indexB = 0;
	this.indexA = 0;
	this.a = 0;
};
$hxClasses["box2D.collision.B2SimplexVertex"] = box2D.collision.B2SimplexVertex;
box2D.collision.B2SimplexVertex.__name__ = ["box2D","collision","B2SimplexVertex"];
box2D.collision.B2SimplexVertex.prototype = {
	set: function(other) {
		this.wA.setV(other.wA);
		this.wB.setV(other.wB);
		this.w.setV(other.w);
		this.a = other.a;
		this.indexA = other.indexA;
		this.indexB = other.indexB;
	}
	,__class__: box2D.collision.B2SimplexVertex
};
box2D.collision.B2Distance = function() { };
$hxClasses["box2D.collision.B2Distance"] = box2D.collision.B2Distance;
box2D.collision.B2Distance.__name__ = ["box2D","collision","B2Distance"];
box2D.collision.B2Distance.distance = function(output,cache,input) {
	++box2D.collision.B2Distance.b2_gjkCalls;
	var proxyA = input.proxyA;
	var proxyB = input.proxyB;
	var transformA = input.transformA;
	var transformB = input.transformB;
	var simplex = box2D.collision.B2Distance.s_simplex;
	simplex.readCache(cache,proxyA,transformA,proxyB,transformB);
	var vertices = simplex.m_vertices;
	var k_maxIters = 20;
	var saveA = box2D.collision.B2Distance.s_saveA;
	var saveB = box2D.collision.B2Distance.s_saveB;
	var saveCount = 0;
	var closestPoint = simplex.getClosestPoint();
	var distanceSqr1 = closestPoint.lengthSquared();
	var distanceSqr2 = distanceSqr1;
	var i;
	var p;
	var iter = 0;
	while(iter < k_maxIters) {
		saveCount = simplex.m_count;
		var _g = 0;
		while(_g < saveCount) {
			var i1 = _g++;
			saveA[i1] = vertices[i1].indexA;
			saveB[i1] = vertices[i1].indexB;
		}
		var _g1 = simplex.m_count;
		switch(_g1) {
		case 1:
			break;
		case 2:
			simplex.solve2();
			break;
		case 3:
			simplex.solve3();
			break;
		default:
			box2D.common.B2Settings.b2Assert(false);
		}
		if(simplex.m_count == 3) break;
		p = simplex.getClosestPoint();
		distanceSqr2 = p.lengthSquared();
		if(distanceSqr2 > distanceSqr1) {
		}
		distanceSqr1 = distanceSqr2;
		var d = simplex.getSearchDirection();
		if(d.lengthSquared() < Number.MIN_VALUE * Number.MIN_VALUE) break;
		var vertex = vertices[simplex.m_count];
		vertex.indexA = Std["int"](proxyA.getSupport(box2D.common.math.B2Math.mulTMV(transformA.R,d.getNegative())));
		vertex.wA = box2D.common.math.B2Math.mulX(transformA,proxyA.getVertex(vertex.indexA));
		vertex.indexB = Std["int"](proxyB.getSupport(box2D.common.math.B2Math.mulTMV(transformB.R,d)));
		vertex.wB = box2D.common.math.B2Math.mulX(transformB,proxyB.getVertex(vertex.indexB));
		vertex.w = box2D.common.math.B2Math.subtractVV(vertex.wB,vertex.wA);
		++iter;
		++box2D.collision.B2Distance.b2_gjkIters;
		var duplicate = false;
		var _g2 = 0;
		while(_g2 < saveCount) {
			var i2 = _g2++;
			if(vertex.indexA == saveA[i2] && vertex.indexB == saveB[i2]) {
				duplicate = true;
				break;
			}
		}
		if(duplicate) break;
		++simplex.m_count;
	}
	box2D.collision.B2Distance.b2_gjkMaxIters = Std["int"](box2D.common.math.B2Math.max(box2D.collision.B2Distance.b2_gjkMaxIters,iter));
	simplex.getWitnessPoints(output.pointA,output.pointB);
	output.distance = box2D.common.math.B2Math.subtractVV(output.pointA,output.pointB).length();
	output.iterations = iter;
	simplex.writeCache(cache);
	if(input.useRadii) {
		var rA = proxyA.m_radius;
		var rB = proxyB.m_radius;
		if(output.distance > rA + rB && output.distance > Number.MIN_VALUE) {
			output.distance -= rA + rB;
			var normal = box2D.common.math.B2Math.subtractVV(output.pointB,output.pointA);
			normal.normalize();
			output.pointA.x += rA * normal.x;
			output.pointA.y += rA * normal.y;
			output.pointB.x -= rB * normal.x;
			output.pointB.y -= rB * normal.y;
		} else {
			p = new box2D.common.math.B2Vec2();
			p.x = .5 * (output.pointA.x + output.pointB.x);
			p.y = .5 * (output.pointA.y + output.pointB.y);
			output.pointA.x = output.pointB.x = p.x;
			output.pointA.y = output.pointB.y = p.y;
			output.distance = 0.0;
		}
	}
};
box2D.collision.B2DistanceInput = function() {
};
$hxClasses["box2D.collision.B2DistanceInput"] = box2D.collision.B2DistanceInput;
box2D.collision.B2DistanceInput.__name__ = ["box2D","collision","B2DistanceInput"];
box2D.collision.B2DistanceInput.prototype = {
	__class__: box2D.collision.B2DistanceInput
};
box2D.collision.B2DistanceOutput = function() {
	this.pointA = new box2D.common.math.B2Vec2();
	this.pointB = new box2D.common.math.B2Vec2();
};
$hxClasses["box2D.collision.B2DistanceOutput"] = box2D.collision.B2DistanceOutput;
box2D.collision.B2DistanceOutput.__name__ = ["box2D","collision","B2DistanceOutput"];
box2D.collision.B2DistanceOutput.prototype = {
	__class__: box2D.collision.B2DistanceOutput
};
box2D.collision.B2DistanceProxy = function() {
	this.m_radius = 0;
	this.m_count = 0;
	this.m_vertices = new Array();
};
$hxClasses["box2D.collision.B2DistanceProxy"] = box2D.collision.B2DistanceProxy;
box2D.collision.B2DistanceProxy.__name__ = ["box2D","collision","B2DistanceProxy"];
box2D.collision.B2DistanceProxy.prototype = {
	set: function(shape) {
		var _g = shape.getType();
		switch(_g) {
		case 1:
			var circle;
			circle = js.Boot.__cast(shape , box2D.collision.shapes.B2CircleShape);
			this.m_vertices = new Array();
			this.m_vertices[0] = circle.m_p;
			this.m_count = 1;
			this.m_radius = circle.m_radius;
			break;
		case 2:
			var polygon;
			polygon = js.Boot.__cast(shape , box2D.collision.shapes.B2PolygonShape);
			this.m_vertices = polygon.m_vertices;
			this.m_count = polygon.m_vertexCount;
			this.m_radius = polygon.m_radius;
			break;
		default:
			box2D.common.B2Settings.b2Assert(false);
		}
	}
	,getSupport: function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		var _g1 = 1;
		var _g = this.m_count;
		while(_g1 < _g) {
			var i = _g1++;
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if(value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return bestIndex;
	}
	,getSupportVertex: function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		var _g1 = 1;
		var _g = this.m_count;
		while(_g1 < _g) {
			var i = _g1++;
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if(value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return this.m_vertices[bestIndex];
	}
	,getVertexCount: function() {
		return this.m_count;
	}
	,getVertex: function(index) {
		box2D.common.B2Settings.b2Assert(0 <= index && index < this.m_count);
		return this.m_vertices[index];
	}
	,__class__: box2D.collision.B2DistanceProxy
};
box2D.collision.B2DynamicTree = function() {
	this.m_root = null;
	this.m_freeList = null;
	this.m_path = 0;
	this.m_insertionCount = 0;
};
$hxClasses["box2D.collision.B2DynamicTree"] = box2D.collision.B2DynamicTree;
box2D.collision.B2DynamicTree.__name__ = ["box2D","collision","B2DynamicTree"];
box2D.collision.B2DynamicTree.prototype = {
	createProxy: function(aabb,userData) {
		var node = this.allocateNode();
		var extendX = box2D.common.B2Settings.b2_aabbExtension;
		var extendY = box2D.common.B2Settings.b2_aabbExtension;
		node.aabb.lowerBound.x = aabb.lowerBound.x - extendX;
		node.aabb.lowerBound.y = aabb.lowerBound.y - extendY;
		node.aabb.upperBound.x = aabb.upperBound.x + extendX;
		node.aabb.upperBound.y = aabb.upperBound.y + extendY;
		node.userData = userData;
		this.insertLeaf(node);
		return node;
	}
	,destroyProxy: function(proxy) {
		this.removeLeaf(proxy);
		this.freeNode(proxy);
	}
	,moveProxy: function(proxy,aabb,displacement) {
		box2D.common.B2Settings.b2Assert(proxy.isLeaf());
		if(proxy.aabb.contains(aabb)) return false;
		this.removeLeaf(proxy);
		var extendX;
		extendX = box2D.common.B2Settings.b2_aabbExtension + box2D.common.B2Settings.b2_aabbMultiplier * (displacement.x > 0?displacement.x:-displacement.x);
		var extendY;
		extendY = box2D.common.B2Settings.b2_aabbExtension + box2D.common.B2Settings.b2_aabbMultiplier * (displacement.y > 0?displacement.y:-displacement.y);
		proxy.aabb.lowerBound.x = aabb.lowerBound.x - extendX;
		proxy.aabb.lowerBound.y = aabb.lowerBound.y - extendY;
		proxy.aabb.upperBound.x = aabb.upperBound.x + extendX;
		proxy.aabb.upperBound.y = aabb.upperBound.y + extendY;
		this.insertLeaf(proxy);
		return true;
	}
	,rebalance: function(iterations) {
		if(this.m_root == null) return;
		var _g = 0;
		while(_g < iterations) {
			var i = _g++;
			var node = this.m_root;
			var bit = 0;
			while(node.isLeaf() == false) {
				if((this.m_path >> bit & 1) != 0) node = node.child2; else node = node.child1;
				bit = bit + 1 & 31;
			}
			++this.m_path;
			this.removeLeaf(node);
			this.insertLeaf(node);
		}
	}
	,getFatAABB: function(proxy) {
		return proxy.aabb;
	}
	,getUserData: function(proxy) {
		return proxy.userData;
	}
	,query: function(callbackMethod,aabb) {
		if(this.m_root == null) return;
		var stack = new Array();
		var count = 0;
		stack[count++] = this.m_root;
		while(count > 0) {
			var node = stack[--count];
			if(node.aabb.testOverlap(aabb)) {
				if(node.isLeaf()) {
					var proceed = callbackMethod(node);
					if(!proceed) return;
				} else {
					stack[count++] = node.child1;
					stack[count++] = node.child2;
				}
			}
		}
	}
	,rayCast: function(callbackMethod,input) {
		if(this.m_root == null) return;
		var p1 = input.p1;
		var p2 = input.p2;
		var r = box2D.common.math.B2Math.subtractVV(p1,p2);
		r.normalize();
		var v = box2D.common.math.B2Math.crossFV(1.0,r);
		var abs_v = box2D.common.math.B2Math.absV(v);
		var maxFraction = input.maxFraction;
		var segmentAABB = new box2D.collision.B2AABB();
		var tX;
		var tY;
		tX = p1.x + maxFraction * (p2.x - p1.x);
		tY = p1.y + maxFraction * (p2.y - p1.y);
		segmentAABB.lowerBound.x = Math.min(p1.x,tX);
		segmentAABB.lowerBound.y = Math.min(p1.y,tY);
		segmentAABB.upperBound.x = Math.max(p1.x,tX);
		segmentAABB.upperBound.y = Math.max(p1.y,tY);
		var stack = new Array();
		var count = 0;
		stack[count++] = this.m_root;
		while(count > 0) {
			var node = stack[--count];
			if(node.aabb.testOverlap(segmentAABB) == false) continue;
			var c = node.aabb.getCenter();
			var h = node.aabb.getExtents();
			var separation = Math.abs(v.x * (p1.x - c.x) + v.y * (p1.y - c.y)) - abs_v.x * h.x - abs_v.y * h.y;
			if(separation > 0.0) continue;
			if(node.isLeaf()) {
				var subInput = new box2D.collision.B2RayCastInput();
				subInput.p1 = input.p1;
				subInput.p2 = input.p2;
				subInput.maxFraction = input.maxFraction;
				maxFraction = callbackMethod(subInput,node);
				if(maxFraction == 0.0) return;
				tX = p1.x + maxFraction * (p2.x - p1.x);
				tY = p1.y + maxFraction * (p2.y - p1.y);
				segmentAABB.lowerBound.x = Math.min(p1.x,tX);
				segmentAABB.lowerBound.y = Math.min(p1.y,tY);
				segmentAABB.upperBound.x = Math.max(p1.x,tX);
				segmentAABB.upperBound.y = Math.max(p1.y,tY);
			} else {
				stack[count++] = node.child1;
				stack[count++] = node.child2;
			}
		}
	}
	,allocateNode: function() {
		if(this.m_freeList != null) {
			var node = this.m_freeList;
			this.m_freeList = node.parent;
			node.parent = null;
			node.child1 = null;
			node.child2 = null;
			return node;
		}
		return new box2D.collision.B2DynamicTreeNode();
	}
	,freeNode: function(node) {
		node.parent = this.m_freeList;
		this.m_freeList = node;
	}
	,insertLeaf: function(leaf) {
		++this.m_insertionCount;
		if(this.m_root == null) {
			this.m_root = leaf;
			this.m_root.parent = null;
			return;
		}
		var center = leaf.aabb.getCenter();
		var sibling = this.m_root;
		if(sibling.isLeaf() == false) do {
			var child1 = sibling.child1;
			var child2 = sibling.child2;
			var norm1 = Math.abs((child1.aabb.lowerBound.x + child1.aabb.upperBound.x) / 2 - center.x) + Math.abs((child1.aabb.lowerBound.y + child1.aabb.upperBound.y) / 2 - center.y);
			var norm2 = Math.abs((child2.aabb.lowerBound.x + child2.aabb.upperBound.x) / 2 - center.x) + Math.abs((child2.aabb.lowerBound.y + child2.aabb.upperBound.y) / 2 - center.y);
			if(norm1 < norm2) sibling = child1; else sibling = child2;
		} while(sibling.isLeaf() == false);
		var node1 = sibling.parent;
		var node2 = this.allocateNode();
		node2.parent = node1;
		node2.userData = null;
		node2.aabb.combine(leaf.aabb,sibling.aabb);
		if(node1 != null) {
			if(sibling.parent.child1 == sibling) node1.child1 = node2; else node1.child2 = node2;
			node2.child1 = sibling;
			node2.child2 = leaf;
			sibling.parent = node2;
			leaf.parent = node2;
			do {
				if(node1.aabb.contains(node2.aabb)) break;
				node1.aabb.combine(node1.child1.aabb,node1.child2.aabb);
				node2 = node1;
				node1 = node1.parent;
			} while(node1 != null);
		} else {
			node2.child1 = sibling;
			node2.child2 = leaf;
			sibling.parent = node2;
			leaf.parent = node2;
			this.m_root = node2;
		}
	}
	,removeLeaf: function(leaf) {
		if(leaf == this.m_root) {
			this.m_root = null;
			return;
		}
		var node2 = leaf.parent;
		var node1 = node2.parent;
		var sibling;
		if(node2.child1 == leaf) sibling = node2.child2; else sibling = node2.child1;
		if(node1 != null) {
			if(node1.child1 == node2) node1.child1 = sibling; else node1.child2 = sibling;
			sibling.parent = node1;
			this.freeNode(node2);
			while(node1 != null) {
				var oldAABB = node1.aabb;
				node1.aabb = new box2D.collision.B2AABB();
				node1.aabb.combine(node1.child1.aabb,node1.child2.aabb);
				if(oldAABB.contains(node1.aabb)) break;
				node1 = node1.parent;
			}
		} else {
			this.m_root = sibling;
			sibling.parent = null;
			this.freeNode(node2);
		}
	}
	,__class__: box2D.collision.B2DynamicTree
};
box2D.collision.IBroadPhase = function() { };
$hxClasses["box2D.collision.IBroadPhase"] = box2D.collision.IBroadPhase;
box2D.collision.IBroadPhase.__name__ = ["box2D","collision","IBroadPhase"];
box2D.collision.IBroadPhase.prototype = {
	__class__: box2D.collision.IBroadPhase
};
box2D.collision.B2DynamicTreeBroadPhase = function() {
	this.m_tree = new box2D.collision.B2DynamicTree();
	this.m_moveBuffer = new Array();
	this.m_pairBuffer = new Array();
	this.m_pairCount = 0;
	this.m_proxyCount = 0;
};
$hxClasses["box2D.collision.B2DynamicTreeBroadPhase"] = box2D.collision.B2DynamicTreeBroadPhase;
box2D.collision.B2DynamicTreeBroadPhase.__name__ = ["box2D","collision","B2DynamicTreeBroadPhase"];
box2D.collision.B2DynamicTreeBroadPhase.__interfaces__ = [box2D.collision.IBroadPhase];
box2D.collision.B2DynamicTreeBroadPhase.prototype = {
	createProxy: function(aabb,userData) {
		var proxy = this.m_tree.createProxy(aabb,userData);
		++this.m_proxyCount;
		this.bufferMove(proxy);
		return proxy;
	}
	,destroyProxy: function(proxy) {
		this.unBufferMove(proxy);
		--this.m_proxyCount;
		this.m_tree.destroyProxy(proxy);
	}
	,moveProxy: function(proxy,aabb,displacement) {
		var buffer = this.m_tree.moveProxy(proxy,aabb,displacement);
		if(buffer) this.bufferMove(proxy);
	}
	,testOverlap: function(proxyA,proxyB) {
		var aabbA = this.m_tree.getFatAABB(proxyA);
		var aabbB = this.m_tree.getFatAABB(proxyB);
		return aabbA.testOverlap(aabbB);
	}
	,getUserData: function(proxy) {
		return this.m_tree.getUserData(proxy);
	}
	,getFatAABB: function(proxy) {
		return this.m_tree.getFatAABB(proxy);
	}
	,getProxyCount: function() {
		return this.m_proxyCount;
	}
	,updatePairs: function(callbackMethod) {
		var _g2 = this;
		this.m_pairCount = 0;
		var _g = 0;
		var _g1 = this.m_moveBuffer;
		while(_g < _g1.length) {
			var queryProxy = [_g1[_g]];
			++_g;
			var queryCallback = (function(queryProxy) {
				return function(proxy) {
					if(proxy == queryProxy[0]) return true;
					if(_g2.m_pairCount == _g2.m_pairBuffer.length) _g2.m_pairBuffer[_g2.m_pairCount] = new box2D.collision.B2DynamicTreePair();
					var pair = _g2.m_pairBuffer[_g2.m_pairCount];
					if(proxy.id < queryProxy[0].id) {
						pair.proxyA = proxy;
						pair.proxyB = queryProxy[0];
					} else {
						pair.proxyA = queryProxy[0];
						pair.proxyB = proxy;
					}
					++_g2.m_pairCount;
					return true;
				};
			})(queryProxy);
			var fatAABB = this.m_tree.getFatAABB(queryProxy[0]);
			this.m_tree.query(queryCallback,fatAABB);
		}
		this.m_moveBuffer = new Array();
		var pairing = true;
		var i = 0;
		while(pairing) if(i >= this.m_pairCount) pairing = false; else {
			var primaryPair = this.m_pairBuffer[i];
			var userDataA = this.m_tree.getUserData(primaryPair.proxyA);
			var userDataB = this.m_tree.getUserData(primaryPair.proxyB);
			callbackMethod(userDataA,userDataB);
			++i;
			while(i < this.m_pairCount) {
				var pair1 = this.m_pairBuffer[i];
				if(pair1.proxyA != primaryPair.proxyA || pair1.proxyB != primaryPair.proxyB) break;
				++i;
			}
		}
	}
	,query: function(callbackMethod,aabb) {
		this.m_tree.query(callbackMethod,aabb);
	}
	,rayCast: function(callbackMethod,input) {
		this.m_tree.rayCast(callbackMethod,input);
	}
	,validate: function() {
	}
	,rebalance: function(iterations) {
		this.m_tree.rebalance(iterations);
	}
	,bufferMove: function(proxy) {
		this.m_moveBuffer[this.m_moveBuffer.length] = proxy;
	}
	,unBufferMove: function(proxy) {
		HxOverrides.remove(this.m_moveBuffer,proxy);
	}
	,comparePairs: function(pair1,pair2) {
		return 0;
	}
	,__class__: box2D.collision.B2DynamicTreeBroadPhase
};
box2D.collision.B2DynamicTreeNode = function() {
	this.aabb = new box2D.collision.B2AABB();
	this.id = box2D.collision.B2DynamicTreeNode.currentID++;
};
$hxClasses["box2D.collision.B2DynamicTreeNode"] = box2D.collision.B2DynamicTreeNode;
box2D.collision.B2DynamicTreeNode.__name__ = ["box2D","collision","B2DynamicTreeNode"];
box2D.collision.B2DynamicTreeNode.prototype = {
	isLeaf: function() {
		return this.child1 == null;
	}
	,__class__: box2D.collision.B2DynamicTreeNode
};
box2D.collision.B2DynamicTreePair = function() {
};
$hxClasses["box2D.collision.B2DynamicTreePair"] = box2D.collision.B2DynamicTreePair;
box2D.collision.B2DynamicTreePair.__name__ = ["box2D","collision","B2DynamicTreePair"];
box2D.collision.B2DynamicTreePair.prototype = {
	__class__: box2D.collision.B2DynamicTreePair
};
box2D.collision.B2Manifold = function() {
	this.m_pointCount = 0;
	this.m_points = new Array();
	var _g1 = 0;
	var _g = box2D.common.B2Settings.b2_maxManifoldPoints;
	while(_g1 < _g) {
		var i = _g1++;
		this.m_points[i] = new box2D.collision.B2ManifoldPoint();
	}
	this.m_localPlaneNormal = new box2D.common.math.B2Vec2();
	this.m_localPoint = new box2D.common.math.B2Vec2();
};
$hxClasses["box2D.collision.B2Manifold"] = box2D.collision.B2Manifold;
box2D.collision.B2Manifold.__name__ = ["box2D","collision","B2Manifold"];
box2D.collision.B2Manifold.prototype = {
	reset: function() {
		var _g1 = 0;
		var _g = box2D.common.B2Settings.b2_maxManifoldPoints;
		while(_g1 < _g) {
			var i = _g1++;
			this.m_points[i].reset();
		}
		this.m_localPlaneNormal.setZero();
		this.m_localPoint.setZero();
		this.m_type = box2D.collision.B2ManifoldType.CIRCLES;
		this.m_pointCount = 0;
	}
	,set: function(m) {
		this.m_pointCount = m.m_pointCount;
		var _g1 = 0;
		var _g = box2D.common.B2Settings.b2_maxManifoldPoints;
		while(_g1 < _g) {
			var i = _g1++;
			this.m_points[i].set(m.m_points[i]);
		}
		this.m_localPlaneNormal.setV(m.m_localPlaneNormal);
		this.m_localPoint.setV(m.m_localPoint);
		this.m_type = m.m_type;
	}
	,copy: function() {
		var copy = new box2D.collision.B2Manifold();
		copy.set(this);
		return copy;
	}
	,__class__: box2D.collision.B2Manifold
};
box2D.collision.B2ManifoldPoint = function() {
	this.m_localPoint = new box2D.common.math.B2Vec2();
	this.m_id = new box2D.collision.B2ContactID();
	this.reset();
};
$hxClasses["box2D.collision.B2ManifoldPoint"] = box2D.collision.B2ManifoldPoint;
box2D.collision.B2ManifoldPoint.__name__ = ["box2D","collision","B2ManifoldPoint"];
box2D.collision.B2ManifoldPoint.prototype = {
	reset: function() {
		this.m_localPoint.setZero();
		this.m_normalImpulse = 0.0;
		this.m_tangentImpulse = 0.0;
		this.m_id.set_key(0);
	}
	,set: function(m) {
		this.m_localPoint.setV(m.m_localPoint);
		this.m_normalImpulse = m.m_normalImpulse;
		this.m_tangentImpulse = m.m_tangentImpulse;
		this.m_id.set(m.m_id);
	}
	,__class__: box2D.collision.B2ManifoldPoint
};
box2D.collision.B2ManifoldType = $hxClasses["box2D.collision.B2ManifoldType"] = { __ename__ : ["box2D","collision","B2ManifoldType"], __constructs__ : ["CIRCLES","FACE_A","FACE_B"] };
box2D.collision.B2ManifoldType.CIRCLES = ["CIRCLES",0];
box2D.collision.B2ManifoldType.CIRCLES.toString = $estr;
box2D.collision.B2ManifoldType.CIRCLES.__enum__ = box2D.collision.B2ManifoldType;
box2D.collision.B2ManifoldType.FACE_A = ["FACE_A",1];
box2D.collision.B2ManifoldType.FACE_A.toString = $estr;
box2D.collision.B2ManifoldType.FACE_A.__enum__ = box2D.collision.B2ManifoldType;
box2D.collision.B2ManifoldType.FACE_B = ["FACE_B",2];
box2D.collision.B2ManifoldType.FACE_B.toString = $estr;
box2D.collision.B2ManifoldType.FACE_B.__enum__ = box2D.collision.B2ManifoldType;
box2D.collision.B2OBB = function() {
	this.R = new box2D.common.math.B2Mat22();
	this.center = new box2D.common.math.B2Vec2();
	this.extents = new box2D.common.math.B2Vec2();
};
$hxClasses["box2D.collision.B2OBB"] = box2D.collision.B2OBB;
box2D.collision.B2OBB.__name__ = ["box2D","collision","B2OBB"];
box2D.collision.B2OBB.prototype = {
	__class__: box2D.collision.B2OBB
};
box2D.collision.B2RayCastInput = function(p1,p2,maxFraction) {
	if(maxFraction == null) maxFraction = 1;
	this.p1 = new box2D.common.math.B2Vec2();
	this.p2 = new box2D.common.math.B2Vec2();
	if(p1 != null) this.p1.setV(p1);
	if(p2 != null) this.p2.setV(p2);
	this.maxFraction = maxFraction;
};
$hxClasses["box2D.collision.B2RayCastInput"] = box2D.collision.B2RayCastInput;
box2D.collision.B2RayCastInput.__name__ = ["box2D","collision","B2RayCastInput"];
box2D.collision.B2RayCastInput.prototype = {
	__class__: box2D.collision.B2RayCastInput
};
box2D.collision.B2RayCastOutput = function() {
	this.normal = new box2D.common.math.B2Vec2();
};
$hxClasses["box2D.collision.B2RayCastOutput"] = box2D.collision.B2RayCastOutput;
box2D.collision.B2RayCastOutput.__name__ = ["box2D","collision","B2RayCastOutput"];
box2D.collision.B2RayCastOutput.prototype = {
	__class__: box2D.collision.B2RayCastOutput
};
box2D.collision.B2SeparationFunction = function() {
	this.m_localPoint = new box2D.common.math.B2Vec2();
	this.m_axis = new box2D.common.math.B2Vec2();
};
$hxClasses["box2D.collision.B2SeparationFunction"] = box2D.collision.B2SeparationFunction;
box2D.collision.B2SeparationFunction.__name__ = ["box2D","collision","B2SeparationFunction"];
box2D.collision.B2SeparationFunction.prototype = {
	initialize: function(cache,proxyA,transformA,proxyB,transformB) {
		this.m_proxyA = proxyA;
		this.m_proxyB = proxyB;
		var count = cache.count;
		box2D.common.B2Settings.b2Assert(0 < count && count < 3);
		var localPointA = new box2D.common.math.B2Vec2();
		var localPointA1;
		var localPointA2;
		var localPointB = new box2D.common.math.B2Vec2();
		var localPointB1;
		var localPointB2;
		var pointAX;
		var pointAY;
		var pointBX;
		var pointBY;
		var normalX;
		var normalY;
		var tMat;
		var tVec;
		var s;
		var sgn;
		if(count == 1) {
			this.m_type = box2D.collision.B2SeparationFunctionType.POINTS;
			localPointA = this.m_proxyA.getVertex(cache.indexA[0]);
			localPointB = this.m_proxyB.getVertex(cache.indexB[0]);
			tVec = localPointA;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointB;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			this.m_axis.x = pointBX - pointAX;
			this.m_axis.y = pointBY - pointAY;
			this.m_axis.normalize();
		} else if(cache.indexB[0] == cache.indexB[1]) {
			this.m_type = box2D.collision.B2SeparationFunctionType.FACE_A;
			localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);
			localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);
			localPointB = this.m_proxyB.getVertex(cache.indexB[0]);
			this.m_localPoint.x = 0.5 * (localPointA1.x + localPointA2.x);
			this.m_localPoint.y = 0.5 * (localPointA1.y + localPointA2.y);
			this.m_axis = box2D.common.math.B2Math.crossVF(box2D.common.math.B2Math.subtractVV(localPointA2,localPointA1),1.0);
			this.m_axis.normalize();
			tVec = this.m_axis;
			tMat = transformA.R;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tVec = this.m_localPoint;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointB;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			s = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
			if(s < 0.0) this.m_axis.negativeSelf();
		} else if(cache.indexA[0] == cache.indexA[0]) {
			this.m_type = box2D.collision.B2SeparationFunctionType.FACE_B;
			localPointB1 = this.m_proxyB.getVertex(cache.indexB[0]);
			localPointB2 = this.m_proxyB.getVertex(cache.indexB[1]);
			localPointA = this.m_proxyA.getVertex(cache.indexA[0]);
			this.m_localPoint.x = 0.5 * (localPointB1.x + localPointB2.x);
			this.m_localPoint.y = 0.5 * (localPointB1.y + localPointB2.y);
			this.m_axis = box2D.common.math.B2Math.crossVF(box2D.common.math.B2Math.subtractVV(localPointB2,localPointB1),1.0);
			this.m_axis.normalize();
			tVec = this.m_axis;
			tMat = transformB.R;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tVec = this.m_localPoint;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointA;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			s = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
			if(s < 0.0) this.m_axis.negativeSelf();
		} else {
			localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);
			localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);
			localPointB1 = this.m_proxyB.getVertex(cache.indexB[0]);
			localPointB2 = this.m_proxyB.getVertex(cache.indexB[1]);
			var pA = box2D.common.math.B2Math.mulX(transformA,localPointA);
			var dA = box2D.common.math.B2Math.mulMV(transformA.R,box2D.common.math.B2Math.subtractVV(localPointA2,localPointA1));
			var pB = box2D.common.math.B2Math.mulX(transformB,localPointB);
			var dB = box2D.common.math.B2Math.mulMV(transformB.R,box2D.common.math.B2Math.subtractVV(localPointB2,localPointB1));
			var a = dA.x * dA.x + dA.y * dA.y;
			var e = dB.x * dB.x + dB.y * dB.y;
			var r = box2D.common.math.B2Math.subtractVV(dB,dA);
			var c = dA.x * r.x + dA.y * r.y;
			var f = dB.x * r.x + dB.y * r.y;
			var b = dA.x * dB.x + dA.y * dB.y;
			var denom = a * e - b * b;
			s = 0.0;
			if(denom != 0.0) s = box2D.common.math.B2Math.clamp((b * f - c * e) / denom,0.0,1.0);
			var t = (b * s + f) / e;
			if(t < 0.0) {
				t = 0.0;
				s = box2D.common.math.B2Math.clamp((b - c) / a,0.0,1.0);
			}
			localPointA = new box2D.common.math.B2Vec2();
			localPointA.x = localPointA1.x + s * (localPointA2.x - localPointA1.x);
			localPointA.y = localPointA1.y + s * (localPointA2.y - localPointA1.y);
			localPointB = new box2D.common.math.B2Vec2();
			localPointB.x = localPointB1.x + s * (localPointB2.x - localPointB1.x);
			localPointB.y = localPointB1.y + s * (localPointB2.y - localPointB1.y);
			if(s == 0.0 || s == 1.0) {
				this.m_type = box2D.collision.B2SeparationFunctionType.FACE_B;
				this.m_axis = box2D.common.math.B2Math.crossVF(box2D.common.math.B2Math.subtractVV(localPointB2,localPointB1),1.0);
				this.m_axis.normalize();
				this.m_localPoint = localPointB;
				tVec = this.m_axis;
				tMat = transformB.R;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tVec = this.m_localPoint;
				tMat = transformB.R;
				pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				tVec = localPointA;
				tMat = transformA.R;
				pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				sgn = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
				if(s < 0.0) this.m_axis.negativeSelf();
			} else {
				this.m_type = box2D.collision.B2SeparationFunctionType.FACE_A;
				this.m_axis = box2D.common.math.B2Math.crossVF(box2D.common.math.B2Math.subtractVV(localPointA2,localPointA1),1.0);
				this.m_localPoint = localPointA;
				tVec = this.m_axis;
				tMat = transformA.R;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tVec = this.m_localPoint;
				tMat = transformA.R;
				pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				tVec = localPointB;
				tMat = transformB.R;
				pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				sgn = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
				if(s < 0.0) this.m_axis.negativeSelf();
			}
		}
	}
	,evaluate: function(transformA,transformB) {
		var axisA;
		var axisB;
		var localPointA;
		var localPointB;
		var pointA;
		var pointB;
		var seperation;
		var normal;
		var _g = this.m_type;
		switch(_g[1]) {
		case 0:
			axisA = box2D.common.math.B2Math.mulTMV(transformA.R,this.m_axis);
			axisB = box2D.common.math.B2Math.mulTMV(transformB.R,this.m_axis.getNegative());
			localPointA = this.m_proxyA.getSupportVertex(axisA);
			localPointB = this.m_proxyB.getSupportVertex(axisB);
			pointA = box2D.common.math.B2Math.mulX(transformA,localPointA);
			pointB = box2D.common.math.B2Math.mulX(transformB,localPointB);
			seperation = (pointB.x - pointA.x) * this.m_axis.x + (pointB.y - pointA.y) * this.m_axis.y;
			return seperation;
		case 1:
			normal = box2D.common.math.B2Math.mulMV(transformA.R,this.m_axis);
			pointA = box2D.common.math.B2Math.mulX(transformA,this.m_localPoint);
			axisB = box2D.common.math.B2Math.mulTMV(transformB.R,normal.getNegative());
			localPointB = this.m_proxyB.getSupportVertex(axisB);
			pointB = box2D.common.math.B2Math.mulX(transformB,localPointB);
			seperation = (pointB.x - pointA.x) * normal.x + (pointB.y - pointA.y) * normal.y;
			return seperation;
		case 2:
			normal = box2D.common.math.B2Math.mulMV(transformB.R,this.m_axis);
			pointB = box2D.common.math.B2Math.mulX(transformB,this.m_localPoint);
			axisA = box2D.common.math.B2Math.mulTMV(transformA.R,normal.getNegative());
			localPointA = this.m_proxyA.getSupportVertex(axisA);
			pointA = box2D.common.math.B2Math.mulX(transformA,localPointA);
			seperation = (pointA.x - pointB.x) * normal.x + (pointA.y - pointB.y) * normal.y;
			return seperation;
		}
	}
	,__class__: box2D.collision.B2SeparationFunction
};
box2D.collision.B2SeparationFunctionType = $hxClasses["box2D.collision.B2SeparationFunctionType"] = { __ename__ : ["box2D","collision","B2SeparationFunctionType"], __constructs__ : ["POINTS","FACE_A","FACE_B"] };
box2D.collision.B2SeparationFunctionType.POINTS = ["POINTS",0];
box2D.collision.B2SeparationFunctionType.POINTS.toString = $estr;
box2D.collision.B2SeparationFunctionType.POINTS.__enum__ = box2D.collision.B2SeparationFunctionType;
box2D.collision.B2SeparationFunctionType.FACE_A = ["FACE_A",1];
box2D.collision.B2SeparationFunctionType.FACE_A.toString = $estr;
box2D.collision.B2SeparationFunctionType.FACE_A.__enum__ = box2D.collision.B2SeparationFunctionType;
box2D.collision.B2SeparationFunctionType.FACE_B = ["FACE_B",2];
box2D.collision.B2SeparationFunctionType.FACE_B.toString = $estr;
box2D.collision.B2SeparationFunctionType.FACE_B.__enum__ = box2D.collision.B2SeparationFunctionType;
box2D.collision.B2SimplexCache = function() {
	this.count = 0;
	this.metric = 0;
	this.indexA = new Array();
	this.indexB = new Array();
};
$hxClasses["box2D.collision.B2SimplexCache"] = box2D.collision.B2SimplexCache;
box2D.collision.B2SimplexCache.__name__ = ["box2D","collision","B2SimplexCache"];
box2D.collision.B2SimplexCache.prototype = {
	__class__: box2D.collision.B2SimplexCache
};
box2D.collision.B2TOIInput = function() {
	this.proxyA = new box2D.collision.B2DistanceProxy();
	this.proxyB = new box2D.collision.B2DistanceProxy();
	this.sweepA = new box2D.common.math.B2Sweep();
	this.sweepB = new box2D.common.math.B2Sweep();
};
$hxClasses["box2D.collision.B2TOIInput"] = box2D.collision.B2TOIInput;
box2D.collision.B2TOIInput.__name__ = ["box2D","collision","B2TOIInput"];
box2D.collision.B2TOIInput.prototype = {
	__class__: box2D.collision.B2TOIInput
};
box2D.common.math.B2Transform = function(pos,r) {
	this.position = new box2D.common.math.B2Vec2();
	this.R = new box2D.common.math.B2Mat22();
	if(pos != null) {
		this.position.setV(pos);
		this.R.setM(r);
	}
};
$hxClasses["box2D.common.math.B2Transform"] = box2D.common.math.B2Transform;
box2D.common.math.B2Transform.__name__ = ["box2D","common","math","B2Transform"];
box2D.common.math.B2Transform.prototype = {
	initialize: function(pos,r) {
		this.position.setV(pos);
		this.R.setM(r);
	}
	,setIdentity: function() {
		this.position.setZero();
		this.R.setIdentity();
	}
	,set: function(x) {
		this.position.setV(x.position);
		this.R.setM(x.R);
	}
	,getAngle: function() {
		return Math.atan2(this.R.col1.y,this.R.col1.x);
	}
	,__class__: box2D.common.math.B2Transform
};
box2D.common.math.B2Mat22 = function() {
	this.col1 = new box2D.common.math.B2Vec2(0,1.0);
	this.col2 = new box2D.common.math.B2Vec2(0,1.0);
};
$hxClasses["box2D.common.math.B2Mat22"] = box2D.common.math.B2Mat22;
box2D.common.math.B2Mat22.__name__ = ["box2D","common","math","B2Mat22"];
box2D.common.math.B2Mat22.fromAngle = function(angle) {
	var mat = new box2D.common.math.B2Mat22();
	mat.set(angle);
	return mat;
};
box2D.common.math.B2Mat22.fromVV = function(c1,c2) {
	var mat = new box2D.common.math.B2Mat22();
	mat.setVV(c1,c2);
	return mat;
};
box2D.common.math.B2Mat22.prototype = {
	set: function(angle) {
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		this.col1.x = c;
		this.col2.x = -s;
		this.col1.y = s;
		this.col2.y = c;
	}
	,setVV: function(c1,c2) {
		this.col1.setV(c1);
		this.col2.setV(c2);
	}
	,copy: function() {
		var mat = new box2D.common.math.B2Mat22();
		mat.setM(this);
		return mat;
	}
	,setM: function(m) {
		this.col1.setV(m.col1);
		this.col2.setV(m.col2);
	}
	,addM: function(m) {
		this.col1.x += m.col1.x;
		this.col1.y += m.col1.y;
		this.col2.x += m.col2.x;
		this.col2.y += m.col2.y;
	}
	,setIdentity: function() {
		this.col1.x = 1.0;
		this.col2.x = 0.0;
		this.col1.y = 0.0;
		this.col2.y = 1.0;
	}
	,setZero: function() {
		this.col1.x = 0.0;
		this.col2.x = 0.0;
		this.col1.y = 0.0;
		this.col2.y = 0.0;
	}
	,getAngle: function() {
		return Math.atan2(this.col1.y,this.col1.x);
	}
	,getInverse: function(out) {
		var a = this.col1.x;
		var b = this.col2.x;
		var c = this.col1.y;
		var d = this.col2.y;
		var det = a * d - b * c;
		if(det != 0.0) det = 1.0 / det;
		out.col1.x = det * d;
		out.col2.x = -det * b;
		out.col1.y = -det * c;
		out.col2.y = det * a;
		return out;
	}
	,solve: function(out,bX,bY) {
		var a11 = this.col1.x;
		var a12 = this.col2.x;
		var a21 = this.col1.y;
		var a22 = this.col2.y;
		var det = a11 * a22 - a12 * a21;
		if(det != 0.0) det = 1.0 / det;
		out.x = det * (a22 * bX - a12 * bY);
		out.y = det * (a11 * bY - a21 * bX);
		return out;
	}
	,abs: function() {
		this.col1.abs();
		this.col2.abs();
	}
	,__class__: box2D.common.math.B2Mat22
};
box2D.collision.B2TimeOfImpact = function() { };
$hxClasses["box2D.collision.B2TimeOfImpact"] = box2D.collision.B2TimeOfImpact;
box2D.collision.B2TimeOfImpact.__name__ = ["box2D","collision","B2TimeOfImpact"];
box2D.collision.B2TimeOfImpact.timeOfImpact = function(input) {
	++box2D.collision.B2TimeOfImpact.b2_toiCalls;
	var proxyA = input.proxyA;
	var proxyB = input.proxyB;
	var sweepA = input.sweepA;
	var sweepB = input.sweepB;
	box2D.common.B2Settings.b2Assert(sweepA.t0 == sweepB.t0);
	box2D.common.B2Settings.b2Assert(1.0 - sweepA.t0 > Number.MIN_VALUE);
	var radius = proxyA.m_radius + proxyB.m_radius;
	var tolerance = input.tolerance;
	var alpha = 0.0;
	var k_maxIterations = 1000;
	var iter = 0;
	var target = 0.0;
	box2D.collision.B2TimeOfImpact.s_cache.count = 0;
	box2D.collision.B2TimeOfImpact.s_distanceInput.useRadii = false;
	while(true) {
		sweepA.getTransform(box2D.collision.B2TimeOfImpact.s_xfA,alpha);
		sweepB.getTransform(box2D.collision.B2TimeOfImpact.s_xfB,alpha);
		box2D.collision.B2TimeOfImpact.s_distanceInput.proxyA = proxyA;
		box2D.collision.B2TimeOfImpact.s_distanceInput.proxyB = proxyB;
		box2D.collision.B2TimeOfImpact.s_distanceInput.transformA = box2D.collision.B2TimeOfImpact.s_xfA;
		box2D.collision.B2TimeOfImpact.s_distanceInput.transformB = box2D.collision.B2TimeOfImpact.s_xfB;
		box2D.collision.B2Distance.distance(box2D.collision.B2TimeOfImpact.s_distanceOutput,box2D.collision.B2TimeOfImpact.s_cache,box2D.collision.B2TimeOfImpact.s_distanceInput);
		if(box2D.collision.B2TimeOfImpact.s_distanceOutput.distance <= 0.0) {
			alpha = 1.0;
			break;
		}
		box2D.collision.B2TimeOfImpact.s_fcn.initialize(box2D.collision.B2TimeOfImpact.s_cache,proxyA,box2D.collision.B2TimeOfImpact.s_xfA,proxyB,box2D.collision.B2TimeOfImpact.s_xfB);
		var separation = box2D.collision.B2TimeOfImpact.s_fcn.evaluate(box2D.collision.B2TimeOfImpact.s_xfA,box2D.collision.B2TimeOfImpact.s_xfB);
		if(separation <= 0.0) {
			alpha = 1.0;
			break;
		}
		if(iter == 0) {
			if(separation > radius) target = box2D.common.math.B2Math.max(radius - tolerance,0.75 * radius); else target = box2D.common.math.B2Math.max(separation - tolerance,0.02 * radius);
		}
		if(separation - target < 0.5 * tolerance) {
			if(iter == 0) {
				alpha = 1.0;
				break;
			}
			break;
		}
		var newAlpha = alpha;
		var x1 = alpha;
		var x2 = 1.0;
		var f1 = separation;
		sweepA.getTransform(box2D.collision.B2TimeOfImpact.s_xfA,x2);
		sweepB.getTransform(box2D.collision.B2TimeOfImpact.s_xfB,x2);
		var f2 = box2D.collision.B2TimeOfImpact.s_fcn.evaluate(box2D.collision.B2TimeOfImpact.s_xfA,box2D.collision.B2TimeOfImpact.s_xfB);
		if(f2 >= target) {
			alpha = 1.0;
			break;
		}
		var rootIterCount = 0;
		while(true) {
			var x;
			if((rootIterCount & 1) != 0) x = x1 + (target - f1) * (x2 - x1) / (f2 - f1); else x = 0.5 * (x1 + x2);
			sweepA.getTransform(box2D.collision.B2TimeOfImpact.s_xfA,x);
			sweepB.getTransform(box2D.collision.B2TimeOfImpact.s_xfB,x);
			var f = box2D.collision.B2TimeOfImpact.s_fcn.evaluate(box2D.collision.B2TimeOfImpact.s_xfA,box2D.collision.B2TimeOfImpact.s_xfB);
			if(box2D.common.math.B2Math.abs(f - target) < 0.025 * tolerance) {
				newAlpha = x;
				break;
			}
			if(f > target) {
				x1 = x;
				f1 = f;
			} else {
				x2 = x;
				f2 = f;
			}
			++rootIterCount;
			++box2D.collision.B2TimeOfImpact.b2_toiRootIters;
			if(rootIterCount == 50) break;
		}
		box2D.collision.B2TimeOfImpact.b2_toiMaxRootIters = Std["int"](box2D.common.math.B2Math.max(box2D.collision.B2TimeOfImpact.b2_toiMaxRootIters,rootIterCount));
		if(newAlpha < (1.0 + 100.0 * Number.MIN_VALUE) * alpha) break;
		alpha = newAlpha;
		iter++;
		++box2D.collision.B2TimeOfImpact.b2_toiIters;
		if(iter == k_maxIterations) break;
	}
	box2D.collision.B2TimeOfImpact.b2_toiMaxIters = Std["int"](box2D.common.math.B2Math.max(box2D.collision.B2TimeOfImpact.b2_toiMaxIters,iter));
	return alpha;
};
box2D.collision.B2WorldManifold = function() {
	this.m_normal = new box2D.common.math.B2Vec2();
	this.m_points = new Array();
	var _g1 = 0;
	var _g = box2D.common.B2Settings.b2_maxManifoldPoints;
	while(_g1 < _g) {
		var i = _g1++;
		this.m_points[i] = new box2D.common.math.B2Vec2();
	}
};
$hxClasses["box2D.collision.B2WorldManifold"] = box2D.collision.B2WorldManifold;
box2D.collision.B2WorldManifold.__name__ = ["box2D","collision","B2WorldManifold"];
box2D.collision.B2WorldManifold.prototype = {
	initialize: function(manifold,xfA,radiusA,xfB,radiusB) {
		if(manifold.m_pointCount == 0) return;
		var i;
		var tVec;
		var tMat;
		var normalX;
		var normalY;
		var planePointX;
		var planePointY;
		var clipPointX;
		var clipPointY;
		var _g = manifold.m_type;
		switch(_g[1]) {
		case 0:
			tMat = xfA.R;
			tVec = manifold.m_localPoint;
			var pointAX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			var pointAY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = xfB.R;
			tVec = manifold.m_points[0].m_localPoint;
			var pointBX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			var pointBY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			var dX = pointBX - pointAX;
			var dY = pointBY - pointAY;
			var d2 = dX * dX + dY * dY;
			if(d2 > Number.MIN_VALUE * Number.MIN_VALUE) {
				var d = Math.sqrt(d2);
				this.m_normal.x = dX / d;
				this.m_normal.y = dY / d;
			} else {
				this.m_normal.x = 1;
				this.m_normal.y = 0;
			}
			var cAX = pointAX + radiusA * this.m_normal.x;
			var cAY = pointAY + radiusA * this.m_normal.y;
			var cBX = pointBX - radiusB * this.m_normal.x;
			var cBY = pointBY - radiusB * this.m_normal.y;
			this.m_points[0].x = 0.5 * (cAX + cBX);
			this.m_points[0].y = 0.5 * (cAY + cBY);
			break;
		case 1:
			tMat = xfA.R;
			tVec = manifold.m_localPlaneNormal;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = xfA.R;
			tVec = manifold.m_localPoint;
			planePointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			planePointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			this.m_normal.x = normalX;
			this.m_normal.y = normalY;
			var _g2 = 0;
			var _g1 = manifold.m_pointCount;
			while(_g2 < _g1) {
				var i1 = _g2++;
				tMat = xfB.R;
				tVec = manifold.m_points[i1].m_localPoint;
				clipPointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				clipPointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				this.m_points[i1].x = clipPointX + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalX;
				this.m_points[i1].y = clipPointY + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalY;
			}
			break;
		case 2:
			tMat = xfB.R;
			tVec = manifold.m_localPlaneNormal;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = xfB.R;
			tVec = manifold.m_localPoint;
			planePointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			planePointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			this.m_normal.x = -normalX;
			this.m_normal.y = -normalY;
			var _g21 = 0;
			var _g11 = manifold.m_pointCount;
			while(_g21 < _g11) {
				var i2 = _g21++;
				tMat = xfA.R;
				tVec = manifold.m_points[i2].m_localPoint;
				clipPointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				clipPointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				this.m_points[i2].x = clipPointX + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalX;
				this.m_points[i2].y = clipPointY + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalY;
			}
			break;
		}
	}
	,__class__: box2D.collision.B2WorldManifold
};
box2D.collision.shapes = {};
box2D.collision.shapes.B2Shape = function() {
	this.m_type = 0;
	this.m_radius = box2D.common.B2Settings.b2_linearSlop;
};
$hxClasses["box2D.collision.shapes.B2Shape"] = box2D.collision.shapes.B2Shape;
box2D.collision.shapes.B2Shape.__name__ = ["box2D","collision","shapes","B2Shape"];
box2D.collision.shapes.B2Shape.testOverlap = function(shape1,transform1,shape2,transform2) {
	var input = new box2D.collision.B2DistanceInput();
	input.proxyA = new box2D.collision.B2DistanceProxy();
	input.proxyA.set(shape1);
	input.proxyB = new box2D.collision.B2DistanceProxy();
	input.proxyB.set(shape2);
	input.transformA = transform1;
	input.transformB = transform2;
	input.useRadii = true;
	var simplexCache = new box2D.collision.B2SimplexCache();
	simplexCache.count = 0;
	var output = new box2D.collision.B2DistanceOutput();
	box2D.collision.B2Distance.distance(output,simplexCache,input);
	return output.distance < 10.0 * Number.MIN_VALUE;
};
box2D.collision.shapes.B2Shape.prototype = {
	copy: function() {
		return null;
	}
	,set: function(other) {
		this.m_radius = other.m_radius;
	}
	,getType: function() {
		return this.m_type;
	}
	,testPoint: function(xf,p) {
		return false;
	}
	,rayCast: function(output,input,transform) {
		return false;
	}
	,computeAABB: function(aabb,xf) {
	}
	,computeMass: function(massData,density) {
	}
	,computeSubmergedArea: function(normal,offset,xf,c) {
		return 0;
	}
	,__class__: box2D.collision.shapes.B2Shape
};
box2D.collision.shapes.B2CircleShape = function(radius) {
	if(radius == null) radius = 0;
	box2D.collision.shapes.B2Shape.call(this);
	this.m_p = new box2D.common.math.B2Vec2();
	this.m_type = 1;
	this.m_radius = radius;
};
$hxClasses["box2D.collision.shapes.B2CircleShape"] = box2D.collision.shapes.B2CircleShape;
box2D.collision.shapes.B2CircleShape.__name__ = ["box2D","collision","shapes","B2CircleShape"];
box2D.collision.shapes.B2CircleShape.__super__ = box2D.collision.shapes.B2Shape;
box2D.collision.shapes.B2CircleShape.prototype = $extend(box2D.collision.shapes.B2Shape.prototype,{
	copy: function() {
		var s = new box2D.collision.shapes.B2CircleShape();
		s.set(this);
		return s;
	}
	,set: function(other) {
		box2D.collision.shapes.B2Shape.prototype.set.call(this,other);
		if(js.Boot.__instanceof(other,box2D.collision.shapes.B2CircleShape)) {
			var other2;
			other2 = js.Boot.__cast(other , box2D.collision.shapes.B2CircleShape);
			this.m_p.setV(other2.m_p);
		}
	}
	,testPoint: function(transform,p) {
		var tMat = transform.R;
		var dX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
		var dY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
		dX = p.x - dX;
		dY = p.y - dY;
		return dX * dX + dY * dY <= this.m_radius * this.m_radius;
	}
	,rayCast: function(output,input,transform) {
		var tMat = transform.R;
		var positionX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
		var positionY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
		var sX = input.p1.x - positionX;
		var sY = input.p1.y - positionY;
		var b = sX * sX + sY * sY - this.m_radius * this.m_radius;
		var rX = input.p2.x - input.p1.x;
		var rY = input.p2.y - input.p1.y;
		var c = sX * rX + sY * rY;
		var rr = rX * rX + rY * rY;
		var sigma = c * c - rr * b;
		if(sigma < 0.0 || rr < Number.MIN_VALUE) return false;
		var a = -(c + Math.sqrt(sigma));
		if(0.0 <= a && a <= input.maxFraction * rr) {
			a /= rr;
			output.fraction = a;
			output.normal.x = sX + a * rX;
			output.normal.y = sY + a * rY;
			output.normal.normalize();
			return true;
		}
		return false;
	}
	,computeAABB: function(aabb,transform) {
		var tMat = transform.R;
		var pX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
		var pY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
		aabb.lowerBound.set(pX - this.m_radius,pY - this.m_radius);
		aabb.upperBound.set(pX + this.m_radius,pY + this.m_radius);
	}
	,computeMass: function(massData,density) {
		massData.mass = density * box2D.common.B2Settings.b2_pi * this.m_radius * this.m_radius;
		massData.center.setV(this.m_p);
		massData.I = massData.mass * (0.5 * this.m_radius * this.m_radius + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y));
	}
	,computeSubmergedArea: function(normal,offset,xf,c) {
		var p = box2D.common.math.B2Math.mulX(xf,this.m_p);
		var l = -(box2D.common.math.B2Math.dot(normal,p) - offset);
		if(l < -this.m_radius + Number.MIN_VALUE) return 0;
		if(l > this.m_radius) {
			c.setV(p);
			return Math.PI * this.m_radius * this.m_radius;
		}
		var r2 = this.m_radius * this.m_radius;
		var l2 = l * l;
		var area = r2 * (Math.asin(l / this.m_radius) + Math.PI / 2) + l * Math.sqrt(r2 - l2);
		var com = -0.66666666666666663 * Math.pow(r2 - l2,1.5) / area;
		c.x = p.x + normal.x * com;
		c.y = p.y + normal.y * com;
		return area;
	}
	,getLocalPosition: function() {
		return this.m_p;
	}
	,setLocalPosition: function(position) {
		this.m_p.setV(position);
	}
	,getRadius: function() {
		return this.m_radius;
	}
	,setRadius: function(radius) {
		this.m_radius = radius;
	}
	,__class__: box2D.collision.shapes.B2CircleShape
});
box2D.collision.shapes.B2EdgeShape = function(v1,v2) {
	box2D.collision.shapes.B2Shape.call(this);
	this.s_supportVec = new box2D.common.math.B2Vec2();
	this.m_v1 = new box2D.common.math.B2Vec2();
	this.m_v2 = new box2D.common.math.B2Vec2();
	this.m_coreV1 = new box2D.common.math.B2Vec2();
	this.m_coreV2 = new box2D.common.math.B2Vec2();
	this.m_normal = new box2D.common.math.B2Vec2();
	this.m_direction = new box2D.common.math.B2Vec2();
	this.m_cornerDir1 = new box2D.common.math.B2Vec2();
	this.m_cornerDir2 = new box2D.common.math.B2Vec2();
	this.m_type = 3;
	this.m_prevEdge = null;
	this.m_nextEdge = null;
	this.m_v1 = v1;
	this.m_v2 = v2;
	this.m_direction.set(this.m_v2.x - this.m_v1.x,this.m_v2.y - this.m_v1.y);
	this.m_length = this.m_direction.normalize();
	this.m_normal.set(this.m_direction.y,-this.m_direction.x);
	this.m_coreV1.set(-box2D.common.B2Settings.b2_toiSlop * (this.m_normal.x - this.m_direction.x) + this.m_v1.x,-box2D.common.B2Settings.b2_toiSlop * (this.m_normal.y - this.m_direction.y) + this.m_v1.y);
	this.m_coreV2.set(-box2D.common.B2Settings.b2_toiSlop * (this.m_normal.x + this.m_direction.x) + this.m_v2.x,-box2D.common.B2Settings.b2_toiSlop * (this.m_normal.y + this.m_direction.y) + this.m_v2.y);
	this.m_cornerDir1 = this.m_normal;
	this.m_cornerDir2.set(-this.m_normal.x,-this.m_normal.y);
};
$hxClasses["box2D.collision.shapes.B2EdgeShape"] = box2D.collision.shapes.B2EdgeShape;
box2D.collision.shapes.B2EdgeShape.__name__ = ["box2D","collision","shapes","B2EdgeShape"];
box2D.collision.shapes.B2EdgeShape.__super__ = box2D.collision.shapes.B2Shape;
box2D.collision.shapes.B2EdgeShape.prototype = $extend(box2D.collision.shapes.B2Shape.prototype,{
	testPoint: function(transform,p) {
		return false;
	}
	,rayCast: function(output,input,transform) {
		var tMat;
		var rX = input.p2.x - input.p1.x;
		var rY = input.p2.y - input.p1.y;
		tMat = transform.R;
		var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
		var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
		var nX = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y) - v1Y;
		var nY = -(transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y) - v1X);
		var k_slop = 100.0 * Number.MIN_VALUE;
		var denom = -(rX * nX + rY * nY);
		if(denom > k_slop) {
			var bX = input.p1.x - v1X;
			var bY = input.p1.y - v1Y;
			var a = bX * nX + bY * nY;
			if(0.0 <= a && a <= input.maxFraction * denom) {
				var mu2 = -rX * bY + rY * bX;
				if(-k_slop * denom <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
					a /= denom;
					output.fraction = a;
					var nLen = Math.sqrt(nX * nX + nY * nY);
					output.normal.x = nX / nLen;
					output.normal.y = nY / nLen;
					return true;
				}
			}
		}
		return false;
	}
	,computeAABB: function(aabb,transform) {
		var tMat = transform.R;
		var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
		var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
		var v2X = transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y);
		var v2Y = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y);
		if(v1X < v2X) {
			aabb.lowerBound.x = v1X;
			aabb.upperBound.x = v2X;
		} else {
			aabb.lowerBound.x = v2X;
			aabb.upperBound.x = v1X;
		}
		if(v1Y < v2Y) {
			aabb.lowerBound.y = v1Y;
			aabb.upperBound.y = v2Y;
		} else {
			aabb.lowerBound.y = v2Y;
			aabb.upperBound.y = v1Y;
		}
	}
	,computeMass: function(massData,density) {
		massData.mass = 0;
		massData.center.setV(this.m_v1);
		massData.I = 0;
	}
	,computeSubmergedArea: function(normal,offset,xf,c) {
		var v0 = new box2D.common.math.B2Vec2(normal.x * offset,normal.y * offset);
		var v1 = box2D.common.math.B2Math.mulX(xf,this.m_v1);
		var v2 = box2D.common.math.B2Math.mulX(xf,this.m_v2);
		var d1 = box2D.common.math.B2Math.dot(normal,v1) - offset;
		var d2 = box2D.common.math.B2Math.dot(normal,v2) - offset;
		if(d1 > 0) {
			if(d2 > 0) return 0; else {
				v1.x = -d2 / (d1 - d2) * v1.x + d1 / (d1 - d2) * v2.x;
				v1.y = -d2 / (d1 - d2) * v1.y + d1 / (d1 - d2) * v2.y;
			}
		} else if(d2 > 0) {
			v2.x = -d2 / (d1 - d2) * v1.x + d1 / (d1 - d2) * v2.x;
			v2.y = -d2 / (d1 - d2) * v1.y + d1 / (d1 - d2) * v2.y;
		} else {
		}
		c.x = (v0.x + v1.x + v2.x) / 3;
		c.y = (v0.y + v1.y + v2.y) / 3;
		return 0.5 * ((v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x));
	}
	,getLength: function() {
		return this.m_length;
	}
	,getVertex1: function() {
		return this.m_v1;
	}
	,getVertex2: function() {
		return this.m_v2;
	}
	,getCoreVertex1: function() {
		return this.m_coreV1;
	}
	,getCoreVertex2: function() {
		return this.m_coreV2;
	}
	,getNormalVector: function() {
		return this.m_normal;
	}
	,getDirectionVector: function() {
		return this.m_direction;
	}
	,getCorner1Vector: function() {
		return this.m_cornerDir1;
	}
	,getCorner2Vector: function() {
		return this.m_cornerDir2;
	}
	,corner1IsConvex: function() {
		return this.m_cornerConvex1;
	}
	,corner2IsConvex: function() {
		return this.m_cornerConvex2;
	}
	,getFirstVertex: function(xf) {
		var tMat = xf.R;
		return new box2D.common.math.B2Vec2(xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y),xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y));
	}
	,getNextEdge: function() {
		return this.m_nextEdge;
	}
	,getPrevEdge: function() {
		return this.m_prevEdge;
	}
	,support: function(xf,dX,dY) {
		var tMat = xf.R;
		var v1X = xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y);
		var v1Y = xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y);
		var v2X = xf.position.x + (tMat.col1.x * this.m_coreV2.x + tMat.col2.x * this.m_coreV2.y);
		var v2Y = xf.position.y + (tMat.col1.y * this.m_coreV2.x + tMat.col2.y * this.m_coreV2.y);
		if(v1X * dX + v1Y * dY > v2X * dX + v2Y * dY) {
			this.s_supportVec.x = v1X;
			this.s_supportVec.y = v1Y;
		} else {
			this.s_supportVec.x = v2X;
			this.s_supportVec.y = v2Y;
		}
		return this.s_supportVec;
	}
	,setPrevEdge: function(edge,core,cornerDir,convex) {
		this.m_prevEdge = edge;
		this.m_coreV1 = core;
		this.m_cornerDir1 = cornerDir;
		this.m_cornerConvex1 = convex;
	}
	,setNextEdge: function(edge,core,cornerDir,convex) {
		this.m_nextEdge = edge;
		this.m_coreV2 = core;
		this.m_cornerDir2 = cornerDir;
		this.m_cornerConvex2 = convex;
	}
	,__class__: box2D.collision.shapes.B2EdgeShape
});
box2D.collision.shapes.B2MassData = function() {
	this.mass = 0.0;
	this.center = new box2D.common.math.B2Vec2(0,0);
	this.I = 0.0;
};
$hxClasses["box2D.collision.shapes.B2MassData"] = box2D.collision.shapes.B2MassData;
box2D.collision.shapes.B2MassData.__name__ = ["box2D","collision","shapes","B2MassData"];
box2D.collision.shapes.B2MassData.prototype = {
	__class__: box2D.collision.shapes.B2MassData
};
box2D.collision.shapes.B2PolygonShape = function() {
	this.m_vertexCount = 0;
	box2D.collision.shapes.B2Shape.call(this);
	this.m_type = 2;
	this.m_centroid = new box2D.common.math.B2Vec2();
	this.m_vertices = new Array();
	this.m_normals = new Array();
};
$hxClasses["box2D.collision.shapes.B2PolygonShape"] = box2D.collision.shapes.B2PolygonShape;
box2D.collision.shapes.B2PolygonShape.__name__ = ["box2D","collision","shapes","B2PolygonShape"];
box2D.collision.shapes.B2PolygonShape.asArray = function(vertices,vertexCount) {
	var polygonShape = new box2D.collision.shapes.B2PolygonShape();
	polygonShape.setAsArray(vertices,vertexCount);
	return polygonShape;
};
box2D.collision.shapes.B2PolygonShape.asVector = function(vertices,vertexCount) {
	var polygonShape = new box2D.collision.shapes.B2PolygonShape();
	polygonShape.setAsVector(vertices,vertexCount);
	return polygonShape;
};
box2D.collision.shapes.B2PolygonShape.asBox = function(hx,hy) {
	var polygonShape = new box2D.collision.shapes.B2PolygonShape();
	polygonShape.setAsBox(hx,hy);
	return polygonShape;
};
box2D.collision.shapes.B2PolygonShape.asOrientedBox = function(hx,hy,center,angle) {
	if(angle == null) angle = 0.0;
	var polygonShape = new box2D.collision.shapes.B2PolygonShape();
	polygonShape.setAsOrientedBox(hx,hy,center,angle);
	return polygonShape;
};
box2D.collision.shapes.B2PolygonShape.asEdge = function(v1,v2) {
	var polygonShape = new box2D.collision.shapes.B2PolygonShape();
	polygonShape.setAsEdge(v1,v2);
	return polygonShape;
};
box2D.collision.shapes.B2PolygonShape.computeCentroid = function(vs,count) {
	var c = new box2D.common.math.B2Vec2();
	var area = 0.0;
	var p1X = 0.0;
	var p1Y = 0.0;
	var inv3 = 0.33333333333333331;
	var _g = 0;
	while(_g < count) {
		var i = _g++;
		var p2 = vs[i];
		var p3;
		if(i + 1 < count) p3 = vs[i + 1 | 0]; else p3 = vs[0];
		var e1X = p2.x - p1X;
		var e1Y = p2.y - p1Y;
		var e2X = p3.x - p1X;
		var e2Y = p3.y - p1Y;
		var D = e1X * e2Y - e1Y * e2X;
		var triangleArea = 0.5 * D;
		area += triangleArea;
		c.x += triangleArea * inv3 * (p1X + p2.x + p3.x);
		c.y += triangleArea * inv3 * (p1Y + p2.y + p3.y);
	}
	c.x *= 1.0 / area;
	c.y *= 1.0 / area;
	return c;
};
box2D.collision.shapes.B2PolygonShape.computeOBB = function(obb,vs,count) {
	var i;
	var p = new Array();
	var _g = 0;
	while(_g < count) {
		var i1 = _g++;
		p[i1] = vs[i1];
	}
	p[count] = p[0];
	var minArea = Number.MAX_VALUE;
	var _g1 = 1;
	var _g2 = count + 1;
	while(_g1 < _g2) {
		var i2 = _g1++;
		var root = p[i2 - 1 | 0];
		var uxX = p[i2].x - root.x;
		var uxY = p[i2].y - root.y;
		var length = Math.sqrt(uxX * uxX + uxY * uxY);
		uxX /= length;
		uxY /= length;
		var uyX = -uxY;
		var uyY = uxX;
		var lowerX = Number.MAX_VALUE;
		var lowerY = Number.MAX_VALUE;
		var upperX = -Number.MAX_VALUE;
		var upperY = -Number.MAX_VALUE;
		var _g21 = 0;
		while(_g21 < count) {
			var j = _g21++;
			var dX = p[j].x - root.x;
			var dY = p[j].y - root.y;
			var rX = uxX * dX + uxY * dY;
			var rY = uyX * dX + uyY * dY;
			if(rX < lowerX) lowerX = rX;
			if(rY < lowerY) lowerY = rY;
			if(rX > upperX) upperX = rX;
			if(rY > upperY) upperY = rY;
		}
		var area = (upperX - lowerX) * (upperY - lowerY);
		if(area < 0.95 * minArea) {
			minArea = area;
			obb.R.col1.x = uxX;
			obb.R.col1.y = uxY;
			obb.R.col2.x = uyX;
			obb.R.col2.y = uyY;
			var centerX = 0.5 * (lowerX + upperX);
			var centerY = 0.5 * (lowerY + upperY);
			var tMat = obb.R;
			obb.center.x = root.x + (tMat.col1.x * centerX + tMat.col2.x * centerY);
			obb.center.y = root.y + (tMat.col1.y * centerX + tMat.col2.y * centerY);
			obb.extents.x = 0.5 * (upperX - lowerX);
			obb.extents.y = 0.5 * (upperY - lowerY);
		}
	}
};
box2D.collision.shapes.B2PolygonShape.__super__ = box2D.collision.shapes.B2Shape;
box2D.collision.shapes.B2PolygonShape.prototype = $extend(box2D.collision.shapes.B2Shape.prototype,{
	copy: function() {
		var s = new box2D.collision.shapes.B2PolygonShape();
		s.set(this);
		return s;
	}
	,set: function(other) {
		box2D.collision.shapes.B2Shape.prototype.set.call(this,other);
		if(js.Boot.__instanceof(other,box2D.collision.shapes.B2PolygonShape)) {
			var other2;
			other2 = js.Boot.__cast(other , box2D.collision.shapes.B2PolygonShape);
			this.m_centroid.setV(other2.m_centroid);
			this.m_vertexCount = other2.m_vertexCount;
			this.reserve(this.m_vertexCount);
			var _g1 = 0;
			var _g = this.m_vertexCount;
			while(_g1 < _g) {
				var i = _g1++;
				this.m_vertices[i].setV(other2.m_vertices[i]);
				this.m_normals[i].setV(other2.m_normals[i]);
			}
		}
	}
	,setAsArray: function(vertices,vertexCount) {
		if(vertexCount == null) vertexCount = 0;
		var v = new Array();
		var _g = 0;
		while(_g < vertices.length) {
			var tVec = vertices[_g];
			++_g;
			v.push(tVec);
		}
		this.setAsVector(v,vertexCount);
	}
	,setAsVector: function(vertices,vertexCount) {
		if(vertexCount == null) vertexCount = 0;
		if(vertexCount == 0) vertexCount = vertices.length;
		box2D.common.B2Settings.b2Assert(2 <= vertexCount);
		this.m_vertexCount = vertexCount | 0;
		this.reserve(vertexCount | 0);
		var i;
		var _g1 = 0;
		var _g = this.m_vertexCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.m_vertices[i1].setV(vertices[i1]);
		}
		var _g11 = 0;
		var _g2 = this.m_vertexCount;
		while(_g11 < _g2) {
			var i2 = _g11++;
			var i11 = i2;
			var i21;
			if(i2 + 1 < this.m_vertexCount) i21 = i2 + 1; else i21 = 0;
			var edge = box2D.common.math.B2Math.subtractVV(this.m_vertices[i21],this.m_vertices[i11]);
			box2D.common.B2Settings.b2Assert(edge.lengthSquared() > Number.MIN_VALUE);
			this.m_normals[i2].setV(box2D.common.math.B2Math.crossVF(edge,1.0));
			this.m_normals[i2].normalize();
		}
		this.m_centroid = box2D.collision.shapes.B2PolygonShape.computeCentroid(this.m_vertices,this.m_vertexCount);
	}
	,setAsBox: function(hx,hy) {
		this.m_vertexCount = 4;
		this.reserve(4);
		this.m_vertices[0].set(-hx,-hy);
		this.m_vertices[1].set(hx,-hy);
		this.m_vertices[2].set(hx,hy);
		this.m_vertices[3].set(-hx,hy);
		this.m_normals[0].set(0.0,-1.0);
		this.m_normals[1].set(1.0,0.0);
		this.m_normals[2].set(0.0,1.0);
		this.m_normals[3].set(-1.0,0.0);
		this.m_centroid.setZero();
	}
	,setAsOrientedBox: function(hx,hy,center,angle) {
		if(angle == null) angle = 0.0;
		this.m_vertexCount = 4;
		this.reserve(4);
		this.m_vertices[0].set(-hx,-hy);
		this.m_vertices[1].set(hx,-hy);
		this.m_vertices[2].set(hx,hy);
		this.m_vertices[3].set(-hx,hy);
		this.m_normals[0].set(0.0,-1.0);
		this.m_normals[1].set(1.0,0.0);
		this.m_normals[2].set(0.0,1.0);
		this.m_normals[3].set(-1.0,0.0);
		this.m_centroid = center;
		var xf = new box2D.common.math.B2Transform();
		xf.position = center;
		xf.R.set(angle);
		var _g1 = 0;
		var _g = this.m_vertexCount;
		while(_g1 < _g) {
			var i = _g1++;
			this.m_vertices[i] = box2D.common.math.B2Math.mulX(xf,this.m_vertices[i]);
			this.m_normals[i] = box2D.common.math.B2Math.mulMV(xf.R,this.m_normals[i]);
		}
	}
	,setAsEdge: function(v1,v2) {
		this.m_vertexCount = 2;
		this.reserve(2);
		this.m_vertices[0].setV(v1);
		this.m_vertices[1].setV(v2);
		this.m_centroid.x = 0.5 * (v1.x + v2.x);
		this.m_centroid.y = 0.5 * (v1.y + v2.y);
		this.m_normals[0] = box2D.common.math.B2Math.crossVF(box2D.common.math.B2Math.subtractVV(v2,v1),1.0);
		this.m_normals[0].normalize();
		this.m_normals[1].x = -this.m_normals[0].x;
		this.m_normals[1].y = -this.m_normals[0].y;
	}
	,testPoint: function(xf,p) {
		var tVec;
		var tMat = xf.R;
		var tX = p.x - xf.position.x;
		var tY = p.y - xf.position.y;
		var pLocalX = tX * tMat.col1.x + tY * tMat.col1.y;
		var pLocalY = tX * tMat.col2.x + tY * tMat.col2.y;
		var _g1 = 0;
		var _g = this.m_vertexCount;
		while(_g1 < _g) {
			var i = _g1++;
			tVec = this.m_vertices[i];
			tX = pLocalX - tVec.x;
			tY = pLocalY - tVec.y;
			tVec = this.m_normals[i];
			var dot = tVec.x * tX + tVec.y * tY;
			if(dot > 0.0) return false;
		}
		return true;
	}
	,rayCast: function(output,input,transform) {
		var lower = 0.0;
		var upper = input.maxFraction;
		var tX;
		var tY;
		var tMat;
		var tVec;
		tX = input.p1.x - transform.position.x;
		tY = input.p1.y - transform.position.y;
		tMat = transform.R;
		var p1X = tX * tMat.col1.x + tY * tMat.col1.y;
		var p1Y = tX * tMat.col2.x + tY * tMat.col2.y;
		tX = input.p2.x - transform.position.x;
		tY = input.p2.y - transform.position.y;
		tMat = transform.R;
		var p2X = tX * tMat.col1.x + tY * tMat.col1.y;
		var p2Y = tX * tMat.col2.x + tY * tMat.col2.y;
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var index = -1;
		var _g1 = 0;
		var _g = this.m_vertexCount;
		while(_g1 < _g) {
			var i = _g1++;
			tVec = this.m_vertices[i];
			tX = tVec.x - p1X;
			tY = tVec.y - p1Y;
			tVec = this.m_normals[i];
			var numerator = tVec.x * tX + tVec.y * tY;
			var denominator = tVec.x * dX + tVec.y * dY;
			if(denominator == 0.0) {
				if(numerator < 0.0) return false;
			} else if(denominator < 0.0 && numerator < lower * denominator) {
				lower = numerator / denominator;
				index = i;
			} else if(denominator > 0.0 && numerator < upper * denominator) upper = numerator / denominator;
			if(upper < lower - Number.MIN_VALUE) return false;
		}
		if(index >= 0) {
			output.fraction = lower;
			tMat = transform.R;
			tVec = this.m_normals[index];
			output.normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			output.normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			return true;
		}
		return false;
	}
	,computeAABB: function(aabb,xf) {
		var tMat = xf.R;
		var tVec = this.m_vertices[0];
		var lowerX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		var lowerY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		var upperX = lowerX;
		var upperY = lowerY;
		var _g1 = 1;
		var _g = this.m_vertexCount;
		while(_g1 < _g) {
			var i = _g1++;
			tVec = this.m_vertices[i];
			var vX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			var vY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			if(lowerX < vX) lowerX = lowerX; else lowerX = vX;
			if(lowerY < vY) lowerY = lowerY; else lowerY = vY;
			if(upperX > vX) upperX = upperX; else upperX = vX;
			if(upperY > vY) upperY = upperY; else upperY = vY;
		}
		aabb.lowerBound.x = lowerX - this.m_radius;
		aabb.lowerBound.y = lowerY - this.m_radius;
		aabb.upperBound.x = upperX + this.m_radius;
		aabb.upperBound.y = upperY + this.m_radius;
	}
	,computeMass: function(massData,density) {
		if(this.m_vertexCount == 2) {
			massData.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x);
			massData.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y);
			massData.mass = 0.0;
			massData.I = 0.0;
			return;
		}
		var centerX = 0.0;
		var centerY = 0.0;
		var area = 0.0;
		var I = 0.0;
		var p1X = 0.0;
		var p1Y = 0.0;
		var k_inv3 = 0.33333333333333331;
		var _g1 = 0;
		var _g = this.m_vertexCount;
		while(_g1 < _g) {
			var i = _g1++;
			var p2 = this.m_vertices[i];
			var p3;
			if(i + 1 < this.m_vertexCount) p3 = this.m_vertices[i + 1 | 0]; else p3 = this.m_vertices[0];
			var e1X = p2.x - p1X;
			var e1Y = p2.y - p1Y;
			var e2X = p3.x - p1X;
			var e2Y = p3.y - p1Y;
			var D = e1X * e2Y - e1Y * e2X;
			var triangleArea = 0.5 * D;
			area += triangleArea;
			centerX += triangleArea * k_inv3 * (p1X + p2.x + p3.x);
			centerY += triangleArea * k_inv3 * (p1Y + p2.y + p3.y);
			var px = p1X;
			var py = p1Y;
			var ex1 = e1X;
			var ey1 = e1Y;
			var ex2 = e2X;
			var ey2 = e2Y;
			var intx2 = k_inv3 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px;
			var inty2 = k_inv3 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py;
			I += D * (intx2 + inty2);
		}
		massData.mass = density * area;
		centerX *= 1.0 / area;
		centerY *= 1.0 / area;
		massData.center.set(centerX,centerY);
		massData.I = density * I;
	}
	,computeSubmergedArea: function(normal,offset,xf,c) {
		var normalL = box2D.common.math.B2Math.mulTMV(xf.R,normal);
		var offsetL = offset - box2D.common.math.B2Math.dot(normal,xf.position);
		var depths = new Array();
		var diveCount = 0;
		var intoIndex = -1;
		var outoIndex = -1;
		var lastSubmerged = false;
		var i;
		var _g1 = 0;
		var _g = this.m_vertexCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			depths[i1] = box2D.common.math.B2Math.dot(normalL,this.m_vertices[i1]) - offsetL;
			var isSubmerged = depths[i1] < -Number.MIN_VALUE;
			if(i1 > 0) {
				if(isSubmerged) {
					if(!lastSubmerged) {
						intoIndex = i1 - 1;
						diveCount++;
					}
				} else if(lastSubmerged) {
					outoIndex = i1 - 1;
					diveCount++;
				}
			}
			lastSubmerged = isSubmerged;
		}
		switch(diveCount) {
		case 0:
			if(lastSubmerged) {
				var md = new box2D.collision.shapes.B2MassData();
				this.computeMass(md,1);
				c.setV(box2D.common.math.B2Math.mulX(xf,md.center));
				return md.mass;
			} else return 0;
			break;
		case 1:
			if(intoIndex == -1) intoIndex = this.m_vertexCount - 1; else outoIndex = this.m_vertexCount - 1;
			break;
		}
		var intoIndex2 = (intoIndex + 1) % this.m_vertexCount;
		var outoIndex2 = (outoIndex + 1) % this.m_vertexCount;
		var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);
		var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);
		var intoVec = new box2D.common.math.B2Vec2(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda,this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);
		var outoVec = new box2D.common.math.B2Vec2(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda,this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);
		var area = 0;
		var center = new box2D.common.math.B2Vec2();
		var p2 = this.m_vertices[intoIndex2];
		var p3;
		i = intoIndex2;
		while(i != outoIndex2) {
			i = (i + 1) % this.m_vertexCount;
			if(i == outoIndex2) p3 = outoVec; else p3 = this.m_vertices[i];
			var triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));
			area += triangleArea;
			center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;
			center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;
			p2 = p3;
		}
		center.multiply(1 / area);
		c.setV(box2D.common.math.B2Math.mulX(xf,center));
		return area;
	}
	,getVertexCount: function() {
		return this.m_vertexCount;
	}
	,getVertices: function() {
		return this.m_vertices;
	}
	,getNormals: function() {
		return this.m_normals;
	}
	,getSupport: function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		var _g1 = 1;
		var _g = this.m_vertexCount;
		while(_g1 < _g) {
			var i = _g1++;
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if(value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return bestIndex;
	}
	,getSupportVertex: function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		var _g1 = 1;
		var _g = this.m_vertexCount;
		while(_g1 < _g) {
			var i = _g1++;
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if(value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return this.m_vertices[bestIndex];
	}
	,validate: function() {
		return false;
	}
	,reserve: function(count) {
		var _g = this.m_vertices.length;
		while(_g < count) {
			var i = _g++;
			this.m_vertices[i] = new box2D.common.math.B2Vec2();
			this.m_normals[i] = new box2D.common.math.B2Vec2();
		}
	}
	,__class__: box2D.collision.shapes.B2PolygonShape
});
box2D.collision.shapes._B2ShapeType = {};
box2D.collision.shapes._B2ShapeType.B2ShapeType_Impl_ = function() { };
$hxClasses["box2D.collision.shapes._B2ShapeType.B2ShapeType_Impl_"] = box2D.collision.shapes._B2ShapeType.B2ShapeType_Impl_;
box2D.collision.shapes._B2ShapeType.B2ShapeType_Impl_.__name__ = ["box2D","collision","shapes","_B2ShapeType","B2ShapeType_Impl_"];
box2D.common.B2Color = function(rr,gg,bb) {
	this._r = Std["int"](255 * box2D.common.math.B2Math.clamp(rr,0.0,1.0));
	this._g = Std["int"](255 * box2D.common.math.B2Math.clamp(gg,0.0,1.0));
	this._b = Std["int"](255 * box2D.common.math.B2Math.clamp(bb,0.0,1.0));
};
$hxClasses["box2D.common.B2Color"] = box2D.common.B2Color;
box2D.common.B2Color.__name__ = ["box2D","common","B2Color"];
box2D.common.B2Color.prototype = {
	set: function(rr,gg,bb) {
		this._r = Std["int"](255 * box2D.common.math.B2Math.clamp(rr,0.0,1.0));
		this._g = Std["int"](255 * box2D.common.math.B2Math.clamp(gg,0.0,1.0));
		this._b = Std["int"](255 * box2D.common.math.B2Math.clamp(bb,0.0,1.0));
	}
	,set_r: function(rr) {
		return this._r = Std["int"](255 * box2D.common.math.B2Math.clamp(rr,0.0,1.0));
	}
	,set_g: function(gg) {
		return this._g = Std["int"](255 * box2D.common.math.B2Math.clamp(gg,0.0,1.0));
	}
	,set_b: function(bb) {
		return this._b = Std["int"](255 * box2D.common.math.B2Math.clamp(bb,0.0,1.0));
	}
	,get_color: function() {
		return this._r << 16 | this._g << 8 | this._b;
	}
	,__class__: box2D.common.B2Color
	,__properties__: {get_color:"get_color",set_b:"set_b",set_g:"set_g",set_r:"set_r"}
};
box2D.common.B2Settings = function() { };
$hxClasses["box2D.common.B2Settings"] = box2D.common.B2Settings;
box2D.common.B2Settings.__name__ = ["box2D","common","B2Settings"];
box2D.common.B2Settings.b2MixFriction = function(friction1,friction2) {
	return Math.sqrt(friction1 * friction2);
};
box2D.common.B2Settings.b2MixRestitution = function(restitution1,restitution2) {
	if(restitution1 > restitution2) return restitution1; else return restitution2;
};
box2D.common.B2Settings.b2Assert = function(a) {
	if(!a) throw "Assertion Failed";
};
box2D.common.math.B2Mat33 = function(c1,c2,c3) {
	this.col1 = new box2D.common.math.B2Vec3();
	this.col2 = new box2D.common.math.B2Vec3();
	this.col3 = new box2D.common.math.B2Vec3();
	if(c1 == null && c2 == null && c3 == null) {
		this.col1.setZero();
		this.col2.setZero();
		this.col3.setZero();
	} else {
		this.col1.setV(c1);
		this.col2.setV(c2);
		this.col3.setV(c3);
	}
};
$hxClasses["box2D.common.math.B2Mat33"] = box2D.common.math.B2Mat33;
box2D.common.math.B2Mat33.__name__ = ["box2D","common","math","B2Mat33"];
box2D.common.math.B2Mat33.prototype = {
	setVVV: function(c1,c2,c3) {
		this.col1.setV(c1);
		this.col2.setV(c2);
		this.col3.setV(c3);
	}
	,copy: function() {
		return new box2D.common.math.B2Mat33(this.col1,this.col2,this.col3);
	}
	,setM: function(m) {
		this.col1.setV(m.col1);
		this.col2.setV(m.col2);
		this.col3.setV(m.col3);
	}
	,addM: function(m) {
		this.col1.x += m.col1.x;
		this.col1.y += m.col1.y;
		this.col1.z += m.col1.z;
		this.col2.x += m.col2.x;
		this.col2.y += m.col2.y;
		this.col2.z += m.col2.z;
		this.col3.x += m.col3.x;
		this.col3.y += m.col3.y;
		this.col3.z += m.col3.z;
	}
	,setIdentity: function() {
		this.col1.x = 1.0;
		this.col2.x = 0.0;
		this.col3.x = 0.0;
		this.col1.y = 0.0;
		this.col2.y = 1.0;
		this.col3.y = 0.0;
		this.col1.z = 0.0;
		this.col2.z = 0.0;
		this.col3.z = 1.0;
	}
	,setZero: function() {
		this.col1.x = 0.0;
		this.col2.x = 0.0;
		this.col3.x = 0.0;
		this.col1.y = 0.0;
		this.col2.y = 0.0;
		this.col3.y = 0.0;
		this.col1.z = 0.0;
		this.col2.z = 0.0;
		this.col3.z = 0.0;
	}
	,solve22: function(out,bX,bY) {
		var a11 = this.col1.x;
		var a12 = this.col2.x;
		var a21 = this.col1.y;
		var a22 = this.col2.y;
		var det = a11 * a22 - a12 * a21;
		if(det != 0.0) det = 1.0 / det;
		out.x = det * (a22 * bX - a12 * bY);
		out.y = det * (a11 * bY - a21 * bX);
		return out;
	}
	,solve33: function(out,bX,bY,bZ) {
		var a11 = this.col1.x;
		var a21 = this.col1.y;
		var a31 = this.col1.z;
		var a12 = this.col2.x;
		var a22 = this.col2.y;
		var a32 = this.col2.z;
		var a13 = this.col3.x;
		var a23 = this.col3.y;
		var a33 = this.col3.z;
		var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);
		if(det != 0.0) det = 1.0 / det;
		out.x = det * (bX * (a22 * a33 - a32 * a23) + bY * (a32 * a13 - a12 * a33) + bZ * (a12 * a23 - a22 * a13));
		out.y = det * (a11 * (bY * a33 - bZ * a23) + a21 * (bZ * a13 - bX * a33) + a31 * (bX * a23 - bY * a13));
		out.z = det * (a11 * (a22 * bZ - a32 * bY) + a21 * (a32 * bX - a12 * bZ) + a31 * (a12 * bY - a22 * bX));
		return out;
	}
	,__class__: box2D.common.math.B2Mat33
};
box2D.common.math.B2Math = function() { };
$hxClasses["box2D.common.math.B2Math"] = box2D.common.math.B2Math;
box2D.common.math.B2Math.__name__ = ["box2D","common","math","B2Math"];
box2D.common.math.B2Math.__properties__ = {get_MAX_VALUE:"get_MAX_VALUE",get_MIN_VALUE:"get_MIN_VALUE"}
box2D.common.math.B2Math.isValid = function(x) {
	if(Math.isNaN(x) || x == Math.NEGATIVE_INFINITY || x == Math.POSITIVE_INFINITY) return false;
	return true;
};
box2D.common.math.B2Math.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
box2D.common.math.B2Math.crossVV = function(a,b) {
	return a.x * b.y - a.y * b.x;
};
box2D.common.math.B2Math.crossVF = function(a,s) {
	var v = new box2D.common.math.B2Vec2(s * a.y,-s * a.x);
	return v;
};
box2D.common.math.B2Math.crossFV = function(s,a) {
	var v = new box2D.common.math.B2Vec2(-s * a.y,s * a.x);
	return v;
};
box2D.common.math.B2Math.mulMV = function(A,v) {
	var u = new box2D.common.math.B2Vec2(A.col1.x * v.x + A.col2.x * v.y,A.col1.y * v.x + A.col2.y * v.y);
	return u;
};
box2D.common.math.B2Math.mulTMV = function(A,v) {
	var u = new box2D.common.math.B2Vec2(box2D.common.math.B2Math.dot(v,A.col1),box2D.common.math.B2Math.dot(v,A.col2));
	return u;
};
box2D.common.math.B2Math.mulX = function(T,v) {
	var a = box2D.common.math.B2Math.mulMV(T.R,v);
	a.x += T.position.x;
	a.y += T.position.y;
	return a;
};
box2D.common.math.B2Math.mulXT = function(T,v) {
	var a = box2D.common.math.B2Math.subtractVV(v,T.position);
	var tX = a.x * T.R.col1.x + a.y * T.R.col1.y;
	a.y = a.x * T.R.col2.x + a.y * T.R.col2.y;
	a.x = tX;
	return a;
};
box2D.common.math.B2Math.addVV = function(a,b) {
	var v = new box2D.common.math.B2Vec2(a.x + b.x,a.y + b.y);
	return v;
};
box2D.common.math.B2Math.subtractVV = function(a,b) {
	var v = new box2D.common.math.B2Vec2(a.x - b.x,a.y - b.y);
	return v;
};
box2D.common.math.B2Math.distance = function(a,b) {
	var cX = a.x - b.x;
	var cY = a.y - b.y;
	return Math.sqrt(cX * cX + cY * cY);
};
box2D.common.math.B2Math.distanceSquared = function(a,b) {
	var cX = a.x - b.x;
	var cY = a.y - b.y;
	return cX * cX + cY * cY;
};
box2D.common.math.B2Math.mulFV = function(s,a) {
	var v = new box2D.common.math.B2Vec2(s * a.x,s * a.y);
	return v;
};
box2D.common.math.B2Math.addMM = function(A,B) {
	var C = box2D.common.math.B2Mat22.fromVV(box2D.common.math.B2Math.addVV(A.col1,B.col1),box2D.common.math.B2Math.addVV(A.col2,B.col2));
	return C;
};
box2D.common.math.B2Math.mulMM = function(A,B) {
	var C = box2D.common.math.B2Mat22.fromVV(box2D.common.math.B2Math.mulMV(A,B.col1),box2D.common.math.B2Math.mulMV(A,B.col2));
	return C;
};
box2D.common.math.B2Math.mulTMM = function(A,B) {
	var c1 = new box2D.common.math.B2Vec2(box2D.common.math.B2Math.dot(A.col1,B.col1),box2D.common.math.B2Math.dot(A.col2,B.col1));
	var c2 = new box2D.common.math.B2Vec2(box2D.common.math.B2Math.dot(A.col1,B.col2),box2D.common.math.B2Math.dot(A.col2,B.col2));
	var C = box2D.common.math.B2Mat22.fromVV(c1,c2);
	return C;
};
box2D.common.math.B2Math.abs = function(a) {
	if(a > 0.0) return a; else return -a;
};
box2D.common.math.B2Math.absV = function(a) {
	var b = new box2D.common.math.B2Vec2(box2D.common.math.B2Math.abs(a.x),box2D.common.math.B2Math.abs(a.y));
	return b;
};
box2D.common.math.B2Math.absM = function(A) {
	var B = box2D.common.math.B2Mat22.fromVV(box2D.common.math.B2Math.absV(A.col1),box2D.common.math.B2Math.absV(A.col2));
	return B;
};
box2D.common.math.B2Math.min = function(a,b) {
	if(a < b) return a; else return b;
};
box2D.common.math.B2Math.minV = function(a,b) {
	var c = new box2D.common.math.B2Vec2(box2D.common.math.B2Math.min(a.x,b.x),box2D.common.math.B2Math.min(a.y,b.y));
	return c;
};
box2D.common.math.B2Math.max = function(a,b) {
	if(a > b) return a; else return b;
};
box2D.common.math.B2Math.maxV = function(a,b) {
	var c = new box2D.common.math.B2Vec2(box2D.common.math.B2Math.max(a.x,b.x),box2D.common.math.B2Math.max(a.y,b.y));
	return c;
};
box2D.common.math.B2Math.clamp = function(a,low,high) {
	if(a < low) return low; else if(a > high) return high; else return a;
};
box2D.common.math.B2Math.clampV = function(a,low,high) {
	return box2D.common.math.B2Math.maxV(low,box2D.common.math.B2Math.minV(a,high));
};
box2D.common.math.B2Math.swap = function(a,b) {
	var tmp = a[0];
	a[0] = b[0];
	b[0] = tmp;
};
box2D.common.math.B2Math.random = function() {
	return Math.random() * 2 - 1;
};
box2D.common.math.B2Math.randomRange = function(lo,hi) {
	var r = Math.random();
	r = (hi - lo) * r + lo;
	return r;
};
box2D.common.math.B2Math.nextPowerOfTwo = function(x) {
	x |= x >> 1 & 2147483647;
	x |= x >> 2 & 1073741823;
	x |= x >> 4 & 268435455;
	x |= x >> 8 & 16777215;
	x |= x >> 16 & 65535;
	return x + 1;
};
box2D.common.math.B2Math.isPowerOfTwo = function(x) {
	var result = x > 0 && (x & x - 1) == 0;
	return result;
};
box2D.common.math.B2Math.MIN_VALUE = null;
box2D.common.math.B2Math.MAX_VALUE = null;
box2D.common.math.B2Math.get_MIN_VALUE = function() {
	return Number.MIN_VALUE;
};
box2D.common.math.B2Math.get_MAX_VALUE = function() {
	return Number.MAX_VALUE;
};
box2D.common.math.B2Sweep = function() {
	this.localCenter = new box2D.common.math.B2Vec2();
	this.c0 = new box2D.common.math.B2Vec2();
	this.c = new box2D.common.math.B2Vec2();
};
$hxClasses["box2D.common.math.B2Sweep"] = box2D.common.math.B2Sweep;
box2D.common.math.B2Sweep.__name__ = ["box2D","common","math","B2Sweep"];
box2D.common.math.B2Sweep.prototype = {
	set: function(other) {
		this.localCenter.setV(other.localCenter);
		this.c0.setV(other.c0);
		this.c.setV(other.c);
		this.a0 = other.a0;
		this.a = other.a;
		this.t0 = other.t0;
	}
	,copy: function() {
		var copy = new box2D.common.math.B2Sweep();
		copy.localCenter.setV(this.localCenter);
		copy.c0.setV(this.c0);
		copy.c.setV(this.c);
		copy.a0 = this.a0;
		copy.a = this.a;
		copy.t0 = this.t0;
		return copy;
	}
	,getTransform: function(xf,alpha) {
		xf.position.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
		xf.position.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
		var angle = (1.0 - alpha) * this.a0 + alpha * this.a;
		xf.R.set(angle);
		var tMat = xf.R;
		xf.position.x -= tMat.col1.x * this.localCenter.x + tMat.col2.x * this.localCenter.y;
		xf.position.y -= tMat.col1.y * this.localCenter.x + tMat.col2.y * this.localCenter.y;
	}
	,advance: function(t) {
		if(this.t0 < t && 1.0 - this.t0 > Number.MIN_VALUE) {
			var alpha = (t - this.t0) / (1.0 - this.t0);
			this.c0.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
			this.c0.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
			this.a0 = (1.0 - alpha) * this.a0 + alpha * this.a;
			this.t0 = t;
		}
	}
	,__class__: box2D.common.math.B2Sweep
};
box2D.common.math.B2Vec3 = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["box2D.common.math.B2Vec3"] = box2D.common.math.B2Vec3;
box2D.common.math.B2Vec3.__name__ = ["box2D","common","math","B2Vec3"];
box2D.common.math.B2Vec3.prototype = {
	setZero: function() {
		this.x = this.y = this.z = 0.0;
	}
	,set: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,setV: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
	}
	,getNegative: function() {
		return new box2D.common.math.B2Vec3(-this.x,-this.y,-this.z);
	}
	,negativeSelf: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
	}
	,copy: function() {
		return new box2D.common.math.B2Vec3(this.x,this.y,this.z);
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
	}
	,subtract: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
	}
	,multiply: function(a) {
		this.x *= a;
		this.y *= a;
		this.z *= a;
	}
	,__class__: box2D.common.math.B2Vec3
};
box2D.dynamics = {};
box2D.dynamics.B2Body = function(bd,world) {
	this.m_xf = new box2D.common.math.B2Transform();
	this.m_sweep = new box2D.common.math.B2Sweep();
	this.m_linearVelocity = new box2D.common.math.B2Vec2();
	this.m_force = new box2D.common.math.B2Vec2();
	this.m_flags = 0;
	if(bd.bullet) this.m_flags |= box2D.dynamics.B2Body.e_bulletFlag;
	if(bd.fixedRotation) this.m_flags |= box2D.dynamics.B2Body.e_fixedRotationFlag;
	if(bd.allowSleep) this.m_flags |= box2D.dynamics.B2Body.e_allowSleepFlag;
	if(bd.awake) this.m_flags |= box2D.dynamics.B2Body.e_awakeFlag;
	if(bd.active) this.m_flags |= box2D.dynamics.B2Body.e_activeFlag;
	this.m_world = world;
	this.m_xf.position.setV(bd.position);
	this.m_xf.R.set(bd.angle);
	this.m_sweep.localCenter.setZero();
	this.m_sweep.t0 = 1.0;
	this.m_sweep.a0 = this.m_sweep.a = bd.angle;
	var tMat = this.m_xf.R;
	var tVec = this.m_sweep.localCenter;
	this.m_sweep.c.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
	this.m_sweep.c.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
	this.m_sweep.c.x += this.m_xf.position.x;
	this.m_sweep.c.y += this.m_xf.position.y;
	this.m_sweep.c0.setV(this.m_sweep.c);
	this.m_jointList = null;
	this.m_controllerList = null;
	this.m_contactList = null;
	this.m_controllerCount = 0;
	this.m_prev = null;
	this.m_next = null;
	this.m_linearVelocity.setV(bd.linearVelocity);
	this.m_angularVelocity = bd.angularVelocity;
	this.m_linearDamping = bd.linearDamping;
	this.m_angularDamping = bd.angularDamping;
	this.m_force.set(0.0,0.0);
	this.m_torque = 0.0;
	this.m_sleepTime = 0.0;
	this.m_type = bd.type;
	if(this.m_type == 2) {
		this.m_mass = 1.0;
		this.m_invMass = 1.0;
	} else {
		this.m_mass = 0.0;
		this.m_invMass = 0.0;
	}
	this.m_I = 0.0;
	this.m_invI = 0.0;
	this.m_inertiaScale = bd.inertiaScale;
	this.m_userData = bd.userData;
	this.m_fixtureList = null;
	this.m_fixtureCount = 0;
};
$hxClasses["box2D.dynamics.B2Body"] = box2D.dynamics.B2Body;
box2D.dynamics.B2Body.__name__ = ["box2D","dynamics","B2Body"];
box2D.dynamics.B2Body.prototype = {
	connectEdges: function(s1,s2,angle1) {
		var angle2 = Math.atan2(s2.getDirectionVector().y,s2.getDirectionVector().x);
		var coreOffset = Math.tan((angle2 - angle1) * 0.5);
		var core = box2D.common.math.B2Math.mulFV(coreOffset,s2.getDirectionVector());
		core = box2D.common.math.B2Math.subtractVV(core,s2.getNormalVector());
		core = box2D.common.math.B2Math.mulFV(box2D.common.B2Settings.b2_toiSlop,core);
		core = box2D.common.math.B2Math.addVV(core,s2.getVertex1());
		var cornerDir = box2D.common.math.B2Math.addVV(s1.getDirectionVector(),s2.getDirectionVector());
		cornerDir.normalize();
		var convex = box2D.common.math.B2Math.dot(s1.getDirectionVector(),s2.getNormalVector()) > 0.0;
		s1.setNextEdge(s2,core,cornerDir,convex);
		s2.setPrevEdge(s1,core,cornerDir,convex);
		return angle2;
	}
	,createFixture: function(def) {
		if(this.m_world.isLocked() == true) return null;
		var fixture = new box2D.dynamics.B2Fixture();
		fixture.create(this,this.m_xf,def);
		if((this.m_flags & box2D.dynamics.B2Body.e_activeFlag) != 0) {
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			fixture.createProxy(broadPhase,this.m_xf);
		}
		fixture.m_next = this.m_fixtureList;
		this.m_fixtureList = fixture;
		++this.m_fixtureCount;
		fixture.m_body = this;
		if(fixture.m_density > 0.0) this.resetMassData();
		this.m_world.m_flags |= box2D.dynamics.B2World.e_newFixture;
		return fixture;
	}
	,createFixture2: function(shape,density) {
		if(density == null) density = 0.0;
		var def = new box2D.dynamics.B2FixtureDef();
		def.shape = shape;
		def.density = density;
		return this.createFixture(def);
	}
	,DestroyFixture: function(fixture) {
		if(this.m_world.isLocked() == true) return;
		var node = this.m_fixtureList;
		var ppF = null;
		var found = false;
		while(node != null) {
			if(node == fixture) {
				if(ppF != null) ppF.m_next = fixture.m_next; else this.m_fixtureList = fixture.m_next;
				found = true;
				break;
			}
			ppF = node;
			node = node.m_next;
		}
		var edge = this.m_contactList;
		while(edge != null) {
			var c = edge.contact;
			edge = edge.next;
			var fixtureA = c.getFixtureA();
			var fixtureB = c.getFixtureB();
			if(fixture == fixtureA || fixture == fixtureB) this.m_world.m_contactManager.destroy(c);
		}
		if((this.m_flags & box2D.dynamics.B2Body.e_activeFlag) != 0) {
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			fixture.destroyProxy(broadPhase);
		} else {
		}
		fixture.destroy();
		fixture.m_body = null;
		fixture.m_next = null;
		--this.m_fixtureCount;
		this.resetMassData();
	}
	,setPositionAndAngle: function(position,angle) {
		var f;
		if(this.m_world.isLocked() == true) return;
		this.m_xf.R.set(angle);
		this.m_xf.position.setV(position);
		var tMat = this.m_xf.R;
		var tVec = this.m_sweep.localCenter;
		this.m_sweep.c.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
		this.m_sweep.c.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
		this.m_sweep.c.x += this.m_xf.position.x;
		this.m_sweep.c.y += this.m_xf.position.y;
		this.m_sweep.c0.setV(this.m_sweep.c);
		this.m_sweep.a0 = this.m_sweep.a = angle;
		var broadPhase = this.m_world.m_contactManager.m_broadPhase;
		f = this.m_fixtureList;
		while(f != null) {
			f.synchronize(broadPhase,this.m_xf,this.m_xf);
			f = f.m_next;
		}
		this.m_world.m_contactManager.findNewContacts();
	}
	,setTransform: function(xf) {
		this.setPositionAndAngle(xf.position,xf.getAngle());
	}
	,getTransform: function() {
		return this.m_xf;
	}
	,getPosition: function() {
		return this.m_xf.position;
	}
	,setPosition: function(position) {
		this.setPositionAndAngle(position,this.getAngle());
	}
	,getAngle: function() {
		return this.m_sweep.a;
	}
	,setAngle: function(angle) {
		this.setPositionAndAngle(this.getPosition(),angle);
	}
	,getWorldCenter: function() {
		return this.m_sweep.c;
	}
	,getLocalCenter: function() {
		return this.m_sweep.localCenter;
	}
	,setLinearVelocity: function(v) {
		if(this.m_type == 0) return;
		this.m_linearVelocity.setV(v);
	}
	,getLinearVelocity: function() {
		return this.m_linearVelocity;
	}
	,setAngularVelocity: function(omega) {
		if(this.m_type == 0) return;
		this.m_angularVelocity = omega;
	}
	,getAngularVelocity: function() {
		return this.m_angularVelocity;
	}
	,getDefinition: function() {
		var bd = new box2D.dynamics.B2BodyDef();
		bd.type = this.getType();
		bd.allowSleep = (this.m_flags & box2D.dynamics.B2Body.e_allowSleepFlag) == box2D.dynamics.B2Body.e_allowSleepFlag;
		bd.angle = this.getAngle();
		bd.angularDamping = this.m_angularDamping;
		bd.angularVelocity = this.m_angularVelocity;
		bd.fixedRotation = (this.m_flags & box2D.dynamics.B2Body.e_fixedRotationFlag) == box2D.dynamics.B2Body.e_fixedRotationFlag;
		bd.bullet = (this.m_flags & box2D.dynamics.B2Body.e_bulletFlag) == box2D.dynamics.B2Body.e_bulletFlag;
		bd.awake = (this.m_flags & box2D.dynamics.B2Body.e_awakeFlag) == box2D.dynamics.B2Body.e_awakeFlag;
		bd.linearDamping = this.m_linearDamping;
		bd.linearVelocity.setV(this.getLinearVelocity());
		bd.position = this.getPosition();
		bd.userData = this.getUserData();
		return bd;
	}
	,applyForce: function(force,point) {
		if(this.m_type != 2) return;
		if(this.isAwake() == false) this.setAwake(true);
		this.m_force.x += force.x;
		this.m_force.y += force.y;
		this.m_torque += (point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x;
	}
	,applyTorque: function(torque) {
		if(this.m_type != 2) return;
		if(this.isAwake() == false) this.setAwake(true);
		this.m_torque += torque;
	}
	,applyImpulse: function(impulse,point) {
		if(this.m_type != 2) return;
		if(this.isAwake() == false) this.setAwake(true);
		this.m_linearVelocity.x += this.m_invMass * impulse.x;
		this.m_linearVelocity.y += this.m_invMass * impulse.y;
		this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);
	}
	,split: function(callbackMethod) {
		var linearVelocity = this.getLinearVelocity().copy();
		var angularVelocity = this.getAngularVelocity();
		var center = this.getWorldCenter();
		var body1 = this;
		var body2 = this.m_world.createBody(this.getDefinition());
		var prev = null;
		var f = body1.m_fixtureList;
		while(f != null) if(callbackMethod(f)) {
			var next = f.m_next;
			if(prev != null) prev.m_next = next; else body1.m_fixtureList = next;
			body1.m_fixtureCount--;
			f.m_next = body2.m_fixtureList;
			body2.m_fixtureList = f;
			body2.m_fixtureCount++;
			f.m_body = body2;
			f = next;
		} else {
			prev = f;
			f = f.m_next;
		}
		body1.resetMassData();
		body2.resetMassData();
		var center1 = body1.getWorldCenter();
		var center2 = body2.getWorldCenter();
		var velocity1 = box2D.common.math.B2Math.addVV(linearVelocity,box2D.common.math.B2Math.crossFV(angularVelocity,box2D.common.math.B2Math.subtractVV(center1,center)));
		var velocity2 = box2D.common.math.B2Math.addVV(linearVelocity,box2D.common.math.B2Math.crossFV(angularVelocity,box2D.common.math.B2Math.subtractVV(center2,center)));
		body1.setLinearVelocity(velocity1);
		body2.setLinearVelocity(velocity2);
		body1.setAngularVelocity(angularVelocity);
		body2.setAngularVelocity(angularVelocity);
		body1.synchronizeFixtures();
		body2.synchronizeFixtures();
		return body2;
	}
	,merge: function(other) {
		var f;
		f = other.m_fixtureList;
		var body1 = this;
		var body2 = other;
		while(f != null) {
			var next = f.m_next;
			other.m_fixtureCount--;
			f.m_next = this.m_fixtureList;
			this.m_fixtureList = f;
			this.m_fixtureCount++;
			f.m_body = body2;
			f = next;
		}
		body1.m_fixtureCount = 0;
		var center1 = body1.getWorldCenter();
		var center2 = body2.getWorldCenter();
		var velocity1 = body1.getLinearVelocity().copy();
		var velocity2 = body2.getLinearVelocity().copy();
		var angular1 = body1.getAngularVelocity();
		var angular = body2.getAngularVelocity();
		body1.resetMassData();
		this.synchronizeFixtures();
	}
	,getMass: function() {
		return this.m_mass;
	}
	,getInertia: function() {
		return this.m_I;
	}
	,getMassData: function(data) {
		data.mass = this.m_mass;
		data.I = this.m_I;
		data.center.setV(this.m_sweep.localCenter);
	}
	,setMassData: function(massData) {
		box2D.common.B2Settings.b2Assert(this.m_world.isLocked() == false);
		if(this.m_world.isLocked() == true) return;
		if(this.m_type != 2) return;
		this.m_invMass = 0.0;
		this.m_I = 0.0;
		this.m_invI = 0.0;
		this.m_mass = massData.mass;
		if(this.m_mass <= 0.0) this.m_mass = 1.0;
		this.m_invMass = 1.0 / this.m_mass;
		if(massData.I > 0.0 && (this.m_flags & box2D.dynamics.B2Body.e_fixedRotationFlag) == 0) {
			this.m_I = massData.I - this.m_mass * (massData.center.x * massData.center.x + massData.center.y * massData.center.y);
			this.m_invI = 1.0 / this.m_I;
		}
		var oldCenter = this.m_sweep.c.copy();
		this.m_sweep.localCenter.setV(massData.center);
		this.m_sweep.c0.setV(box2D.common.math.B2Math.mulX(this.m_xf,this.m_sweep.localCenter));
		this.m_sweep.c.setV(this.m_sweep.c0);
		this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - oldCenter.y);
		this.m_linearVelocity.y += this.m_angularVelocity * (this.m_sweep.c.x - oldCenter.x);
	}
	,resetMassData: function() {
		this.m_mass = 0.0;
		this.m_invMass = 0.0;
		this.m_I = 0.0;
		this.m_invI = 0.0;
		this.m_sweep.localCenter.setZero();
		if(this.m_type == 0 || this.m_type == 1) return;
		var center = box2D.common.math.B2Vec2.make(0,0);
		var f = this.m_fixtureList;
		while(f != null) {
			if(f.m_density == 0.0) {
				f = f.m_next;
				continue;
			}
			var massData = f.getMassData();
			this.m_mass += massData.mass;
			center.x += massData.center.x * massData.mass;
			center.y += massData.center.y * massData.mass;
			this.m_I += massData.I;
			f = f.m_next;
		}
		if(this.m_mass > 0.0) {
			this.m_invMass = 1.0 / this.m_mass;
			center.x *= this.m_invMass;
			center.y *= this.m_invMass;
		} else {
			this.m_mass = 1.0;
			this.m_invMass = 1.0;
		}
		if(this.m_I > 0.0 && (this.m_flags & box2D.dynamics.B2Body.e_fixedRotationFlag) == 0) {
			this.m_I -= this.m_mass * (center.x * center.x + center.y * center.y);
			this.m_I *= this.m_inertiaScale;
			box2D.common.B2Settings.b2Assert(this.m_I > 0);
			this.m_invI = 1.0 / this.m_I;
		} else {
			this.m_I = 0.0;
			this.m_invI = 0.0;
		}
		var oldCenter = this.m_sweep.c.copy();
		this.m_sweep.localCenter.setV(center);
		this.m_sweep.c0.setV(box2D.common.math.B2Math.mulX(this.m_xf,this.m_sweep.localCenter));
		this.m_sweep.c.setV(this.m_sweep.c0);
		this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - oldCenter.y);
		this.m_linearVelocity.y += this.m_angularVelocity * (this.m_sweep.c.x - oldCenter.x);
	}
	,getWorldPoint: function(localPoint) {
		var A = this.m_xf.R;
		var u = new box2D.common.math.B2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y,A.col1.y * localPoint.x + A.col2.y * localPoint.y);
		u.x += this.m_xf.position.x;
		u.y += this.m_xf.position.y;
		return u;
	}
	,getWorldVector: function(localVector) {
		return box2D.common.math.B2Math.mulMV(this.m_xf.R,localVector);
	}
	,getLocalPoint: function(worldPoint) {
		return box2D.common.math.B2Math.mulXT(this.m_xf,worldPoint);
	}
	,getLocalVector: function(worldVector) {
		return box2D.common.math.B2Math.mulTMV(this.m_xf.R,worldVector);
	}
	,getLinearVelocityFromWorldPoint: function(worldPoint) {
		return new box2D.common.math.B2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y),this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
	}
	,getLinearVelocityFromLocalPoint: function(localPoint) {
		var A = this.m_xf.R;
		var worldPoint = new box2D.common.math.B2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y,A.col1.y * localPoint.x + A.col2.y * localPoint.y);
		worldPoint.x += this.m_xf.position.x;
		worldPoint.y += this.m_xf.position.y;
		return new box2D.common.math.B2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y),this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
	}
	,getLinearDamping: function() {
		return this.m_linearDamping;
	}
	,setLinearDamping: function(linearDamping) {
		this.m_linearDamping = linearDamping;
	}
	,getAngularDamping: function() {
		return this.m_angularDamping;
	}
	,setAngularDamping: function(angularDamping) {
		this.m_angularDamping = angularDamping;
	}
	,setType: function(type) {
		if(this.m_type == type) return;
		this.m_type = type;
		this.resetMassData();
		if(this.m_type == 0) {
			this.m_linearVelocity.setZero();
			this.m_angularVelocity = 0.0;
		}
		this.setAwake(true);
		this.m_force.setZero();
		this.m_torque = 0.0;
		var ce = this.m_contactList;
		while(ce != null) {
			ce.contact.flagForFiltering();
			ce = ce.next;
		}
	}
	,getType: function() {
		return this.m_type;
	}
	,setBullet: function(flag) {
		if(flag) this.m_flags |= box2D.dynamics.B2Body.e_bulletFlag; else this.m_flags &= ~box2D.dynamics.B2Body.e_bulletFlag;
	}
	,isBullet: function() {
		return (this.m_flags & box2D.dynamics.B2Body.e_bulletFlag) == box2D.dynamics.B2Body.e_bulletFlag;
	}
	,setSleepingAllowed: function(flag) {
		if(flag) this.m_flags |= box2D.dynamics.B2Body.e_allowSleepFlag; else {
			this.m_flags &= ~box2D.dynamics.B2Body.e_allowSleepFlag;
			this.setAwake(true);
		}
	}
	,setAwake: function(flag) {
		if(flag) {
			this.m_flags |= box2D.dynamics.B2Body.e_awakeFlag;
			this.m_sleepTime = 0.0;
		} else {
			this.m_flags &= ~box2D.dynamics.B2Body.e_awakeFlag;
			this.m_sleepTime = 0.0;
			this.m_linearVelocity.setZero();
			this.m_angularVelocity = 0.0;
			this.m_force.setZero();
			this.m_torque = 0.0;
		}
	}
	,isAwake: function() {
		return (this.m_flags & box2D.dynamics.B2Body.e_awakeFlag) == box2D.dynamics.B2Body.e_awakeFlag;
	}
	,setFixedRotation: function(fixed) {
		if(fixed) this.m_flags |= box2D.dynamics.B2Body.e_fixedRotationFlag; else this.m_flags &= ~box2D.dynamics.B2Body.e_fixedRotationFlag;
		this.resetMassData();
	}
	,isFixedRotation: function() {
		return (this.m_flags & box2D.dynamics.B2Body.e_fixedRotationFlag) == box2D.dynamics.B2Body.e_fixedRotationFlag;
	}
	,setActive: function(flag) {
		if(flag == this.isActive()) return;
		var broadPhase;
		var f;
		if(flag) {
			this.m_flags |= box2D.dynamics.B2Body.e_activeFlag;
			broadPhase = this.m_world.m_contactManager.m_broadPhase;
			f = this.m_fixtureList;
			while(f != null) {
				f.createProxy(broadPhase,this.m_xf);
				f = f.m_next;
			}
		} else {
			this.m_flags &= ~box2D.dynamics.B2Body.e_activeFlag;
			broadPhase = this.m_world.m_contactManager.m_broadPhase;
			f = this.m_fixtureList;
			while(f != null) {
				f.destroyProxy(broadPhase);
				f = f.m_next;
			}
			var ce = this.m_contactList;
			while(ce != null) {
				var ce0 = ce;
				ce = ce.next;
				this.m_world.m_contactManager.destroy(ce0.contact);
			}
			this.m_contactList = null;
		}
	}
	,isActive: function() {
		return (this.m_flags & box2D.dynamics.B2Body.e_activeFlag) == box2D.dynamics.B2Body.e_activeFlag;
	}
	,isSleepingAllowed: function() {
		return (this.m_flags & box2D.dynamics.B2Body.e_allowSleepFlag) == box2D.dynamics.B2Body.e_allowSleepFlag;
	}
	,getFixtureList: function() {
		return this.m_fixtureList;
	}
	,getJointList: function() {
		return this.m_jointList;
	}
	,getControllerList: function() {
		return this.m_controllerList;
	}
	,getContactList: function() {
		return this.m_contactList;
	}
	,getNext: function() {
		return this.m_next;
	}
	,getUserData: function() {
		return this.m_userData;
	}
	,setUserData: function(data) {
		this.m_userData = data;
	}
	,getWorld: function() {
		return this.m_world;
	}
	,synchronizeFixtures: function() {
		var xf1 = box2D.dynamics.B2Body.s_xf1;
		xf1.R.set(this.m_sweep.a0);
		var tMat = xf1.R;
		var tVec = this.m_sweep.localCenter;
		xf1.position.x = this.m_sweep.c0.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		xf1.position.y = this.m_sweep.c0.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		var f;
		var broadPhase = this.m_world.m_contactManager.m_broadPhase;
		f = this.m_fixtureList;
		while(f != null) {
			f.synchronize(broadPhase,xf1,this.m_xf);
			f = f.m_next;
		}
	}
	,synchronizeTransform: function() {
		this.m_xf.R.set(this.m_sweep.a);
		var tMat = this.m_xf.R;
		var tVec = this.m_sweep.localCenter;
		this.m_xf.position.x = this.m_sweep.c.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		this.m_xf.position.y = this.m_sweep.c.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	}
	,shouldCollide: function(other) {
		if(this.m_type != 2 && other.m_type != 2) return false;
		var jn = this.m_jointList;
		while(jn != null) {
			if(jn.other == other) {
				if(jn.joint.m_collideConnected == false) return false;
			}
			jn = jn.next;
		}
		return true;
	}
	,advance: function(t) {
		this.m_sweep.advance(t);
		this.m_sweep.c.setV(this.m_sweep.c0);
		this.m_sweep.a = this.m_sweep.a0;
		this.synchronizeTransform();
	}
	,__class__: box2D.dynamics.B2Body
};
box2D.dynamics.B2BodyDef = function() {
	this.position = new box2D.common.math.B2Vec2();
	this.linearVelocity = new box2D.common.math.B2Vec2();
	this.userData = null;
	this.angle = 0.0;
	this.angularVelocity = 0.0;
	this.linearDamping = 0.0;
	this.angularDamping = 0.0;
	this.allowSleep = true;
	this.awake = true;
	this.fixedRotation = false;
	this.bullet = false;
	this.type = 0;
	this.active = true;
	this.inertiaScale = 1.0;
};
$hxClasses["box2D.dynamics.B2BodyDef"] = box2D.dynamics.B2BodyDef;
box2D.dynamics.B2BodyDef.__name__ = ["box2D","dynamics","B2BodyDef"];
box2D.dynamics.B2BodyDef.prototype = {
	__class__: box2D.dynamics.B2BodyDef
};
box2D.dynamics._B2BodyType = {};
box2D.dynamics._B2BodyType.B2BodyType_Impl_ = function() { };
$hxClasses["box2D.dynamics._B2BodyType.B2BodyType_Impl_"] = box2D.dynamics._B2BodyType.B2BodyType_Impl_;
box2D.dynamics._B2BodyType.B2BodyType_Impl_.__name__ = ["box2D","dynamics","_B2BodyType","B2BodyType_Impl_"];
box2D.dynamics.B2ContactFilter = function() {
};
$hxClasses["box2D.dynamics.B2ContactFilter"] = box2D.dynamics.B2ContactFilter;
box2D.dynamics.B2ContactFilter.__name__ = ["box2D","dynamics","B2ContactFilter"];
box2D.dynamics.B2ContactFilter.prototype = {
	shouldCollide: function(fixtureA,fixtureB) {
		var filter1 = fixtureA.getFilterData();
		var filter2 = fixtureB.getFilterData();
		if(filter1.groupIndex == filter2.groupIndex && filter1.groupIndex != 0) return filter1.groupIndex > 0;
		var collide = (filter1.maskBits & filter2.categoryBits) != 0 && (filter1.categoryBits & filter2.maskBits) != 0;
		return collide;
	}
	,rayCollide: function(userData,fixture) {
		if(userData == null) return true;
		return this.shouldCollide(js.Boot.__cast(userData , box2D.dynamics.B2Fixture),fixture);
	}
	,__class__: box2D.dynamics.B2ContactFilter
};
box2D.dynamics.B2ContactImpulse = function() {
	this.normalImpulses = new Array();
	this.tangentImpulses = new Array();
};
$hxClasses["box2D.dynamics.B2ContactImpulse"] = box2D.dynamics.B2ContactImpulse;
box2D.dynamics.B2ContactImpulse.__name__ = ["box2D","dynamics","B2ContactImpulse"];
box2D.dynamics.B2ContactImpulse.prototype = {
	__class__: box2D.dynamics.B2ContactImpulse
};
box2D.dynamics.B2ContactListener = function() {
};
$hxClasses["box2D.dynamics.B2ContactListener"] = box2D.dynamics.B2ContactListener;
box2D.dynamics.B2ContactListener.__name__ = ["box2D","dynamics","B2ContactListener"];
box2D.dynamics.B2ContactListener.prototype = {
	beginContact: function(contact) {
	}
	,endContact: function(contact) {
	}
	,preSolve: function(contact,oldManifold) {
	}
	,postSolve: function(contact,impulse) {
	}
	,__class__: box2D.dynamics.B2ContactListener
};
box2D.dynamics.B2ContactManager = function() {
	this.m_world = null;
	this.m_contactCount = 0;
	this.m_contactFilter = box2D.dynamics.B2ContactFilter.b2_defaultFilter;
	this.m_contactListener = box2D.dynamics.B2ContactListener.b2_defaultListener;
	this.m_contactFactory = new box2D.dynamics.contacts.B2ContactFactory(this.m_allocator);
	this.m_broadPhase = new box2D.collision.B2DynamicTreeBroadPhase();
};
$hxClasses["box2D.dynamics.B2ContactManager"] = box2D.dynamics.B2ContactManager;
box2D.dynamics.B2ContactManager.__name__ = ["box2D","dynamics","B2ContactManager"];
box2D.dynamics.B2ContactManager.prototype = {
	addPair: function(proxyUserDataA,proxyUserDataB) {
		var fixtureA;
		fixtureA = js.Boot.__cast(proxyUserDataA , box2D.dynamics.B2Fixture);
		var fixtureB;
		fixtureB = js.Boot.__cast(proxyUserDataB , box2D.dynamics.B2Fixture);
		var bodyA = fixtureA.getBody();
		var bodyB = fixtureB.getBody();
		if(bodyA == bodyB) return;
		var edge = bodyB.getContactList();
		while(edge != null) {
			if(edge.other == bodyA) {
				var fA = edge.contact.getFixtureA();
				var fB = edge.contact.getFixtureB();
				if(fA == fixtureA && fB == fixtureB) return;
				if(fA == fixtureB && fB == fixtureA) return;
			}
			edge = edge.next;
		}
		if(bodyB.shouldCollide(bodyA) == false) return;
		if(this.m_contactFilter.shouldCollide(fixtureA,fixtureB) == false) return;
		var c = this.m_contactFactory.create(fixtureA,fixtureB);
		fixtureA = c.getFixtureA();
		fixtureB = c.getFixtureB();
		bodyA = fixtureA.m_body;
		bodyB = fixtureB.m_body;
		c.m_prev = null;
		c.m_next = this.m_world.m_contactList;
		if(this.m_world.m_contactList != null) this.m_world.m_contactList.m_prev = c;
		this.m_world.m_contactList = c;
		c.m_nodeA.contact = c;
		c.m_nodeA.other = bodyB;
		c.m_nodeA.prev = null;
		c.m_nodeA.next = bodyA.m_contactList;
		if(bodyA.m_contactList != null) bodyA.m_contactList.prev = c.m_nodeA;
		bodyA.m_contactList = c.m_nodeA;
		c.m_nodeB.contact = c;
		c.m_nodeB.other = bodyA;
		c.m_nodeB.prev = null;
		c.m_nodeB.next = bodyB.m_contactList;
		if(bodyB.m_contactList != null) bodyB.m_contactList.prev = c.m_nodeB;
		bodyB.m_contactList = c.m_nodeB;
		++this.m_world.m_contactCount;
		return;
	}
	,findNewContacts: function() {
		this.m_broadPhase.updatePairs($bind(this,this.addPair));
	}
	,destroy: function(c) {
		var fixtureA = c.getFixtureA();
		var fixtureB = c.getFixtureB();
		var bodyA = fixtureA.getBody();
		var bodyB = fixtureB.getBody();
		if(c.isTouching()) this.m_contactListener.endContact(c);
		if(c.m_prev != null) c.m_prev.m_next = c.m_next;
		if(c.m_next != null) c.m_next.m_prev = c.m_prev;
		if(c == this.m_world.m_contactList) this.m_world.m_contactList = c.m_next;
		if(c.m_nodeA.prev != null) c.m_nodeA.prev.next = c.m_nodeA.next;
		if(c.m_nodeA.next != null) c.m_nodeA.next.prev = c.m_nodeA.prev;
		if(c.m_nodeA == bodyA.m_contactList) bodyA.m_contactList = c.m_nodeA.next;
		if(c.m_nodeB.prev != null) c.m_nodeB.prev.next = c.m_nodeB.next;
		if(c.m_nodeB.next != null) c.m_nodeB.next.prev = c.m_nodeB.prev;
		if(c.m_nodeB == bodyB.m_contactList) bodyB.m_contactList = c.m_nodeB.next;
		this.m_contactFactory.destroy(c);
		--this.m_contactCount;
	}
	,collide: function() {
		var c = this.m_world.m_contactList;
		while(c != null) {
			var fixtureA = c.getFixtureA();
			var fixtureB = c.getFixtureB();
			var bodyA = fixtureA.getBody();
			var bodyB = fixtureB.getBody();
			if(bodyA.isAwake() == false && bodyB.isAwake() == false) {
				c = c.getNext();
				continue;
			}
			if((c.m_flags & box2D.dynamics.contacts.B2Contact.e_filterFlag) != 0) {
				if(bodyB.shouldCollide(bodyA) == false) {
					var cNuke = c;
					c = cNuke.getNext();
					this.destroy(cNuke);
					continue;
				}
				if(this.m_contactFilter.shouldCollide(fixtureA,fixtureB) == false) {
					var cNuke1 = c;
					c = cNuke1.getNext();
					this.destroy(cNuke1);
					continue;
				}
				c.m_flags &= ~box2D.dynamics.contacts.B2Contact.e_filterFlag;
			}
			var proxyA = fixtureA.m_proxy;
			var proxyB = fixtureB.m_proxy;
			var overlap = this.m_broadPhase.testOverlap(proxyA,proxyB);
			if(overlap == false) {
				var cNuke2 = c;
				c = cNuke2.getNext();
				this.destroy(cNuke2);
				continue;
			}
			c.update(this.m_contactListener);
			c = c.getNext();
		}
	}
	,__class__: box2D.dynamics.B2ContactManager
};
box2D.dynamics.B2DebugDraw = function() {
	this.m_drawScale = 1.0;
	this.m_lineThickness = 1.0;
	this.m_alpha = 1.0;
	this.m_fillAlpha = 1.0;
	this.m_xformScale = 1.0;
	this.m_drawFlags = 0;
};
$hxClasses["box2D.dynamics.B2DebugDraw"] = box2D.dynamics.B2DebugDraw;
box2D.dynamics.B2DebugDraw.__name__ = ["box2D","dynamics","B2DebugDraw"];
box2D.dynamics.B2DebugDraw.prototype = {
	setFlags: function(flags) {
		this.m_drawFlags = flags;
	}
	,getFlags: function() {
		return this.m_drawFlags;
	}
	,appendFlags: function(flags) {
		this.m_drawFlags |= flags;
	}
	,clearFlags: function(flags) {
		this.m_drawFlags &= ~flags;
	}
	,setSprite: function(sprite) {
		this.m_sprite = sprite;
	}
	,getSprite: function() {
		return this.m_sprite;
	}
	,setDrawScale: function(drawScale) {
		this.m_drawScale = drawScale;
	}
	,getDrawScale: function() {
		return this.m_drawScale;
	}
	,setLineThickness: function(lineThickness) {
		this.m_lineThickness = lineThickness;
	}
	,getLineThickness: function() {
		return this.m_lineThickness;
	}
	,setAlpha: function(alpha) {
		this.m_alpha = alpha;
	}
	,getAlpha: function() {
		return this.m_alpha;
	}
	,setFillAlpha: function(alpha) {
		this.m_fillAlpha = alpha;
	}
	,getFillAlpha: function() {
		return this.m_fillAlpha;
	}
	,setXFormScale: function(xformScale) {
		this.m_xformScale = xformScale;
	}
	,getXFormScale: function() {
		return this.m_xformScale;
	}
	,drawPolygon: function(vertices,vertexCount,color) {
		this.m_sprite.get_graphics().lineStyle(this.m_lineThickness,color.get_color(),this.m_alpha);
		this.m_sprite.get_graphics().moveTo(vertices[0].x * this.m_drawScale,vertices[0].y * this.m_drawScale);
		var _g = 1;
		while(_g < vertexCount) {
			var i = _g++;
			this.m_sprite.get_graphics().lineTo(vertices[i].x * this.m_drawScale,vertices[i].y * this.m_drawScale);
		}
		this.m_sprite.get_graphics().lineTo(vertices[0].x * this.m_drawScale,vertices[0].y * this.m_drawScale);
	}
	,drawSolidPolygon: function(vertices,vertexCount,color) {
		this.m_sprite.get_graphics().lineStyle(this.m_lineThickness,color.get_color(),this.m_alpha);
		this.m_sprite.get_graphics().moveTo(vertices[0].x * this.m_drawScale,vertices[0].y * this.m_drawScale);
		this.m_sprite.get_graphics().beginFill(color.get_color(),this.m_fillAlpha);
		var _g = 1;
		while(_g < vertexCount) {
			var i = _g++;
			this.m_sprite.get_graphics().lineTo(vertices[i].x * this.m_drawScale,vertices[i].y * this.m_drawScale);
		}
		this.m_sprite.get_graphics().lineTo(vertices[0].x * this.m_drawScale,vertices[0].y * this.m_drawScale);
		this.m_sprite.get_graphics().endFill();
	}
	,drawCircle: function(center,radius,color) {
		this.m_sprite.get_graphics().lineStyle(this.m_lineThickness,color.get_color(),this.m_alpha);
		this.m_sprite.get_graphics().drawCircle(center.x * this.m_drawScale,center.y * this.m_drawScale,radius * this.m_drawScale);
	}
	,drawSolidCircle: function(center,radius,axis,color) {
		this.m_sprite.get_graphics().lineStyle(this.m_lineThickness,color.get_color(),this.m_alpha);
		this.m_sprite.get_graphics().moveTo(0,0);
		this.m_sprite.get_graphics().beginFill(color.get_color(),this.m_fillAlpha);
		this.m_sprite.get_graphics().drawCircle(center.x * this.m_drawScale,center.y * this.m_drawScale,radius * this.m_drawScale);
		this.m_sprite.get_graphics().endFill();
		this.m_sprite.get_graphics().moveTo(center.x * this.m_drawScale,center.y * this.m_drawScale);
		this.m_sprite.get_graphics().lineTo((center.x + axis.x * radius) * this.m_drawScale,(center.y + axis.y * radius) * this.m_drawScale);
	}
	,drawSegment: function(p1,p2,color) {
		this.m_sprite.get_graphics().lineStyle(this.m_lineThickness,color.get_color(),this.m_alpha);
		this.m_sprite.get_graphics().moveTo(p1.x * this.m_drawScale,p1.y * this.m_drawScale);
		this.m_sprite.get_graphics().lineTo(p2.x * this.m_drawScale,p2.y * this.m_drawScale);
	}
	,drawTransform: function(xf) {
		this.m_sprite.get_graphics().lineStyle(this.m_lineThickness,16711680,this.m_alpha);
		this.m_sprite.get_graphics().moveTo(xf.position.x * this.m_drawScale,xf.position.y * this.m_drawScale);
		this.m_sprite.get_graphics().lineTo((xf.position.x + this.m_xformScale * xf.R.col1.x) * this.m_drawScale,(xf.position.y + this.m_xformScale * xf.R.col1.y) * this.m_drawScale);
		this.m_sprite.get_graphics().lineStyle(this.m_lineThickness,65280,this.m_alpha);
		this.m_sprite.get_graphics().moveTo(xf.position.x * this.m_drawScale,xf.position.y * this.m_drawScale);
		this.m_sprite.get_graphics().lineTo((xf.position.x + this.m_xformScale * xf.R.col2.x) * this.m_drawScale,(xf.position.y + this.m_xformScale * xf.R.col2.y) * this.m_drawScale);
	}
	,__class__: box2D.dynamics.B2DebugDraw
};
box2D.dynamics.B2DestructionListener = function() { };
$hxClasses["box2D.dynamics.B2DestructionListener"] = box2D.dynamics.B2DestructionListener;
box2D.dynamics.B2DestructionListener.__name__ = ["box2D","dynamics","B2DestructionListener"];
box2D.dynamics.B2DestructionListener.prototype = {
	sayGoodbyeJoint: function(joint) {
	}
	,sayGoodbyeFixture: function(fixture) {
	}
	,__class__: box2D.dynamics.B2DestructionListener
};
box2D.dynamics.B2FilterData = function() {
	this.categoryBits = 1;
	this.maskBits = 65535;
	this.groupIndex = 0;
};
$hxClasses["box2D.dynamics.B2FilterData"] = box2D.dynamics.B2FilterData;
box2D.dynamics.B2FilterData.__name__ = ["box2D","dynamics","B2FilterData"];
box2D.dynamics.B2FilterData.prototype = {
	copy: function() {
		var copy = new box2D.dynamics.B2FilterData();
		copy.categoryBits = this.categoryBits;
		copy.maskBits = this.maskBits;
		copy.groupIndex = this.groupIndex;
		return copy;
	}
	,__class__: box2D.dynamics.B2FilterData
};
box2D.dynamics.B2Fixture = function() {
	this.m_filter = new box2D.dynamics.B2FilterData();
	this.m_aabb = new box2D.collision.B2AABB();
	this.m_userData = null;
	this.m_body = null;
	this.m_next = null;
	this.m_shape = null;
	this.m_density = 0.0;
	this.m_friction = 0.0;
	this.m_restitution = 0.0;
};
$hxClasses["box2D.dynamics.B2Fixture"] = box2D.dynamics.B2Fixture;
box2D.dynamics.B2Fixture.__name__ = ["box2D","dynamics","B2Fixture"];
box2D.dynamics.B2Fixture.prototype = {
	getType: function() {
		return this.m_shape.getType();
	}
	,getShape: function() {
		return this.m_shape;
	}
	,setSensor: function(sensor) {
		if(this.m_isSensor == sensor) return;
		this.m_isSensor = sensor;
		if(this.m_body == null) return;
		var edge = this.m_body.getContactList();
		while(edge != null) {
			var contact = edge.contact;
			var fixtureA = contact.getFixtureA();
			var fixtureB = contact.getFixtureB();
			if(fixtureA == this || fixtureB == this) contact.setSensor(fixtureA.isSensor() || fixtureB.isSensor());
			edge = edge.next;
		}
	}
	,isSensor: function() {
		return this.m_isSensor;
	}
	,setFilterData: function(filter) {
		this.m_filter = filter.copy();
		if(this.m_body != null) return;
		var edge = this.m_body.getContactList();
		while(edge != null) {
			var contact = edge.contact;
			var fixtureA = contact.getFixtureA();
			var fixtureB = contact.getFixtureB();
			if(fixtureA == this || fixtureB == this) contact.flagForFiltering();
			edge = edge.next;
		}
	}
	,getFilterData: function() {
		return this.m_filter.copy();
	}
	,getBody: function() {
		return this.m_body;
	}
	,getNext: function() {
		return this.m_next;
	}
	,getUserData: function() {
		return this.m_userData;
	}
	,SetUserData: function(data) {
		this.m_userData = data;
	}
	,testPoint: function(p) {
		return this.m_shape.testPoint(this.m_body.getTransform(),p);
	}
	,rayCast: function(output,input) {
		return this.m_shape.rayCast(output,input,this.m_body.getTransform());
	}
	,getMassData: function(massData) {
		if(massData == null) massData = new box2D.collision.shapes.B2MassData();
		this.m_shape.computeMass(massData,this.m_density);
		return massData;
	}
	,setDensity: function(density) {
		this.m_density = density;
	}
	,getDensity: function() {
		return this.m_density;
	}
	,getFriction: function() {
		return this.m_friction;
	}
	,setFriction: function(friction) {
		this.m_friction = friction;
	}
	,getRestitution: function() {
		return this.m_restitution;
	}
	,setRestitution: function(restitution) {
		this.m_restitution = restitution;
	}
	,getAABB: function() {
		return this.m_aabb;
	}
	,create: function(body,xf,def) {
		this.m_userData = def.userData;
		this.m_friction = def.friction;
		this.m_restitution = def.restitution;
		this.m_body = body;
		this.m_next = null;
		this.m_filter = def.filter.copy();
		this.m_isSensor = def.isSensor;
		this.m_shape = def.shape.copy();
		this.m_density = def.density;
	}
	,destroy: function() {
		this.m_shape = null;
	}
	,createProxy: function(broadPhase,xf) {
		this.m_shape.computeAABB(this.m_aabb,xf);
		this.m_proxy = broadPhase.createProxy(this.m_aabb,this);
	}
	,destroyProxy: function(broadPhase) {
		if(this.m_proxy == null) return;
		broadPhase.destroyProxy(this.m_proxy);
		this.m_proxy = null;
	}
	,synchronize: function(broadPhase,transform1,transform2) {
		if(this.m_proxy == null) return;
		var aabb1 = new box2D.collision.B2AABB();
		var aabb2 = new box2D.collision.B2AABB();
		this.m_shape.computeAABB(aabb1,transform1);
		this.m_shape.computeAABB(aabb2,transform2);
		this.m_aabb.combine(aabb1,aabb2);
		var displacement = box2D.common.math.B2Math.subtractVV(transform2.position,transform1.position);
		broadPhase.moveProxy(this.m_proxy,this.m_aabb,displacement);
	}
	,__class__: box2D.dynamics.B2Fixture
};
box2D.dynamics.B2FixtureDef = function() {
	this.filter = new box2D.dynamics.B2FilterData();
	this.shape = null;
	this.userData = null;
	this.friction = 0.2;
	this.restitution = 0.0;
	this.density = 0.0;
	this.filter.categoryBits = 1;
	this.filter.maskBits = 65535;
	this.filter.groupIndex = 0;
	this.isSensor = false;
};
$hxClasses["box2D.dynamics.B2FixtureDef"] = box2D.dynamics.B2FixtureDef;
box2D.dynamics.B2FixtureDef.__name__ = ["box2D","dynamics","B2FixtureDef"];
box2D.dynamics.B2FixtureDef.prototype = {
	__class__: box2D.dynamics.B2FixtureDef
};
box2D.dynamics.B2Island = function() {
	this.m_jointCapacity = 0;
	this.m_contactCapacity = 0;
	this.m_bodyCapacity = 0;
	this.m_contactCount = 0;
	this.m_jointCount = 0;
	this.m_bodyCount = 0;
	this.m_bodies = new Array();
	this.m_contacts = new Array();
	this.m_joints = new Array();
};
$hxClasses["box2D.dynamics.B2Island"] = box2D.dynamics.B2Island;
box2D.dynamics.B2Island.__name__ = ["box2D","dynamics","B2Island"];
box2D.dynamics.B2Island.prototype = {
	initialize: function(bodyCapacity,contactCapacity,jointCapacity,allocator,listener,contactSolver) {
		var i;
		this.m_bodyCapacity = bodyCapacity;
		this.m_contactCapacity = contactCapacity;
		this.m_jointCapacity = jointCapacity;
		this.m_bodyCount = 0;
		this.m_contactCount = 0;
		this.m_jointCount = 0;
		this.m_allocator = allocator;
		this.m_listener = listener;
		this.m_contactSolver = contactSolver;
		var _g = this.m_bodies.length;
		while(_g < bodyCapacity) {
			var i1 = _g++;
			this.m_bodies[i1] = null;
		}
		var _g1 = this.m_contacts.length;
		while(_g1 < contactCapacity) {
			var i2 = _g1++;
			this.m_contacts[i2] = null;
		}
		var _g2 = this.m_joints.length;
		while(_g2 < jointCapacity) {
			var i3 = _g2++;
			this.m_joints[i3] = null;
		}
	}
	,clear: function() {
		this.m_bodyCount = 0;
		this.m_contactCount = 0;
		this.m_jointCount = 0;
	}
	,solve: function(step,gravity,allowSleep) {
		var i;
		var j;
		var b;
		var joint;
		var _g1 = 0;
		var _g = this.m_bodyCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			b = this.m_bodies[i1];
			if(b.getType() != 2) continue;
			b.m_linearVelocity.x += step.dt * (gravity.x + b.m_invMass * b.m_force.x);
			b.m_linearVelocity.y += step.dt * (gravity.y + b.m_invMass * b.m_force.y);
			b.m_angularVelocity += step.dt * b.m_invI * b.m_torque;
			b.m_linearVelocity.multiply(box2D.common.math.B2Math.clamp(1.0 - step.dt * b.m_linearDamping,0.0,1.0));
			b.m_angularVelocity *= box2D.common.math.B2Math.clamp(1.0 - step.dt * b.m_angularDamping,0.0,1.0);
		}
		this.m_contactSolver.initialize(step,this.m_contacts,this.m_contactCount,this.m_allocator);
		var contactSolver = this.m_contactSolver;
		contactSolver.initVelocityConstraints(step);
		var _g11 = 0;
		var _g2 = this.m_jointCount;
		while(_g11 < _g2) {
			var i2 = _g11++;
			joint = this.m_joints[i2];
			joint.initVelocityConstraints(step);
		}
		var _g12 = 0;
		var _g3 = step.velocityIterations;
		while(_g12 < _g3) {
			var i3 = _g12++;
			var _g31 = 0;
			var _g21 = this.m_jointCount;
			while(_g31 < _g21) {
				var j1 = _g31++;
				joint = this.m_joints[j1];
				joint.solveVelocityConstraints(step);
			}
			contactSolver.solveVelocityConstraints();
		}
		var _g13 = 0;
		var _g4 = this.m_jointCount;
		while(_g13 < _g4) {
			var i4 = _g13++;
			joint = this.m_joints[i4];
			joint.finalizeVelocityConstraints();
		}
		contactSolver.finalizeVelocityConstraints();
		var _g14 = 0;
		var _g5 = this.m_bodyCount;
		while(_g14 < _g5) {
			var i5 = _g14++;
			b = this.m_bodies[i5];
			if(b.getType() == 0) continue;
			var translationX = step.dt * b.m_linearVelocity.x;
			var translationY = step.dt * b.m_linearVelocity.y;
			if(translationX * translationX + translationY * translationY > box2D.common.B2Settings.b2_maxTranslationSquared) {
				b.m_linearVelocity.normalize();
				b.m_linearVelocity.x *= box2D.common.B2Settings.b2_maxTranslation * step.inv_dt;
				b.m_linearVelocity.y *= box2D.common.B2Settings.b2_maxTranslation * step.inv_dt;
			}
			var rotation = step.dt * b.m_angularVelocity;
			if(rotation * rotation > box2D.common.B2Settings.b2_maxRotationSquared) {
				if(b.m_angularVelocity < 0.0) b.m_angularVelocity = -box2D.common.B2Settings.b2_maxRotation * step.inv_dt; else b.m_angularVelocity = box2D.common.B2Settings.b2_maxRotation * step.inv_dt;
			}
			b.m_sweep.c0.setV(b.m_sweep.c);
			b.m_sweep.a0 = b.m_sweep.a;
			b.m_sweep.c.x += step.dt * b.m_linearVelocity.x;
			b.m_sweep.c.y += step.dt * b.m_linearVelocity.y;
			b.m_sweep.a += step.dt * b.m_angularVelocity;
			b.synchronizeTransform();
		}
		var _g15 = 0;
		var _g6 = step.positionIterations;
		while(_g15 < _g6) {
			var i6 = _g15++;
			var contactsOkay = contactSolver.solvePositionConstraints(box2D.common.B2Settings.b2_contactBaumgarte);
			var jointsOkay = true;
			var _g32 = 0;
			var _g22 = this.m_jointCount;
			while(_g32 < _g22) {
				var j2 = _g32++;
				joint = this.m_joints[j2];
				var jointOkay = joint.solvePositionConstraints(box2D.common.B2Settings.b2_contactBaumgarte);
				jointsOkay = jointsOkay && jointOkay;
			}
			if(contactsOkay && jointsOkay) break;
		}
		this.report(contactSolver.m_constraints);
		if(allowSleep) {
			var minSleepTime = Number.MAX_VALUE;
			var linTolSqr = box2D.common.B2Settings.b2_linearSleepTolerance * box2D.common.B2Settings.b2_linearSleepTolerance;
			var angTolSqr = box2D.common.B2Settings.b2_angularSleepTolerance * box2D.common.B2Settings.b2_angularSleepTolerance;
			var _g16 = 0;
			var _g7 = this.m_bodyCount;
			while(_g16 < _g7) {
				var i7 = _g16++;
				b = this.m_bodies[i7];
				if(b.getType() == 0) continue;
				if((b.m_flags & box2D.dynamics.B2Body.e_allowSleepFlag) == 0) {
					b.m_sleepTime = 0.0;
					minSleepTime = 0.0;
				}
				if((b.m_flags & box2D.dynamics.B2Body.e_allowSleepFlag) == 0 || b.m_angularVelocity * b.m_angularVelocity > angTolSqr || box2D.common.math.B2Math.dot(b.m_linearVelocity,b.m_linearVelocity) > linTolSqr) {
					b.m_sleepTime = 0.0;
					minSleepTime = 0.0;
				} else {
					b.m_sleepTime += step.dt;
					minSleepTime = box2D.common.math.B2Math.min(minSleepTime,b.m_sleepTime);
				}
			}
			if(minSleepTime >= box2D.common.B2Settings.b2_timeToSleep) {
				var _g17 = 0;
				var _g8 = this.m_bodyCount;
				while(_g17 < _g8) {
					var i8 = _g17++;
					b = this.m_bodies[i8];
					b.setAwake(false);
				}
			}
		}
	}
	,solveTOI: function(subStep) {
		var i;
		var j;
		this.m_contactSolver.initialize(subStep,this.m_contacts,this.m_contactCount,this.m_allocator);
		var contactSolver = this.m_contactSolver;
		var _g1 = 0;
		var _g = this.m_jointCount;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.m_joints[i1].initVelocityConstraints(subStep);
		}
		var _g11 = 0;
		var _g2 = subStep.velocityIterations;
		while(_g11 < _g2) {
			var i2 = _g11++;
			contactSolver.solveVelocityConstraints();
			var _g3 = 0;
			var _g21 = this.m_jointCount;
			while(_g3 < _g21) {
				var j1 = _g3++;
				this.m_joints[j1].solveVelocityConstraints(subStep);
			}
		}
		var _g12 = 0;
		var _g4 = this.m_bodyCount;
		while(_g12 < _g4) {
			var i3 = _g12++;
			var b = this.m_bodies[i3];
			if(b.getType() == 0) continue;
			var translationX = subStep.dt * b.m_linearVelocity.x;
			var translationY = subStep.dt * b.m_linearVelocity.y;
			if(translationX * translationX + translationY * translationY > box2D.common.B2Settings.b2_maxTranslationSquared) {
				b.m_linearVelocity.normalize();
				b.m_linearVelocity.x *= box2D.common.B2Settings.b2_maxTranslation * subStep.inv_dt;
				b.m_linearVelocity.y *= box2D.common.B2Settings.b2_maxTranslation * subStep.inv_dt;
			}
			var rotation = subStep.dt * b.m_angularVelocity;
			if(rotation * rotation > box2D.common.B2Settings.b2_maxRotationSquared) {
				if(b.m_angularVelocity < 0.0) b.m_angularVelocity = -box2D.common.B2Settings.b2_maxRotation * subStep.inv_dt; else b.m_angularVelocity = box2D.common.B2Settings.b2_maxRotation * subStep.inv_dt;
			}
			b.m_sweep.c0.setV(b.m_sweep.c);
			b.m_sweep.a0 = b.m_sweep.a;
			b.m_sweep.c.x += subStep.dt * b.m_linearVelocity.x;
			b.m_sweep.c.y += subStep.dt * b.m_linearVelocity.y;
			b.m_sweep.a += subStep.dt * b.m_angularVelocity;
			b.synchronizeTransform();
		}
		var k_toiBaumgarte = 0.75;
		var _g13 = 0;
		var _g5 = subStep.positionIterations;
		while(_g13 < _g5) {
			var i4 = _g13++;
			var contactsOkay = contactSolver.solvePositionConstraints(k_toiBaumgarte);
			var jointsOkay = true;
			var _g31 = 0;
			var _g22 = this.m_jointCount;
			while(_g31 < _g22) {
				var j2 = _g31++;
				var jointOkay = this.m_joints[j2].solvePositionConstraints(box2D.common.B2Settings.b2_contactBaumgarte);
				jointsOkay = jointsOkay && jointOkay;
			}
			if(contactsOkay && jointsOkay) break;
		}
		this.report(contactSolver.m_constraints);
	}
	,report: function(constraints) {
		if(this.m_listener == null) return;
		var _g1 = 0;
		var _g = this.m_contactCount;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.m_contacts[i];
			var cc = constraints[i];
			var _g3 = 0;
			var _g2 = cc.pointCount;
			while(_g3 < _g2) {
				var j = _g3++;
				box2D.dynamics.B2Island.s_impulse.normalImpulses[j] = cc.points[j].normalImpulse;
				box2D.dynamics.B2Island.s_impulse.tangentImpulses[j] = cc.points[j].tangentImpulse;
			}
			this.m_listener.postSolve(c,box2D.dynamics.B2Island.s_impulse);
		}
	}
	,addBody: function(body) {
		body.m_islandIndex = this.m_bodyCount;
		this.m_bodies[this.m_bodyCount++] = body;
	}
	,addContact: function(contact) {
		this.m_contacts[this.m_contactCount++] = contact;
	}
	,addJoint: function(joint) {
		this.m_joints[this.m_jointCount++] = joint;
	}
	,__class__: box2D.dynamics.B2Island
};
box2D.dynamics.B2TimeStep = function() {
	this.positionIterations = 0;
	this.velocityIterations = 0;
	this.dtRatio = 0;
	this.inv_dt = 0;
	this.dt = 0;
};
$hxClasses["box2D.dynamics.B2TimeStep"] = box2D.dynamics.B2TimeStep;
box2D.dynamics.B2TimeStep.__name__ = ["box2D","dynamics","B2TimeStep"];
box2D.dynamics.B2TimeStep.prototype = {
	set: function(step) {
		this.dt = step.dt;
		this.inv_dt = step.inv_dt;
		this.positionIterations = step.positionIterations;
		this.velocityIterations = step.velocityIterations;
		this.warmStarting = step.warmStarting;
	}
	,__class__: box2D.dynamics.B2TimeStep
};
box2D.dynamics.B2World = function(gravity,doSleep) {
	this.s_stack = new Array();
	this.m_contactManager = new box2D.dynamics.B2ContactManager();
	this.m_contactSolver = new box2D.dynamics.contacts.B2ContactSolver();
	this.m_island = new box2D.dynamics.B2Island();
	this.m_destructionListener = null;
	this.m_debugDraw = null;
	this.m_bodyList = null;
	this.m_contactList = null;
	this.m_jointList = null;
	this.m_controllerList = null;
	this.m_bodyCount = 0;
	this.m_contactCount = 0;
	this.m_jointCount = 0;
	this.m_controllerCount = 0;
	box2D.dynamics.B2World.m_warmStarting = true;
	box2D.dynamics.B2World.m_continuousPhysics = true;
	this.m_allowSleep = doSleep;
	this.m_gravity = gravity;
	this.m_inv_dt0 = 0.0;
	this.m_flags = 0;
	this.m_contactManager.m_world = this;
	var bd = new box2D.dynamics.B2BodyDef();
	this.m_groundBody = this.createBody(bd);
};
$hxClasses["box2D.dynamics.B2World"] = box2D.dynamics.B2World;
box2D.dynamics.B2World.__name__ = ["box2D","dynamics","B2World"];
box2D.dynamics.B2World.m_warmStarting = null;
box2D.dynamics.B2World.m_continuousPhysics = null;
box2D.dynamics.B2World.prototype = {
	setDestructionListener: function(listener) {
		this.m_destructionListener = listener;
	}
	,setContactFilter: function(filter) {
		this.m_contactManager.m_contactFilter = filter;
	}
	,setContactListener: function(listener) {
		this.m_contactManager.m_contactListener = listener;
	}
	,setDebugDraw: function(debugDraw) {
		this.m_debugDraw = debugDraw;
	}
	,setBroadPhase: function(broadPhase) {
		var oldBroadPhase = this.m_contactManager.m_broadPhase;
		this.m_contactManager.m_broadPhase = broadPhase;
		var b = this.m_bodyList;
		while(b != null) {
			var f = b.m_fixtureList;
			while(f != null) {
				f.m_proxy = broadPhase.createProxy(oldBroadPhase.getFatAABB(f.m_proxy),f);
				f = f.m_next;
			}
			b = b.m_next;
		}
	}
	,validate: function() {
		this.m_contactManager.m_broadPhase.validate();
	}
	,getProxyCount: function() {
		return this.m_contactManager.m_broadPhase.getProxyCount();
	}
	,createBody: function(def) {
		if(this.isLocked() == true) return null;
		var b = new box2D.dynamics.B2Body(def,this);
		b.m_prev = null;
		b.m_next = this.m_bodyList;
		if(this.m_bodyList != null) this.m_bodyList.m_prev = b;
		this.m_bodyList = b;
		++this.m_bodyCount;
		return b;
	}
	,destroyBody: function(b) {
		if(this.isLocked() == true) return;
		var jn = b.m_jointList;
		while(jn != null) {
			var jn0 = jn;
			jn = jn.next;
			if(this.m_destructionListener != null) this.m_destructionListener.sayGoodbyeJoint(jn0.joint);
			this.destroyJoint(jn0.joint);
		}
		var coe = b.m_controllerList;
		while(coe != null) {
			var coe0 = coe;
			coe = coe.nextController;
			coe0.controller.removeBody(b);
		}
		var ce = b.m_contactList;
		while(ce != null) {
			var ce0 = ce;
			ce = ce.next;
			this.m_contactManager.destroy(ce0.contact);
		}
		b.m_contactList = null;
		var f = b.m_fixtureList;
		while(f != null) {
			var f0 = f;
			f = f.m_next;
			if(this.m_destructionListener != null) this.m_destructionListener.sayGoodbyeFixture(f0);
			f0.destroyProxy(this.m_contactManager.m_broadPhase);
			f0.destroy();
		}
		b.m_fixtureList = null;
		b.m_fixtureCount = 0;
		if(b.m_prev != null) b.m_prev.m_next = b.m_next;
		if(b.m_next != null) b.m_next.m_prev = b.m_prev;
		if(b == this.m_bodyList) this.m_bodyList = b.m_next;
		--this.m_bodyCount;
	}
	,createJoint: function(def) {
		var j = box2D.dynamics.joints.B2Joint.create(def,null);
		j.m_prev = null;
		j.m_next = this.m_jointList;
		if(this.m_jointList != null) this.m_jointList.m_prev = j;
		this.m_jointList = j;
		++this.m_jointCount;
		j.m_edgeA.joint = j;
		j.m_edgeA.other = j.m_bodyB;
		j.m_edgeA.prev = null;
		j.m_edgeA.next = j.m_bodyA.m_jointList;
		if(j.m_bodyA.m_jointList != null) j.m_bodyA.m_jointList.prev = j.m_edgeA;
		j.m_bodyA.m_jointList = j.m_edgeA;
		j.m_edgeB.joint = j;
		j.m_edgeB.other = j.m_bodyA;
		j.m_edgeB.prev = null;
		j.m_edgeB.next = j.m_bodyB.m_jointList;
		if(j.m_bodyB.m_jointList != null) j.m_bodyB.m_jointList.prev = j.m_edgeB;
		j.m_bodyB.m_jointList = j.m_edgeB;
		var bodyA = def.bodyA;
		var bodyB = def.bodyB;
		if(def.collideConnected == false) {
			var edge = bodyB.getContactList();
			while(edge != null) {
				if(edge.other == bodyA) edge.contact.flagForFiltering();
				edge = edge.next;
			}
		}
		return j;
	}
	,destroyJoint: function(j) {
		var collideConnected = j.m_collideConnected;
		if(j.m_prev != null) j.m_prev.m_next = j.m_next;
		if(j.m_next != null) j.m_next.m_prev = j.m_prev;
		if(j == this.m_jointList) this.m_jointList = j.m_next;
		var bodyA = j.m_bodyA;
		var bodyB = j.m_bodyB;
		bodyA.setAwake(true);
		bodyB.setAwake(true);
		if(j.m_edgeA.prev != null) j.m_edgeA.prev.next = j.m_edgeA.next;
		if(j.m_edgeA.next != null) j.m_edgeA.next.prev = j.m_edgeA.prev;
		if(j.m_edgeA == bodyA.m_jointList) bodyA.m_jointList = j.m_edgeA.next;
		j.m_edgeA.prev = null;
		j.m_edgeA.next = null;
		if(j.m_edgeB.prev != null) j.m_edgeB.prev.next = j.m_edgeB.next;
		if(j.m_edgeB.next != null) j.m_edgeB.next.prev = j.m_edgeB.prev;
		if(j.m_edgeB == bodyB.m_jointList) bodyB.m_jointList = j.m_edgeB.next;
		j.m_edgeB.prev = null;
		j.m_edgeB.next = null;
		box2D.dynamics.joints.B2Joint.destroy(j,null);
		--this.m_jointCount;
		if(collideConnected == false) {
			var edge = bodyB.getContactList();
			while(edge != null) {
				if(edge.other == bodyA) edge.contact.flagForFiltering();
				edge = edge.next;
			}
		}
	}
	,addController: function(c) {
		c.m_next = this.m_controllerList;
		c.m_prev = null;
		this.m_controllerList = c;
		c.m_world = this;
		this.m_controllerCount++;
		return c;
	}
	,removeController: function(c) {
		if(c.m_prev != null) c.m_prev.m_next = c.m_next;
		if(c.m_next != null) c.m_next.m_prev = c.m_prev;
		if(this.m_controllerList == c) this.m_controllerList = c.m_next;
		this.m_controllerCount--;
	}
	,createController: function(controller) {
		if(controller.m_world != this) throw "Controller can only be a member of one world";
		controller.m_next = this.m_controllerList;
		controller.m_prev = null;
		if(this.m_controllerList != null) this.m_controllerList.m_prev = controller;
		this.m_controllerList = controller;
		++this.m_controllerCount;
		controller.m_world = this;
		return controller;
	}
	,destroyController: function(controller) {
		controller.clear();
		if(controller.m_next != null) controller.m_next.m_prev = controller.m_prev;
		if(controller.m_prev != null) controller.m_prev.m_next = controller.m_next;
		if(controller == this.m_controllerList) this.m_controllerList = controller.m_next;
		--this.m_controllerCount;
	}
	,setWarmStarting: function(flag) {
		box2D.dynamics.B2World.m_warmStarting = flag;
	}
	,setContinuousPhysics: function(flag) {
		box2D.dynamics.B2World.m_continuousPhysics = flag;
	}
	,getBodyCount: function() {
		return this.m_bodyCount;
	}
	,getJointCount: function() {
		return this.m_jointCount;
	}
	,getContactCount: function() {
		return this.m_contactCount;
	}
	,setGravity: function(gravity) {
		this.m_gravity = gravity;
	}
	,getGravity: function() {
		return this.m_gravity;
	}
	,getGroundBody: function() {
		return this.m_groundBody;
	}
	,step: function(dt,velocityIterations,positionIterations) {
		if((this.m_flags & box2D.dynamics.B2World.e_newFixture) != 0) {
			this.m_contactManager.findNewContacts();
			this.m_flags &= ~box2D.dynamics.B2World.e_newFixture;
		}
		this.m_flags |= box2D.dynamics.B2World.e_locked;
		var step = box2D.dynamics.B2World.s_timestep2;
		step.dt = dt;
		step.velocityIterations = velocityIterations;
		step.positionIterations = positionIterations;
		if(dt > 0.0) step.inv_dt = 1.0 / dt; else step.inv_dt = 0.0;
		step.dtRatio = this.m_inv_dt0 * dt;
		step.warmStarting = box2D.dynamics.B2World.m_warmStarting;
		this.m_contactManager.collide();
		if(step.dt > 0.0) this.solve(step);
		if(box2D.dynamics.B2World.m_continuousPhysics && step.dt > 0.0) this.solveTOI(step);
		if(step.dt > 0.0) this.m_inv_dt0 = step.inv_dt;
		this.m_flags &= ~box2D.dynamics.B2World.e_locked;
	}
	,clearForces: function() {
		var body = this.m_bodyList;
		while(body != null) {
			body.m_force.setZero();
			body.m_torque = 0.0;
			body = body.m_next;
		}
	}
	,drawDebugData: function() {
		if(this.m_debugDraw == null) return;
		this.m_debugDraw.m_sprite.get_graphics().clear();
		var flags = this.m_debugDraw.getFlags();
		var i;
		var b;
		var f;
		var s;
		var j;
		var bp;
		var invQ = new box2D.common.math.B2Vec2();
		var x1 = new box2D.common.math.B2Vec2();
		var x2 = new box2D.common.math.B2Vec2();
		var xf;
		var b1 = new box2D.collision.B2AABB();
		var b2 = new box2D.collision.B2AABB();
		var vs = [new box2D.common.math.B2Vec2(),new box2D.common.math.B2Vec2(),new box2D.common.math.B2Vec2(),new box2D.common.math.B2Vec2()];
		var color = new box2D.common.B2Color(0,0,0);
		if((flags & box2D.dynamics.B2DebugDraw.e_shapeBit) != 0) {
			b = this.m_bodyList;
			while(b != null) {
				xf = b.m_xf;
				f = b.getFixtureList();
				while(f != null) {
					s = f.getShape();
					if(b.isActive() == false) {
						color.set(0.5,0.5,0.3);
						this.drawShape(s,xf,color);
					} else if(b.getType() == 0) {
						color.set(0.5,0.9,0.5);
						this.drawShape(s,xf,color);
					} else if(b.getType() == 1) {
						color.set(0.5,0.5,0.9);
						this.drawShape(s,xf,color);
					} else if(b.isAwake() == false) {
						color.set(0.6,0.6,0.6);
						this.drawShape(s,xf,color);
					} else {
						color.set(0.9,0.7,0.7);
						this.drawShape(s,xf,color);
					}
					f = f.m_next;
				}
				b = b.m_next;
			}
		}
		if((flags & box2D.dynamics.B2DebugDraw.e_jointBit) != 0) {
			j = this.m_jointList;
			while(j != null) {
				this.drawJoint(j);
				j = j.m_next;
			}
		}
		if((flags & box2D.dynamics.B2DebugDraw.e_controllerBit) != 0) {
			var c = this.m_controllerList;
			while(c != null) {
				c.draw(this.m_debugDraw);
				c = c.m_next;
			}
		}
		if((flags & box2D.dynamics.B2DebugDraw.e_pairBit) != 0) {
			color.set(0.3,0.9,0.9);
			var contact = this.m_contactManager.m_contactList;
			while(contact != null) {
				var fixtureA = contact.getFixtureA();
				var fixtureB = contact.getFixtureB();
				var cA = fixtureA.getAABB().getCenter();
				var cB = fixtureB.getAABB().getCenter();
				this.m_debugDraw.drawSegment(cA,cB,color);
				contact = contact.getNext();
			}
		}
		if((flags & box2D.dynamics.B2DebugDraw.e_aabbBit) != 0) {
			bp = this.m_contactManager.m_broadPhase;
			vs = [new box2D.common.math.B2Vec2(),new box2D.common.math.B2Vec2(),new box2D.common.math.B2Vec2(),new box2D.common.math.B2Vec2()];
			b = this.m_bodyList;
			while(b != null) {
				if(b.isActive() == false) {
					b = b.getNext();
					continue;
				}
				f = b.getFixtureList();
				while(f != null) {
					var aabb = bp.getFatAABB(f.m_proxy);
					vs[0].set(aabb.lowerBound.x,aabb.lowerBound.y);
					vs[1].set(aabb.upperBound.x,aabb.lowerBound.y);
					vs[2].set(aabb.upperBound.x,aabb.upperBound.y);
					vs[3].set(aabb.lowerBound.x,aabb.upperBound.y);
					this.m_debugDraw.drawPolygon(vs,4,color);
					f = f.getNext();
				}
				b = b.getNext();
			}
		}
		if((flags & box2D.dynamics.B2DebugDraw.e_centerOfMassBit) != 0) {
			b = this.m_bodyList;
			while(b != null) {
				xf = box2D.dynamics.B2World.s_xf;
				xf.R = b.m_xf.R;
				xf.position = b.getWorldCenter();
				this.m_debugDraw.drawTransform(xf);
				b = b.m_next;
			}
		}
	}
	,queryAABB: function(callbackMethod,aabb) {
		var broadPhase = this.m_contactManager.m_broadPhase;
		var worldQueryWrapper = function(proxy) {
			return callbackMethod(broadPhase.getUserData(proxy));
		};
		broadPhase.query(worldQueryWrapper,aabb);
	}
	,queryShape: function(callbackMethod,shape,transform) {
		if(transform == null) {
			transform = new box2D.common.math.B2Transform();
			transform.setIdentity();
		}
		var broadPhase = this.m_contactManager.m_broadPhase;
		var worldQueryWrapper = function(proxy) {
			var fixture;
			fixture = js.Boot.__cast(broadPhase.getUserData(proxy) , box2D.dynamics.B2Fixture);
			if(box2D.collision.shapes.B2Shape.testOverlap(shape,transform,fixture.getShape(),fixture.getBody().getTransform())) return callbackMethod(fixture);
			return true;
		};
		var aabb = new box2D.collision.B2AABB();
		shape.computeAABB(aabb,transform);
		broadPhase.query(worldQueryWrapper,aabb);
	}
	,queryPoint: function(callbackMethod,p) {
		var broadPhase = this.m_contactManager.m_broadPhase;
		var worldQueryWrapper = function(proxy) {
			var fixture;
			fixture = js.Boot.__cast(broadPhase.getUserData(proxy) , box2D.dynamics.B2Fixture);
			if(fixture.testPoint(p)) return callbackMethod(fixture);
			return true;
		};
		var aabb = new box2D.collision.B2AABB();
		aabb.lowerBound.set(p.x - box2D.common.B2Settings.b2_linearSlop,p.y - box2D.common.B2Settings.b2_linearSlop);
		aabb.upperBound.set(p.x + box2D.common.B2Settings.b2_linearSlop,p.y + box2D.common.B2Settings.b2_linearSlop);
		broadPhase.query(worldQueryWrapper,aabb);
	}
	,rayCast: function(callbackMethod,point1,point2) {
		var broadPhase = this.m_contactManager.m_broadPhase;
		var output = new box2D.collision.B2RayCastOutput();
		var rayCastWrapper = function(input,proxy) {
			var userData = broadPhase.getUserData(proxy);
			var fixture;
			fixture = js.Boot.__cast(userData , box2D.dynamics.B2Fixture);
			var hit = fixture.rayCast(output,input);
			if(hit) {
				var fraction = output.fraction;
				var point = new box2D.common.math.B2Vec2((1.0 - fraction) * point1.x + fraction * point2.x,(1.0 - fraction) * point1.y + fraction * point2.y);
				return callbackMethod(fixture,point,output.normal,fraction);
			}
			return input.maxFraction;
		};
		var input1 = new box2D.collision.B2RayCastInput(point1,point2);
		broadPhase.rayCast(rayCastWrapper,input1);
	}
	,rayCastOne: function(point1,point2) {
		var result;
		var rayCastOneWrapper = function(fixture,point,normal,fraction) {
			result = fixture;
			return fraction;
		};
		this.rayCast(rayCastOneWrapper,point1,point2);
		return result;
	}
	,rayCastAll: function(point1,point2) {
		var result = new Array();
		var rayCastAllWrapper = function(fixture,point,normal,fraction) {
			result[result.length] = fixture;
			return 1;
		};
		this.rayCast(rayCastAllWrapper,point1,point2);
		return result;
	}
	,getBodyList: function() {
		return this.m_bodyList;
	}
	,getJointList: function() {
		return this.m_jointList;
	}
	,getContactList: function() {
		return this.m_contactList;
	}
	,isLocked: function() {
		return (this.m_flags & box2D.dynamics.B2World.e_locked) > 0;
	}
	,solve: function(step) {
		var b;
		var controller = this.m_controllerList;
		while(controller != null) {
			controller.step(step);
			controller = controller.m_next;
		}
		var island = this.m_island;
		island.initialize(this.m_bodyCount,this.m_contactCount,this.m_jointCount,null,this.m_contactManager.m_contactListener,this.m_contactSolver);
		b = this.m_bodyList;
		while(b != null) {
			b.m_flags &= ~box2D.dynamics.B2Body.e_islandFlag;
			b = b.m_next;
		}
		var c = this.m_contactList;
		while(c != null) {
			c.m_flags &= ~box2D.dynamics.contacts.B2Contact.e_islandFlag;
			c = c.m_next;
		}
		var j = this.m_jointList;
		while(j != null) {
			j.m_islandFlag = false;
			j = j.m_next;
		}
		var stackSize = this.m_bodyCount;
		var stack = this.s_stack;
		var seed = this.m_bodyList;
		while(seed != null) {
			if((seed.m_flags & box2D.dynamics.B2Body.e_islandFlag) != 0) {
				seed = seed.m_next;
				continue;
			}
			if(seed.isAwake() == false || seed.isActive() == false) {
				seed = seed.m_next;
				continue;
			}
			if(seed.getType() == 0) {
				seed = seed.m_next;
				continue;
			}
			island.clear();
			var stackCount = 0;
			stack[stackCount++] = seed;
			seed.m_flags |= box2D.dynamics.B2Body.e_islandFlag;
			while(stackCount > 0) {
				b = stack[--stackCount];
				island.addBody(b);
				if(b.isAwake() == false) b.setAwake(true);
				if(b.getType() == 0) continue;
				var other;
				var ce = b.m_contactList;
				while(ce != null) {
					if((ce.contact.m_flags & box2D.dynamics.contacts.B2Contact.e_islandFlag) != 0) {
						ce = ce.next;
						continue;
					}
					if(ce.contact.isSensor() == true || ce.contact.isEnabled() == false || ce.contact.isTouching() == false) {
						ce = ce.next;
						continue;
					}
					island.addContact(ce.contact);
					ce.contact.m_flags |= box2D.dynamics.contacts.B2Contact.e_islandFlag;
					other = ce.other;
					if((other.m_flags & box2D.dynamics.B2Body.e_islandFlag) != 0) {
						ce = ce.next;
						continue;
					}
					stack[stackCount++] = other;
					other.m_flags |= box2D.dynamics.B2Body.e_islandFlag;
					ce = ce.next;
				}
				var jn = b.m_jointList;
				while(jn != null) {
					if(jn.joint.m_islandFlag == true) {
						jn = jn.next;
						continue;
					}
					other = jn.other;
					if(other.isActive() == false) {
						jn = jn.next;
						continue;
					}
					island.addJoint(jn.joint);
					jn.joint.m_islandFlag = true;
					if((other.m_flags & box2D.dynamics.B2Body.e_islandFlag) != 0) {
						jn = jn.next;
						continue;
					}
					stack[stackCount++] = other;
					other.m_flags |= box2D.dynamics.B2Body.e_islandFlag;
					jn = jn.next;
				}
			}
			island.solve(step,this.m_gravity,this.m_allowSleep);
			var _g1 = 0;
			var _g = island.m_bodyCount;
			while(_g1 < _g) {
				var i = _g1++;
				b = island.m_bodies[i];
				if(b.getType() == 0) b.m_flags &= ~box2D.dynamics.B2Body.e_islandFlag;
			}
			seed = seed.m_next;
		}
		var _g11 = 0;
		var _g2 = stack.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(stack[i1] == null) break;
			stack[i1] = null;
		}
		b = this.m_bodyList;
		while(b != null) {
			if(b.isAwake() == false || b.isActive() == false) {
				b = b.m_next;
				continue;
			}
			if(b.getType() == 0) {
				b = b.m_next;
				continue;
			}
			b.synchronizeFixtures();
			b = b.m_next;
		}
		this.m_contactManager.findNewContacts();
	}
	,solveTOI: function(step) {
		var b;
		var fA;
		var fB;
		var bA;
		var bB;
		var cEdge;
		var j;
		var island = this.m_island;
		island.initialize(this.m_bodyCount,box2D.common.B2Settings.b2_maxTOIContactsPerIsland,box2D.common.B2Settings.b2_maxTOIJointsPerIsland,null,this.m_contactManager.m_contactListener,this.m_contactSolver);
		var queue = box2D.dynamics.B2World.s_queue;
		b = this.m_bodyList;
		while(b != null) {
			b.m_flags &= ~box2D.dynamics.B2Body.e_islandFlag;
			b.m_sweep.t0 = 0.0;
			b = b.m_next;
		}
		var c = this.m_contactList;
		while(c != null) {
			c.m_flags &= ~(box2D.dynamics.contacts.B2Contact.e_toiFlag | box2D.dynamics.contacts.B2Contact.e_islandFlag);
			c = c.m_next;
		}
		j = this.m_jointList;
		while(j != null) {
			j.m_islandFlag = false;
			j = j.m_next;
		}
		while(true) {
			var minContact = null;
			var minTOI = 1.0;
			c = this.m_contactList;
			while(c != null) {
				if(c.isSensor() == true || c.isEnabled() == false || c.isContinuous() == false) {
					c = c.m_next;
					continue;
				}
				var toi = 1.0;
				if((c.m_flags & box2D.dynamics.contacts.B2Contact.e_toiFlag) != 0) toi = c.m_toi; else {
					fA = c.m_fixtureA;
					fB = c.m_fixtureB;
					bA = fA.m_body;
					bB = fB.m_body;
					if((bA.getType() != 2 || bA.isAwake() == false) && (bB.getType() != 2 || bB.isAwake() == false)) {
						c = c.m_next;
						continue;
					}
					var t0 = bA.m_sweep.t0;
					if(bA.m_sweep.t0 < bB.m_sweep.t0) {
						t0 = bB.m_sweep.t0;
						bA.m_sweep.advance(t0);
					} else if(bB.m_sweep.t0 < bA.m_sweep.t0) {
						t0 = bA.m_sweep.t0;
						bB.m_sweep.advance(t0);
					}
					toi = c.computeTOI(bA.m_sweep,bB.m_sweep);
					box2D.common.B2Settings.b2Assert(0.0 <= toi && toi <= 1.0);
					if(toi > 0.0 && toi < 1.0) {
						toi = (1.0 - toi) * t0 + toi;
						if(toi > 1) toi = 1;
					}
					c.m_toi = toi;
					c.m_flags |= box2D.dynamics.contacts.B2Contact.e_toiFlag;
				}
				if(Number.MIN_VALUE < toi && toi < minTOI) {
					minContact = c;
					minTOI = toi;
				}
				c = c.m_next;
			}
			if(minContact == null || 1.0 - 100.0 * Number.MIN_VALUE < minTOI) break;
			fA = minContact.m_fixtureA;
			fB = minContact.m_fixtureB;
			bA = fA.m_body;
			bB = fB.m_body;
			box2D.dynamics.B2World.s_backupA.set(bA.m_sweep);
			box2D.dynamics.B2World.s_backupB.set(bB.m_sweep);
			bA.advance(minTOI);
			bB.advance(minTOI);
			minContact.update(this.m_contactManager.m_contactListener);
			minContact.m_flags &= ~box2D.dynamics.contacts.B2Contact.e_toiFlag;
			if(minContact.isSensor() == true || minContact.isEnabled() == false) {
				bA.m_sweep.set(box2D.dynamics.B2World.s_backupA);
				bB.m_sweep.set(box2D.dynamics.B2World.s_backupB);
				bA.synchronizeTransform();
				bB.synchronizeTransform();
				continue;
			}
			if(minContact.isTouching() == false) continue;
			var seed = bA;
			if(seed.getType() != 2) seed = bB;
			island.clear();
			var queueStart = 0;
			var queueSize = 0;
			queue[queueStart + queueSize++] = seed;
			seed.m_flags |= box2D.dynamics.B2Body.e_islandFlag;
			while(queueSize > 0) {
				b = queue[queueStart++];
				--queueSize;
				island.addBody(b);
				if(b.isAwake() == false) b.setAwake(true);
				if(b.getType() != 2) continue;
				cEdge = b.m_contactList;
				var other;
				while(cEdge != null) {
					if(island.m_contactCount == island.m_contactCapacity) {
						cEdge = cEdge.next;
						break;
					}
					if((cEdge.contact.m_flags & box2D.dynamics.contacts.B2Contact.e_islandFlag) != 0) {
						cEdge = cEdge.next;
						continue;
					}
					if(cEdge.contact.isSensor() == true || cEdge.contact.isEnabled() == false || cEdge.contact.isTouching() == false) {
						cEdge = cEdge.next;
						continue;
					}
					island.addContact(cEdge.contact);
					cEdge.contact.m_flags |= box2D.dynamics.contacts.B2Contact.e_islandFlag;
					other = cEdge.other;
					if((other.m_flags & box2D.dynamics.B2Body.e_islandFlag) != 0) {
						cEdge = cEdge.next;
						continue;
					}
					if(other.getType() != 0) {
						other.advance(minTOI);
						other.setAwake(true);
					}
					queue[queueStart + queueSize] = other;
					++queueSize;
					other.m_flags |= box2D.dynamics.B2Body.e_islandFlag;
					cEdge = cEdge.next;
				}
				var jEdge = b.m_jointList;
				while(jEdge != null) {
					if(island.m_jointCount == island.m_jointCapacity) {
						jEdge = jEdge.next;
						continue;
					}
					if(jEdge.joint.m_islandFlag == true) {
						jEdge = jEdge.next;
						continue;
					}
					other = jEdge.other;
					if(other.isActive() == false) {
						jEdge = jEdge.next;
						continue;
					}
					island.addJoint(jEdge.joint);
					jEdge.joint.m_islandFlag = true;
					if((other.m_flags & box2D.dynamics.B2Body.e_islandFlag) != 0) {
						jEdge = jEdge.next;
						continue;
					}
					if(other.getType() != 0) {
						other.advance(minTOI);
						other.setAwake(true);
					}
					queue[queueStart + queueSize] = other;
					++queueSize;
					other.m_flags |= box2D.dynamics.B2Body.e_islandFlag;
					jEdge = jEdge.next;
				}
			}
			var subStep = box2D.dynamics.B2World.s_timestep;
			subStep.warmStarting = false;
			subStep.dt = (1.0 - minTOI) * step.dt;
			subStep.inv_dt = 1.0 / subStep.dt;
			subStep.dtRatio = 0.0;
			subStep.velocityIterations = step.velocityIterations;
			subStep.positionIterations = step.positionIterations;
			island.solveTOI(subStep);
			var i;
			var _g1 = 0;
			var _g = island.m_bodyCount;
			while(_g1 < _g) {
				var i1 = _g1++;
				b = island.m_bodies[i1];
				b.m_flags &= ~box2D.dynamics.B2Body.e_islandFlag;
				if(b.isAwake() == false) continue;
				if(b.getType() != 2) continue;
				b.synchronizeFixtures();
				cEdge = b.m_contactList;
				while(cEdge != null) {
					cEdge.contact.m_flags &= ~box2D.dynamics.contacts.B2Contact.e_toiFlag;
					cEdge = cEdge.next;
				}
			}
			var _g11 = 0;
			var _g2 = island.m_contactCount;
			while(_g11 < _g2) {
				var i2 = _g11++;
				c = island.m_contacts[i2];
				c.m_flags &= ~(box2D.dynamics.contacts.B2Contact.e_toiFlag | box2D.dynamics.contacts.B2Contact.e_islandFlag);
			}
			var _g12 = 0;
			var _g3 = island.m_jointCount;
			while(_g12 < _g3) {
				var i3 = _g12++;
				j = island.m_joints[i3];
				j.m_islandFlag = false;
			}
			this.m_contactManager.findNewContacts();
		}
	}
	,drawJoint: function(joint) {
		var b1 = joint.getBodyA();
		var b2 = joint.getBodyB();
		var xf1 = b1.m_xf;
		var xf2 = b2.m_xf;
		var x1 = xf1.position;
		var x2 = xf2.position;
		var p1 = joint.getAnchorA();
		var p2 = joint.getAnchorB();
		var color = box2D.dynamics.B2World.s_jointColor;
		var _g = joint.m_type;
		switch(_g) {
		case 3:
			this.m_debugDraw.drawSegment(p1,p2,color);
			break;
		case 4:
			var pulley;
			pulley = js.Boot.__cast(joint , box2D.dynamics.joints.B2PulleyJoint);
			var s1 = pulley.getGroundAnchorA();
			var s2 = pulley.getGroundAnchorB();
			this.m_debugDraw.drawSegment(s1,p1,color);
			this.m_debugDraw.drawSegment(s2,p2,color);
			this.m_debugDraw.drawSegment(s1,s2,color);
			break;
		case 5:
			this.m_debugDraw.drawSegment(p1,p2,color);
			break;
		default:
			if(b1 != this.m_groundBody) this.m_debugDraw.drawSegment(x1,p1,color);
			this.m_debugDraw.drawSegment(p1,p2,color);
			if(b2 != this.m_groundBody) this.m_debugDraw.drawSegment(x2,p2,color);
		}
	}
	,drawShape: function(shape,xf,color) {
		var _g = shape.m_type;
		switch(_g) {
		case 1:
			var circle;
			circle = js.Boot.__cast(shape , box2D.collision.shapes.B2CircleShape);
			var center = box2D.common.math.B2Math.mulX(xf,circle.m_p);
			var radius = circle.m_radius;
			var axis = xf.R.col1;
			this.m_debugDraw.drawSolidCircle(center,radius,axis,color);
			break;
		case 2:
			var i;
			var poly;
			poly = js.Boot.__cast(shape , box2D.collision.shapes.B2PolygonShape);
			var vertexCount = poly.getVertexCount();
			var localVertices = poly.getVertices();
			var vertices = new Array();
			var _g1 = 0;
			while(_g1 < vertexCount) {
				var i1 = _g1++;
				vertices[i1] = box2D.common.math.B2Math.mulX(xf,localVertices[i1]);
			}
			this.m_debugDraw.drawSolidPolygon(vertices,vertexCount,color);
			break;
		case 3:
			var edge;
			edge = js.Boot.__cast(shape , box2D.collision.shapes.B2EdgeShape);
			this.m_debugDraw.drawSegment(box2D.common.math.B2Math.mulX(xf,edge.getVertex1()),box2D.common.math.B2Math.mulX(xf,edge.getVertex2()),color);
			break;
		default:
		}
	}
	,__class__: box2D.dynamics.B2World
};
box2D.dynamics.contacts = {};
box2D.dynamics.contacts.B2Contact = function() {
	this.m_toi = 0;
	this.m_flags = 0;
	this.m_nodeA = new box2D.dynamics.contacts.B2ContactEdge();
	this.m_nodeB = new box2D.dynamics.contacts.B2ContactEdge();
	this.m_manifold = new box2D.collision.B2Manifold();
	this.m_oldManifold = new box2D.collision.B2Manifold();
};
$hxClasses["box2D.dynamics.contacts.B2Contact"] = box2D.dynamics.contacts.B2Contact;
box2D.dynamics.contacts.B2Contact.__name__ = ["box2D","dynamics","contacts","B2Contact"];
box2D.dynamics.contacts.B2Contact.prototype = {
	getManifold: function() {
		return this.m_manifold;
	}
	,getWorldManifold: function(worldManifold) {
		var bodyA = this.m_fixtureA.getBody();
		var bodyB = this.m_fixtureB.getBody();
		var shapeA = this.m_fixtureA.getShape();
		var shapeB = this.m_fixtureB.getShape();
		worldManifold.initialize(this.m_manifold,bodyA.getTransform(),shapeA.m_radius,bodyB.getTransform(),shapeB.m_radius);
	}
	,isTouching: function() {
		return (this.m_flags & box2D.dynamics.contacts.B2Contact.e_touchingFlag) == box2D.dynamics.contacts.B2Contact.e_touchingFlag;
	}
	,isContinuous: function() {
		return (this.m_flags & box2D.dynamics.contacts.B2Contact.e_continuousFlag) == box2D.dynamics.contacts.B2Contact.e_continuousFlag;
	}
	,setSensor: function(sensor) {
		if(sensor) this.m_flags |= box2D.dynamics.contacts.B2Contact.e_sensorFlag; else this.m_flags &= ~box2D.dynamics.contacts.B2Contact.e_sensorFlag;
	}
	,isSensor: function() {
		return (this.m_flags & box2D.dynamics.contacts.B2Contact.e_sensorFlag) == box2D.dynamics.contacts.B2Contact.e_sensorFlag;
	}
	,setEnabled: function(flag) {
		if(flag) this.m_flags |= box2D.dynamics.contacts.B2Contact.e_enabledFlag; else this.m_flags &= ~box2D.dynamics.contacts.B2Contact.e_enabledFlag;
	}
	,isEnabled: function() {
		return (this.m_flags & box2D.dynamics.contacts.B2Contact.e_enabledFlag) == box2D.dynamics.contacts.B2Contact.e_enabledFlag;
	}
	,getNext: function() {
		return this.m_next;
	}
	,getFixtureA: function() {
		return this.m_fixtureA;
	}
	,getFixtureB: function() {
		return this.m_fixtureB;
	}
	,flagForFiltering: function() {
		this.m_flags |= box2D.dynamics.contacts.B2Contact.e_filterFlag;
	}
	,reset: function(fixtureA,fixtureB) {
		this.m_flags = box2D.dynamics.contacts.B2Contact.e_enabledFlag;
		if(fixtureA == null || fixtureB == null) {
			this.m_fixtureA = null;
			this.m_fixtureB = null;
			return;
		}
		if(fixtureA.isSensor() || fixtureB.isSensor()) this.m_flags |= box2D.dynamics.contacts.B2Contact.e_sensorFlag;
		var bodyA = fixtureA.getBody();
		var bodyB = fixtureB.getBody();
		if(bodyA.getType() != 2 || bodyA.isBullet() || bodyB.getType() != 2 || bodyB.isBullet()) this.m_flags |= box2D.dynamics.contacts.B2Contact.e_continuousFlag;
		this.m_fixtureA = fixtureA;
		this.m_fixtureB = fixtureB;
		this.m_manifold.m_pointCount = 0;
		this.m_prev = null;
		this.m_next = null;
		this.m_nodeA.contact = null;
		this.m_nodeA.prev = null;
		this.m_nodeA.next = null;
		this.m_nodeA.other = null;
		this.m_nodeB.contact = null;
		this.m_nodeB.prev = null;
		this.m_nodeB.next = null;
		this.m_nodeB.other = null;
	}
	,update: function(listener) {
		var tManifold = this.m_oldManifold;
		this.m_oldManifold = this.m_manifold;
		this.m_manifold = tManifold;
		this.m_flags |= box2D.dynamics.contacts.B2Contact.e_enabledFlag;
		var touching = false;
		var wasTouching = (this.m_flags & box2D.dynamics.contacts.B2Contact.e_touchingFlag) == box2D.dynamics.contacts.B2Contact.e_touchingFlag;
		var bodyA = this.m_fixtureA.m_body;
		var bodyB = this.m_fixtureB.m_body;
		var aabbOverlap = this.m_fixtureA.m_aabb.testOverlap(this.m_fixtureB.m_aabb);
		if((this.m_flags & box2D.dynamics.contacts.B2Contact.e_sensorFlag) != 0) {
			if(aabbOverlap) {
				var shapeA = this.m_fixtureA.getShape();
				var shapeB = this.m_fixtureB.getShape();
				var xfA = bodyA.getTransform();
				var xfB = bodyB.getTransform();
				touching = box2D.collision.shapes.B2Shape.testOverlap(shapeA,xfA,shapeB,xfB);
			}
			this.m_manifold.m_pointCount = 0;
		} else {
			if(bodyA.getType() != box2D.dynamics.B2Body.b2_dynamicBody || bodyA.isBullet() || bodyB.getType() != box2D.dynamics.B2Body.b2_dynamicBody || bodyB.isBullet()) this.m_flags |= box2D.dynamics.contacts.B2Contact.e_continuousFlag; else this.m_flags &= ~box2D.dynamics.contacts.B2Contact.e_continuousFlag;
			if(aabbOverlap) {
				this.evaluate();
				touching = this.m_manifold.m_pointCount > 0;
				var _g1 = 0;
				var _g = this.m_manifold.m_pointCount;
				while(_g1 < _g) {
					var i = _g1++;
					var mp2 = this.m_manifold.m_points[i];
					mp2.m_normalImpulse = 0.0;
					mp2.m_tangentImpulse = 0.0;
					var id2 = mp2.m_id;
					var _g3 = 0;
					var _g2 = this.m_oldManifold.m_pointCount;
					while(_g3 < _g2) {
						var j = _g3++;
						var mp1 = this.m_oldManifold.m_points[j];
						if(mp1.m_id.get_key() == id2.get_key()) {
							mp2.m_normalImpulse = mp1.m_normalImpulse;
							mp2.m_tangentImpulse = mp1.m_tangentImpulse;
							break;
						}
					}
				}
			} else this.m_manifold.m_pointCount = 0;
			if(touching != wasTouching) {
				bodyA.setAwake(true);
				bodyB.setAwake(true);
			}
		}
		if(touching) this.m_flags |= box2D.dynamics.contacts.B2Contact.e_touchingFlag; else this.m_flags &= ~box2D.dynamics.contacts.B2Contact.e_touchingFlag;
		if(wasTouching == false && touching == true) listener.beginContact(this);
		if(wasTouching == true && touching == false) listener.endContact(this);
		if((this.m_flags & box2D.dynamics.contacts.B2Contact.e_sensorFlag) == 0) listener.preSolve(this,this.m_oldManifold);
	}
	,evaluate: function() {
	}
	,computeTOI: function(sweepA,sweepB) {
		box2D.dynamics.contacts.B2Contact.s_input.proxyA.set(this.m_fixtureA.getShape());
		box2D.dynamics.contacts.B2Contact.s_input.proxyB.set(this.m_fixtureB.getShape());
		box2D.dynamics.contacts.B2Contact.s_input.sweepA = sweepA;
		box2D.dynamics.contacts.B2Contact.s_input.sweepB = sweepB;
		box2D.dynamics.contacts.B2Contact.s_input.tolerance = box2D.common.B2Settings.b2_linearSlop;
		return box2D.collision.B2TimeOfImpact.timeOfImpact(box2D.dynamics.contacts.B2Contact.s_input);
	}
	,__class__: box2D.dynamics.contacts.B2Contact
};
box2D.dynamics.contacts.B2CircleContact = function() {
	box2D.dynamics.contacts.B2Contact.call(this);
};
$hxClasses["box2D.dynamics.contacts.B2CircleContact"] = box2D.dynamics.contacts.B2CircleContact;
box2D.dynamics.contacts.B2CircleContact.__name__ = ["box2D","dynamics","contacts","B2CircleContact"];
box2D.dynamics.contacts.B2CircleContact.create = function(allocator) {
	return new box2D.dynamics.contacts.B2CircleContact();
};
box2D.dynamics.contacts.B2CircleContact.destroy = function(contact,allocator) {
};
box2D.dynamics.contacts.B2CircleContact.__super__ = box2D.dynamics.contacts.B2Contact;
box2D.dynamics.contacts.B2CircleContact.prototype = $extend(box2D.dynamics.contacts.B2Contact.prototype,{
	reset: function(fixtureA,fixtureB) {
		box2D.dynamics.contacts.B2Contact.prototype.reset.call(this,fixtureA,fixtureB);
	}
	,evaluate: function() {
		var bA = this.m_fixtureA.getBody();
		var bB = this.m_fixtureB.getBody();
		box2D.collision.B2Collision.collideCircles(this.m_manifold,js.Boot.__cast(this.m_fixtureA.getShape() , box2D.collision.shapes.B2CircleShape),bA.m_xf,js.Boot.__cast(this.m_fixtureB.getShape() , box2D.collision.shapes.B2CircleShape),bB.m_xf);
	}
	,__class__: box2D.dynamics.contacts.B2CircleContact
});
box2D.dynamics.contacts.B2ContactConstraint = function() {
	this.pointCount = 0;
	this.restitution = 0;
	this.friction = 0;
	this.radius = 0;
	this.localPlaneNormal = new box2D.common.math.B2Vec2();
	this.localPoint = new box2D.common.math.B2Vec2();
	this.normal = new box2D.common.math.B2Vec2();
	this.normalMass = new box2D.common.math.B2Mat22();
	this.K = new box2D.common.math.B2Mat22();
	this.points = new Array();
	var _g1 = 0;
	var _g = box2D.common.B2Settings.b2_maxManifoldPoints;
	while(_g1 < _g) {
		var i = _g1++;
		this.points[i] = new box2D.dynamics.contacts.B2ContactConstraintPoint();
	}
};
$hxClasses["box2D.dynamics.contacts.B2ContactConstraint"] = box2D.dynamics.contacts.B2ContactConstraint;
box2D.dynamics.contacts.B2ContactConstraint.__name__ = ["box2D","dynamics","contacts","B2ContactConstraint"];
box2D.dynamics.contacts.B2ContactConstraint.prototype = {
	__class__: box2D.dynamics.contacts.B2ContactConstraint
};
box2D.dynamics.contacts.B2ContactConstraintPoint = function() {
	this.localPoint = new box2D.common.math.B2Vec2();
	this.rA = new box2D.common.math.B2Vec2();
	this.rB = new box2D.common.math.B2Vec2();
};
$hxClasses["box2D.dynamics.contacts.B2ContactConstraintPoint"] = box2D.dynamics.contacts.B2ContactConstraintPoint;
box2D.dynamics.contacts.B2ContactConstraintPoint.__name__ = ["box2D","dynamics","contacts","B2ContactConstraintPoint"];
box2D.dynamics.contacts.B2ContactConstraintPoint.prototype = {
	__class__: box2D.dynamics.contacts.B2ContactConstraintPoint
};
box2D.dynamics.contacts.B2ContactEdge = function() {
};
$hxClasses["box2D.dynamics.contacts.B2ContactEdge"] = box2D.dynamics.contacts.B2ContactEdge;
box2D.dynamics.contacts.B2ContactEdge.__name__ = ["box2D","dynamics","contacts","B2ContactEdge"];
box2D.dynamics.contacts.B2ContactEdge.prototype = {
	__class__: box2D.dynamics.contacts.B2ContactEdge
};
box2D.dynamics.contacts.B2ContactFactory = function(allocator) {
	this.m_allocator = allocator;
	this.initializeRegisters();
};
$hxClasses["box2D.dynamics.contacts.B2ContactFactory"] = box2D.dynamics.contacts.B2ContactFactory;
box2D.dynamics.contacts.B2ContactFactory.__name__ = ["box2D","dynamics","contacts","B2ContactFactory"];
box2D.dynamics.contacts.B2ContactFactory.prototype = {
	addType: function(createFcn,destroyFcn,type1,type2) {
		this.m_registers[type1][type2].createFcn = createFcn;
		this.m_registers[type1][type2].destroyFcn = destroyFcn;
		this.m_registers[type1][type2].primary = true;
		if(type1 != type2) {
			this.m_registers[type2][type1].createFcn = createFcn;
			this.m_registers[type2][type1].destroyFcn = destroyFcn;
			this.m_registers[type2][type1].primary = false;
		}
	}
	,initializeRegisters: function() {
		this.m_registers = new Array();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.m_registers[i] = new Array();
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				this.m_registers[i][j] = new box2D.dynamics.contacts.B2ContactRegister();
			}
		}
		this.addType(box2D.dynamics.contacts.B2CircleContact.create,box2D.dynamics.contacts.B2CircleContact.destroy,1,1);
		this.addType(box2D.dynamics.contacts.B2PolyAndCircleContact.create,box2D.dynamics.contacts.B2PolyAndCircleContact.destroy,2,1);
		this.addType(box2D.dynamics.contacts.B2PolygonContact.create,box2D.dynamics.contacts.B2PolygonContact.destroy,2,2);
		this.addType(box2D.dynamics.contacts.B2EdgeAndCircleContact.create,box2D.dynamics.contacts.B2EdgeAndCircleContact.destroy,3,1);
		this.addType(box2D.dynamics.contacts.B2PolyAndEdgeContact.create,box2D.dynamics.contacts.B2PolyAndEdgeContact.destroy,2,3);
	}
	,create: function(fixtureA,fixtureB) {
		var type1 = fixtureA.getType();
		var type2 = fixtureB.getType();
		var reg = this.m_registers[type1][type2];
		var c;
		if(reg.pool != null) {
			c = reg.pool;
			reg.pool = c.m_next;
			reg.poolCount--;
			c.reset(fixtureA,fixtureB);
			return c;
		}
		var createFcn = reg.createFcn;
		if(createFcn != null) {
			if(reg.primary) {
				c = createFcn(this.m_allocator);
				c.reset(fixtureA,fixtureB);
				return c;
			} else {
				c = createFcn(this.m_allocator);
				c.reset(fixtureB,fixtureA);
				return c;
			}
		} else return null;
	}
	,destroy: function(contact) {
		if(contact.m_manifold.m_pointCount > 0) {
			contact.m_fixtureA.m_body.setAwake(true);
			contact.m_fixtureB.m_body.setAwake(true);
		}
		var type1 = contact.m_fixtureA.getType();
		var type2 = contact.m_fixtureB.getType();
		var reg = this.m_registers[type1][type2];
		reg.poolCount++;
		contact.m_next = reg.pool;
		reg.pool = contact;
		var destroyFcn = reg.destroyFcn;
		destroyFcn(contact,this.m_allocator);
	}
	,__class__: box2D.dynamics.contacts.B2ContactFactory
};
box2D.dynamics.contacts.B2ContactRegister = function() {
	this.poolCount = 0;
};
$hxClasses["box2D.dynamics.contacts.B2ContactRegister"] = box2D.dynamics.contacts.B2ContactRegister;
box2D.dynamics.contacts.B2ContactRegister.__name__ = ["box2D","dynamics","contacts","B2ContactRegister"];
box2D.dynamics.contacts.B2ContactRegister.prototype = {
	__class__: box2D.dynamics.contacts.B2ContactRegister
};
box2D.dynamics.contacts.B2PositionSolverManifold = function() {
	this.m_normal = new box2D.common.math.B2Vec2();
	this.m_separations = new Array();
	this.m_points = new Array();
	var _g1 = 0;
	var _g = box2D.common.B2Settings.b2_maxManifoldPoints;
	while(_g1 < _g) {
		var i = _g1++;
		this.m_points[i] = new box2D.common.math.B2Vec2();
	}
};
$hxClasses["box2D.dynamics.contacts.B2PositionSolverManifold"] = box2D.dynamics.contacts.B2PositionSolverManifold;
box2D.dynamics.contacts.B2PositionSolverManifold.__name__ = ["box2D","dynamics","contacts","B2PositionSolverManifold"];
box2D.dynamics.contacts.B2PositionSolverManifold.prototype = {
	initialize: function(cc) {
		box2D.common.B2Settings.b2Assert(cc.pointCount > 0);
		var i;
		var clipPointX;
		var clipPointY;
		var tMat;
		var tVec;
		var planePointX;
		var planePointY;
		var _g = cc.type;
		switch(_g[1]) {
		case 0:
			tMat = cc.bodyA.m_xf.R;
			tVec = cc.localPoint;
			var pointAX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			var pointAY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tMat = cc.bodyB.m_xf.R;
			tVec = cc.points[0].localPoint;
			var pointBX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			var pointBY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			var dX = pointBX - pointAX;
			var dY = pointBY - pointAY;
			var d2 = dX * dX + dY * dY;
			if(d2 > Number.MIN_VALUE * Number.MIN_VALUE) {
				var d = Math.sqrt(d2);
				this.m_normal.x = dX / d;
				this.m_normal.y = dY / d;
			} else {
				this.m_normal.x = 1.0;
				this.m_normal.y = 0.0;
			}
			this.m_points[0].x = 0.5 * (pointAX + pointBX);
			this.m_points[0].y = 0.5 * (pointAY + pointBY);
			this.m_separations[0] = dX * this.m_normal.x + dY * this.m_normal.y - cc.radius;
			break;
		case 1:
			tMat = cc.bodyA.m_xf.R;
			tVec = cc.localPlaneNormal;
			this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = cc.bodyA.m_xf.R;
			tVec = cc.localPoint;
			planePointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			planePointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tMat = cc.bodyB.m_xf.R;
			var _g2 = 0;
			var _g1 = cc.pointCount;
			while(_g2 < _g1) {
				var i1 = _g2++;
				tVec = cc.points[i1].localPoint;
				clipPointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				clipPointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				this.m_separations[i1] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
				this.m_points[i1].x = clipPointX;
				this.m_points[i1].y = clipPointY;
			}
			break;
		case 2:
			tMat = cc.bodyB.m_xf.R;
			tVec = cc.localPlaneNormal;
			this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = cc.bodyB.m_xf.R;
			tVec = cc.localPoint;
			planePointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			planePointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tMat = cc.bodyA.m_xf.R;
			var _g21 = 0;
			var _g11 = cc.pointCount;
			while(_g21 < _g11) {
				var i2 = _g21++;
				tVec = cc.points[i2].localPoint;
				clipPointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				clipPointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				this.m_separations[i2] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
				this.m_points[i2].set(clipPointX,clipPointY);
			}
			this.m_normal.x *= -1;
			this.m_normal.y *= -1;
			break;
		}
	}
	,__class__: box2D.dynamics.contacts.B2PositionSolverManifold
};
box2D.dynamics.contacts.B2ContactSolver = function() {
	this.m_constraintCount = 0;
	this.m_step = new box2D.dynamics.B2TimeStep();
	this.m_constraints = new Array();
};
$hxClasses["box2D.dynamics.contacts.B2ContactSolver"] = box2D.dynamics.contacts.B2ContactSolver;
box2D.dynamics.contacts.B2ContactSolver.__name__ = ["box2D","dynamics","contacts","B2ContactSolver"];
box2D.dynamics.contacts.B2ContactSolver.prototype = {
	initialize: function(step,contacts,contactCount,allocator) {
		var contact;
		this.m_step.set(step);
		this.m_allocator = allocator;
		var i;
		var tVec;
		var tMat;
		this.m_constraintCount = contactCount;
		while(this.m_constraints.length < this.m_constraintCount) this.m_constraints[this.m_constraints.length] = new box2D.dynamics.contacts.B2ContactConstraint();
		var _g = 0;
		while(_g < contactCount) {
			var i1 = _g++;
			contact = contacts[i1];
			var fixtureA = contact.m_fixtureA;
			var fixtureB = contact.m_fixtureB;
			var shapeA = fixtureA.m_shape;
			var shapeB = fixtureB.m_shape;
			var radiusA = shapeA.m_radius;
			var radiusB = shapeB.m_radius;
			var bodyA = fixtureA.m_body;
			var bodyB = fixtureB.m_body;
			var manifold = contact.getManifold();
			var friction = box2D.common.B2Settings.b2MixFriction(fixtureA.getFriction(),fixtureB.getFriction());
			var restitution = box2D.common.B2Settings.b2MixRestitution(fixtureA.getRestitution(),fixtureB.getRestitution());
			var vAX = bodyA.m_linearVelocity.x;
			var vAY = bodyA.m_linearVelocity.y;
			var vBX = bodyB.m_linearVelocity.x;
			var vBY = bodyB.m_linearVelocity.y;
			var wA = bodyA.m_angularVelocity;
			var wB = bodyB.m_angularVelocity;
			box2D.common.B2Settings.b2Assert(manifold.m_pointCount > 0);
			box2D.dynamics.contacts.B2ContactSolver.s_worldManifold.initialize(manifold,bodyA.m_xf,radiusA,bodyB.m_xf,radiusB);
			var normalX = box2D.dynamics.contacts.B2ContactSolver.s_worldManifold.m_normal.x;
			var normalY = box2D.dynamics.contacts.B2ContactSolver.s_worldManifold.m_normal.y;
			var cc = this.m_constraints[i1];
			cc.bodyA = bodyA;
			cc.bodyB = bodyB;
			cc.manifold = manifold;
			cc.normal.x = normalX;
			cc.normal.y = normalY;
			cc.pointCount = manifold.m_pointCount;
			cc.friction = friction;
			cc.restitution = restitution;
			cc.localPlaneNormal.x = manifold.m_localPlaneNormal.x;
			cc.localPlaneNormal.y = manifold.m_localPlaneNormal.y;
			cc.localPoint.x = manifold.m_localPoint.x;
			cc.localPoint.y = manifold.m_localPoint.y;
			cc.radius = radiusA + radiusB;
			cc.type = manifold.m_type;
			var _g2 = 0;
			var _g1 = cc.pointCount;
			while(_g2 < _g1) {
				var k = _g2++;
				var cp = manifold.m_points[k];
				var ccp = cc.points[k];
				ccp.normalImpulse = cp.m_normalImpulse;
				ccp.tangentImpulse = cp.m_tangentImpulse;
				ccp.localPoint.setV(cp.m_localPoint);
				var rAX = ccp.rA.x = box2D.dynamics.contacts.B2ContactSolver.s_worldManifold.m_points[k].x - bodyA.m_sweep.c.x;
				var rAY = ccp.rA.y = box2D.dynamics.contacts.B2ContactSolver.s_worldManifold.m_points[k].y - bodyA.m_sweep.c.y;
				var rBX = ccp.rB.x = box2D.dynamics.contacts.B2ContactSolver.s_worldManifold.m_points[k].x - bodyB.m_sweep.c.x;
				var rBY = ccp.rB.y = box2D.dynamics.contacts.B2ContactSolver.s_worldManifold.m_points[k].y - bodyB.m_sweep.c.y;
				var rnA = rAX * normalY - rAY * normalX;
				var rnB = rBX * normalY - rBY * normalX;
				rnA *= rnA;
				rnB *= rnB;
				var kNormal = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rnA + bodyB.m_invI * rnB;
				ccp.normalMass = 1.0 / kNormal;
				var kEqualized = bodyA.m_mass * bodyA.m_invMass + bodyB.m_mass * bodyB.m_invMass;
				kEqualized += bodyA.m_mass * bodyA.m_invI * rnA + bodyB.m_mass * bodyB.m_invI * rnB;
				ccp.equalizedMass = 1.0 / kEqualized;
				var tangentX = normalY;
				var tangentY = -normalX;
				var rtA = rAX * tangentY - rAY * tangentX;
				var rtB = rBX * tangentY - rBY * tangentX;
				rtA *= rtA;
				rtB *= rtB;
				var kTangent = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rtA + bodyB.m_invI * rtB;
				ccp.tangentMass = 1.0 / kTangent;
				ccp.velocityBias = 0.0;
				var tX = vBX + -wB * rBY - vAX - -wA * rAY;
				var tY = vBY + wB * rBX - vAY - wA * rAX;
				var vRel = cc.normal.x * tX + cc.normal.y * tY;
				if(vRel < -box2D.common.B2Settings.b2_velocityThreshold) ccp.velocityBias += -cc.restitution * vRel;
			}
			if(cc.pointCount == 2) {
				var ccp1 = cc.points[0];
				var ccp2 = cc.points[1];
				var invMassA = bodyA.m_invMass;
				var invIA = bodyA.m_invI;
				var invMassB = bodyB.m_invMass;
				var invIB = bodyB.m_invI;
				var rn1A = ccp1.rA.x * normalY - ccp1.rA.y * normalX;
				var rn1B = ccp1.rB.x * normalY - ccp1.rB.y * normalX;
				var rn2A = ccp2.rA.x * normalY - ccp2.rA.y * normalX;
				var rn2B = ccp2.rB.x * normalY - ccp2.rB.y * normalX;
				var k11 = invMassA + invMassB + invIA * rn1A * rn1A + invIB * rn1B * rn1B;
				var k22 = invMassA + invMassB + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
				var k12 = invMassA + invMassB + invIA * rn1A * rn2A + invIB * rn1B * rn2B;
				var k_maxConditionNumber = 100.0;
				if(k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {
					cc.K.col1.set(k11,k12);
					cc.K.col2.set(k12,k22);
					cc.K.getInverse(cc.normalMass);
				} else cc.pointCount = 1;
			}
		}
	}
	,initVelocityConstraints: function(step) {
		var tVec;
		var tVec2;
		var tMat;
		var _g1 = 0;
		var _g = this.m_constraintCount;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var invMassA = bodyA.m_invMass;
			var invIA = bodyA.m_invI;
			var invMassB = bodyB.m_invMass;
			var invIB = bodyB.m_invI;
			var normalX = c.normal.x;
			var normalY = c.normal.y;
			var tangentX = normalY;
			var tangentY = -normalX;
			var tX;
			var j;
			var tCount;
			if(step.warmStarting) {
				tCount = c.pointCount;
				var _g2 = 0;
				while(_g2 < tCount) {
					var j1 = _g2++;
					var ccp = c.points[j1];
					ccp.normalImpulse *= step.dtRatio;
					ccp.tangentImpulse *= step.dtRatio;
					var PX = ccp.normalImpulse * normalX + ccp.tangentImpulse * tangentX;
					var PY = ccp.normalImpulse * normalY + ccp.tangentImpulse * tangentY;
					bodyA.m_angularVelocity -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
					bodyA.m_linearVelocity.x -= invMassA * PX;
					bodyA.m_linearVelocity.y -= invMassA * PY;
					bodyB.m_angularVelocity += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
					bodyB.m_linearVelocity.x += invMassB * PX;
					bodyB.m_linearVelocity.y += invMassB * PY;
				}
			} else {
				tCount = c.pointCount;
				var _g21 = 0;
				while(_g21 < tCount) {
					var j2 = _g21++;
					var ccp2 = c.points[j2];
					ccp2.normalImpulse = 0.0;
					ccp2.tangentImpulse = 0.0;
				}
			}
		}
	}
	,solveVelocityConstraints: function() {
		var j;
		var ccp;
		var rAX;
		var rAY;
		var rBX;
		var rBY;
		var dvX;
		var dvY;
		var vn;
		var vt;
		var lambda;
		var maxFriction;
		var newImpulse;
		var PX;
		var PY;
		var dX;
		var dY;
		var P1X;
		var P1Y;
		var P2X;
		var P2Y;
		var tMat;
		var tVec;
		var _g1 = 0;
		var _g = this.m_constraintCount;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var wA = bodyA.m_angularVelocity;
			var wB = bodyB.m_angularVelocity;
			var vA = bodyA.m_linearVelocity;
			var vB = bodyB.m_linearVelocity;
			var invMassA = bodyA.m_invMass;
			var invIA = bodyA.m_invI;
			var invMassB = bodyB.m_invMass;
			var invIB = bodyB.m_invI;
			var normalX = c.normal.x;
			var normalY = c.normal.y;
			var tangentX = normalY;
			var tangentY = -normalX;
			var friction = c.friction;
			var tX;
			var _g3 = 0;
			var _g2 = c.pointCount;
			while(_g3 < _g2) {
				var j1 = _g3++;
				ccp = c.points[j1];
				dvX = vB.x - wB * ccp.rB.y - vA.x + wA * ccp.rA.y;
				dvY = vB.y + wB * ccp.rB.x - vA.y - wA * ccp.rA.x;
				vt = dvX * tangentX + dvY * tangentY;
				lambda = ccp.tangentMass * -vt;
				maxFriction = friction * ccp.normalImpulse;
				newImpulse = box2D.common.math.B2Math.clamp(ccp.tangentImpulse + lambda,-maxFriction,maxFriction);
				lambda = newImpulse - ccp.tangentImpulse;
				PX = lambda * tangentX;
				PY = lambda * tangentY;
				vA.x -= invMassA * PX;
				vA.y -= invMassA * PY;
				wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
				vB.x += invMassB * PX;
				vB.y += invMassB * PY;
				wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
				ccp.tangentImpulse = newImpulse;
			}
			var tCount = c.pointCount;
			if(c.pointCount == 1) {
				ccp = c.points[0];
				dvX = vB.x + -wB * ccp.rB.y - vA.x - -wA * ccp.rA.y;
				dvY = vB.y + wB * ccp.rB.x - vA.y - wA * ccp.rA.x;
				vn = dvX * normalX + dvY * normalY;
				lambda = -ccp.normalMass * (vn - ccp.velocityBias);
				newImpulse = ccp.normalImpulse + lambda;
				if(newImpulse > 0) newImpulse = newImpulse; else newImpulse = 0.0;
				lambda = newImpulse - ccp.normalImpulse;
				PX = lambda * normalX;
				PY = lambda * normalY;
				vA.x -= invMassA * PX;
				vA.y -= invMassA * PY;
				wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
				vB.x += invMassB * PX;
				vB.y += invMassB * PY;
				wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
				ccp.normalImpulse = newImpulse;
			} else {
				var cp1 = c.points[0];
				var cp2 = c.points[1];
				var aX = cp1.normalImpulse;
				var aY = cp2.normalImpulse;
				var dv1X = vB.x - wB * cp1.rB.y - vA.x + wA * cp1.rA.y;
				var dv1Y = vB.y + wB * cp1.rB.x - vA.y - wA * cp1.rA.x;
				var dv2X = vB.x - wB * cp2.rB.y - vA.x + wA * cp2.rA.y;
				var dv2Y = vB.y + wB * cp2.rB.x - vA.y - wA * cp2.rA.x;
				var vn1 = dv1X * normalX + dv1Y * normalY;
				var vn2 = dv2X * normalX + dv2Y * normalY;
				var bX = vn1 - cp1.velocityBias;
				var bY = vn2 - cp2.velocityBias;
				tMat = c.K;
				bX -= tMat.col1.x * aX + tMat.col2.x * aY;
				bY -= tMat.col1.y * aX + tMat.col2.y * aY;
				var k_errorTol = 0.001;
				var _g21 = 0;
				while(_g21 < 1) {
					var i1 = _g21++;
					tMat = c.normalMass;
					var xX = -(tMat.col1.x * bX + tMat.col2.x * bY);
					var xY = -(tMat.col1.y * bX + tMat.col2.y * bY);
					if(xX >= 0.0 && xY >= 0.0) {
						dX = xX - aX;
						dY = xY - aY;
						P1X = dX * normalX;
						P1Y = dX * normalY;
						P2X = dY * normalX;
						P2Y = dY * normalY;
						vA.x -= invMassA * (P1X + P2X);
						vA.y -= invMassA * (P1Y + P2Y);
						wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
						vB.x += invMassB * (P1X + P2X);
						vB.y += invMassB * (P1Y + P2Y);
						wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
						cp1.normalImpulse = xX;
						cp2.normalImpulse = xY;
						break;
					}
					xX = -cp1.normalMass * bX;
					xY = 0.0;
					vn1 = 0.0;
					vn2 = c.K.col1.y * xX + bY;
					if(xX >= 0.0 && vn2 >= 0.0) {
						dX = xX - aX;
						dY = xY - aY;
						P1X = dX * normalX;
						P1Y = dX * normalY;
						P2X = dY * normalX;
						P2Y = dY * normalY;
						vA.x -= invMassA * (P1X + P2X);
						vA.y -= invMassA * (P1Y + P2Y);
						wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
						vB.x += invMassB * (P1X + P2X);
						vB.y += invMassB * (P1Y + P2Y);
						wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
						cp1.normalImpulse = xX;
						cp2.normalImpulse = xY;
						break;
					}
					xX = 0.0;
					xY = -cp2.normalMass * bY;
					vn1 = c.K.col2.x * xY + bX;
					vn2 = 0.0;
					if(xY >= 0.0 && vn1 >= 0.0) {
						dX = xX - aX;
						dY = xY - aY;
						P1X = dX * normalX;
						P1Y = dX * normalY;
						P2X = dY * normalX;
						P2Y = dY * normalY;
						vA.x -= invMassA * (P1X + P2X);
						vA.y -= invMassA * (P1Y + P2Y);
						wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
						vB.x += invMassB * (P1X + P2X);
						vB.y += invMassB * (P1Y + P2Y);
						wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
						cp1.normalImpulse = xX;
						cp2.normalImpulse = xY;
						break;
					}
					xX = 0.0;
					xY = 0.0;
					vn1 = bX;
					vn2 = bY;
					if(vn1 >= 0.0 && vn2 >= 0.0) {
						dX = xX - aX;
						dY = xY - aY;
						P1X = dX * normalX;
						P1Y = dX * normalY;
						P2X = dY * normalX;
						P2Y = dY * normalY;
						vA.x -= invMassA * (P1X + P2X);
						vA.y -= invMassA * (P1Y + P2Y);
						wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
						vB.x += invMassB * (P1X + P2X);
						vB.y += invMassB * (P1Y + P2Y);
						wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
						cp1.normalImpulse = xX;
						cp2.normalImpulse = xY;
						break;
					}
					break;
				}
			}
			bodyA.m_angularVelocity = wA;
			bodyB.m_angularVelocity = wB;
		}
	}
	,finalizeVelocityConstraints: function() {
		var _g1 = 0;
		var _g = this.m_constraintCount;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.m_constraints[i];
			var m = c.manifold;
			var _g3 = 0;
			var _g2 = c.pointCount;
			while(_g3 < _g2) {
				var j = _g3++;
				var point1 = m.m_points[j];
				var point2 = c.points[j];
				point1.m_normalImpulse = point2.normalImpulse;
				point1.m_tangentImpulse = point2.tangentImpulse;
			}
		}
	}
	,solvePositionConstraints: function(baumgarte) {
		var minSeparation = 0.0;
		var _g1 = 0;
		var _g = this.m_constraintCount;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var invMassA = bodyA.m_mass * bodyA.m_invMass;
			var invIA = bodyA.m_mass * bodyA.m_invI;
			var invMassB = bodyB.m_mass * bodyB.m_invMass;
			var invIB = bodyB.m_mass * bodyB.m_invI;
			box2D.dynamics.contacts.B2ContactSolver.s_psm.initialize(c);
			var normal = box2D.dynamics.contacts.B2ContactSolver.s_psm.m_normal;
			var _g3 = 0;
			var _g2 = c.pointCount;
			while(_g3 < _g2) {
				var j = _g3++;
				var ccp = c.points[j];
				var point = box2D.dynamics.contacts.B2ContactSolver.s_psm.m_points[j];
				var separation = box2D.dynamics.contacts.B2ContactSolver.s_psm.m_separations[j];
				var rAX = point.x - bodyA.m_sweep.c.x;
				var rAY = point.y - bodyA.m_sweep.c.y;
				var rBX = point.x - bodyB.m_sweep.c.x;
				var rBY = point.y - bodyB.m_sweep.c.y;
				if(minSeparation < separation) minSeparation = minSeparation; else minSeparation = separation;
				var C = box2D.common.math.B2Math.clamp(baumgarte * (separation + box2D.common.B2Settings.b2_linearSlop),-box2D.common.B2Settings.b2_maxLinearCorrection,0.0);
				var impulse = -ccp.equalizedMass * C;
				var PX = impulse * normal.x;
				var PY = impulse * normal.y;
				bodyA.m_sweep.c.x -= invMassA * PX;
				bodyA.m_sweep.c.y -= invMassA * PY;
				bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);
				bodyA.synchronizeTransform();
				bodyB.m_sweep.c.x += invMassB * PX;
				bodyB.m_sweep.c.y += invMassB * PY;
				bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);
				bodyB.synchronizeTransform();
			}
		}
		return minSeparation > -1.5 * box2D.common.B2Settings.b2_linearSlop;
	}
	,__class__: box2D.dynamics.contacts.B2ContactSolver
};
box2D.dynamics.contacts.B2EdgeAndCircleContact = function() {
	box2D.dynamics.contacts.B2Contact.call(this);
};
$hxClasses["box2D.dynamics.contacts.B2EdgeAndCircleContact"] = box2D.dynamics.contacts.B2EdgeAndCircleContact;
box2D.dynamics.contacts.B2EdgeAndCircleContact.__name__ = ["box2D","dynamics","contacts","B2EdgeAndCircleContact"];
box2D.dynamics.contacts.B2EdgeAndCircleContact.create = function(allocator) {
	return new box2D.dynamics.contacts.B2EdgeAndCircleContact();
};
box2D.dynamics.contacts.B2EdgeAndCircleContact.destroy = function(contact,allocator) {
};
box2D.dynamics.contacts.B2EdgeAndCircleContact.__super__ = box2D.dynamics.contacts.B2Contact;
box2D.dynamics.contacts.B2EdgeAndCircleContact.prototype = $extend(box2D.dynamics.contacts.B2Contact.prototype,{
	reset: function(fixtureA,fixtureB) {
		box2D.dynamics.contacts.B2Contact.prototype.reset.call(this,fixtureA,fixtureB);
	}
	,evaluate: function() {
		var bA = this.m_fixtureA.getBody();
		var bB = this.m_fixtureB.getBody();
		this.b2CollideEdgeAndCircle(this.m_manifold,js.Boot.__cast(this.m_fixtureA.getShape() , box2D.collision.shapes.B2EdgeShape),bA.m_xf,js.Boot.__cast(this.m_fixtureB.getShape() , box2D.collision.shapes.B2CircleShape),bB.m_xf);
	}
	,b2CollideEdgeAndCircle: function(manifold,edge,xf1,circle,xf2) {
	}
	,__class__: box2D.dynamics.contacts.B2EdgeAndCircleContact
});
box2D.dynamics.contacts.B2PolyAndCircleContact = function() {
	box2D.dynamics.contacts.B2Contact.call(this);
};
$hxClasses["box2D.dynamics.contacts.B2PolyAndCircleContact"] = box2D.dynamics.contacts.B2PolyAndCircleContact;
box2D.dynamics.contacts.B2PolyAndCircleContact.__name__ = ["box2D","dynamics","contacts","B2PolyAndCircleContact"];
box2D.dynamics.contacts.B2PolyAndCircleContact.create = function(allocator) {
	return new box2D.dynamics.contacts.B2PolyAndCircleContact();
};
box2D.dynamics.contacts.B2PolyAndCircleContact.destroy = function(contact,allocator) {
};
box2D.dynamics.contacts.B2PolyAndCircleContact.__super__ = box2D.dynamics.contacts.B2Contact;
box2D.dynamics.contacts.B2PolyAndCircleContact.prototype = $extend(box2D.dynamics.contacts.B2Contact.prototype,{
	reset: function(fixtureA,fixtureB) {
		box2D.dynamics.contacts.B2Contact.prototype.reset.call(this,fixtureA,fixtureB);
		box2D.common.B2Settings.b2Assert(fixtureA.getType() == 2);
		box2D.common.B2Settings.b2Assert(fixtureB.getType() == 1);
	}
	,evaluate: function() {
		var bA = this.m_fixtureA.m_body;
		var bB = this.m_fixtureB.m_body;
		box2D.collision.B2Collision.collidePolygonAndCircle(this.m_manifold,js.Boot.__cast(this.m_fixtureA.getShape() , box2D.collision.shapes.B2PolygonShape),bA.m_xf,js.Boot.__cast(this.m_fixtureB.getShape() , box2D.collision.shapes.B2CircleShape),bB.m_xf);
	}
	,__class__: box2D.dynamics.contacts.B2PolyAndCircleContact
});
box2D.dynamics.contacts.B2PolyAndEdgeContact = function() {
	box2D.dynamics.contacts.B2Contact.call(this);
};
$hxClasses["box2D.dynamics.contacts.B2PolyAndEdgeContact"] = box2D.dynamics.contacts.B2PolyAndEdgeContact;
box2D.dynamics.contacts.B2PolyAndEdgeContact.__name__ = ["box2D","dynamics","contacts","B2PolyAndEdgeContact"];
box2D.dynamics.contacts.B2PolyAndEdgeContact.create = function(allocator) {
	return new box2D.dynamics.contacts.B2PolyAndEdgeContact();
};
box2D.dynamics.contacts.B2PolyAndEdgeContact.destroy = function(contact,allocator) {
};
box2D.dynamics.contacts.B2PolyAndEdgeContact.__super__ = box2D.dynamics.contacts.B2Contact;
box2D.dynamics.contacts.B2PolyAndEdgeContact.prototype = $extend(box2D.dynamics.contacts.B2Contact.prototype,{
	reset: function(fixtureA,fixtureB) {
		box2D.dynamics.contacts.B2Contact.prototype.reset.call(this,fixtureA,fixtureB);
		box2D.common.B2Settings.b2Assert(fixtureA.getType() == 2);
		box2D.common.B2Settings.b2Assert(fixtureB.getType() == 3);
	}
	,evaluate: function() {
		var bA = this.m_fixtureA.getBody();
		var bB = this.m_fixtureB.getBody();
		this.b2CollidePolyAndEdge(this.m_manifold,js.Boot.__cast(this.m_fixtureA.getShape() , box2D.collision.shapes.B2PolygonShape),bA.m_xf,js.Boot.__cast(this.m_fixtureB.getShape() , box2D.collision.shapes.B2EdgeShape),bB.m_xf);
	}
	,b2CollidePolyAndEdge: function(manifold,polygon,xf1,edge,xf2) {
	}
	,__class__: box2D.dynamics.contacts.B2PolyAndEdgeContact
});
box2D.dynamics.contacts.B2PolygonContact = function() {
	box2D.dynamics.contacts.B2Contact.call(this);
};
$hxClasses["box2D.dynamics.contacts.B2PolygonContact"] = box2D.dynamics.contacts.B2PolygonContact;
box2D.dynamics.contacts.B2PolygonContact.__name__ = ["box2D","dynamics","contacts","B2PolygonContact"];
box2D.dynamics.contacts.B2PolygonContact.create = function(allocator) {
	return new box2D.dynamics.contacts.B2PolygonContact();
};
box2D.dynamics.contacts.B2PolygonContact.destroy = function(contact,allocator) {
};
box2D.dynamics.contacts.B2PolygonContact.__super__ = box2D.dynamics.contacts.B2Contact;
box2D.dynamics.contacts.B2PolygonContact.prototype = $extend(box2D.dynamics.contacts.B2Contact.prototype,{
	reset: function(fixtureA,fixtureB) {
		box2D.dynamics.contacts.B2Contact.prototype.reset.call(this,fixtureA,fixtureB);
	}
	,evaluate: function() {
		var bA = this.m_fixtureA.getBody();
		var bB = this.m_fixtureB.getBody();
		box2D.collision.B2Collision.collidePolygons(this.m_manifold,js.Boot.__cast(this.m_fixtureA.getShape() , box2D.collision.shapes.B2PolygonShape),bA.m_xf,js.Boot.__cast(this.m_fixtureB.getShape() , box2D.collision.shapes.B2PolygonShape),bB.m_xf);
	}
	,__class__: box2D.dynamics.contacts.B2PolygonContact
});
box2D.dynamics.controllers = {};
box2D.dynamics.controllers.B2Controller = function() {
	this.m_bodyCount = 0;
};
$hxClasses["box2D.dynamics.controllers.B2Controller"] = box2D.dynamics.controllers.B2Controller;
box2D.dynamics.controllers.B2Controller.__name__ = ["box2D","dynamics","controllers","B2Controller"];
box2D.dynamics.controllers.B2Controller.prototype = {
	step: function(step) {
	}
	,draw: function(debugDraw) {
	}
	,addBody: function(body) {
		var edge = new box2D.dynamics.controllers.B2ControllerEdge();
		edge.controller = this;
		edge.body = body;
		edge.nextBody = this.m_bodyList;
		edge.prevBody = null;
		this.m_bodyList = edge;
		if(edge.nextBody != null) edge.nextBody.prevBody = edge;
		this.m_bodyCount++;
		edge.nextController = body.m_controllerList;
		edge.prevController = null;
		body.m_controllerList = edge;
		if(edge.nextController != null) edge.nextController.prevController = edge;
		body.m_controllerCount++;
	}
	,removeBody: function(body) {
		var edge = body.m_controllerList;
		while(edge != null && edge.controller != this) edge = edge.nextController;
		if(edge.prevBody != null) edge.prevBody.nextBody = edge.nextBody;
		if(edge.nextBody != null) edge.nextBody.prevBody = edge.prevBody;
		if(edge.nextController != null) edge.nextController.prevController = edge.prevController;
		if(edge.prevController != null) edge.prevController.nextController = edge.nextController;
		if(this.m_bodyList == edge) this.m_bodyList = edge.nextBody;
		if(body.m_controllerList == edge) body.m_controllerList = edge.nextController;
		body.m_controllerCount--;
		this.m_bodyCount--;
	}
	,clear: function() {
		while(this.m_bodyList != null) this.removeBody(this.m_bodyList.body);
	}
	,getNext: function() {
		return this.m_next;
	}
	,getWorld: function() {
		return this.m_world;
	}
	,getBodyList: function() {
		return this.m_bodyList;
	}
	,__class__: box2D.dynamics.controllers.B2Controller
};
box2D.dynamics.controllers.B2ControllerEdge = function() {
};
$hxClasses["box2D.dynamics.controllers.B2ControllerEdge"] = box2D.dynamics.controllers.B2ControllerEdge;
box2D.dynamics.controllers.B2ControllerEdge.__name__ = ["box2D","dynamics","controllers","B2ControllerEdge"];
box2D.dynamics.controllers.B2ControllerEdge.prototype = {
	__class__: box2D.dynamics.controllers.B2ControllerEdge
};
box2D.dynamics.joints = {};
box2D.dynamics.joints.B2Joint = function(def) {
	this.m_edgeA = new box2D.dynamics.joints.B2JointEdge();
	this.m_edgeB = new box2D.dynamics.joints.B2JointEdge();
	this.m_localCenterA = new box2D.common.math.B2Vec2();
	this.m_localCenterB = new box2D.common.math.B2Vec2();
	box2D.common.B2Settings.b2Assert(def.bodyA != def.bodyB);
	this.m_type = def.type;
	this.m_prev = null;
	this.m_next = null;
	this.m_bodyA = def.bodyA;
	this.m_bodyB = def.bodyB;
	this.m_collideConnected = def.collideConnected;
	this.m_islandFlag = false;
	this.m_userData = def.userData;
};
$hxClasses["box2D.dynamics.joints.B2Joint"] = box2D.dynamics.joints.B2Joint;
box2D.dynamics.joints.B2Joint.__name__ = ["box2D","dynamics","joints","B2Joint"];
box2D.dynamics.joints.B2Joint.create = function(def,allocator) {
	var joint = null;
	var _g = def.type;
	switch(_g) {
	case 3:
		joint = new box2D.dynamics.joints.B2DistanceJoint(js.Boot.__cast(def , box2D.dynamics.joints.B2DistanceJointDef));
		break;
	case 5:
		joint = new box2D.dynamics.joints.B2MouseJoint(js.Boot.__cast(def , box2D.dynamics.joints.B2MouseJointDef));
		break;
	case 2:
		joint = new box2D.dynamics.joints.B2PrismaticJoint(js.Boot.__cast(def , box2D.dynamics.joints.B2PrismaticJointDef));
		break;
	case 1:
		joint = new box2D.dynamics.joints.B2RevoluteJoint(js.Boot.__cast(def , box2D.dynamics.joints.B2RevoluteJointDef));
		break;
	case 4:
		joint = new box2D.dynamics.joints.B2PulleyJoint(js.Boot.__cast(def , box2D.dynamics.joints.B2PulleyJointDef));
		break;
	case 6:
		joint = new box2D.dynamics.joints.B2GearJoint(js.Boot.__cast(def , box2D.dynamics.joints.B2GearJointDef));
		break;
	case 7:
		joint = new box2D.dynamics.joints.B2LineJoint(js.Boot.__cast(def , box2D.dynamics.joints.B2LineJointDef));
		break;
	case 8:
		joint = new box2D.dynamics.joints.B2WeldJoint(js.Boot.__cast(def , box2D.dynamics.joints.B2WeldJointDef));
		break;
	case 9:
		joint = new box2D.dynamics.joints.B2FrictionJoint(js.Boot.__cast(def , box2D.dynamics.joints.B2FrictionJointDef));
		break;
	default:
	}
	return joint;
};
box2D.dynamics.joints.B2Joint.destroy = function(joint,allocator) {
};
box2D.dynamics.joints.B2Joint.prototype = {
	getType: function() {
		return this.m_type;
	}
	,getAnchorA: function() {
		return null;
	}
	,getAnchorB: function() {
		return null;
	}
	,getReactionForce: function(inv_dt) {
		return null;
	}
	,getReactionTorque: function(inv_dt) {
		return 0.0;
	}
	,getBodyA: function() {
		return this.m_bodyA;
	}
	,getBodyB: function() {
		return this.m_bodyB;
	}
	,getNext: function() {
		return this.m_next;
	}
	,getUserData: function() {
		return this.m_userData;
	}
	,setUserData: function(data) {
		this.m_userData = data;
	}
	,isActive: function() {
		return this.m_bodyA.isActive() && this.m_bodyB.isActive();
	}
	,initVelocityConstraints: function(step) {
	}
	,solveVelocityConstraints: function(step) {
	}
	,finalizeVelocityConstraints: function() {
	}
	,solvePositionConstraints: function(baumgarte) {
		return false;
	}
	,__class__: box2D.dynamics.joints.B2Joint
};
box2D.dynamics.joints.B2DistanceJoint = function(def) {
	box2D.dynamics.joints.B2Joint.call(this,def);
	this.m_localAnchor1 = new box2D.common.math.B2Vec2();
	this.m_localAnchor2 = new box2D.common.math.B2Vec2();
	this.m_u = new box2D.common.math.B2Vec2();
	var tMat;
	var tX;
	var tY;
	this.m_localAnchor1.setV(def.localAnchorA);
	this.m_localAnchor2.setV(def.localAnchorB);
	this.m_length = def.length;
	this.m_frequencyHz = def.frequencyHz;
	this.m_dampingRatio = def.dampingRatio;
	this.m_impulse = 0.0;
	this.m_gamma = 0.0;
	this.m_bias = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2DistanceJoint"] = box2D.dynamics.joints.B2DistanceJoint;
box2D.dynamics.joints.B2DistanceJoint.__name__ = ["box2D","dynamics","joints","B2DistanceJoint"];
box2D.dynamics.joints.B2DistanceJoint.__super__ = box2D.dynamics.joints.B2Joint;
box2D.dynamics.joints.B2DistanceJoint.prototype = $extend(box2D.dynamics.joints.B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D.common.math.B2Vec2(inv_dt * this.m_impulse * this.m_u.x,inv_dt * this.m_impulse * this.m_u.y);
	}
	,getReactionTorque: function(inv_dt) {
		return 0.0;
	}
	,getLength: function() {
		return this.m_length;
	}
	,setLength: function(length) {
		this.m_length = length;
	}
	,getFrequency: function() {
		return this.m_frequencyHz;
	}
	,setFrequency: function(hz) {
		this.m_frequencyHz = hz;
	}
	,getDampingRatio: function() {
		return this.m_dampingRatio;
	}
	,setDampingRatio: function(ratio) {
		this.m_dampingRatio = ratio;
	}
	,initVelocityConstraints: function(step) {
		var tMat;
		var tX;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		this.m_u.x = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		this.m_u.y = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		var length = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);
		if(length > box2D.common.B2Settings.b2_linearSlop) this.m_u.multiply(1.0 / length); else this.m_u.setZero();
		var cr1u = r1X * this.m_u.y - r1Y * this.m_u.x;
		var cr2u = r2X * this.m_u.y - r2Y * this.m_u.x;
		var invMass = bA.m_invMass + bA.m_invI * cr1u * cr1u + bB.m_invMass + bB.m_invI * cr2u * cr2u;
		if(invMass != 0.0) this.m_mass = 1.0 / invMass; else this.m_mass = 0.0;
		if(this.m_frequencyHz > 0.0) {
			var C = length - this.m_length;
			var omega = 2.0 * Math.PI * this.m_frequencyHz;
			var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;
			var k = this.m_mass * omega * omega;
			this.m_gamma = step.dt * (d + step.dt * k);
			if(this.m_gamma != 0.0) this.m_gamma = 1 / this.m_gamma; else this.m_gamma = 0.0;
			this.m_bias = C * step.dt * k * this.m_gamma;
			this.m_mass = invMass + this.m_gamma;
			if(this.m_mass != 0.0) this.m_mass = 1.0 / this.m_mass; else this.m_mass = 0.0;
		}
		if(step.warmStarting) {
			this.m_impulse *= step.dtRatio;
			var PX = this.m_impulse * this.m_u.x;
			var PY = this.m_impulse * this.m_u.y;
			bA.m_linearVelocity.x -= bA.m_invMass * PX;
			bA.m_linearVelocity.y -= bA.m_invMass * PY;
			bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
			bB.m_linearVelocity.x += bB.m_invMass * PX;
			bB.m_linearVelocity.y += bB.m_invMass * PY;
			bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
		} else this.m_impulse = 0.0;
	}
	,solveVelocityConstraints: function(step) {
		var tMat;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var v1X = bA.m_linearVelocity.x + -bA.m_angularVelocity * r1Y;
		var v1Y = bA.m_linearVelocity.y + bA.m_angularVelocity * r1X;
		var v2X = bB.m_linearVelocity.x + -bB.m_angularVelocity * r2Y;
		var v2Y = bB.m_linearVelocity.y + bB.m_angularVelocity * r2X;
		var Cdot = this.m_u.x * (v2X - v1X) + this.m_u.y * (v2Y - v1Y);
		var impulse = -this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);
		this.m_impulse += impulse;
		var PX = impulse * this.m_u.x;
		var PY = impulse * this.m_u.y;
		bA.m_linearVelocity.x -= bA.m_invMass * PX;
		bA.m_linearVelocity.y -= bA.m_invMass * PY;
		bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
		bB.m_linearVelocity.x += bB.m_invMass * PX;
		bB.m_linearVelocity.y += bB.m_invMass * PY;
		bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
	}
	,solvePositionConstraints: function(baumgarte) {
		var tMat;
		if(this.m_frequencyHz > 0.0) return true;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		var length = Math.sqrt(dX * dX + dY * dY);
		dX /= length;
		dY /= length;
		var C = length - this.m_length;
		C = box2D.common.math.B2Math.clamp(C,-box2D.common.B2Settings.b2_maxLinearCorrection,box2D.common.B2Settings.b2_maxLinearCorrection);
		var impulse = -this.m_mass * C;
		this.m_u.set(dX,dY);
		var PX = impulse * this.m_u.x;
		var PY = impulse * this.m_u.y;
		bA.m_sweep.c.x -= bA.m_invMass * PX;
		bA.m_sweep.c.y -= bA.m_invMass * PY;
		bA.m_sweep.a -= bA.m_invI * (r1X * PY - r1Y * PX);
		bB.m_sweep.c.x += bB.m_invMass * PX;
		bB.m_sweep.c.y += bB.m_invMass * PY;
		bB.m_sweep.a += bB.m_invI * (r2X * PY - r2Y * PX);
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		return box2D.common.math.B2Math.abs(C) < box2D.common.B2Settings.b2_linearSlop;
	}
	,__class__: box2D.dynamics.joints.B2DistanceJoint
});
box2D.dynamics.joints.B2JointDef = function() {
	this.type = 0;
	this.userData = null;
	this.bodyA = null;
	this.bodyB = null;
	this.collideConnected = false;
};
$hxClasses["box2D.dynamics.joints.B2JointDef"] = box2D.dynamics.joints.B2JointDef;
box2D.dynamics.joints.B2JointDef.__name__ = ["box2D","dynamics","joints","B2JointDef"];
box2D.dynamics.joints.B2JointDef.prototype = {
	__class__: box2D.dynamics.joints.B2JointDef
};
box2D.dynamics.joints.B2DistanceJointDef = function() {
	box2D.dynamics.joints.B2JointDef.call(this);
	this.localAnchorA = new box2D.common.math.B2Vec2();
	this.localAnchorB = new box2D.common.math.B2Vec2();
	this.type = 3;
	this.length = 1.0;
	this.frequencyHz = 0.0;
	this.dampingRatio = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2DistanceJointDef"] = box2D.dynamics.joints.B2DistanceJointDef;
box2D.dynamics.joints.B2DistanceJointDef.__name__ = ["box2D","dynamics","joints","B2DistanceJointDef"];
box2D.dynamics.joints.B2DistanceJointDef.__super__ = box2D.dynamics.joints.B2JointDef;
box2D.dynamics.joints.B2DistanceJointDef.prototype = $extend(box2D.dynamics.joints.B2JointDef.prototype,{
	initialize: function(bA,bB,anchorA,anchorB) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.setV(this.bodyA.getLocalPoint(anchorA));
		this.localAnchorB.setV(this.bodyB.getLocalPoint(anchorB));
		var dX = anchorB.x - anchorA.x;
		var dY = anchorB.y - anchorA.y;
		this.length = Math.sqrt(dX * dX + dY * dY);
		this.frequencyHz = 0.0;
		this.dampingRatio = 0.0;
	}
	,__class__: box2D.dynamics.joints.B2DistanceJointDef
});
box2D.dynamics.joints.B2FrictionJoint = function(def) {
	box2D.dynamics.joints.B2Joint.call(this,def);
	this.m_localAnchorA = new box2D.common.math.B2Vec2();
	this.m_localAnchorB = new box2D.common.math.B2Vec2();
	this.m_linearMass = new box2D.common.math.B2Mat22();
	this.m_linearImpulse = new box2D.common.math.B2Vec2();
	this.m_localAnchorA.setV(def.localAnchorA);
	this.m_localAnchorB.setV(def.localAnchorB);
	this.m_linearMass.setZero();
	this.m_angularMass = 0.0;
	this.m_linearImpulse.setZero();
	this.m_angularImpulse = 0.0;
	this.m_maxForce = def.maxForce;
	this.m_maxTorque = def.maxTorque;
};
$hxClasses["box2D.dynamics.joints.B2FrictionJoint"] = box2D.dynamics.joints.B2FrictionJoint;
box2D.dynamics.joints.B2FrictionJoint.__name__ = ["box2D","dynamics","joints","B2FrictionJoint"];
box2D.dynamics.joints.B2FrictionJoint.__super__ = box2D.dynamics.joints.B2Joint;
box2D.dynamics.joints.B2FrictionJoint.prototype = $extend(box2D.dynamics.joints.B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchorA);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchorB);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D.common.math.B2Vec2(inv_dt * this.m_linearImpulse.x,inv_dt * this.m_linearImpulse.y);
	}
	,getReactionTorque: function(inv_dt) {
		return inv_dt * this.m_angularImpulse;
	}
	,setMaxForce: function(force) {
		this.m_maxForce = force;
	}
	,getMaxForce: function() {
		return this.m_maxForce;
	}
	,setMaxTorque: function(torque) {
		this.m_maxTorque = torque;
	}
	,getMaxTorque: function() {
		return this.m_maxTorque;
	}
	,initVelocityConstraints: function(step) {
		var tMat;
		var tX;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = tMat.col1.x * rAX + tMat.col2.x * rAY;
		rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * rBX + tMat.col2.x * rBY;
		rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		var K = new box2D.common.math.B2Mat22();
		K.col1.x = mA + mB;
		K.col2.x = 0.0;
		K.col1.y = 0.0;
		K.col2.y = mA + mB;
		K.col1.x += iA * rAY * rAY;
		K.col2.x += -iA * rAX * rAY;
		K.col1.y += -iA * rAX * rAY;
		K.col2.y += iA * rAX * rAX;
		K.col1.x += iB * rBY * rBY;
		K.col2.x += -iB * rBX * rBY;
		K.col1.y += -iB * rBX * rBY;
		K.col2.y += iB * rBX * rBX;
		K.getInverse(this.m_linearMass);
		this.m_angularMass = iA + iB;
		if(this.m_angularMass > 0.0) this.m_angularMass = 1.0 / this.m_angularMass;
		if(step.warmStarting) {
			this.m_linearImpulse.x *= step.dtRatio;
			this.m_linearImpulse.y *= step.dtRatio;
			this.m_angularImpulse *= step.dtRatio;
			var P = this.m_linearImpulse;
			bA.m_linearVelocity.x -= mA * P.x;
			bA.m_linearVelocity.y -= mA * P.y;
			bA.m_angularVelocity -= iA * (rAX * P.y - rAY * P.x + this.m_angularImpulse);
			bB.m_linearVelocity.x += mB * P.x;
			bB.m_linearVelocity.y += mB * P.y;
			bB.m_angularVelocity += iB * (rBX * P.y - rBY * P.x + this.m_angularImpulse);
		} else {
			this.m_linearImpulse.setZero();
			this.m_angularImpulse = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var tMat;
		var tX;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var vA = bA.m_linearVelocity;
		var wA = bA.m_angularVelocity;
		var vB = bB.m_linearVelocity;
		var wB = bB.m_angularVelocity;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = tMat.col1.x * rAX + tMat.col2.x * rAY;
		rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * rBX + tMat.col2.x * rBY;
		rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;
		rBX = tX;
		var maxImpulse;
		var Cdot = wB - wA;
		var impulse = -this.m_angularMass * Cdot;
		var oldImpulse = this.m_angularImpulse;
		maxImpulse = step.dt * this.m_maxTorque;
		this.m_angularImpulse = box2D.common.math.B2Math.clamp(this.m_angularImpulse + impulse,-maxImpulse,maxImpulse);
		impulse = this.m_angularImpulse - oldImpulse;
		wA -= iA * impulse;
		wB += iB * impulse;
		var CdotX = vB.x - wB * rBY - vA.x + wA * rAY;
		var CdotY = vB.y + wB * rBX - vA.y - wA * rAX;
		var impulseV = box2D.common.math.B2Math.mulMV(this.m_linearMass,new box2D.common.math.B2Vec2(-CdotX,-CdotY));
		var oldImpulseV = this.m_linearImpulse.copy();
		this.m_linearImpulse.add(impulseV);
		maxImpulse = step.dt * this.m_maxForce;
		if(this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {
			this.m_linearImpulse.normalize();
			this.m_linearImpulse.multiply(maxImpulse);
		}
		impulseV = box2D.common.math.B2Math.subtractVV(this.m_linearImpulse,oldImpulseV);
		vA.x -= mA * impulseV.x;
		vA.y -= mA * impulseV.y;
		wA -= iA * (rAX * impulseV.y - rAY * impulseV.x);
		vB.x += mB * impulseV.x;
		vB.y += mB * impulseV.y;
		wB += iB * (rBX * impulseV.y - rBY * impulseV.x);
		bA.m_angularVelocity = wA;
		bB.m_angularVelocity = wB;
	}
	,solvePositionConstraints: function(baumgarte) {
		return true;
	}
	,__class__: box2D.dynamics.joints.B2FrictionJoint
});
box2D.dynamics.joints.B2FrictionJointDef = function() {
	box2D.dynamics.joints.B2JointDef.call(this);
	this.localAnchorA = new box2D.common.math.B2Vec2();
	this.localAnchorB = new box2D.common.math.B2Vec2();
	this.type = 9;
	this.maxForce = 0.0;
	this.maxTorque = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2FrictionJointDef"] = box2D.dynamics.joints.B2FrictionJointDef;
box2D.dynamics.joints.B2FrictionJointDef.__name__ = ["box2D","dynamics","joints","B2FrictionJointDef"];
box2D.dynamics.joints.B2FrictionJointDef.__super__ = box2D.dynamics.joints.B2JointDef;
box2D.dynamics.joints.B2FrictionJointDef.prototype = $extend(box2D.dynamics.joints.B2JointDef.prototype,{
	initialize: function(bA,bB,anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.setV(this.bodyA.getLocalPoint(anchor));
		this.localAnchorB.setV(this.bodyB.getLocalPoint(anchor));
	}
	,__class__: box2D.dynamics.joints.B2FrictionJointDef
});
box2D.dynamics.joints.B2GearJoint = function(def) {
	box2D.dynamics.joints.B2Joint.call(this,def);
	this.m_groundAnchor1 = new box2D.common.math.B2Vec2();
	this.m_groundAnchor2 = new box2D.common.math.B2Vec2();
	this.m_localAnchor1 = new box2D.common.math.B2Vec2();
	this.m_localAnchor2 = new box2D.common.math.B2Vec2();
	this.m_J = new box2D.dynamics.joints.B2Jacobian();
	var type1 = def.joint1.m_type;
	var type2 = def.joint2.m_type;
	this.m_revolute1 = null;
	this.m_prismatic1 = null;
	this.m_revolute2 = null;
	this.m_prismatic2 = null;
	var coordinate1;
	var coordinate2;
	this.m_ground1 = def.joint1.getBodyA();
	this.m_bodyA = def.joint1.getBodyB();
	if(type1 == 1) {
		this.m_revolute1 = js.Boot.__cast(def.joint1 , box2D.dynamics.joints.B2RevoluteJoint);
		this.m_groundAnchor1.setV(this.m_revolute1.m_localAnchor1);
		this.m_localAnchor1.setV(this.m_revolute1.m_localAnchor2);
		coordinate1 = this.m_revolute1.getJointAngle();
	} else {
		this.m_prismatic1 = js.Boot.__cast(def.joint1 , box2D.dynamics.joints.B2PrismaticJoint);
		this.m_groundAnchor1.setV(this.m_prismatic1.m_localAnchor1);
		this.m_localAnchor1.setV(this.m_prismatic1.m_localAnchor2);
		coordinate1 = this.m_prismatic1.getJointTranslation();
	}
	this.m_ground2 = def.joint2.getBodyA();
	this.m_bodyB = def.joint2.getBodyB();
	if(type2 == 1) {
		this.m_revolute2 = js.Boot.__cast(def.joint2 , box2D.dynamics.joints.B2RevoluteJoint);
		this.m_groundAnchor2.setV(this.m_revolute2.m_localAnchor1);
		this.m_localAnchor2.setV(this.m_revolute2.m_localAnchor2);
		coordinate2 = this.m_revolute2.getJointAngle();
	} else {
		this.m_prismatic2 = js.Boot.__cast(def.joint2 , box2D.dynamics.joints.B2PrismaticJoint);
		this.m_groundAnchor2.setV(this.m_prismatic2.m_localAnchor1);
		this.m_localAnchor2.setV(this.m_prismatic2.m_localAnchor2);
		coordinate2 = this.m_prismatic2.getJointTranslation();
	}
	this.m_ratio = def.ratio;
	this.m_constant = coordinate1 + this.m_ratio * coordinate2;
	this.m_impulse = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2GearJoint"] = box2D.dynamics.joints.B2GearJoint;
box2D.dynamics.joints.B2GearJoint.__name__ = ["box2D","dynamics","joints","B2GearJoint"];
box2D.dynamics.joints.B2GearJoint.__super__ = box2D.dynamics.joints.B2Joint;
box2D.dynamics.joints.B2GearJoint.prototype = $extend(box2D.dynamics.joints.B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D.common.math.B2Vec2(inv_dt * this.m_impulse * this.m_J.linearB.x,inv_dt * this.m_impulse * this.m_J.linearB.y);
	}
	,getReactionTorque: function(inv_dt) {
		var tMat = this.m_bodyB.m_xf.R;
		var rX = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x;
		var rY = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rX + tMat.col2.x * rY;
		rY = tMat.col1.y * rX + tMat.col2.y * rY;
		rX = tX;
		var PX = this.m_impulse * this.m_J.linearB.x;
		var PY = this.m_impulse * this.m_J.linearB.y;
		return inv_dt * (this.m_impulse * this.m_J.angularB - rX * PY + rY * PX);
	}
	,getRatio: function() {
		return this.m_ratio;
	}
	,setRatio: function(ratio) {
		this.m_ratio = ratio;
	}
	,initVelocityConstraints: function(step) {
		var g1 = this.m_ground1;
		var g2 = this.m_ground2;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var ugX;
		var ugY;
		var rX;
		var rY;
		var tMat;
		var tVec;
		var crug;
		var tX;
		var K = 0.0;
		this.m_J.setZero();
		if(this.m_revolute1 != null) {
			this.m_J.angularA = -1.0;
			K += bA.m_invI;
		} else {
			tMat = g1.m_xf.R;
			tVec = this.m_prismatic1.m_localXAxis1;
			ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = bA.m_xf.R;
			rX = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			rY = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * rX + tMat.col2.x * rY;
			rY = tMat.col1.y * rX + tMat.col2.y * rY;
			rX = tX;
			crug = rX * ugY - rY * ugX;
			this.m_J.linearA.set(-ugX,-ugY);
			this.m_J.angularA = -crug;
			K += bA.m_invMass + bA.m_invI * crug * crug;
		}
		if(this.m_revolute2 != null) {
			this.m_J.angularB = -this.m_ratio;
			K += this.m_ratio * this.m_ratio * bB.m_invI;
		} else {
			tMat = g2.m_xf.R;
			tVec = this.m_prismatic2.m_localXAxis1;
			ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = bB.m_xf.R;
			rX = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			rY = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * rX + tMat.col2.x * rY;
			rY = tMat.col1.y * rX + tMat.col2.y * rY;
			rX = tX;
			crug = rX * ugY - rY * ugX;
			this.m_J.linearB.set(-this.m_ratio * ugX,-this.m_ratio * ugY);
			this.m_J.angularB = -this.m_ratio * crug;
			K += this.m_ratio * this.m_ratio * (bB.m_invMass + bB.m_invI * crug * crug);
		}
		if(K > 0.0) this.m_mass = 1.0 / K; else this.m_mass = 0.0;
		if(step.warmStarting) {
			bA.m_linearVelocity.x += bA.m_invMass * this.m_impulse * this.m_J.linearA.x;
			bA.m_linearVelocity.y += bA.m_invMass * this.m_impulse * this.m_J.linearA.y;
			bA.m_angularVelocity += bA.m_invI * this.m_impulse * this.m_J.angularA;
			bB.m_linearVelocity.x += bB.m_invMass * this.m_impulse * this.m_J.linearB.x;
			bB.m_linearVelocity.y += bB.m_invMass * this.m_impulse * this.m_J.linearB.y;
			bB.m_angularVelocity += bB.m_invI * this.m_impulse * this.m_J.angularB;
		} else this.m_impulse = 0.0;
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var Cdot = this.m_J.compute(bA.m_linearVelocity,bA.m_angularVelocity,bB.m_linearVelocity,bB.m_angularVelocity);
		var impulse = -this.m_mass * Cdot;
		this.m_impulse += impulse;
		bA.m_linearVelocity.x += bA.m_invMass * impulse * this.m_J.linearA.x;
		bA.m_linearVelocity.y += bA.m_invMass * impulse * this.m_J.linearA.y;
		bA.m_angularVelocity += bA.m_invI * impulse * this.m_J.angularA;
		bB.m_linearVelocity.x += bB.m_invMass * impulse * this.m_J.linearB.x;
		bB.m_linearVelocity.y += bB.m_invMass * impulse * this.m_J.linearB.y;
		bB.m_angularVelocity += bB.m_invI * impulse * this.m_J.angularB;
	}
	,solvePositionConstraints: function(baumgarte) {
		var linearError = 0.0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var coordinate1;
		var coordinate2;
		if(this.m_revolute1 != null) coordinate1 = this.m_revolute1.getJointAngle(); else coordinate1 = this.m_prismatic1.getJointTranslation();
		if(this.m_revolute2 != null) coordinate2 = this.m_revolute2.getJointAngle(); else coordinate2 = this.m_prismatic2.getJointTranslation();
		var C = this.m_constant - (coordinate1 + this.m_ratio * coordinate2);
		var impulse = -this.m_mass * C;
		bA.m_sweep.c.x += bA.m_invMass * impulse * this.m_J.linearA.x;
		bA.m_sweep.c.y += bA.m_invMass * impulse * this.m_J.linearA.y;
		bA.m_sweep.a += bA.m_invI * impulse * this.m_J.angularA;
		bB.m_sweep.c.x += bB.m_invMass * impulse * this.m_J.linearB.x;
		bB.m_sweep.c.y += bB.m_invMass * impulse * this.m_J.linearB.y;
		bB.m_sweep.a += bB.m_invI * impulse * this.m_J.angularB;
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		return linearError < box2D.common.B2Settings.b2_linearSlop;
	}
	,__class__: box2D.dynamics.joints.B2GearJoint
});
box2D.dynamics.joints.B2GearJointDef = function() {
	box2D.dynamics.joints.B2JointDef.call(this);
	this.type = 6;
	this.joint1 = null;
	this.joint2 = null;
	this.ratio = 1.0;
};
$hxClasses["box2D.dynamics.joints.B2GearJointDef"] = box2D.dynamics.joints.B2GearJointDef;
box2D.dynamics.joints.B2GearJointDef.__name__ = ["box2D","dynamics","joints","B2GearJointDef"];
box2D.dynamics.joints.B2GearJointDef.__super__ = box2D.dynamics.joints.B2JointDef;
box2D.dynamics.joints.B2GearJointDef.prototype = $extend(box2D.dynamics.joints.B2JointDef.prototype,{
	__class__: box2D.dynamics.joints.B2GearJointDef
});
box2D.dynamics.joints.B2Jacobian = function() {
	this.linearA = new box2D.common.math.B2Vec2();
	this.linearB = new box2D.common.math.B2Vec2();
};
$hxClasses["box2D.dynamics.joints.B2Jacobian"] = box2D.dynamics.joints.B2Jacobian;
box2D.dynamics.joints.B2Jacobian.__name__ = ["box2D","dynamics","joints","B2Jacobian"];
box2D.dynamics.joints.B2Jacobian.prototype = {
	setZero: function() {
		this.linearA.setZero();
		this.angularA = 0.0;
		this.linearB.setZero();
		this.angularB = 0.0;
	}
	,set: function(x1,a1,x2,a2) {
		this.linearA.setV(x1);
		this.angularA = a1;
		this.linearB.setV(x2);
		this.angularB = a2;
	}
	,compute: function(x1,a1,x2,a2) {
		return this.linearA.x * x1.x + this.linearA.y * x1.y + this.angularA * a1 + (this.linearB.x * x2.x + this.linearB.y * x2.y) + this.angularB * a2;
	}
	,__class__: box2D.dynamics.joints.B2Jacobian
};
box2D.dynamics.joints.B2JointEdge = function() {
};
$hxClasses["box2D.dynamics.joints.B2JointEdge"] = box2D.dynamics.joints.B2JointEdge;
box2D.dynamics.joints.B2JointEdge.__name__ = ["box2D","dynamics","joints","B2JointEdge"];
box2D.dynamics.joints.B2JointEdge.prototype = {
	__class__: box2D.dynamics.joints.B2JointEdge
};
box2D.dynamics.joints._B2JointType = {};
box2D.dynamics.joints._B2JointType.B2JointType_Impl_ = function() { };
$hxClasses["box2D.dynamics.joints._B2JointType.B2JointType_Impl_"] = box2D.dynamics.joints._B2JointType.B2JointType_Impl_;
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.__name__ = ["box2D","dynamics","joints","_B2JointType","B2JointType_Impl_"];
box2D.dynamics.joints._B2LimitState = {};
box2D.dynamics.joints._B2LimitState.B2LimitState_Impl_ = function() { };
$hxClasses["box2D.dynamics.joints._B2LimitState.B2LimitState_Impl_"] = box2D.dynamics.joints._B2LimitState.B2LimitState_Impl_;
box2D.dynamics.joints._B2LimitState.B2LimitState_Impl_.__name__ = ["box2D","dynamics","joints","_B2LimitState","B2LimitState_Impl_"];
box2D.dynamics.joints.B2LineJoint = function(def) {
	box2D.dynamics.joints.B2Joint.call(this,def);
	this.m_localAnchor1 = new box2D.common.math.B2Vec2();
	this.m_localAnchor2 = new box2D.common.math.B2Vec2();
	this.m_localXAxis1 = new box2D.common.math.B2Vec2();
	this.m_localYAxis1 = new box2D.common.math.B2Vec2();
	this.m_axis = new box2D.common.math.B2Vec2();
	this.m_perp = new box2D.common.math.B2Vec2();
	this.m_K = new box2D.common.math.B2Mat22();
	this.m_impulse = new box2D.common.math.B2Vec2();
	var tMat;
	var tX;
	var tY;
	this.m_localAnchor1.setV(def.localAnchorA);
	this.m_localAnchor2.setV(def.localAnchorB);
	this.m_localXAxis1.setV(def.localAxisA);
	this.m_localYAxis1.x = -this.m_localXAxis1.y;
	this.m_localYAxis1.y = this.m_localXAxis1.x;
	this.m_impulse.setZero();
	this.m_motorMass = 0.0;
	this.m_motorImpulse = 0.0;
	this.m_lowerTranslation = def.lowerTranslation;
	this.m_upperTranslation = def.upperTranslation;
	this.m_maxMotorForce = def.maxMotorForce;
	this.m_motorSpeed = def.motorSpeed;
	this.m_enableLimit = def.enableLimit;
	this.m_enableMotor = def.enableMotor;
	this.m_limitState = 0;
	this.m_axis.setZero();
	this.m_perp.setZero();
};
$hxClasses["box2D.dynamics.joints.B2LineJoint"] = box2D.dynamics.joints.B2LineJoint;
box2D.dynamics.joints.B2LineJoint.__name__ = ["box2D","dynamics","joints","B2LineJoint"];
box2D.dynamics.joints.B2LineJoint.__super__ = box2D.dynamics.joints.B2Joint;
box2D.dynamics.joints.B2LineJoint.prototype = $extend(box2D.dynamics.joints.B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D.common.math.B2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x),inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y));
	}
	,getReactionTorque: function(inv_dt) {
		return inv_dt * this.m_impulse.y;
	}
	,getJointTranslation: function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var p1 = bA.getWorldPoint(this.m_localAnchor1);
		var p2 = bB.getWorldPoint(this.m_localAnchor2);
		var dX = p2.x - p1.x;
		var dY = p2.y - p1.y;
		var axis = bA.getWorldVector(this.m_localXAxis1);
		var translation = axis.x * dX + axis.y * dY;
		return translation;
	}
	,getJointSpeed: function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var axis = bA.getWorldVector(this.m_localXAxis1);
		var v1 = bA.m_linearVelocity;
		var v2 = bB.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var w2 = bB.m_angularVelocity;
		var speed = dX * (-w1 * axis.y) + dY * (w1 * axis.x) + (axis.x * (v2.x + -w2 * r2Y - v1.x - -w1 * r1Y) + axis.y * (v2.y + w2 * r2X - v1.y - w1 * r1X));
		return speed;
	}
	,isLimitEnabled: function() {
		return this.m_enableLimit;
	}
	,enableLimit: function(flag) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_enableLimit = flag;
	}
	,getLowerLimit: function() {
		return this.m_lowerTranslation;
	}
	,getUpperLimit: function() {
		return this.m_upperTranslation;
	}
	,setLimits: function(lower,upper) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_lowerTranslation = lower;
		this.m_upperTranslation = upper;
	}
	,isMotorEnabled: function() {
		return this.m_enableMotor;
	}
	,enableMotor: function(flag) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_enableMotor = flag;
	}
	,setMotorSpeed: function(speed) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_motorSpeed = speed;
	}
	,getMotorSpeed: function() {
		return this.m_motorSpeed;
	}
	,setMaxMotorForce: function(force) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_maxMotorForce = force;
	}
	,getMaxMotorForce: function() {
		return this.m_maxMotorForce;
	}
	,getMotorForce: function() {
		return this.m_motorImpulse;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX;
		this.m_localCenterA.setV(bA.getLocalCenter());
		this.m_localCenterB.setV(bB.getLocalCenter());
		var xf1 = bA.getTransform();
		var xf2 = bB.getTransform();
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		this.m_invMassA = bA.m_invMass;
		this.m_invMassB = bB.m_invMass;
		this.m_invIA = bA.m_invI;
		this.m_invIB = bB.m_invI;
		this.m_axis.setV(box2D.common.math.B2Math.mulMV(xf1.R,this.m_localXAxis1));
		this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
		this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
		this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
		if(this.m_motorMass > Number.MIN_VALUE) this.m_motorMass = 1.0 / this.m_motorMass; else this.m_motorMass = 0.0;
		this.m_perp.setV(box2D.common.math.B2Math.mulMV(xf1.R,this.m_localYAxis1));
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var m1 = this.m_invMassA;
		var m2 = this.m_invMassB;
		var i1 = this.m_invIA;
		var i2 = this.m_invIB;
		this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
		this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
		this.m_K.col2.x = this.m_K.col1.y;
		this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
		if(this.m_enableLimit) {
			var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
			if(box2D.common.math.B2Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * box2D.common.B2Settings.b2_linearSlop) this.m_limitState = 3; else if(jointTransition <= this.m_lowerTranslation) {
				if(this.m_limitState != 1) {
					this.m_limitState = 1;
					this.m_impulse.y = 0.0;
				}
			} else if(jointTransition >= this.m_upperTranslation) {
				if(this.m_limitState != 2) {
					this.m_limitState = 2;
					this.m_impulse.y = 0.0;
				}
			} else {
				this.m_limitState = 0;
				this.m_impulse.y = 0.0;
			}
		} else this.m_limitState = 0;
		if(this.m_enableMotor == false) this.m_motorImpulse = 0.0;
		if(step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x;
			var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y;
			var L1 = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1;
			var L2 = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2;
			bA.m_linearVelocity.x -= this.m_invMassA * PX;
			bA.m_linearVelocity.y -= this.m_invMassA * PY;
			bA.m_angularVelocity -= this.m_invIA * L1;
			bB.m_linearVelocity.x += this.m_invMassB * PX;
			bB.m_linearVelocity.y += this.m_invMassB * PY;
			bB.m_angularVelocity += this.m_invIB * L2;
		} else {
			this.m_impulse.setZero();
			this.m_motorImpulse = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var PX;
		var PY;
		var L1;
		var L2;
		if(this.m_enableMotor && this.m_limitState != 3) {
			var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorForce;
			this.m_motorImpulse = box2D.common.math.B2Math.clamp(this.m_motorImpulse + impulse,-maxImpulse,maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			PX = impulse * this.m_axis.x;
			PY = impulse * this.m_axis.y;
			L1 = impulse * this.m_a1;
			L2 = impulse * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		var Cdot1 = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
		if(this.m_enableLimit && this.m_limitState != 0) {
			var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var f1 = this.m_impulse.copy();
			var df = this.m_K.solve(new box2D.common.math.B2Vec2(),-Cdot1,-Cdot2);
			this.m_impulse.add(df);
			if(this.m_limitState == 1) this.m_impulse.y = box2D.common.math.B2Math.max(this.m_impulse.y,0.0); else if(this.m_limitState == 2) this.m_impulse.y = box2D.common.math.B2Math.min(this.m_impulse.y,0.0);
			var b = -Cdot1 - (this.m_impulse.y - f1.y) * this.m_K.col2.x;
			var f2r;
			if(this.m_K.col1.x != 0.0) f2r = b / this.m_K.col1.x + f1.x; else f2r = f1.x;
			this.m_impulse.x = f2r;
			df.x = this.m_impulse.x - f1.x;
			df.y = this.m_impulse.y - f1.y;
			PX = df.x * this.m_perp.x + df.y * this.m_axis.x;
			PY = df.x * this.m_perp.y + df.y * this.m_axis.y;
			L1 = df.x * this.m_s1 + df.y * this.m_a1;
			L2 = df.x * this.m_s2 + df.y * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		} else {
			var df2;
			if(this.m_K.col1.x != 0.0) df2 = -Cdot1 / this.m_K.col1.x; else df2 = 0.0;
			this.m_impulse.x += df2;
			PX = df2 * this.m_perp.x;
			PY = df2 * this.m_perp.y;
			L1 = df2 * this.m_s1;
			L2 = df2 * this.m_s2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		bA.m_linearVelocity.setV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.setV(v2);
		bB.m_angularVelocity = w2;
	}
	,solvePositionConstraints: function(baumgarte) {
		var limitC;
		var oldLimitImpulse;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var c1 = bA.m_sweep.c;
		var a1 = bA.m_sweep.a;
		var c2 = bB.m_sweep.c;
		var a2 = bB.m_sweep.a;
		var tMat;
		var tX;
		var m1;
		var m2;
		var i1;
		var i2;
		var linearError = 0.0;
		var angularError = 0.0;
		var active = false;
		var C2 = 0.0;
		var R1 = box2D.common.math.B2Mat22.fromAngle(a1);
		var R2 = box2D.common.math.B2Mat22.fromAngle(a2);
		tMat = R1;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = R2;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var dX = c2.x + r2X - c1.x - r1X;
		var dY = c2.y + r2Y - c1.y - r1Y;
		if(this.m_enableLimit) {
			this.m_axis = box2D.common.math.B2Math.mulMV(R1,this.m_localXAxis1);
			this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
			this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
			var translation = this.m_axis.x * dX + this.m_axis.y * dY;
			if(box2D.common.math.B2Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * box2D.common.B2Settings.b2_linearSlop) {
				C2 = box2D.common.math.B2Math.clamp(translation,-box2D.common.B2Settings.b2_maxLinearCorrection,box2D.common.B2Settings.b2_maxLinearCorrection);
				linearError = box2D.common.math.B2Math.abs(translation);
				active = true;
			} else if(translation <= this.m_lowerTranslation) {
				C2 = box2D.common.math.B2Math.clamp(translation - this.m_lowerTranslation + box2D.common.B2Settings.b2_linearSlop,-box2D.common.B2Settings.b2_maxLinearCorrection,0.0);
				linearError = this.m_lowerTranslation - translation;
				active = true;
			} else if(translation >= this.m_upperTranslation) {
				C2 = box2D.common.math.B2Math.clamp(translation - this.m_upperTranslation + box2D.common.B2Settings.b2_linearSlop,0.0,box2D.common.B2Settings.b2_maxLinearCorrection);
				linearError = translation - this.m_upperTranslation;
				active = true;
			}
		}
		this.m_perp = box2D.common.math.B2Math.mulMV(R1,this.m_localYAxis1);
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var impulse = new box2D.common.math.B2Vec2();
		var C1 = this.m_perp.x * dX + this.m_perp.y * dY;
		linearError = box2D.common.math.B2Math.max(linearError,box2D.common.math.B2Math.abs(C1));
		angularError = 0.0;
		if(active) {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
			this.m_K.col2.x = this.m_K.col1.y;
			this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
			this.m_K.solve(impulse,-C1,-C2);
		} else {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			var impulse1;
			if(k11 != 0.0) impulse1 = -C1 / k11; else impulse1 = 0.0;
			impulse.x = impulse1;
			impulse.y = 0.0;
		}
		var PX = impulse.x * this.m_perp.x + impulse.y * this.m_axis.x;
		var PY = impulse.x * this.m_perp.y + impulse.y * this.m_axis.y;
		var L1 = impulse.x * this.m_s1 + impulse.y * this.m_a1;
		var L2 = impulse.x * this.m_s2 + impulse.y * this.m_a2;
		c1.x -= this.m_invMassA * PX;
		c1.y -= this.m_invMassA * PY;
		a1 -= this.m_invIA * L1;
		c2.x += this.m_invMassB * PX;
		c2.y += this.m_invMassB * PY;
		a2 += this.m_invIB * L2;
		bA.m_sweep.a = a1;
		bB.m_sweep.a = a2;
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		return linearError <= box2D.common.B2Settings.b2_linearSlop && angularError <= box2D.common.B2Settings.b2_angularSlop;
	}
	,__class__: box2D.dynamics.joints.B2LineJoint
});
box2D.dynamics.joints.B2LineJointDef = function() {
	box2D.dynamics.joints.B2JointDef.call(this);
};
$hxClasses["box2D.dynamics.joints.B2LineJointDef"] = box2D.dynamics.joints.B2LineJointDef;
box2D.dynamics.joints.B2LineJointDef.__name__ = ["box2D","dynamics","joints","B2LineJointDef"];
box2D.dynamics.joints.B2LineJointDef.__super__ = box2D.dynamics.joints.B2JointDef;
box2D.dynamics.joints.B2LineJointDef.prototype = $extend(box2D.dynamics.joints.B2JointDef.prototype,{
	b2LineJointDef: function() {
		this.localAnchorA = new box2D.common.math.B2Vec2();
		this.localAnchorB = new box2D.common.math.B2Vec2();
		this.localAxisA = new box2D.common.math.B2Vec2();
		this.type = 7;
		this.localAxisA.set(1.0,0.0);
		this.enableLimit = false;
		this.lowerTranslation = 0.0;
		this.upperTranslation = 0.0;
		this.enableMotor = false;
		this.maxMotorForce = 0.0;
		this.motorSpeed = 0.0;
	}
	,initialize: function(bA,bB,anchor,axis) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.getLocalPoint(anchor);
		this.localAnchorB = this.bodyB.getLocalPoint(anchor);
		this.localAxisA = this.bodyA.getLocalVector(axis);
	}
	,__class__: box2D.dynamics.joints.B2LineJointDef
});
box2D.dynamics.joints.B2MouseJoint = function(def) {
	box2D.dynamics.joints.B2Joint.call(this,def);
	this.K = new box2D.common.math.B2Mat22();
	this.K1 = new box2D.common.math.B2Mat22();
	this.K2 = new box2D.common.math.B2Mat22();
	this.m_localAnchor = new box2D.common.math.B2Vec2();
	this.m_target = new box2D.common.math.B2Vec2();
	this.m_impulse = new box2D.common.math.B2Vec2();
	this.m_mass = new box2D.common.math.B2Mat22();
	this.m_C = new box2D.common.math.B2Vec2();
	this.m_target.setV(def.target);
	var tX = this.m_target.x - this.m_bodyB.m_xf.position.x;
	var tY = this.m_target.y - this.m_bodyB.m_xf.position.y;
	var tMat = this.m_bodyB.m_xf.R;
	this.m_localAnchor.x = tX * tMat.col1.x + tY * tMat.col1.y;
	this.m_localAnchor.y = tX * tMat.col2.x + tY * tMat.col2.y;
	this.m_maxForce = def.maxForce;
	this.m_impulse.setZero();
	this.m_frequencyHz = def.frequencyHz;
	this.m_dampingRatio = def.dampingRatio;
	this.m_beta = 0.0;
	this.m_gamma = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2MouseJoint"] = box2D.dynamics.joints.B2MouseJoint;
box2D.dynamics.joints.B2MouseJoint.__name__ = ["box2D","dynamics","joints","B2MouseJoint"];
box2D.dynamics.joints.B2MouseJoint.__super__ = box2D.dynamics.joints.B2Joint;
box2D.dynamics.joints.B2MouseJoint.prototype = $extend(box2D.dynamics.joints.B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_target;
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D.common.math.B2Vec2(inv_dt * this.m_impulse.x,inv_dt * this.m_impulse.y);
	}
	,getReactionTorque: function(inv_dt) {
		return 0.0;
	}
	,getTarget: function() {
		return this.m_target;
	}
	,setTarget: function(target) {
		if(this.m_bodyB.isAwake() == false) this.m_bodyB.setAwake(true);
		this.m_target = target;
	}
	,getMaxForce: function() {
		return this.m_maxForce;
	}
	,setMaxForce: function(maxForce) {
		this.m_maxForce = maxForce;
	}
	,getFrequency: function() {
		return this.m_frequencyHz;
	}
	,setFrequency: function(hz) {
		this.m_frequencyHz = hz;
	}
	,getDampingRatio: function() {
		return this.m_dampingRatio;
	}
	,setDampingRatio: function(ratio) {
		this.m_dampingRatio = ratio;
	}
	,initVelocityConstraints: function(step) {
		var b = this.m_bodyB;
		var mass = b.getMass();
		var omega = 2.0 * Math.PI * this.m_frequencyHz;
		var d = 2.0 * mass * this.m_dampingRatio * omega;
		var k = mass * omega * omega;
		this.m_gamma = step.dt * (d + step.dt * k);
		if(this.m_gamma != 0) this.m_gamma = 1 / this.m_gamma; else this.m_gamma = 0.0;
		this.m_beta = step.dt * k * this.m_gamma;
		var tMat;
		tMat = b.m_xf.R;
		var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;
		var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rX + tMat.col2.x * rY;
		rY = tMat.col1.y * rX + tMat.col2.y * rY;
		rX = tX;
		var invMass = b.m_invMass;
		var invI = b.m_invI;
		this.K1.col1.x = invMass;
		this.K1.col2.x = 0.0;
		this.K1.col1.y = 0.0;
		this.K1.col2.y = invMass;
		this.K2.col1.x = invI * rY * rY;
		this.K2.col2.x = -invI * rX * rY;
		this.K2.col1.y = -invI * rX * rY;
		this.K2.col2.y = invI * rX * rX;
		this.K.setM(this.K1);
		this.K.addM(this.K2);
		this.K.col1.x += this.m_gamma;
		this.K.col2.y += this.m_gamma;
		this.K.getInverse(this.m_mass);
		this.m_C.x = b.m_sweep.c.x + rX - this.m_target.x;
		this.m_C.y = b.m_sweep.c.y + rY - this.m_target.y;
		b.m_angularVelocity *= 0.98;
		this.m_impulse.x *= step.dtRatio;
		this.m_impulse.y *= step.dtRatio;
		b.m_linearVelocity.x += invMass * this.m_impulse.x;
		b.m_linearVelocity.y += invMass * this.m_impulse.y;
		b.m_angularVelocity += invI * (rX * this.m_impulse.y - rY * this.m_impulse.x);
	}
	,solveVelocityConstraints: function(step) {
		var b = this.m_bodyB;
		var tMat;
		var tX;
		var tY;
		tMat = b.m_xf.R;
		var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;
		var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;
		tX = tMat.col1.x * rX + tMat.col2.x * rY;
		rY = tMat.col1.y * rX + tMat.col2.y * rY;
		rX = tX;
		var CdotX = b.m_linearVelocity.x + -b.m_angularVelocity * rY;
		var CdotY = b.m_linearVelocity.y + b.m_angularVelocity * rX;
		tMat = this.m_mass;
		tX = CdotX + this.m_beta * this.m_C.x + this.m_gamma * this.m_impulse.x;
		tY = CdotY + this.m_beta * this.m_C.y + this.m_gamma * this.m_impulse.y;
		var impulseX = -(tMat.col1.x * tX + tMat.col2.x * tY);
		var impulseY = -(tMat.col1.y * tX + tMat.col2.y * tY);
		var oldImpulseX = this.m_impulse.x;
		var oldImpulseY = this.m_impulse.y;
		this.m_impulse.x += impulseX;
		this.m_impulse.y += impulseY;
		var maxImpulse = step.dt * this.m_maxForce;
		if(this.m_impulse.lengthSquared() > maxImpulse * maxImpulse) this.m_impulse.multiply(maxImpulse / this.m_impulse.length());
		impulseX = this.m_impulse.x - oldImpulseX;
		impulseY = this.m_impulse.y - oldImpulseY;
		b.m_linearVelocity.x += b.m_invMass * impulseX;
		b.m_linearVelocity.y += b.m_invMass * impulseY;
		b.m_angularVelocity += b.m_invI * (rX * impulseY - rY * impulseX);
	}
	,solvePositionConstraints: function(baumgarte) {
		return true;
	}
	,__class__: box2D.dynamics.joints.B2MouseJoint
});
box2D.dynamics.joints.B2MouseJointDef = function() {
	box2D.dynamics.joints.B2JointDef.call(this);
	this.target = new box2D.common.math.B2Vec2();
	this.type = 5;
	this.maxForce = 0.0;
	this.frequencyHz = 5.0;
	this.dampingRatio = 0.7;
};
$hxClasses["box2D.dynamics.joints.B2MouseJointDef"] = box2D.dynamics.joints.B2MouseJointDef;
box2D.dynamics.joints.B2MouseJointDef.__name__ = ["box2D","dynamics","joints","B2MouseJointDef"];
box2D.dynamics.joints.B2MouseJointDef.__super__ = box2D.dynamics.joints.B2JointDef;
box2D.dynamics.joints.B2MouseJointDef.prototype = $extend(box2D.dynamics.joints.B2JointDef.prototype,{
	__class__: box2D.dynamics.joints.B2MouseJointDef
});
box2D.dynamics.joints.B2PrismaticJoint = function(def) {
	box2D.dynamics.joints.B2Joint.call(this,def);
	this.m_localAnchor1 = new box2D.common.math.B2Vec2();
	this.m_localAnchor2 = new box2D.common.math.B2Vec2();
	this.m_localXAxis1 = new box2D.common.math.B2Vec2();
	this.m_localYAxis1 = new box2D.common.math.B2Vec2();
	this.m_axis = new box2D.common.math.B2Vec2();
	this.m_perp = new box2D.common.math.B2Vec2();
	this.m_K = new box2D.common.math.B2Mat33();
	this.m_impulse = new box2D.common.math.B2Vec3();
	var tMat;
	var tX;
	var tY;
	this.m_localAnchor1.setV(def.localAnchorA);
	this.m_localAnchor2.setV(def.localAnchorB);
	this.m_localXAxis1.setV(def.localAxisA);
	this.m_localYAxis1.x = -this.m_localXAxis1.y;
	this.m_localYAxis1.y = this.m_localXAxis1.x;
	this.m_refAngle = def.referenceAngle;
	this.m_impulse.setZero();
	this.m_motorMass = 0.0;
	this.m_motorImpulse = 0.0;
	this.m_lowerTranslation = def.lowerTranslation;
	this.m_upperTranslation = def.upperTranslation;
	this.m_maxMotorForce = def.maxMotorForce;
	this.m_motorSpeed = def.motorSpeed;
	this.m_enableLimit = def.enableLimit;
	this.m_enableMotor = def.enableMotor;
	this.m_limitState = 0;
	this.m_axis.setZero();
	this.m_perp.setZero();
};
$hxClasses["box2D.dynamics.joints.B2PrismaticJoint"] = box2D.dynamics.joints.B2PrismaticJoint;
box2D.dynamics.joints.B2PrismaticJoint.__name__ = ["box2D","dynamics","joints","B2PrismaticJoint"];
box2D.dynamics.joints.B2PrismaticJoint.__super__ = box2D.dynamics.joints.B2Joint;
box2D.dynamics.joints.B2PrismaticJoint.prototype = $extend(box2D.dynamics.joints.B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D.common.math.B2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x),inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));
	}
	,getReactionTorque: function(inv_dt) {
		return inv_dt * this.m_impulse.y;
	}
	,getJointTranslation: function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var p1 = bA.getWorldPoint(this.m_localAnchor1);
		var p2 = bB.getWorldPoint(this.m_localAnchor2);
		var dX = p2.x - p1.x;
		var dY = p2.y - p1.y;
		var axis = bA.getWorldVector(this.m_localXAxis1);
		var translation = axis.x * dX + axis.y * dY;
		return translation;
	}
	,getJointSpeed: function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var axis = bA.getWorldVector(this.m_localXAxis1);
		var v1 = bA.m_linearVelocity;
		var v2 = bB.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var w2 = bB.m_angularVelocity;
		var speed = dX * (-w1 * axis.y) + dY * (w1 * axis.x) + (axis.x * (v2.x + -w2 * r2Y - v1.x - -w1 * r1Y) + axis.y * (v2.y + w2 * r2X - v1.y - w1 * r1X));
		return speed;
	}
	,isLimitEnabled: function() {
		return this.m_enableLimit;
	}
	,enableLimit: function(flag) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_enableLimit = flag;
	}
	,getLowerLimit: function() {
		return this.m_lowerTranslation;
	}
	,getUpperLimit: function() {
		return this.m_upperTranslation;
	}
	,setLimits: function(lower,upper) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_lowerTranslation = lower;
		this.m_upperTranslation = upper;
	}
	,isMotorEnabled: function() {
		return this.m_enableMotor;
	}
	,enableMotor: function(flag) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_enableMotor = flag;
	}
	,setMotorSpeed: function(speed) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_motorSpeed = speed;
	}
	,getMotorSpeed: function() {
		return this.m_motorSpeed;
	}
	,setMaxMotorForce: function(force) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_maxMotorForce = force;
	}
	,getMotorForce: function() {
		return this.m_motorImpulse;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX;
		this.m_localCenterA.setV(bA.getLocalCenter());
		this.m_localCenterB.setV(bB.getLocalCenter());
		var xf1 = bA.getTransform();
		var xf2 = bB.getTransform();
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		this.m_invMassA = bA.m_invMass;
		this.m_invMassB = bB.m_invMass;
		this.m_invIA = bA.m_invI;
		this.m_invIB = bB.m_invI;
		this.m_axis.setV(box2D.common.math.B2Math.mulMV(xf1.R,this.m_localXAxis1));
		this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
		this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
		this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
		if(this.m_motorMass > Number.MIN_VALUE) this.m_motorMass = 1.0 / this.m_motorMass;
		this.m_perp.setV(box2D.common.math.B2Math.mulMV(xf1.R,this.m_localYAxis1));
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var m1 = this.m_invMassA;
		var m2 = this.m_invMassB;
		var i1 = this.m_invIA;
		var i2 = this.m_invIB;
		this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
		this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
		this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
		this.m_K.col2.x = this.m_K.col1.y;
		this.m_K.col2.y = i1 + i2;
		this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
		this.m_K.col3.x = this.m_K.col1.z;
		this.m_K.col3.y = this.m_K.col2.z;
		this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
		if(this.m_enableLimit) {
			var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
			if(box2D.common.math.B2Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * box2D.common.B2Settings.b2_linearSlop) this.m_limitState = 3; else if(jointTransition <= this.m_lowerTranslation) {
				if(this.m_limitState != 1) {
					this.m_limitState = 1;
					this.m_impulse.z = 0.0;
				}
			} else if(jointTransition >= this.m_upperTranslation) {
				if(this.m_limitState != 2) {
					this.m_limitState = 2;
					this.m_impulse.z = 0.0;
				}
			} else {
				this.m_limitState = 0;
				this.m_impulse.z = 0.0;
			}
		} else this.m_limitState = 0;
		if(this.m_enableMotor == false) this.m_motorImpulse = 0.0;
		if(step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x;
			var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y;
			var L1 = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;
			var L2 = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;
			bA.m_linearVelocity.x -= this.m_invMassA * PX;
			bA.m_linearVelocity.y -= this.m_invMassA * PY;
			bA.m_angularVelocity -= this.m_invIA * L1;
			bB.m_linearVelocity.x += this.m_invMassB * PX;
			bB.m_linearVelocity.y += this.m_invMassB * PY;
			bB.m_angularVelocity += this.m_invIB * L2;
		} else {
			this.m_impulse.setZero();
			this.m_motorImpulse = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var PX;
		var PY;
		var L1;
		var L2;
		if(this.m_enableMotor && this.m_limitState != 3) {
			var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorForce;
			this.m_motorImpulse = box2D.common.math.B2Math.clamp(this.m_motorImpulse + impulse,-maxImpulse,maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			PX = impulse * this.m_axis.x;
			PY = impulse * this.m_axis.y;
			L1 = impulse * this.m_a1;
			L2 = impulse * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		var Cdot1X = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
		var Cdot1Y = w2 - w1;
		if(this.m_enableLimit && this.m_limitState != 0) {
			var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var f1 = this.m_impulse.copy();
			var df = this.m_K.solve33(new box2D.common.math.B2Vec3(),-Cdot1X,-Cdot1Y,-Cdot2);
			this.m_impulse.add(df);
			if(this.m_limitState == 1) this.m_impulse.z = box2D.common.math.B2Math.max(this.m_impulse.z,0.0); else if(this.m_limitState == 2) this.m_impulse.z = box2D.common.math.B2Math.min(this.m_impulse.z,0.0);
			var bX = -Cdot1X - (this.m_impulse.z - f1.z) * this.m_K.col3.x;
			var bY = -Cdot1Y - (this.m_impulse.z - f1.z) * this.m_K.col3.y;
			var f2r = this.m_K.solve22(new box2D.common.math.B2Vec2(),bX,bY);
			f2r.x += f1.x;
			f2r.y += f1.y;
			this.m_impulse.x = f2r.x;
			this.m_impulse.y = f2r.y;
			df.x = this.m_impulse.x - f1.x;
			df.y = this.m_impulse.y - f1.y;
			df.z = this.m_impulse.z - f1.z;
			PX = df.x * this.m_perp.x + df.z * this.m_axis.x;
			PY = df.x * this.m_perp.y + df.z * this.m_axis.y;
			L1 = df.x * this.m_s1 + df.y + df.z * this.m_a1;
			L2 = df.x * this.m_s2 + df.y + df.z * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		} else {
			var df2 = this.m_K.solve22(new box2D.common.math.B2Vec2(),-Cdot1X,-Cdot1Y);
			this.m_impulse.x += df2.x;
			this.m_impulse.y += df2.y;
			PX = df2.x * this.m_perp.x;
			PY = df2.x * this.m_perp.y;
			L1 = df2.x * this.m_s1 + df2.y;
			L2 = df2.x * this.m_s2 + df2.y;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		bA.m_linearVelocity.setV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.setV(v2);
		bB.m_angularVelocity = w2;
	}
	,solvePositionConstraints: function(baumgarte) {
		var limitC;
		var oldLimitImpulse;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var c1 = bA.m_sweep.c;
		var a1 = bA.m_sweep.a;
		var c2 = bB.m_sweep.c;
		var a2 = bB.m_sweep.a;
		var tMat;
		var tX;
		var m1;
		var m2;
		var i1;
		var i2;
		var linearError = 0.0;
		var angularError = 0.0;
		var active = false;
		var C2 = 0.0;
		var R1 = box2D.common.math.B2Mat22.fromAngle(a1);
		var R2 = box2D.common.math.B2Mat22.fromAngle(a2);
		tMat = R1;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = R2;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var dX = c2.x + r2X - c1.x - r1X;
		var dY = c2.y + r2Y - c1.y - r1Y;
		if(this.m_enableLimit) {
			this.m_axis = box2D.common.math.B2Math.mulMV(R1,this.m_localXAxis1);
			this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
			this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
			var translation = this.m_axis.x * dX + this.m_axis.y * dY;
			if(box2D.common.math.B2Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * box2D.common.B2Settings.b2_linearSlop) {
				C2 = box2D.common.math.B2Math.clamp(translation,-box2D.common.B2Settings.b2_maxLinearCorrection,box2D.common.B2Settings.b2_maxLinearCorrection);
				linearError = box2D.common.math.B2Math.abs(translation);
				active = true;
			} else if(translation <= this.m_lowerTranslation) {
				C2 = box2D.common.math.B2Math.clamp(translation - this.m_lowerTranslation + box2D.common.B2Settings.b2_linearSlop,-box2D.common.B2Settings.b2_maxLinearCorrection,0.0);
				linearError = this.m_lowerTranslation - translation;
				active = true;
			} else if(translation >= this.m_upperTranslation) {
				C2 = box2D.common.math.B2Math.clamp(translation - this.m_upperTranslation + box2D.common.B2Settings.b2_linearSlop,0.0,box2D.common.B2Settings.b2_maxLinearCorrection);
				linearError = translation - this.m_upperTranslation;
				active = true;
			}
		}
		this.m_perp = box2D.common.math.B2Math.mulMV(R1,this.m_localYAxis1);
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var impulse = new box2D.common.math.B2Vec3();
		var C1X = this.m_perp.x * dX + this.m_perp.y * dY;
		var C1Y = a2 - a1 - this.m_refAngle;
		linearError = box2D.common.math.B2Math.max(linearError,box2D.common.math.B2Math.abs(C1X));
		angularError = box2D.common.math.B2Math.abs(C1Y);
		if(active) {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
			this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
			this.m_K.col2.x = this.m_K.col1.y;
			this.m_K.col2.y = i1 + i2;
			this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
			this.m_K.col3.x = this.m_K.col1.z;
			this.m_K.col3.y = this.m_K.col2.z;
			this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
			this.m_K.solve33(impulse,-C1X,-C1Y,-C2);
		} else {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			var k12 = i1 * this.m_s1 + i2 * this.m_s2;
			var k22 = i1 + i2;
			this.m_K.col1.set(k11,k12,0.0);
			this.m_K.col2.set(k12,k22,0.0);
			var impulse1 = this.m_K.solve22(new box2D.common.math.B2Vec2(),-C1X,-C1Y);
			impulse.x = impulse1.x;
			impulse.y = impulse1.y;
			impulse.z = 0.0;
		}
		var PX = impulse.x * this.m_perp.x + impulse.z * this.m_axis.x;
		var PY = impulse.x * this.m_perp.y + impulse.z * this.m_axis.y;
		var L1 = impulse.x * this.m_s1 + impulse.y + impulse.z * this.m_a1;
		var L2 = impulse.x * this.m_s2 + impulse.y + impulse.z * this.m_a2;
		c1.x -= this.m_invMassA * PX;
		c1.y -= this.m_invMassA * PY;
		a1 -= this.m_invIA * L1;
		c2.x += this.m_invMassB * PX;
		c2.y += this.m_invMassB * PY;
		a2 += this.m_invIB * L2;
		bA.m_sweep.a = a1;
		bB.m_sweep.a = a2;
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		return linearError <= box2D.common.B2Settings.b2_linearSlop && angularError <= box2D.common.B2Settings.b2_angularSlop;
	}
	,__class__: box2D.dynamics.joints.B2PrismaticJoint
});
box2D.dynamics.joints.B2PrismaticJointDef = function() {
	box2D.dynamics.joints.B2JointDef.call(this);
	this.localAnchorA = new box2D.common.math.B2Vec2();
	this.localAnchorB = new box2D.common.math.B2Vec2();
	this.localAxisA = new box2D.common.math.B2Vec2();
	this.type = 2;
	this.localAxisA.set(1.0,0.0);
	this.referenceAngle = 0.0;
	this.enableLimit = false;
	this.lowerTranslation = 0.0;
	this.upperTranslation = 0.0;
	this.enableMotor = false;
	this.maxMotorForce = 0.0;
	this.motorSpeed = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2PrismaticJointDef"] = box2D.dynamics.joints.B2PrismaticJointDef;
box2D.dynamics.joints.B2PrismaticJointDef.__name__ = ["box2D","dynamics","joints","B2PrismaticJointDef"];
box2D.dynamics.joints.B2PrismaticJointDef.__super__ = box2D.dynamics.joints.B2JointDef;
box2D.dynamics.joints.B2PrismaticJointDef.prototype = $extend(box2D.dynamics.joints.B2JointDef.prototype,{
	initialize: function(bA,bB,anchor,axis) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.getLocalPoint(anchor);
		this.localAnchorB = this.bodyB.getLocalPoint(anchor);
		this.localAxisA = this.bodyA.getLocalVector(axis);
		this.referenceAngle = this.bodyB.getAngle() - this.bodyA.getAngle();
	}
	,__class__: box2D.dynamics.joints.B2PrismaticJointDef
});
box2D.dynamics.joints.B2PulleyJoint = function(def) {
	box2D.dynamics.joints.B2Joint.call(this,def);
	this.m_groundAnchor1 = new box2D.common.math.B2Vec2();
	this.m_groundAnchor2 = new box2D.common.math.B2Vec2();
	this.m_localAnchor1 = new box2D.common.math.B2Vec2();
	this.m_localAnchor2 = new box2D.common.math.B2Vec2();
	this.m_u1 = new box2D.common.math.B2Vec2();
	this.m_u2 = new box2D.common.math.B2Vec2();
	var tMat;
	var tX;
	var tY;
	this.m_ground = this.m_bodyA.m_world.m_groundBody;
	this.m_groundAnchor1.x = def.groundAnchorA.x - this.m_ground.m_xf.position.x;
	this.m_groundAnchor1.y = def.groundAnchorA.y - this.m_ground.m_xf.position.y;
	this.m_groundAnchor2.x = def.groundAnchorB.x - this.m_ground.m_xf.position.x;
	this.m_groundAnchor2.y = def.groundAnchorB.y - this.m_ground.m_xf.position.y;
	this.m_localAnchor1.setV(def.localAnchorA);
	this.m_localAnchor2.setV(def.localAnchorB);
	this.m_ratio = def.ratio;
	this.m_constant = def.lengthA + this.m_ratio * def.lengthB;
	this.m_maxLength1 = box2D.common.math.B2Math.min(def.maxLengthA,this.m_constant - this.m_ratio * box2D.dynamics.joints.B2PulleyJoint.b2_minPulleyLength);
	this.m_maxLength2 = box2D.common.math.B2Math.min(def.maxLengthB,(this.m_constant - box2D.dynamics.joints.B2PulleyJoint.b2_minPulleyLength) / this.m_ratio);
	this.m_impulse = 0.0;
	this.m_limitImpulse1 = 0.0;
	this.m_limitImpulse2 = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2PulleyJoint"] = box2D.dynamics.joints.B2PulleyJoint;
box2D.dynamics.joints.B2PulleyJoint.__name__ = ["box2D","dynamics","joints","B2PulleyJoint"];
box2D.dynamics.joints.B2PulleyJoint.__super__ = box2D.dynamics.joints.B2Joint;
box2D.dynamics.joints.B2PulleyJoint.prototype = $extend(box2D.dynamics.joints.B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D.common.math.B2Vec2(inv_dt * this.m_impulse * this.m_u2.x,inv_dt * this.m_impulse * this.m_u2.y);
	}
	,getReactionTorque: function(inv_dt) {
		return 0.0;
	}
	,getGroundAnchorA: function() {
		var a = this.m_ground.m_xf.position.copy();
		a.add(this.m_groundAnchor1);
		return a;
	}
	,getGroundAnchorB: function() {
		var a = this.m_ground.m_xf.position.copy();
		a.add(this.m_groundAnchor2);
		return a;
	}
	,getLength1: function() {
		var p = this.m_bodyA.getWorldPoint(this.m_localAnchor1);
		var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var dX = p.x - sX;
		var dY = p.y - sY;
		return Math.sqrt(dX * dX + dY * dY);
	}
	,getLength2: function() {
		var p = this.m_bodyB.getWorldPoint(this.m_localAnchor2);
		var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		var dX = p.x - sX;
		var dY = p.y - sY;
		return Math.sqrt(dX * dX + dY * dY);
	}
	,getRatio: function() {
		return this.m_ratio;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		this.m_u1.set(p1X - s1X,p1Y - s1Y);
		this.m_u2.set(p2X - s2X,p2Y - s2Y);
		var length1 = this.m_u1.length();
		var length2 = this.m_u2.length();
		if(length1 > box2D.common.B2Settings.b2_linearSlop) this.m_u1.multiply(1.0 / length1); else this.m_u1.setZero();
		if(length2 > box2D.common.B2Settings.b2_linearSlop) this.m_u2.multiply(1.0 / length2); else this.m_u2.setZero();
		var C = this.m_constant - length1 - this.m_ratio * length2;
		if(C > 0.0) {
			this.m_state = 0;
			this.m_impulse = 0.0;
		} else this.m_state = 2;
		if(length1 < this.m_maxLength1) {
			this.m_limitState1 = 0;
			this.m_limitImpulse1 = 0.0;
		} else this.m_limitState1 = 2;
		if(length2 < this.m_maxLength2) {
			this.m_limitState2 = 0;
			this.m_limitImpulse2 = 0.0;
		} else this.m_limitState2 = 2;
		var cr1u1 = r1X * this.m_u1.y - r1Y * this.m_u1.x;
		var cr2u2 = r2X * this.m_u2.y - r2Y * this.m_u2.x;
		this.m_limitMass1 = bA.m_invMass + bA.m_invI * cr1u1 * cr1u1;
		this.m_limitMass2 = bB.m_invMass + bB.m_invI * cr2u2 * cr2u2;
		this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;
		this.m_limitMass1 = 1.0 / this.m_limitMass1;
		this.m_limitMass2 = 1.0 / this.m_limitMass2;
		this.m_pulleyMass = 1.0 / this.m_pulleyMass;
		if(step.warmStarting) {
			this.m_impulse *= step.dtRatio;
			this.m_limitImpulse1 *= step.dtRatio;
			this.m_limitImpulse2 *= step.dtRatio;
			var P1X = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.x;
			var P1Y = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.y;
			var P2X = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.x;
			var P2Y = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.y;
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		} else {
			this.m_impulse = 0.0;
			this.m_limitImpulse1 = 0.0;
			this.m_limitImpulse2 = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var v1X;
		var v1Y;
		var v2X;
		var v2Y;
		var P1X;
		var P1Y;
		var P2X;
		var P2Y;
		var Cdot;
		var impulse;
		var oldImpulse;
		if(this.m_state == 2) {
			v1X = bA.m_linearVelocity.x + -bA.m_angularVelocity * r1Y;
			v1Y = bA.m_linearVelocity.y + bA.m_angularVelocity * r1X;
			v2X = bB.m_linearVelocity.x + -bB.m_angularVelocity * r2Y;
			v2Y = bB.m_linearVelocity.y + bB.m_angularVelocity * r2X;
			Cdot = -(this.m_u1.x * v1X + this.m_u1.y * v1Y) - this.m_ratio * (this.m_u2.x * v2X + this.m_u2.y * v2Y);
			impulse = this.m_pulleyMass * -Cdot;
			oldImpulse = this.m_impulse;
			this.m_impulse = box2D.common.math.B2Math.max(0.0,this.m_impulse + impulse);
			impulse = this.m_impulse - oldImpulse;
			P1X = -impulse * this.m_u1.x;
			P1Y = -impulse * this.m_u1.y;
			P2X = -this.m_ratio * impulse * this.m_u2.x;
			P2Y = -this.m_ratio * impulse * this.m_u2.y;
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		}
		if(this.m_limitState1 == 2) {
			v1X = bA.m_linearVelocity.x + -bA.m_angularVelocity * r1Y;
			v1Y = bA.m_linearVelocity.y + bA.m_angularVelocity * r1X;
			Cdot = -(this.m_u1.x * v1X + this.m_u1.y * v1Y);
			impulse = -this.m_limitMass1 * Cdot;
			oldImpulse = this.m_limitImpulse1;
			this.m_limitImpulse1 = box2D.common.math.B2Math.max(0.0,this.m_limitImpulse1 + impulse);
			impulse = this.m_limitImpulse1 - oldImpulse;
			P1X = -impulse * this.m_u1.x;
			P1Y = -impulse * this.m_u1.y;
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
		}
		if(this.m_limitState2 == 2) {
			v2X = bB.m_linearVelocity.x + -bB.m_angularVelocity * r2Y;
			v2Y = bB.m_linearVelocity.y + bB.m_angularVelocity * r2X;
			Cdot = -(this.m_u2.x * v2X + this.m_u2.y * v2Y);
			impulse = -this.m_limitMass2 * Cdot;
			oldImpulse = this.m_limitImpulse2;
			this.m_limitImpulse2 = box2D.common.math.B2Math.max(0.0,this.m_limitImpulse2 + impulse);
			impulse = this.m_limitImpulse2 - oldImpulse;
			P2X = -impulse * this.m_u2.x;
			P2Y = -impulse * this.m_u2.y;
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		}
	}
	,solvePositionConstraints: function(baumgarte) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		var r1X;
		var r1Y;
		var r2X;
		var r2Y;
		var p1X;
		var p1Y;
		var p2X;
		var p2Y;
		var length1;
		var length2;
		var C;
		var impulse;
		var oldImpulse;
		var oldLimitPositionImpulse;
		var tX;
		var linearError = 0.0;
		if(this.m_state == 2) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
			r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
			r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
			r2X = tX;
			p1X = bA.m_sweep.c.x + r1X;
			p1Y = bA.m_sweep.c.y + r1Y;
			p2X = bB.m_sweep.c.x + r2X;
			p2Y = bB.m_sweep.c.y + r2Y;
			this.m_u1.set(p1X - s1X,p1Y - s1Y);
			this.m_u2.set(p2X - s2X,p2Y - s2Y);
			length1 = this.m_u1.length();
			length2 = this.m_u2.length();
			if(length1 > box2D.common.B2Settings.b2_linearSlop) this.m_u1.multiply(1.0 / length1); else this.m_u1.setZero();
			if(length2 > box2D.common.B2Settings.b2_linearSlop) this.m_u2.multiply(1.0 / length2); else this.m_u2.setZero();
			C = this.m_constant - length1 - this.m_ratio * length2;
			linearError = box2D.common.math.B2Math.max(linearError,-C);
			C = box2D.common.math.B2Math.clamp(C + box2D.common.B2Settings.b2_linearSlop,-box2D.common.B2Settings.b2_maxLinearCorrection,0.0);
			impulse = -this.m_pulleyMass * C;
			p1X = -impulse * this.m_u1.x;
			p1Y = -impulse * this.m_u1.y;
			p2X = -this.m_ratio * impulse * this.m_u2.x;
			p2Y = -this.m_ratio * impulse * this.m_u2.y;
			bA.m_sweep.c.x += bA.m_invMass * p1X;
			bA.m_sweep.c.y += bA.m_invMass * p1Y;
			bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
			bB.m_sweep.c.x += bB.m_invMass * p2X;
			bB.m_sweep.c.y += bB.m_invMass * p2Y;
			bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
			bA.synchronizeTransform();
			bB.synchronizeTransform();
		}
		if(this.m_limitState1 == 2) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
			r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
			r1X = tX;
			p1X = bA.m_sweep.c.x + r1X;
			p1Y = bA.m_sweep.c.y + r1Y;
			this.m_u1.set(p1X - s1X,p1Y - s1Y);
			length1 = this.m_u1.length();
			if(length1 > box2D.common.B2Settings.b2_linearSlop) {
				this.m_u1.x *= 1.0 / length1;
				this.m_u1.y *= 1.0 / length1;
			} else this.m_u1.setZero();
			C = this.m_maxLength1 - length1;
			linearError = box2D.common.math.B2Math.max(linearError,-C);
			C = box2D.common.math.B2Math.clamp(C + box2D.common.B2Settings.b2_linearSlop,-box2D.common.B2Settings.b2_maxLinearCorrection,0.0);
			impulse = -this.m_limitMass1 * C;
			p1X = -impulse * this.m_u1.x;
			p1Y = -impulse * this.m_u1.y;
			bA.m_sweep.c.x += bA.m_invMass * p1X;
			bA.m_sweep.c.y += bA.m_invMass * p1Y;
			bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
			bA.synchronizeTransform();
		}
		if(this.m_limitState2 == 2) {
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
			r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
			r2X = tX;
			p2X = bB.m_sweep.c.x + r2X;
			p2Y = bB.m_sweep.c.y + r2Y;
			this.m_u2.set(p2X - s2X,p2Y - s2Y);
			length2 = this.m_u2.length();
			if(length2 > box2D.common.B2Settings.b2_linearSlop) {
				this.m_u2.x *= 1.0 / length2;
				this.m_u2.y *= 1.0 / length2;
			} else this.m_u2.setZero();
			C = this.m_maxLength2 - length2;
			linearError = box2D.common.math.B2Math.max(linearError,-C);
			C = box2D.common.math.B2Math.clamp(C + box2D.common.B2Settings.b2_linearSlop,-box2D.common.B2Settings.b2_maxLinearCorrection,0.0);
			impulse = -this.m_limitMass2 * C;
			p2X = -impulse * this.m_u2.x;
			p2Y = -impulse * this.m_u2.y;
			bB.m_sweep.c.x += bB.m_invMass * p2X;
			bB.m_sweep.c.y += bB.m_invMass * p2Y;
			bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
			bB.synchronizeTransform();
		}
		return linearError < box2D.common.B2Settings.b2_linearSlop;
	}
	,__class__: box2D.dynamics.joints.B2PulleyJoint
});
box2D.dynamics.joints.B2PulleyJointDef = function() {
	box2D.dynamics.joints.B2JointDef.call(this);
	this.groundAnchorA = new box2D.common.math.B2Vec2();
	this.groundAnchorB = new box2D.common.math.B2Vec2();
	this.localAnchorA = new box2D.common.math.B2Vec2();
	this.localAnchorB = new box2D.common.math.B2Vec2();
	this.type = 4;
	this.groundAnchorA.set(-1.0,1.0);
	this.groundAnchorB.set(1.0,1.0);
	this.localAnchorA.set(-1.0,0.0);
	this.localAnchorB.set(1.0,0.0);
	this.lengthA = 0.0;
	this.maxLengthA = 0.0;
	this.lengthB = 0.0;
	this.maxLengthB = 0.0;
	this.ratio = 1.0;
	this.collideConnected = true;
};
$hxClasses["box2D.dynamics.joints.B2PulleyJointDef"] = box2D.dynamics.joints.B2PulleyJointDef;
box2D.dynamics.joints.B2PulleyJointDef.__name__ = ["box2D","dynamics","joints","B2PulleyJointDef"];
box2D.dynamics.joints.B2PulleyJointDef.__super__ = box2D.dynamics.joints.B2JointDef;
box2D.dynamics.joints.B2PulleyJointDef.prototype = $extend(box2D.dynamics.joints.B2JointDef.prototype,{
	initialize: function(bA,bB,gaA,gaB,anchorA,anchorB,r) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.groundAnchorA.setV(gaA);
		this.groundAnchorB.setV(gaB);
		this.localAnchorA = this.bodyA.getLocalPoint(anchorA);
		this.localAnchorB = this.bodyB.getLocalPoint(anchorB);
		var d1X = anchorA.x - gaA.x;
		var d1Y = anchorA.y - gaA.y;
		this.lengthA = Math.sqrt(d1X * d1X + d1Y * d1Y);
		var d2X = anchorB.x - gaB.x;
		var d2Y = anchorB.y - gaB.y;
		this.lengthB = Math.sqrt(d2X * d2X + d2Y * d2Y);
		this.ratio = r;
		var C = this.lengthA + this.ratio * this.lengthB;
		this.maxLengthA = C - this.ratio * box2D.dynamics.joints.B2PulleyJoint.b2_minPulleyLength;
		this.maxLengthB = (C - box2D.dynamics.joints.B2PulleyJoint.b2_minPulleyLength) / this.ratio;
	}
	,__class__: box2D.dynamics.joints.B2PulleyJointDef
});
box2D.dynamics.joints.B2RevoluteJoint = function(def) {
	box2D.dynamics.joints.B2Joint.call(this,def);
	this.K = new box2D.common.math.B2Mat22();
	this.K1 = new box2D.common.math.B2Mat22();
	this.K2 = new box2D.common.math.B2Mat22();
	this.K3 = new box2D.common.math.B2Mat22();
	this.impulse3 = new box2D.common.math.B2Vec3();
	this.impulse2 = new box2D.common.math.B2Vec2();
	this.reduced = new box2D.common.math.B2Vec2();
	this.m_localAnchor1 = new box2D.common.math.B2Vec2();
	this.m_localAnchor2 = new box2D.common.math.B2Vec2();
	this.m_impulse = new box2D.common.math.B2Vec3();
	this.m_mass = new box2D.common.math.B2Mat33();
	this.m_localAnchor1.setV(def.localAnchorA);
	this.m_localAnchor2.setV(def.localAnchorB);
	this.m_referenceAngle = def.referenceAngle;
	this.m_impulse.setZero();
	this.m_motorImpulse = 0.0;
	this.m_lowerAngle = def.lowerAngle;
	this.m_upperAngle = def.upperAngle;
	this.m_maxMotorTorque = def.maxMotorTorque;
	this.m_motorSpeed = def.motorSpeed;
	this.m_enableLimit = def.enableLimit;
	this.m_enableMotor = def.enableMotor;
	this.m_limitState = 0;
};
$hxClasses["box2D.dynamics.joints.B2RevoluteJoint"] = box2D.dynamics.joints.B2RevoluteJoint;
box2D.dynamics.joints.B2RevoluteJoint.__name__ = ["box2D","dynamics","joints","B2RevoluteJoint"];
box2D.dynamics.joints.B2RevoluteJoint.__super__ = box2D.dynamics.joints.B2Joint;
box2D.dynamics.joints.B2RevoluteJoint.prototype = $extend(box2D.dynamics.joints.B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D.common.math.B2Vec2(inv_dt * this.m_impulse.x,inv_dt * this.m_impulse.y);
	}
	,getReactionTorque: function(inv_dt) {
		return inv_dt * this.m_impulse.z;
	}
	,getJointAngle: function() {
		return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
	}
	,getJointSpeed: function() {
		return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
	}
	,isLimitEnabled: function() {
		return this.m_enableLimit;
	}
	,enableLimit: function(flag) {
		this.m_enableLimit = flag;
	}
	,getLowerLimit: function() {
		return this.m_lowerAngle;
	}
	,getUpperLimit: function() {
		return this.m_upperAngle;
	}
	,setLimits: function(lower,upper) {
		this.m_lowerAngle = lower;
		this.m_upperAngle = upper;
	}
	,isMotorEnabled: function() {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		return this.m_enableMotor;
	}
	,enableMotor: function(flag) {
		this.m_enableMotor = flag;
	}
	,setMotorSpeed: function(speed) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_motorSpeed = speed;
	}
	,getMotorSpeed: function() {
		return this.m_motorSpeed;
	}
	,setMaxMotorTorque: function(torque) {
		this.m_maxMotorTorque = torque;
	}
	,getMotorTorque: function() {
		return this.m_maxMotorTorque;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX;
		if(this.m_enableMotor || this.m_enableLimit) {
		}
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var m1 = bA.m_invMass;
		var m2 = bB.m_invMass;
		var i1 = bA.m_invI;
		var i2 = bB.m_invI;
		this.m_mass.col1.x = m1 + m2 + r1Y * r1Y * i1 + r2Y * r2Y * i2;
		this.m_mass.col2.x = -r1Y * r1X * i1 - r2Y * r2X * i2;
		this.m_mass.col3.x = -r1Y * i1 - r2Y * i2;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = m1 + m2 + r1X * r1X * i1 + r2X * r2X * i2;
		this.m_mass.col3.y = r1X * i1 + r2X * i2;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = i1 + i2;
		this.m_motorMass = 1.0 / (i1 + i2);
		if(this.m_enableMotor == false) this.m_motorImpulse = 0.0;
		if(this.m_enableLimit) {
			var jointAngle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
			if(box2D.common.math.B2Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * box2D.common.B2Settings.b2_angularSlop) this.m_limitState = 3; else if(jointAngle <= this.m_lowerAngle) {
				if(this.m_limitState != 1) this.m_impulse.z = 0.0;
				this.m_limitState = 1;
			} else if(jointAngle >= this.m_upperAngle) {
				if(this.m_limitState != 2) this.m_impulse.z = 0.0;
				this.m_limitState = 2;
			} else {
				this.m_limitState = 0;
				this.m_impulse.z = 0.0;
			}
		} else this.m_limitState = 0;
		if(step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x;
			var PY = this.m_impulse.y;
			bA.m_linearVelocity.x -= m1 * PX;
			bA.m_linearVelocity.y -= m1 * PY;
			bA.m_angularVelocity -= i1 * (r1X * PY - r1Y * PX + this.m_motorImpulse + this.m_impulse.z);
			bB.m_linearVelocity.x += m2 * PX;
			bB.m_linearVelocity.y += m2 * PY;
			bB.m_angularVelocity += i2 * (r2X * PY - r2Y * PX + this.m_motorImpulse + this.m_impulse.z);
		} else {
			this.m_impulse.setZero();
			this.m_motorImpulse = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX;
		var newImpulse;
		var r1X;
		var r1Y;
		var r2X;
		var r2Y;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var m1 = bA.m_invMass;
		var m2 = bB.m_invMass;
		var i1 = bA.m_invI;
		var i2 = bB.m_invI;
		if(this.m_enableMotor && this.m_limitState != 3) {
			var Cdot = w2 - w1 - this.m_motorSpeed;
			var impulse = this.m_motorMass * -Cdot;
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorTorque;
			this.m_motorImpulse = box2D.common.math.B2Math.clamp(this.m_motorImpulse + impulse,-maxImpulse,maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			w1 -= i1 * impulse;
			w2 += i2 * impulse;
		}
		if(this.m_enableLimit && this.m_limitState != 0) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
			r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
			r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
			r2X = tX;
			var Cdot1X = v2.x + -w2 * r2Y - v1.x - -w1 * r1Y;
			var Cdot1Y = v2.y + w2 * r2X - v1.y - w1 * r1X;
			var Cdot2 = w2 - w1;
			this.m_mass.solve33(this.impulse3,-Cdot1X,-Cdot1Y,-Cdot2);
			if(this.m_limitState == 3) this.m_impulse.add(this.impulse3); else if(this.m_limitState == 1) {
				newImpulse = this.m_impulse.z + this.impulse3.z;
				if(newImpulse < 0.0) {
					this.m_mass.solve22(this.reduced,-Cdot1X,-Cdot1Y);
					this.impulse3.x = this.reduced.x;
					this.impulse3.y = this.reduced.y;
					this.impulse3.z = -this.m_impulse.z;
					this.m_impulse.x += this.reduced.x;
					this.m_impulse.y += this.reduced.y;
					this.m_impulse.z = 0.0;
				}
			} else if(this.m_limitState == 2) {
				newImpulse = this.m_impulse.z + this.impulse3.z;
				if(newImpulse > 0.0) {
					this.m_mass.solve22(this.reduced,-Cdot1X,-Cdot1Y);
					this.impulse3.x = this.reduced.x;
					this.impulse3.y = this.reduced.y;
					this.impulse3.z = -this.m_impulse.z;
					this.m_impulse.x += this.reduced.x;
					this.m_impulse.y += this.reduced.y;
					this.m_impulse.z = 0.0;
				}
			}
			v1.x -= m1 * this.impulse3.x;
			v1.y -= m1 * this.impulse3.y;
			w1 -= i1 * (r1X * this.impulse3.y - r1Y * this.impulse3.x + this.impulse3.z);
			v2.x += m2 * this.impulse3.x;
			v2.y += m2 * this.impulse3.y;
			w2 += i2 * (r2X * this.impulse3.y - r2Y * this.impulse3.x + this.impulse3.z);
		} else {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
			r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
			r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
			r2X = tX;
			var CdotX = v2.x + -w2 * r2Y - v1.x - -w1 * r1Y;
			var CdotY = v2.y + w2 * r2X - v1.y - w1 * r1X;
			this.m_mass.solve22(this.impulse2,-CdotX,-CdotY);
			this.m_impulse.x += this.impulse2.x;
			this.m_impulse.y += this.impulse2.y;
			v1.x -= m1 * this.impulse2.x;
			v1.y -= m1 * this.impulse2.y;
			w1 -= i1 * (r1X * this.impulse2.y - r1Y * this.impulse2.x);
			v2.x += m2 * this.impulse2.x;
			v2.y += m2 * this.impulse2.y;
			w2 += i2 * (r2X * this.impulse2.y - r2Y * this.impulse2.x);
		}
		bA.m_linearVelocity.setV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.setV(v2);
		bB.m_angularVelocity = w2;
	}
	,solvePositionConstraints: function(baumgarte) {
		var oldLimitImpulse;
		var C;
		var tMat;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var angularError = 0.0;
		var positionError = 0.0;
		var tX;
		var impulseX;
		var impulseY;
		if(this.m_enableLimit && this.m_limitState != 0) {
			var angle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
			var limitImpulse = 0.0;
			if(this.m_limitState == 3) {
				C = box2D.common.math.B2Math.clamp(angle - this.m_lowerAngle,-box2D.common.B2Settings.b2_maxAngularCorrection,box2D.common.B2Settings.b2_maxAngularCorrection);
				limitImpulse = -this.m_motorMass * C;
				angularError = box2D.common.math.B2Math.abs(C);
			} else if(this.m_limitState == 1) {
				C = angle - this.m_lowerAngle;
				angularError = -C;
				C = box2D.common.math.B2Math.clamp(C + box2D.common.B2Settings.b2_angularSlop,-box2D.common.B2Settings.b2_maxAngularCorrection,0.0);
				limitImpulse = -this.m_motorMass * C;
			} else if(this.m_limitState == 2) {
				C = angle - this.m_upperAngle;
				angularError = C;
				C = box2D.common.math.B2Math.clamp(C - box2D.common.B2Settings.b2_angularSlop,0.0,box2D.common.B2Settings.b2_maxAngularCorrection);
				limitImpulse = -this.m_motorMass * C;
			}
			bA.m_sweep.a -= bA.m_invI * limitImpulse;
			bB.m_sweep.a += bB.m_invI * limitImpulse;
			bA.synchronizeTransform();
			bB.synchronizeTransform();
		}
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		var CLengthSquared = CX * CX + CY * CY;
		var CLength = Math.sqrt(CLengthSquared);
		positionError = CLength;
		var invMass1 = bA.m_invMass;
		var invMass2 = bB.m_invMass;
		var invI1 = bA.m_invI;
		var invI2 = bB.m_invI;
		var k_allowedStretch = 10.0 * box2D.common.B2Settings.b2_linearSlop;
		if(CLengthSquared > k_allowedStretch * k_allowedStretch) {
			var uX = CX / CLength;
			var uY = CY / CLength;
			var k = invMass1 + invMass2;
			var m = 1.0 / k;
			impulseX = m * -CX;
			impulseY = m * -CY;
			var k_beta = 0.5;
			bA.m_sweep.c.x -= k_beta * invMass1 * impulseX;
			bA.m_sweep.c.y -= k_beta * invMass1 * impulseY;
			bB.m_sweep.c.x += k_beta * invMass2 * impulseX;
			bB.m_sweep.c.y += k_beta * invMass2 * impulseY;
			CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
			CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		}
		this.K1.col1.x = invMass1 + invMass2;
		this.K1.col2.x = 0.0;
		this.K1.col1.y = 0.0;
		this.K1.col2.y = invMass1 + invMass2;
		this.K2.col1.x = invI1 * r1Y * r1Y;
		this.K2.col2.x = -invI1 * r1X * r1Y;
		this.K2.col1.y = -invI1 * r1X * r1Y;
		this.K2.col2.y = invI1 * r1X * r1X;
		this.K3.col1.x = invI2 * r2Y * r2Y;
		this.K3.col2.x = -invI2 * r2X * r2Y;
		this.K3.col1.y = -invI2 * r2X * r2Y;
		this.K3.col2.y = invI2 * r2X * r2X;
		this.K.setM(this.K1);
		this.K.addM(this.K2);
		this.K.addM(this.K3);
		this.K.solve(box2D.dynamics.joints.B2RevoluteJoint.tImpulse,-CX,-CY);
		impulseX = box2D.dynamics.joints.B2RevoluteJoint.tImpulse.x;
		impulseY = box2D.dynamics.joints.B2RevoluteJoint.tImpulse.y;
		bA.m_sweep.c.x -= bA.m_invMass * impulseX;
		bA.m_sweep.c.y -= bA.m_invMass * impulseY;
		bA.m_sweep.a -= bA.m_invI * (r1X * impulseY - r1Y * impulseX);
		bB.m_sweep.c.x += bB.m_invMass * impulseX;
		bB.m_sweep.c.y += bB.m_invMass * impulseY;
		bB.m_sweep.a += bB.m_invI * (r2X * impulseY - r2Y * impulseX);
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		return positionError <= box2D.common.B2Settings.b2_linearSlop && angularError <= box2D.common.B2Settings.b2_angularSlop;
	}
	,__class__: box2D.dynamics.joints.B2RevoluteJoint
});
box2D.dynamics.joints.B2RevoluteJointDef = function() {
	box2D.dynamics.joints.B2JointDef.call(this);
	this.localAnchorA = new box2D.common.math.B2Vec2();
	this.localAnchorB = new box2D.common.math.B2Vec2();
	this.type = 1;
	this.localAnchorA.set(0.0,0.0);
	this.localAnchorB.set(0.0,0.0);
	this.referenceAngle = 0.0;
	this.lowerAngle = 0.0;
	this.upperAngle = 0.0;
	this.maxMotorTorque = 0.0;
	this.motorSpeed = 0.0;
	this.enableLimit = false;
	this.enableMotor = false;
};
$hxClasses["box2D.dynamics.joints.B2RevoluteJointDef"] = box2D.dynamics.joints.B2RevoluteJointDef;
box2D.dynamics.joints.B2RevoluteJointDef.__name__ = ["box2D","dynamics","joints","B2RevoluteJointDef"];
box2D.dynamics.joints.B2RevoluteJointDef.__super__ = box2D.dynamics.joints.B2JointDef;
box2D.dynamics.joints.B2RevoluteJointDef.prototype = $extend(box2D.dynamics.joints.B2JointDef.prototype,{
	initialize: function(bA,bB,anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.getLocalPoint(anchor);
		this.localAnchorB = this.bodyB.getLocalPoint(anchor);
		this.referenceAngle = this.bodyB.getAngle() - this.bodyA.getAngle();
	}
	,__class__: box2D.dynamics.joints.B2RevoluteJointDef
});
box2D.dynamics.joints.B2WeldJoint = function(def) {
	box2D.dynamics.joints.B2Joint.call(this,def);
	this.m_localAnchorA = new box2D.common.math.B2Vec2();
	this.m_localAnchorB = new box2D.common.math.B2Vec2();
	this.m_impulse = new box2D.common.math.B2Vec3();
	this.m_mass = new box2D.common.math.B2Mat33();
	this.m_localAnchorA.setV(def.localAnchorA);
	this.m_localAnchorB.setV(def.localAnchorB);
	this.m_referenceAngle = def.referenceAngle;
	this.m_impulse.setZero();
	this.m_mass = new box2D.common.math.B2Mat33();
};
$hxClasses["box2D.dynamics.joints.B2WeldJoint"] = box2D.dynamics.joints.B2WeldJoint;
box2D.dynamics.joints.B2WeldJoint.__name__ = ["box2D","dynamics","joints","B2WeldJoint"];
box2D.dynamics.joints.B2WeldJoint.__super__ = box2D.dynamics.joints.B2Joint;
box2D.dynamics.joints.B2WeldJoint.prototype = $extend(box2D.dynamics.joints.B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchorA);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchorB);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D.common.math.B2Vec2(inv_dt * this.m_impulse.x,inv_dt * this.m_impulse.y);
	}
	,getReactionTorque: function(inv_dt) {
		return inv_dt * this.m_impulse.z;
	}
	,initVelocityConstraints: function(step) {
		var tMat;
		var tX;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = tMat.col1.x * rAX + tMat.col2.x * rAY;
		rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * rBX + tMat.col2.x * rBY;
		rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
		this.m_mass.col2.x = -rAY * rAX * iA - rBY * rBX * iB;
		this.m_mass.col3.x = -rAY * iA - rBY * iB;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
		this.m_mass.col3.y = rAX * iA + rBX * iB;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = iA + iB;
		if(step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_impulse.z *= step.dtRatio;
			bA.m_linearVelocity.x -= mA * this.m_impulse.x;
			bA.m_linearVelocity.y -= mA * this.m_impulse.y;
			bA.m_angularVelocity -= iA * (rAX * this.m_impulse.y - rAY * this.m_impulse.x + this.m_impulse.z);
			bB.m_linearVelocity.x += mB * this.m_impulse.x;
			bB.m_linearVelocity.y += mB * this.m_impulse.y;
			bB.m_angularVelocity += iB * (rBX * this.m_impulse.y - rBY * this.m_impulse.x + this.m_impulse.z);
		} else this.m_impulse.setZero();
	}
	,solveVelocityConstraints: function(step) {
		var tMat;
		var tX;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var vA = bA.m_linearVelocity;
		var wA = bA.m_angularVelocity;
		var vB = bB.m_linearVelocity;
		var wB = bB.m_angularVelocity;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = tMat.col1.x * rAX + tMat.col2.x * rAY;
		rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * rBX + tMat.col2.x * rBY;
		rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;
		rBX = tX;
		var Cdot1X = vB.x - wB * rBY - vA.x + wA * rAY;
		var Cdot1Y = vB.y + wB * rBX - vA.y - wA * rAX;
		var Cdot2 = wB - wA;
		var impulse = new box2D.common.math.B2Vec3();
		this.m_mass.solve33(impulse,-Cdot1X,-Cdot1Y,-Cdot2);
		this.m_impulse.add(impulse);
		vA.x -= mA * impulse.x;
		vA.y -= mA * impulse.y;
		wA -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
		vB.x += mB * impulse.x;
		vB.y += mB * impulse.y;
		wB += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
		bA.m_angularVelocity = wA;
		bB.m_angularVelocity = wB;
	}
	,solvePositionConstraints: function(baumgarte) {
		var tMat;
		var tX;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = tMat.col1.x * rAX + tMat.col2.x * rAY;
		rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * rBX + tMat.col2.x * rBY;
		rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		var C1X = bB.m_sweep.c.x + rBX - bA.m_sweep.c.x - rAX;
		var C1Y = bB.m_sweep.c.y + rBY - bA.m_sweep.c.y - rAY;
		var C2 = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
		var k_allowedStretch = 10.0 * box2D.common.B2Settings.b2_linearSlop;
		var positionError = Math.sqrt(C1X * C1X + C1Y * C1Y);
		var angularError = box2D.common.math.B2Math.abs(C2);
		if(positionError > k_allowedStretch) {
			iA *= 1.0;
			iB *= 1.0;
		}
		this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
		this.m_mass.col2.x = -rAY * rAX * iA - rBY * rBX * iB;
		this.m_mass.col3.x = -rAY * iA - rBY * iB;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
		this.m_mass.col3.y = rAX * iA + rBX * iB;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = iA + iB;
		var impulse = new box2D.common.math.B2Vec3();
		this.m_mass.solve33(impulse,-C1X,-C1Y,-C2);
		bA.m_sweep.c.x -= mA * impulse.x;
		bA.m_sweep.c.y -= mA * impulse.y;
		bA.m_sweep.a -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
		bB.m_sweep.c.x += mB * impulse.x;
		bB.m_sweep.c.y += mB * impulse.y;
		bB.m_sweep.a += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		return positionError <= box2D.common.B2Settings.b2_linearSlop && angularError <= box2D.common.B2Settings.b2_angularSlop;
	}
	,__class__: box2D.dynamics.joints.B2WeldJoint
});
box2D.dynamics.joints.B2WeldJointDef = function() {
	box2D.dynamics.joints.B2JointDef.call(this);
	this.localAnchorA = new box2D.common.math.B2Vec2();
	this.localAnchorB = new box2D.common.math.B2Vec2();
	this.type = 8;
	this.referenceAngle = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2WeldJointDef"] = box2D.dynamics.joints.B2WeldJointDef;
box2D.dynamics.joints.B2WeldJointDef.__name__ = ["box2D","dynamics","joints","B2WeldJointDef"];
box2D.dynamics.joints.B2WeldJointDef.__super__ = box2D.dynamics.joints.B2JointDef;
box2D.dynamics.joints.B2WeldJointDef.prototype = $extend(box2D.dynamics.joints.B2JointDef.prototype,{
	initialize: function(bA,bB,anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.setV(this.bodyA.getLocalPoint(anchor));
		this.localAnchorB.setV(this.bodyB.getLocalPoint(anchor));
		this.referenceAngle = this.bodyB.getAngle() - this.bodyA.getAngle();
	}
	,__class__: box2D.dynamics.joints.B2WeldJointDef
});
var com = {};
com.yagp = {};
com.yagp.Gif = function() {
	this.backgroundColor = 0;
	this.frames = new Array();
};
$hxClasses["com.yagp.Gif"] = com.yagp.Gif;
com.yagp.Gif.__name__ = ["com","yagp","Gif"];
com.yagp.Gif.prototype = {
	get_width: function() {
		return this.lsd.width;
	}
	,get_height: function() {
		return this.lsd.height;
	}
	,get_backgroundIndex: function() {
		return this.lsd.backgroundColorIndex;
	}
	,get_loops: function() {
		if(this.netscape != null) return this.netscape.iterations; else return 1;
	}
	,dispose: function() {
		this.lsd = null;
		this.netscape = null;
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			frame.dispose();
		}
		this.frames = null;
	}
	,__class__: com.yagp.Gif
	,__properties__: {get_loops:"get_loops",get_backgroundIndex:"get_backgroundIndex",get_height:"get_height",get_width:"get_width"}
};
com.yagp.GifDecoder = function(input) {
	this._input = input;
};
$hxClasses["com.yagp.GifDecoder"] = com.yagp.GifDecoder;
com.yagp.GifDecoder.__name__ = ["com","yagp","GifDecoder"];
com.yagp.GifDecoder.parseBytes = function(bytes) {
	var gifBytes = new com.yagp.structs.GifBytes(bytes);
	var decoder = new com.yagp.GifDecoder(gifBytes);
	decoder.decodeGif();
	return decoder.gif;
};
com.yagp.GifDecoder.parseByteArray = function(byteArray) {
	var bytes = haxe.io.Bytes.alloc(byteArray.length);
	byteArray.position = 0;
	var _g1 = 0;
	var _g = byteArray.length;
	while(_g1 < _g) {
		var i = _g1++;
		bytes.set(i,byteArray.readByte());
	}
	return com.yagp.GifDecoder.parseBytes(bytes);
};
com.yagp.GifDecoder.parseText = function(text) {
	return com.yagp.GifDecoder.parseBytes(haxe.io.Bytes.ofString(text));
};
com.yagp.GifDecoder.parseBytesAsync = function(bytes,completeHandler,errorHandler) {
	haxe.Log.trace("Asynchronous parsing currently only supported on neko and cpp platforms.",{ fileName : "GifDecoder.hx", lineNumber : 121, className : "com.yagp.GifDecoder", methodName : "parseBytesAsync"});
	return false;
};
com.yagp.GifDecoder.parseByteArrayAsync = function(byteArray,completeHandler,errorHandler) {
	haxe.Log.trace("Asynchronous parsing currently only supported on neko and cpp platforms.",{ fileName : "GifDecoder.hx", lineNumber : 140, className : "com.yagp.GifDecoder", methodName : "parseByteArrayAsync"});
	return false;
};
com.yagp.GifDecoder.parseTextAsync = function(text,completeHandler,errorHandler) {
	haxe.Log.trace("Asynchronous parsing currently only supported on neko and cpp platforms.",{ fileName : "GifDecoder.hx", lineNumber : 159, className : "com.yagp.GifDecoder", methodName : "parseTextAsync"});
	return false;
};
com.yagp.GifDecoder.prototype = {
	get_input: function() {
		return this._input;
	}
	,set_input: function(v) {
		return this._input = v;
	}
	,decodeAsync: function(completeHandler,errorHandler) {
		haxe.Log.trace("Asynchronous parsing currently only supported on neko and cpp platforms.",{ fileName : "GifDecoder.hx", lineNumber : 254, className : "com.yagp.GifDecoder", methodName : "decodeAsync"});
		return false;
	}
	,_decodeAsync: function() {
	}
	,decodeGif: function() {
		if(this._input == null) return null;
		this._input.position = 0;
		this.gif = new com.yagp.Gif();
		if(this.readHeader()) {
			var lsd = new com.yagp.structs.LSD(this._input);
			this.gif.lsd = lsd;
			if(lsd.globalColorTable) {
				this._globalColorTable = this.readColorTable(lsd.globalColorTableSize);
				if(lsd.backgroundColorIndex < this._globalColorTable.length) this.gif.backgroundColor = this._globalColorTable[lsd.backgroundColorIndex];
			}
			this.readBlock();
			this._graphicControlExtension = null;
			this._globalColorTable = null;
			this._input = null;
		} else throw "This is not a GIF file, or header invalid.";
		return this.gif;
	}
	,readBlock: function() {
		var id;
		while(true) {
			id = this._input.readByte();
			switch(id) {
			case 44:
				this.readImage();
				break;
			case 33:
				this.readExtension();
				break;
			case 59:
				return;
			}
		}
	}
	,readExtension: function() {
		var subId = this._input.readByte();
		switch(subId) {
		case 249:
			this._graphicControlExtension = new com.yagp.structs.GraphicsControl(this._input);
			break;
		case 255:
			this.readApplicationExtension();
			break;
		default:
			this.skipBlock();
		}
	}
	,readApplicationExtension: function() {
		this._input.position++;
		var name = this._input.readUTFBytes(8);
		var version = this._input.readUTFBytes(3);
		switch(name) {
		case "NETSCAPE":
			this.gif.netscape = new com.yagp.structs.NetscapeExtension(this._input);
			break;
		default:
			this.skipBlock();
		}
	}
	,readImage: function() {
		var imageDescriptor = new com.yagp.structs.ImageDescriptor(this._input);
		var table = this._globalColorTable;
		if(imageDescriptor.localColorTable) table = this.readColorTable(imageDescriptor.localColorTableSize);
		if(table == null) {
			throw "Image didn't have color table!";
			return;
		}
		var decoder = new com.yagp.structs.GraphicsDecoder(this._input,imageDescriptor);
		var gifFrame = new com.yagp.structs.GifFrame(table,imageDescriptor,decoder,this._graphicControlExtension);
		this.gif.frames.push(gifFrame);
		table = null;
		decoder = null;
		this._graphicControlExtension = null;
	}
	,readHeader: function() {
		var valid = this._input.readUTFBytes(3) == "GIF";
		if(valid) {
			var version = this._input.readUTFBytes(3);
			if(version == "87a") this.gif.version = com.yagp.structs.GifVersion.GIF87a; else if(version == "89a") this.gif.version = com.yagp.structs.GifVersion.GIF89a;
			if(this.gif.version == null) this.gif.version = com.yagp.structs.GifVersion.GIF89a;
		}
		return valid;
	}
	,readColorTable: function(colorsCount) {
		var result = new Array();
		var _g = 0;
		while(_g < colorsCount) {
			var i = _g++;
			result[i] = -16777216 | this._input.readByte() << 16 | this._input.readByte() << 8 | this._input.readByte();
		}
		return result;
	}
	,skipBlock: function() {
		var blockSize = 0;
		do {
			blockSize = this._input.readByte();
			this._input.position += blockSize;
		} while(blockSize != 0);
	}
	,__class__: com.yagp.GifDecoder
	,__properties__: {set_input:"set_input",get_input:"get_input"}
};
com.yagp.GifPlayer = function(gif) {
	this._gif = gif;
	if(gif != null) {
		this._frames = gif.frames;
		this.data = new openfl.display.BitmapData(gif.lsd.width,gif.lsd.height,true,0);
		this._currFrame = 0;
		this._t = 0;
		this._loops = 0;
		this._maxLoops = this._gif.get_loops();
		this.playing = true;
		this.renderFrame(this._currGifFrame = gif.frames[0]);
	}
};
$hxClasses["com.yagp.GifPlayer"] = com.yagp.GifPlayer;
com.yagp.GifPlayer.__name__ = ["com","yagp","GifPlayer"];
com.yagp.GifPlayer.rect = null;
com.yagp.GifPlayer.point = null;
com.yagp.GifPlayer.prototype = {
	get_gif: function() {
		return this._gif;
	}
	,set_gif: function(v) {
		if(v != null) {
			if(this._prevData != null) {
				this._prevData.dispose();
				this._prevData = null;
			}
			if(this.data == null || this.data.width != v.lsd.width || this.data.height != v.lsd.height) {
				if(this.data != null) this.data.dispose();
				this.data = new openfl.display.BitmapData(v.lsd.width,v.lsd.height,true,0);
			}
			this._gif = v;
			this._frames = v.frames;
			this._currFrame = 0;
			this._t = 0;
			this._loops = 0;
			this._maxLoops = this._gif.get_loops();
			this.data.fillRect(this.data.rect,0);
			this.renderFrame(this._currGifFrame = this._gif.frames[0]);
		} else this._gif = null;
		return v;
	}
	,get_frame: function() {
		return this._currFrame;
	}
	,set_frame: function(v) {
		if(this._gif == null) return v;
		v = this.cropIndex(v);
		this._t = 0;
		if(this._currFrame == v) return v; else if(this.cropIndex(this._currFrame + 1) == v) {
			this.renderNext();
			return this._currFrame;
		} else {
			this.data.fillRect(this.data.rect,0);
			if(this._prevData != null) {
				this._prevData.dispose();
				this._prevData = null;
			}
			this._currFrame = 0;
			this._currGifFrame = this._frames[0];
			this.renderFrame(this._currGifFrame);
			while(this._currFrame != v) this.renderNext();
			return v;
		}
	}
	,get_framesCount: function() {
		if(this._gif != null) return this._frames.length; else return 0;
	}
	,cropIndex: function(v) {
		if(v < 0) {
			while(v < 0) v = this._frames.length - v;
			return v;
		} else if(v >= this._frames.length) return v % this._frames.length; else return v;
	}
	,update: function(elapsed) {
		if(!this.playing || this._gif == null) return;
		this._t += elapsed * 1000;
		var startFrame = this._currFrame;
		var targetFrame = this._currFrame;
		var localLoops = this._loops;
		while(this._frames[targetFrame].delay <= this._t) {
			this._t -= this._frames[targetFrame].delay;
			targetFrame++;
			if(targetFrame == this._frames.length) {
				if(this.loopEndHandler != null) {
					this._currFrame = targetFrame - 1;
					this.loopEndHandler();
					if(this._currFrame != targetFrame - 1) return;
					this._currFrame = startFrame;
				}
				if(this._maxLoops != 0 && ++localLoops >= this._maxLoops) {
					targetFrame--;
					while(this._currFrame != targetFrame) this.renderNext();
					this.playing = false;
					this._loops = this._maxLoops;
					this._t = this._currGifFrame.delay;
					if(this.animationEndHandler != null) this.animationEndHandler();
					return;
				}
				targetFrame = 0;
			}
		}
		if(targetFrame == startFrame) return;
		if(targetFrame < this._currFrame) {
			if(this._prevData != null) {
				this._prevData.dispose();
				this._prevData = null;
			}
			this.data.fillRect(this.data.rect,0);
			this._currFrame = 0;
			this.renderFrame(this._currGifFrame = this._frames[0]);
		}
		while(this._currFrame != targetFrame) this.renderNext();
	}
	,dispose: function(disposeGif) {
		if(disposeGif == null) disposeGif = false;
		if(disposeGif && this._gif != null) this._gif.dispose();
		this._gif = null;
		this._currGifFrame = null;
		this._frames = null;
		if(this._prevData != null) {
			this._prevData.dispose();
			this._prevData = null;
		}
		if(this.data != null) {
			this.data.dispose();
			this.data = null;
		}
	}
	,reset: function(play) {
		if(play == null) play = false;
		if(this._gif == null) return;
		this._loops = 0;
		this._t = 0;
		if(play) this.playing = true;
		if(this._prevData != null) {
			this._prevData.dispose();
			this._prevData = null;
		}
		this.data.fillRect(this.data.rect,0);
		this._currFrame = 0;
		this.renderFrame(this._currGifFrame = this._frames[0]);
	}
	,disposeFrame: function(frame) {
		var _g = frame.disposalMethod;
		switch(_g[1]) {
		case 2:
			com.yagp.GifPlayer.rect.setTo(frame.x,frame.y,frame.width,frame.height);
			this.data.fillRect(com.yagp.GifPlayer.rect,0);
			break;
		case 3:
			if(this._prevData != null) {
				com.yagp.GifPlayer.point.setTo(frame.x,frame.y);
				com.yagp.GifPlayer.rect.setTo(0,0,frame.width,frame.height);
				this.data.copyPixels(this._prevData,com.yagp.GifPlayer.rect,com.yagp.GifPlayer.point);
				this._prevData.dispose();
				this._prevData = null;
			} else throw "Not implemented";
			break;
		default:
		}
	}
	,renderFrame: function(frame) {
		if((function($this) {
			var $r;
			var _g = frame.disposalMethod;
			$r = (function($this) {
				var $r;
				switch(_g[1]) {
				case 3:
					$r = true;
					break;
				default:
					$r = false;
				}
				return $r;
			}($this));
			return $r;
		}(this))) {
			if(this._prevData != null) this._prevData.dispose();
			com.yagp.GifPlayer.rect.setTo(frame.x,frame.y,frame.width,frame.height);
			com.yagp.GifPlayer.point.setTo(0,0);
			this._prevData = new openfl.display.BitmapData(frame.width,frame.height,true,0);
			this._prevData.copyPixels(this.data,com.yagp.GifPlayer.rect,com.yagp.GifPlayer.point);
		}
		com.yagp.GifPlayer.rect.setTo(0,0,frame.width,frame.height);
		com.yagp.GifPlayer.point.setTo(frame.x,frame.y);
		this.data.copyPixels(frame.data,com.yagp.GifPlayer.rect,com.yagp.GifPlayer.point,null,null,true);
	}
	,renderNext: function() {
		this._currFrame++;
		if(this._currFrame == this._frames.length) {
			if(this._maxLoops != 0 && ++this._loops >= this._maxLoops) {
				this.playing = false;
				this._currFrame--;
				this._t = this._currGifFrame.delay;
				if(this.animationEndHandler != null) this.animationEndHandler();
				return;
			}
			this._currFrame = 0;
			if(this._prevData != null) {
				this._prevData.dispose();
				this._prevData = null;
			}
			this.data.fillRect(this.data.rect,0);
		} else this.disposeFrame(this._currGifFrame);
		this._currGifFrame = this._frames[this._currFrame];
		this.renderFrame(this._currGifFrame);
	}
	,fillBackground: function(frame,rect) {
		this.data.fillRect(rect,0);
	}
	,__class__: com.yagp.GifPlayer
	,__properties__: {get_framesCount:"get_framesCount",set_frame:"set_frame",get_frame:"get_frame",set_gif:"set_gif",get_gif:"get_gif"}
};
openfl.display.Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl.display.DisplayObjectContainer.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl.display.PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl.display.Bitmap;
openfl.display.Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl.display.Bitmap.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Bitmap.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = new openfl.geom.Rectangle(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds = bounds.transform(matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.bitmapData == null) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.bitmapData.width && point.y <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl._internal.renderer.cairo.CairoBitmap.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.__image.buffer.__srcImage != null) openfl._internal.renderer.dom.DOMBitmap.renderImage(this,renderSession); else openfl._internal.renderer.dom.DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__worldTransform,this.__worldColorTransform,this.__worldAlpha,this.blendMode,this.pixelSnapping);
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.push(openfl.display.DrawCommand.OverrideMatrix(this.__worldTransform));
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl.geom.Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl.geom.Matrix.__identity);
		openfl.display.DisplayObjectContainer.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl.display.Bitmap
});
com.yagp.GifPlayerWrapper = function(player) {
	this.timescale = 1;
	this._player = player;
	if(player != null) {
		openfl.display.Bitmap.call(this,player.data);
		this._t = haxe.Timer.stamp();
	} else openfl.display.Bitmap.call(this);
	this.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.resetTimer));
};
$hxClasses["com.yagp.GifPlayerWrapper"] = com.yagp.GifPlayerWrapper;
com.yagp.GifPlayerWrapper.__name__ = ["com","yagp","GifPlayerWrapper"];
com.yagp.GifPlayerWrapper.__super__ = openfl.display.Bitmap;
com.yagp.GifPlayerWrapper.prototype = $extend(openfl.display.Bitmap.prototype,{
	get_player: function() {
		return this._player;
	}
	,set_player: function(v) {
		if(v != null) {
			this._player = v;
			this.bitmapData = v.data;
			this._t = haxe.Timer.stamp();
		} else {
			this._player = null;
			this.bitmapData = null;
		}
		return this._player;
	}
	,get_playing: function() {
		if(this._player == null) return false; else return this._player.playing;
	}
	,set_playing: function(v) {
		if(this._player == null) return v; else return this._player.playing = v;
	}
	,get_animationEndHandler: function() {
		if(this._player == null) return null; else return this._player.animationEndHandler;
	}
	,set_animationEndHandler: function(v) {
		if(this._player == null) return v; else return this._player.animationEndHandler = v;
	}
	,get_loopEndHandler: function() {
		if(this._player == null) return null; else return this._player.loopEndHandler;
	}
	,set_loopEndHandler: function(v) {
		if(this._player == null) return v; else return this._player.loopEndHandler = v;
	}
	,get_gif: function() {
		if(this._player == null) return null; else return this._player._gif;
	}
	,set_gif: function(v) {
		if(this._player == null) return v; else return this._player.set_gif(v);
	}
	,get_frame: function() {
		if(this._player == null) return -1; else return this._player._currFrame;
	}
	,set_frame: function(v) {
		if(this._player == null) return v; else return this._player.set_frame(v);
	}
	,get_framesCount: function() {
		if(this._player != null) return this._player.get_framesCount(); else return 0;
	}
	,dispose: function(disposePlayer,disposeGif) {
		if(disposeGif == null) disposeGif = false;
		if(disposePlayer == null) disposePlayer = true;
		if(this._player != null) {
			if(disposePlayer) this._player.dispose(disposeGif);
			this._player = null;
			this.bitmapData = null;
		}
		this.removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
		this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.resetTimer));
	}
	,reset: function(play) {
		if(play == null) play = false;
		if(this._player != null) this._player.reset(play);
	}
	,resetTimer: function(e) {
		this._t = haxe.Timer.stamp();
	}
	,onEnterFrame: function(e) {
		if(this._player == null || this.stage == null) return;
		var stamp = haxe.Timer.stamp();
		this._player.update((stamp - this._t) * this.timescale * com.yagp.GifPlayerWrapper.globalTimescale);
		this._t = stamp;
	}
	,__class__: com.yagp.GifPlayerWrapper
	,__properties__: $extend(openfl.display.Bitmap.prototype.__properties__,{get_framesCount:"get_framesCount",set_frame:"set_frame",get_frame:"get_frame",set_gif:"set_gif",get_gif:"get_gif",set_loopEndHandler:"set_loopEndHandler",get_loopEndHandler:"get_loopEndHandler",set_animationEndHandler:"set_animationEndHandler",get_animationEndHandler:"get_animationEndHandler",set_playing:"set_playing",get_playing:"get_playing",set_player:"set_player",get_player:"get_player"})
});
com.yagp.GifRenderer = function(gif) {
	this._prevFrame = -1;
	this._gif = gif;
	this._drawTarget = new openfl.display.BitmapData(this._gif.lsd.width,this._gif.lsd.height,true,0);
};
$hxClasses["com.yagp.GifRenderer"] = com.yagp.GifRenderer;
com.yagp.GifRenderer.__name__ = ["com","yagp","GifRenderer"];
com.yagp.GifRenderer.createMap = function(gif,vertical) {
	if(vertical == null) vertical = false;
	var renderer = new com.yagp.GifRenderer(gif);
	var data = new openfl.display.BitmapData(gif.lsd.width * (vertical?1:gif.frames.length),gif.lsd.height * (vertical?gif.frames.length:1),true,0);
	renderer.setTarget(data);
	var xOffset;
	if(vertical) xOffset = 0; else xOffset = gif.lsd.width;
	var yOffset;
	if(vertical) yOffset = gif.lsd.height; else yOffset = 0;
	var _g1 = 0;
	var _g = gif.frames.length;
	while(_g1 < _g) {
		var i = _g1++;
		renderer.render(i,xOffset * i,yOffset * i);
	}
	var result = { data : data, width : gif.lsd.width, height : gif.lsd.height, frames : new Array()};
	var _g2 = 0;
	var _g11 = gif.frames;
	while(_g2 < _g11.length) {
		var frame = _g11[_g2];
		++_g2;
		result.frames.push(frame.delay);
	}
	renderer.dispose();
	return result;
};
com.yagp.GifRenderer.prototype = {
	setTarget: function(target) {
		this._target = target;
	}
	,dispose: function() {
		if(this._restorer != null) {
			this._restorer.dispose();
			this._restorer = null;
		}
		if(this._drawTarget != null) {
			this._drawTarget.dispose();
			this._drawTarget = null;
		}
		this._gif = null;
		this._target = null;
	}
	,render: function(frame,offsetX,offsetY) {
		if(this._gif == null || frame >= this._gif.frames.length || frame < 0 || this._target == null) return;
		if(this._prevFrame != frame) this.renderFrame(frame,true);
		this._target.copyPixels(this._drawTarget,this._drawTarget.rect,new openfl.geom.Point(offsetX,offsetY));
	}
	,renderFrame: function(frame,doRestore) {
		if(doRestore && frame > 0) {
			if(this._prevFrame + 1 != frame) {
				this._prevFrame = -1;
				while(this._prevFrame != frame - 1) this.renderFrame(this._prevFrame,true);
			}
			var pframe = this._gif.frames[this._prevFrame];
			var _g = pframe.disposalMethod;
			switch(_g[1]) {
			case 3:
				if(this._restorer != null) {
					this._drawTarget.copyPixels(this._restorer,pframe.data.rect,new openfl.geom.Point(pframe.x,pframe.y));
					this._restorer.dispose();
					this._restorer = null;
				}
				break;
			case 2:
				this._drawTarget.fillRect(new openfl.geom.Rectangle(pframe.x,pframe.y,pframe.width,pframe.height),0);
				break;
			default:
			}
		}
		if(frame == 0) this._drawTarget.fillRect(this._drawTarget.rect,0);
		var gframe = this._gif.frames[frame];
		if(gframe.disposalMethod == com.yagp.structs.DisposalMethod.RENDER_PREVIOUS) {
			if(this._restorer != null) this._restorer.dispose();
			this._restorer = new openfl.display.BitmapData(gframe.width,gframe.height,true,0);
			this._restorer.copyPixels(this._drawTarget,new openfl.geom.Rectangle(gframe.x,gframe.y,gframe.width,gframe.height),new openfl.geom.Point());
		}
		this._prevFrame = frame;
		this._drawTarget.copyPixels(gframe.data,gframe.data.rect,new openfl.geom.Point(gframe.x,gframe.y),null,null,true);
	}
	,__class__: com.yagp.GifRenderer
};
com.yagp.structs = {};
com.yagp.structs.DisposalMethod = $hxClasses["com.yagp.structs.DisposalMethod"] = { __ename__ : ["com","yagp","structs","DisposalMethod"], __constructs__ : ["UNSPECIFIED","NO_ACTION","FILL_BACKGROUND","RENDER_PREVIOUS","UNDEFINED"] };
com.yagp.structs.DisposalMethod.UNSPECIFIED = ["UNSPECIFIED",0];
com.yagp.structs.DisposalMethod.UNSPECIFIED.toString = $estr;
com.yagp.structs.DisposalMethod.UNSPECIFIED.__enum__ = com.yagp.structs.DisposalMethod;
com.yagp.structs.DisposalMethod.NO_ACTION = ["NO_ACTION",1];
com.yagp.structs.DisposalMethod.NO_ACTION.toString = $estr;
com.yagp.structs.DisposalMethod.NO_ACTION.__enum__ = com.yagp.structs.DisposalMethod;
com.yagp.structs.DisposalMethod.FILL_BACKGROUND = ["FILL_BACKGROUND",2];
com.yagp.structs.DisposalMethod.FILL_BACKGROUND.toString = $estr;
com.yagp.structs.DisposalMethod.FILL_BACKGROUND.__enum__ = com.yagp.structs.DisposalMethod;
com.yagp.structs.DisposalMethod.RENDER_PREVIOUS = ["RENDER_PREVIOUS",3];
com.yagp.structs.DisposalMethod.RENDER_PREVIOUS.toString = $estr;
com.yagp.structs.DisposalMethod.RENDER_PREVIOUS.__enum__ = com.yagp.structs.DisposalMethod;
com.yagp.structs.DisposalMethod.UNDEFINED = function(index) { var $x = ["UNDEFINED",4,index]; $x.__enum__ = com.yagp.structs.DisposalMethod; $x.toString = $estr; return $x; };
com.yagp.structs.ExtensionFactory = function(code) {
	this.code = code;
};
$hxClasses["com.yagp.structs.ExtensionFactory"] = com.yagp.structs.ExtensionFactory;
com.yagp.structs.ExtensionFactory.__name__ = ["com","yagp","structs","ExtensionFactory"];
com.yagp.structs.ExtensionFactory.prototype = {
	create: function(input) {
		throw "Not implemented";
		return null;
	}
	,__class__: com.yagp.structs.ExtensionFactory
};
com.yagp.structs.GifBytes = function(bytes) {
	this.bytes = bytes;
	this.position = 0;
};
$hxClasses["com.yagp.structs.GifBytes"] = com.yagp.structs.GifBytes;
com.yagp.structs.GifBytes.__name__ = ["com","yagp","structs","GifBytes"];
com.yagp.structs.GifBytes.prototype = {
	readByte: function() {
		return this.bytes.get(this.position++);
	}
	,readShort: function() {
		return this.bytes.get(this.position++) | this.bytes.get(this.position++) << 8;
	}
	,readInt: function() {
		return this.bytes.get(this.position++) | this.bytes.get(this.position++) << 8 | this.bytes.get(this.position++) << 16 | this.bytes.get(this.position++) << 24;
	}
	,readUInt: function() {
		return this.bytes.get(this.position++) | this.bytes.get(this.position++) << 8 | this.bytes.get(this.position++) << 16 | this.bytes.get(this.position++) << 24;
	}
	,readUTFBytes: function(len) {
		var str = this.bytes.getString(this.position,len);
		this.position += len;
		return str;
	}
	,get_bytesAvailable: function() {
		return this.bytes.length - this.position;
	}
	,get_length: function() {
		return this.bytes.length;
	}
	,__class__: com.yagp.structs.GifBytes
	,__properties__: {get_length:"get_length",get_bytesAvailable:"get_bytesAvailable"}
};
com.yagp.structs.GifFrame = function(colorTable,imageDescriptor,graphicsDecoder,graphicsControl) {
	this.x = imageDescriptor.x;
	this.y = imageDescriptor.y;
	this.width = imageDescriptor.width;
	this.height = imageDescriptor.height;
	this.data = new openfl.display.BitmapData(this.width,this.height,true,0);
	var pixels = graphicsDecoder.pixels;
	if(graphicsControl != null) {
		this.delay = graphicsControl.delay * 10;
		if(this.delay <= 10) this.delay = 100;
		this.userInput = graphicsControl.userInput;
		this.disposalMethod = graphicsControl.disposalMethod;
		if(graphicsControl.transparentColor) {
			this.transparentIndex = graphicsControl.transparentIndex;
			var _g1 = 0;
			var _g = pixels.length;
			while(_g1 < _g) {
				var i = _g1++;
				if((function($this) {
					var $r;
					var $int = pixels.data[i];
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) == (function($this) {
					var $r;
					var int1 = graphicsControl.transparentIndex;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this))) {
					if(!pixels.fixed) {
						if(i >= pixels.length) pixels.length = i + 1;
						if(pixels.data.length < pixels.length) {
							var data;
							var this1;
							this1 = new Array(pixels.data.length + 10);
							data = this1;
							haxe.ds._Vector.Vector_Impl_.blit(pixels.data,0,data,0,pixels.data.length);
							pixels.data = data;
						}
					}
					pixels.data[i] = 0;
				} else {
					if(!pixels.fixed) {
						if(i >= pixels.length) pixels.length = i + 1;
						if(pixels.data.length < pixels.length) {
							var data1;
							var this2;
							this2 = new Array(pixels.data.length + 10);
							data1 = this2;
							haxe.ds._Vector.Vector_Impl_.blit(pixels.data,0,data1,0,pixels.data.length);
							pixels.data = data1;
						}
					}
					pixels.data[i] = colorTable[pixels.data[i]];
				}
			}
		} else {
			this.transparentIndex = -1;
			var _g11 = 0;
			var _g2 = pixels.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if(!pixels.fixed) {
					if(i1 >= pixels.length) pixels.length = i1 + 1;
					if(pixels.data.length < pixels.length) {
						var data2;
						var this3;
						this3 = new Array(pixels.data.length + 10);
						data2 = this3;
						haxe.ds._Vector.Vector_Impl_.blit(pixels.data,0,data2,0,pixels.data.length);
						pixels.data = data2;
					}
				}
				pixels.data[i1] = colorTable[pixels.data[i1]];
			}
		}
	} else {
		this.transparentIndex = -1;
		this.delay = 100;
		this.userInput = false;
		this.disposalMethod = com.yagp.structs.DisposalMethod.UNSPECIFIED;
		var _g12 = 0;
		var _g3 = pixels.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			if(!pixels.fixed) {
				if(i2 >= pixels.length) pixels.length = i2 + 1;
				if(pixels.data.length < pixels.length) {
					var data3;
					var this4;
					this4 = new Array(pixels.data.length + 10);
					data3 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(pixels.data,0,data3,0,pixels.data.length);
					pixels.data = data3;
				}
			}
			pixels.data[i2] = colorTable[pixels.data[i2]];
		}
	}
	if(imageDescriptor.interlaced) {
		this.data.lock();
		var offset = this.interlacedFor(pixels,8,0,0);
		offset = this.interlacedFor(pixels,8,4,offset);
		offset = this.interlacedFor(pixels,4,2,offset);
		this.interlacedFor(pixels,2,1,offset);
		this.data.unlock();
	} else this.data.setVector(this.data.rect,pixels);
	graphicsDecoder.pixels = null;
};
$hxClasses["com.yagp.structs.GifFrame"] = com.yagp.structs.GifFrame;
com.yagp.structs.GifFrame.__name__ = ["com","yagp","structs","GifFrame"];
com.yagp.structs.GifFrame.prototype = {
	interlacedFor: function(pixels,step,startY,offset) {
		var y = startY;
		while(startY < this.height) {
			var _g1 = 0;
			var _g = this.width;
			while(_g1 < _g) {
				var x = _g1++;
				this.data.setPixel32(x,y,(function($this) {
					var $r;
					var index = offset++;
					$r = pixels.data[index];
					return $r;
				}(this)));
			}
			y += step;
		}
		return offset;
	}
	,dispose: function() {
		this.data.dispose();
		this.data = null;
		this.disposalMethod = null;
	}
	,__class__: com.yagp.structs.GifFrame
};
com.yagp.structs.GifVersion = $hxClasses["com.yagp.structs.GifVersion"] = { __ename__ : ["com","yagp","structs","GifVersion"], __constructs__ : ["GIF87a","GIF89a","Unknown"] };
com.yagp.structs.GifVersion.GIF87a = ["GIF87a",0];
com.yagp.structs.GifVersion.GIF87a.toString = $estr;
com.yagp.structs.GifVersion.GIF87a.__enum__ = com.yagp.structs.GifVersion;
com.yagp.structs.GifVersion.GIF89a = ["GIF89a",1];
com.yagp.structs.GifVersion.GIF89a.toString = $estr;
com.yagp.structs.GifVersion.GIF89a.__enum__ = com.yagp.structs.GifVersion;
com.yagp.structs.GifVersion.Unknown = function(version) { var $x = ["Unknown",2,version]; $x.__enum__ = com.yagp.structs.GifVersion; $x.toString = $estr; return $x; };
com.yagp.structs.GraphicsControl = function(input) {
	input.position++;
	var packed = input.bytes.get(input.position++);
	var method = (packed & 28) >> 2;
	this.userInput = (packed & 2) == 2;
	this.transparentColor = (packed & 1) == 1;
	switch(method) {
	case 0:
		this.disposalMethod = com.yagp.structs.DisposalMethod.UNSPECIFIED;
		break;
	case 1:
		this.disposalMethod = com.yagp.structs.DisposalMethod.NO_ACTION;
		break;
	case 2:
		this.disposalMethod = com.yagp.structs.DisposalMethod.FILL_BACKGROUND;
		break;
	case 3:
		this.disposalMethod = com.yagp.structs.DisposalMethod.RENDER_PREVIOUS;
		break;
	default:
		this.disposalMethod = com.yagp.structs.DisposalMethod.UNDEFINED(method);
	}
	this.delay = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	this.transparentIndex = input.bytes.get(input.position++);
	input.position++;
};
$hxClasses["com.yagp.structs.GraphicsControl"] = com.yagp.structs.GraphicsControl;
com.yagp.structs.GraphicsControl.__name__ = ["com","yagp","structs","GraphicsControl"];
com.yagp.structs.GraphicsControl.prototype = {
	__class__: com.yagp.structs.GraphicsControl
};
com.yagp.structs.GraphicsDecoder = function(input,descriptor) {
	var minCodeSize = input.bytes.get(input.position++);
	this.blockSize = input.bytes.get(input.position++) - 1;
	this["byte"] = input.bytes.get(input.position++);
	this.bitsCount = 8;
	this._input = input;
	var length = descriptor.width * descriptor.height;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = true;
	this.pixels = this1;
	var clearCode = 1 << minCodeSize;
	var eoiCode = clearCode + 1;
	var codeSize = minCodeSize + 1;
	var codeMask = (1 << codeSize) - 1;
	var i = 0;
	var baseDict = new Array();
	var _g = 0;
	while(_g < clearCode) {
		var i1 = _g++;
		baseDict[i1] = [i1];
	}
	baseDict[clearCode] = [];
	baseDict[eoiCode] = [];
	var dict = new Array();
	var code = 0;
	var last = 0;
	while(i < this.pixels.length) {
		last = code;
		code = this.readCode(codeSize,codeMask);
		if(code == clearCode) {
			dict = baseDict.slice();
			codeSize = minCodeSize + 1;
			codeMask = (1 << codeSize) - 1;
			continue;
		}
		if(code == eoiCode) break;
		if(code < dict.length) {
			if(last != clearCode) {
				var newArr = dict[last].slice();
				newArr.push(dict[code][0]);
				dict.push(newArr);
			}
		} else {
			if(code != dict.length) throw "Invalid LZW code.";
			var newArr1 = dict[last].slice();
			newArr1.push(dict[last][0]);
			dict.push(newArr1);
		}
		var _g1 = 0;
		var _g11 = dict[code];
		while(_g1 < _g11.length) {
			var item = _g11[_g1];
			++_g1;
			var this3 = this.pixels;
			var key = i++;
			if(!this3.fixed) {
				if(key >= this3.length) this3.length = key + 1;
				if(this3.data.length < this3.length) {
					var data;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
					this3.data = data;
				}
			}
			this3.data[key] = item;
		}
		if(dict.length == 1 << codeSize && codeSize < 12) {
			codeSize++;
			codeMask = (1 << codeSize) - 1;
		}
	}
	while(this.blockSize > 0) {
		input.position += this.blockSize;
		this.blockSize = input.bytes.get(input.position++);
	}
};
$hxClasses["com.yagp.structs.GraphicsDecoder"] = com.yagp.structs.GraphicsDecoder;
com.yagp.structs.GraphicsDecoder.__name__ = ["com","yagp","structs","GraphicsDecoder"];
com.yagp.structs.GraphicsDecoder.prototype = {
	readCode: function(size,mask) {
		while(this.bitsCount < size) {
			if(this.blockSize == 0) break;
			this["byte"] |= this._input.readByte() << this.bitsCount;
			this.bitsCount += 8;
			this.blockSize--;
			if(this.blockSize == 0) this.blockSize = this._input.readByte();
		}
		var code = this["byte"] & mask;
		this["byte"] >>= size;
		this.bitsCount -= size;
		return code;
	}
	,__class__: com.yagp.structs.GraphicsDecoder
};
com.yagp.structs.IExtension = function() { };
$hxClasses["com.yagp.structs.IExtension"] = com.yagp.structs.IExtension;
com.yagp.structs.IExtension.__name__ = ["com","yagp","structs","IExtension"];
com.yagp.structs.ImageDescriptor = function(input) {
	this.x = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	this.y = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	this.width = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	this.height = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	var packed = input.bytes.get(input.position++);
	this.localColorTable = (packed & 128) == 128;
	this.interlaced = (packed & 64) == 64;
	this.sorted = (packed & 32) == 32;
	this.localColorTableSize = 2 << (packed & 7);
};
$hxClasses["com.yagp.structs.ImageDescriptor"] = com.yagp.structs.ImageDescriptor;
com.yagp.structs.ImageDescriptor.__name__ = ["com","yagp","structs","ImageDescriptor"];
com.yagp.structs.ImageDescriptor.prototype = {
	__class__: com.yagp.structs.ImageDescriptor
};
com.yagp.structs.LSD = function(input) {
	this.width = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	this.height = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	var packedField = input.bytes.get(input.position++);
	this.globalColorTable = (packedField & 128) == 128;
	this.colorResolution = (packedField & 112) >>> 4;
	this.sorted = (packedField & 8) == 8;
	this.globalColorTableSize = 2 << (packedField & 7);
	this.backgroundColorIndex = input.bytes.get(input.position++);
	this.pixelAspectRatio = input.bytes.get(input.position++);
	if(this.pixelAspectRatio != 0) this.pixelAspectRatio = (this.pixelAspectRatio + 15) / 64; else this.pixelAspectRatio = 1;
};
$hxClasses["com.yagp.structs.LSD"] = com.yagp.structs.LSD;
com.yagp.structs.LSD.__name__ = ["com","yagp","structs","LSD"];
com.yagp.structs.LSD.prototype = {
	__class__: com.yagp.structs.LSD
};
com.yagp.structs.NetscapeExtension = function(input) {
	input.position += 2;
	this.iterations = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	input.position++;
};
$hxClasses["com.yagp.structs.NetscapeExtension"] = com.yagp.structs.NetscapeExtension;
com.yagp.structs.NetscapeExtension.__name__ = ["com","yagp","structs","NetscapeExtension"];
com.yagp.structs.NetscapeExtension.prototype = {
	__class__: com.yagp.structs.NetscapeExtension
};
var format = {};
format.SVG = function(content) {
	this.data = new format.svg.SVGData(Xml.parse(content));
};
$hxClasses["format.SVG"] = format.SVG;
format.SVG.__name__ = ["format","SVG"];
format.SVG.prototype = {
	render: function(graphics,x,y,width,height) {
		if(height == null) height = -1;
		if(width == null) width = -1;
		if(y == null) y = 0;
		if(x == null) x = 0;
		var matrix = new openfl.geom.Matrix();
		matrix.identity();
		matrix.translate(x,y);
		if(width > -1 && height > -1) matrix.scale(width / this.data.width,height / this.data.height);
		var renderer = new format.svg.SVGRenderer(this.data);
		renderer.render(graphics,matrix);
	}
	,__class__: format.SVG
};
format.gfx = {};
format.gfx.Gfx = function() {
};
$hxClasses["format.gfx.Gfx"] = format.gfx.Gfx;
format.gfx.Gfx.__name__ = ["format","gfx","Gfx"];
format.gfx.Gfx.prototype = {
	geometryOnly: function() {
		return false;
	}
	,size: function(inWidth,inHeight) {
	}
	,beginGradientFill: function(grad) {
	}
	,beginFill: function(color,alpha) {
	}
	,endFill: function() {
	}
	,lineStyle: function(style) {
	}
	,endLineStyle: function() {
	}
	,moveTo: function(inX,inY) {
	}
	,lineTo: function(inX,inY) {
	}
	,curveTo: function(inCX,inCY,inX,inY) {
	}
	,renderText: function(text) {
	}
	,eof: function() {
	}
	,__class__: format.gfx.Gfx
};
format.gfx.Gfx2Haxe = function() {
	format.gfx.Gfx.call(this);
	this.commands = [];
};
$hxClasses["format.gfx.Gfx2Haxe"] = format.gfx.Gfx2Haxe;
format.gfx.Gfx2Haxe.__name__ = ["format","gfx","Gfx2Haxe"];
format.gfx.Gfx2Haxe.__super__ = format.gfx.Gfx;
format.gfx.Gfx2Haxe.prototype = $extend(format.gfx.Gfx.prototype,{
	f2a: function(f) {
		if(Math.abs(f) < 0.000001) return "0";
		if(Math.abs(1 - f) < 0.000001) return "1";
		return f + "";
	}
	,newMatrix: function(m) {
		return "new Matrix(" + this.f2a(m.a) + "," + this.f2a(m.b) + "," + this.f2a(m.c) + "," + this.f2a(m.d) + "," + this.f2a(m.tx) + "," + this.f2a(m.ty) + ")";
	}
	,beginGradientFill: function(grad) {
		this.commands.push("g.beginGradientFill(" + Std.string(grad.type) + "," + Std.string(grad.colors) + "," + Std.string(grad.alphas) + "," + Std.string(grad.ratios) + "," + this.newMatrix(grad.matrix) + "," + Std.string(grad.spread) + "," + Std.string(grad.interp) + "," + grad.focus + ");");
	}
	,beginFill: function(color,alpha) {
		this.commands.push("g.beginFill(" + color + "," + this.f2a(alpha) + ");");
	}
	,endFill: function() {
		this.commands.push("g.endFill();");
	}
	,lineStyle: function(style) {
		this.commands.push("g.lineStyle(" + this.f2a(style.thickness) + "," + style.color + "," + this.f2a(style.alpha) + "," + (style.pixelHinting == null?"null":"" + style.pixelHinting) + "," + Std.string(style.scaleMode) + "," + Std.string(style.capsStyle) + "," + Std.string(style.jointStyle) + "," + this.f2a(style.miterLimit));
	}
	,endLineStyle: function() {
		this.commands.push("g.lineStyle();");
	}
	,moveTo: function(inX,inY) {
		this.commands.push("g.moveTo(" + inX + "," + inY + ");");
	}
	,lineTo: function(inX,inY) {
		this.commands.push("g.lineTo(" + inX + "," + inY + ");");
	}
	,curveTo: function(inCX,inCY,inX,inY) {
		this.commands.push("g.curveTo(" + inCX + "," + inCY + "," + inX + "," + inY + ");");
	}
	,__class__: format.gfx.Gfx2Haxe
});
openfl.display.CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : ["openfl","display","CapsStyle"], __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl.display.CapsStyle.NONE = ["NONE",0];
openfl.display.CapsStyle.NONE.toString = $estr;
openfl.display.CapsStyle.NONE.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.ROUND = ["ROUND",1];
openfl.display.CapsStyle.ROUND.toString = $estr;
openfl.display.CapsStyle.ROUND.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.SQUARE = ["SQUARE",2];
openfl.display.CapsStyle.SQUARE.toString = $estr;
openfl.display.CapsStyle.SQUARE.__enum__ = openfl.display.CapsStyle;
openfl.display.InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : ["openfl","display","InterpolationMethod"], __constructs__ : ["RGB","LINEAR_RGB"] };
openfl.display.InterpolationMethod.RGB = ["RGB",0];
openfl.display.InterpolationMethod.RGB.toString = $estr;
openfl.display.InterpolationMethod.RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl.display.InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl.display.InterpolationMethod.LINEAR_RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : ["openfl","display","JointStyle"], __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl.display.JointStyle.MITER = ["MITER",0];
openfl.display.JointStyle.MITER.toString = $estr;
openfl.display.JointStyle.MITER.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.ROUND = ["ROUND",1];
openfl.display.JointStyle.ROUND.toString = $estr;
openfl.display.JointStyle.ROUND.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.BEVEL = ["BEVEL",2];
openfl.display.JointStyle.BEVEL.toString = $estr;
openfl.display.JointStyle.BEVEL.__enum__ = openfl.display.JointStyle;
openfl.display.LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : ["openfl","display","LineScaleMode"], __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl.display.LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl.display.LineScaleMode.HORIZONTAL.toString = $estr;
openfl.display.LineScaleMode.HORIZONTAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NONE = ["NONE",1];
openfl.display.LineScaleMode.NONE.toString = $estr;
openfl.display.LineScaleMode.NONE.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NORMAL = ["NORMAL",2];
openfl.display.LineScaleMode.NORMAL.toString = $estr;
openfl.display.LineScaleMode.NORMAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl.display.LineScaleMode.VERTICAL.toString = $estr;
openfl.display.LineScaleMode.VERTICAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : ["openfl","display","SpreadMethod"], __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl.display.SpreadMethod.REPEAT = ["REPEAT",0];
openfl.display.SpreadMethod.REPEAT.toString = $estr;
openfl.display.SpreadMethod.REPEAT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.REFLECT = ["REFLECT",1];
openfl.display.SpreadMethod.REFLECT.toString = $estr;
openfl.display.SpreadMethod.REFLECT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.PAD = ["PAD",2];
openfl.display.SpreadMethod.PAD.toString = $estr;
openfl.display.SpreadMethod.PAD.__enum__ = openfl.display.SpreadMethod;
format.gfx.GfxBytes = function(inBuffer,inFlags) {
	if(inFlags == null) inFlags = 0;
	format.gfx.Gfx.call(this);
	if(inBuffer == null) this.buffer = new lime.utils.ByteArray(); else this.buffer = inBuffer;
};
$hxClasses["format.gfx.GfxBytes"] = format.gfx.GfxBytes;
format.gfx.GfxBytes.__name__ = ["format","gfx","GfxBytes"];
format.gfx.GfxBytes.baseCoder = null;
format.gfx.GfxBytes.fromString = function(inString) {
	if(format.gfx.GfxBytes.baseCoder == null) format.gfx.GfxBytes.baseCoder = new haxe.crypto.BaseCode(haxe.io.Bytes.ofString(format.gfx.GfxBytes.base64));
	var bytes = new lime.utils.ByteArray();
	bytes.writeUTF(inString);
	return new format.gfx.GfxBytes(bytes);
};
format.gfx.GfxBytes.__super__ = format.gfx.Gfx;
format.gfx.GfxBytes.prototype = $extend(format.gfx.Gfx.prototype,{
	toString: function() {
		return "";
	}
	,eof: function() {
		this.buffer.writeByte(0);
	}
	,iterate: function(inGfx) {
		this.buffer.position = 0;
		while(true) {
			var _g = this.buffer.readByte();
			switch(_g) {
			case 0:
				return;
			case 1:
				var w = this.buffer.readFloat();
				var h = this.buffer.readFloat();
				inGfx.size(w,h);
				break;
			case 10:
				var col = this.readRGB();
				var alpha = this.buffer.readFloat();
				inGfx.beginFill(col,alpha);
				break;
			case 11:
				var grad = new format.gfx.Gradient();
				grad.type = Type.createEnumIndex(openfl.display.GradientType,this.buffer.readByte());
				var len = this.buffer.readByte();
				var _g1 = 0;
				while(_g1 < len) {
					var i = _g1++;
					grad.colors.push(this.readRGB());
					grad.alphas.push(this.buffer.readByte() / 255.0);
					grad.ratios.push(this.buffer.readByte());
				}
				grad.matrix.a = this.buffer.readFloat();
				grad.matrix.b = this.buffer.readFloat();
				grad.matrix.c = this.buffer.readFloat();
				grad.matrix.d = this.buffer.readFloat();
				grad.matrix.tx = this.buffer.readFloat();
				grad.matrix.ty = this.buffer.readFloat();
				grad.spread = format.gfx.GfxBytes.spreadMethods[this.buffer.readByte()];
				grad.interp = format.gfx.GfxBytes.interpolationMethods[this.buffer.readByte()];
				grad.focus = this.buffer.readFloat();
				inGfx.beginGradientFill(grad);
				break;
			case 12:
				inGfx.endFill();
				break;
			case 20:
				var style = new format.gfx.LineStyle();
				style.thickness = this.buffer.readFloat();
				style.color = this.readRGB();
				style.alpha = this.buffer.readFloat();
				style.pixelHinting = this.buffer.readByte() > 0;
				style.scaleMode = format.gfx.GfxBytes.scaleModes[this.buffer.readByte()];
				style.capsStyle = format.gfx.GfxBytes.capsStyles[this.buffer.readByte()];
				style.jointStyle = format.gfx.GfxBytes.jointStyles[this.buffer.readByte()];
				style.miterLimit = this.buffer.readFloat();
				inGfx.lineStyle(style);
				break;
			case 21:
				inGfx.endLineStyle();
				break;
			case 30:
				var x = this.buffer.readFloat();
				var y = this.buffer.readFloat();
				inGfx.moveTo(x,y);
				break;
			case 31:
				var x1 = this.buffer.readFloat();
				var y1 = this.buffer.readFloat();
				inGfx.lineTo(x1,y1);
				break;
			case 32:
				var cx = this.buffer.readFloat();
				var cy = this.buffer.readFloat();
				var x2 = this.buffer.readFloat();
				var y2 = this.buffer.readFloat();
				inGfx.curveTo(cx,cy,x2,y2);
				break;
			default:
				throw "Unknown gfx buffer format.";
			}
		}
	}
	,size: function(inWidth,inHeight) {
		this.buffer.writeByte(1);
		this.buffer.writeFloat(inWidth);
		this.buffer.writeFloat(inHeight);
	}
	,pushClipped: function(inVal) {
		this.buffer.writeByte(inVal < 0?0:inVal > 255.0?255:inVal | 0);
	}
	,writeRGB: function(inVal) {
		this.buffer.writeByte(inVal >> 16 & 255);
		this.buffer.writeByte(inVal >> 8 & 255);
		this.buffer.writeByte(inVal & 255);
	}
	,readRGB: function() {
		var r = this.buffer.readByte();
		var g = this.buffer.readByte();
		var b = this.buffer.readByte();
		return r << 16 | g << 8 | b;
	}
	,beginGradientFill: function(grad) {
		this.buffer.writeByte(11);
		this.buffer.writeByte(grad.type[1]);
		this.buffer.writeByte(grad.colors.length);
		var _g1 = 0;
		var _g = grad.colors.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.writeRGB((function($this) {
				var $r;
				var $int = grad.colors[i];
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) | 0);
			this.pushClipped(grad.alphas[i] * 255.0);
			this.pushClipped(grad.ratios[i]);
		}
		this.buffer.writeFloat(grad.matrix.a);
		this.buffer.writeFloat(grad.matrix.b);
		this.buffer.writeFloat(grad.matrix.c);
		this.buffer.writeFloat(grad.matrix.d);
		this.buffer.writeFloat(grad.matrix.tx);
		this.buffer.writeFloat(grad.matrix.ty);
		this.buffer.writeByte(grad.spread[1]);
		this.buffer.writeByte(grad.interp[1]);
		this.buffer.writeFloat(grad.focus);
	}
	,beginFill: function(color,alpha) {
		this.buffer.writeByte(10);
		this.writeRGB(color);
		this.buffer.writeFloat(alpha);
	}
	,endFill: function() {
		this.buffer.writeByte(12);
	}
	,lineStyle: function(style) {
		this.buffer.writeByte(20);
		this.buffer.writeFloat(style.thickness);
		this.writeRGB(style.color);
		this.buffer.writeFloat(style.alpha);
		this.buffer.writeByte(style.pixelHinting?1:0);
		this.buffer.writeByte(style.scaleMode[1]);
		this.buffer.writeByte(style.capsStyle[1]);
		this.buffer.writeByte(style.jointStyle[1]);
		this.buffer.writeFloat(style.miterLimit);
	}
	,endLineStyle: function() {
		this.buffer.writeByte(21);
	}
	,moveTo: function(inX,inY) {
		this.buffer.writeByte(30);
		this.buffer.writeFloat(inX);
		this.buffer.writeFloat(inY);
	}
	,lineTo: function(inX,inY) {
		this.buffer.writeByte(31);
		this.buffer.writeFloat(inX);
		this.buffer.writeFloat(inY);
	}
	,curveTo: function(inCX,inCY,inX,inY) {
		this.buffer.writeByte(32);
		this.buffer.writeFloat(inCX);
		this.buffer.writeFloat(inCY);
		this.buffer.writeFloat(inX);
		this.buffer.writeFloat(inY);
	}
	,__class__: format.gfx.GfxBytes
});
format.gfx.GfxExtent = function() {
	format.gfx.Gfx.call(this);
	this.extent = null;
};
$hxClasses["format.gfx.GfxExtent"] = format.gfx.GfxExtent;
format.gfx.GfxExtent.__name__ = ["format","gfx","GfxExtent"];
format.gfx.GfxExtent.__super__ = format.gfx.Gfx;
format.gfx.GfxExtent.prototype = $extend(format.gfx.Gfx.prototype,{
	addExtent: function(inX,inY) {
		if(this.extent == null) {
			this.extent = new openfl.geom.Rectangle(inX,inY,0,0);
			return;
		}
		if(inX < this.extent.get_left()) this.extent.set_left(inX);
		if(inX > this.extent.get_right()) this.extent.set_right(inX);
		if(inY < this.extent.get_top()) this.extent.set_top(inY);
		if(inY > this.extent.get_bottom()) this.extent.set_bottom(inY);
	}
	,geometryOnly: function() {
		return true;
	}
	,moveTo: function(inX,inY) {
		this.addExtent(inX,inY);
	}
	,lineTo: function(inX,inY) {
		this.addExtent(inX,inY);
	}
	,curveTo: function(inCX,inCY,inX,inY) {
		this.addExtent(inCX,inCY);
		this.addExtent(inX,inY);
	}
	,__class__: format.gfx.GfxExtent
});
format.gfx.GfxGraphics = function(inGraphics) {
	format.gfx.Gfx.call(this);
	this.graphics = inGraphics;
};
$hxClasses["format.gfx.GfxGraphics"] = format.gfx.GfxGraphics;
format.gfx.GfxGraphics.__name__ = ["format","gfx","GfxGraphics"];
format.gfx.GfxGraphics.__super__ = format.gfx.Gfx;
format.gfx.GfxGraphics.prototype = $extend(format.gfx.Gfx.prototype,{
	beginGradientFill: function(grad) {
		this.graphics.beginGradientFill(grad.type,grad.colors,grad.alphas,grad.ratios,grad.matrix,grad.spread,grad.interp,grad.focus);
	}
	,beginFill: function(color,alpha) {
		this.graphics.beginFill(color,alpha);
	}
	,endFill: function() {
		this.graphics.endFill();
	}
	,lineStyle: function(style) {
		this.graphics.lineStyle(style.thickness,style.color,style.alpha,style.pixelHinting,style.scaleMode,style.capsStyle,style.jointStyle,style.miterLimit);
	}
	,endLineStyle: function() {
		this.graphics.lineStyle();
	}
	,moveTo: function(inX,inY) {
		this.graphics.moveTo(inX,inY);
	}
	,lineTo: function(inX,inY) {
		this.graphics.lineTo(inX,inY);
	}
	,curveTo: function(inCX,inCY,inX,inY) {
		this.graphics.curveTo(inCX,inCY,inX,inY);
	}
	,__class__: format.gfx.GfxGraphics
});
format.gfx.GfxTextFinder = function() {
	format.gfx.Gfx.call(this);
};
$hxClasses["format.gfx.GfxTextFinder"] = format.gfx.GfxTextFinder;
format.gfx.GfxTextFinder.__name__ = ["format","gfx","GfxTextFinder"];
format.gfx.GfxTextFinder.__super__ = format.gfx.Gfx;
format.gfx.GfxTextFinder.prototype = $extend(format.gfx.Gfx.prototype,{
	geometryOnly: function() {
		return true;
	}
	,renderText: function(inText) {
		if(this.text == null) this.text = inText;
	}
	,__class__: format.gfx.GfxTextFinder
});
format.gfx.Gradient = function() {
	this.type = openfl.display.GradientType.LINEAR;
	this.colors = [];
	this.alphas = [];
	this.ratios = [];
	this.matrix = new openfl.geom.Matrix();
	this.spread = openfl.display.SpreadMethod.PAD;
	this.interp = openfl.display.InterpolationMethod.RGB;
	this.focus = 0.0;
};
$hxClasses["format.gfx.Gradient"] = format.gfx.Gradient;
format.gfx.Gradient.__name__ = ["format","gfx","Gradient"];
format.gfx.Gradient.prototype = {
	__class__: format.gfx.Gradient
};
format.gfx.LineStyle = function() {
	this.thickness = 1.0;
	this.color = 0;
	this.alpha = 1.0;
	this.pixelHinting = false;
	this.scaleMode = openfl.display.LineScaleMode.NORMAL;
	this.capsStyle = openfl.display.CapsStyle.ROUND;
	this.jointStyle = openfl.display.JointStyle.ROUND;
	this.miterLimit = 3.0;
};
$hxClasses["format.gfx.LineStyle"] = format.gfx.LineStyle;
format.gfx.LineStyle.__name__ = ["format","gfx","LineStyle"];
format.gfx.LineStyle.prototype = {
	__class__: format.gfx.LineStyle
};
format.svg = {};
format.svg.FillType = $hxClasses["format.svg.FillType"] = { __ename__ : ["format","svg","FillType"], __constructs__ : ["FillGrad","FillSolid","FillNone"] };
format.svg.FillType.FillGrad = function(grad) { var $x = ["FillGrad",0,grad]; $x.__enum__ = format.svg.FillType; $x.toString = $estr; return $x; };
format.svg.FillType.FillSolid = function(colour) { var $x = ["FillSolid",1,colour]; $x.__enum__ = format.svg.FillType; $x.toString = $estr; return $x; };
format.svg.FillType.FillNone = ["FillNone",2];
format.svg.FillType.FillNone.toString = $estr;
format.svg.FillType.FillNone.__enum__ = format.svg.FillType;
format.svg.Grad = function(inType) {
	format.gfx.Gradient.call(this);
	this.type = inType;
	this.radius = 0.0;
	this.gradMatrix = new openfl.geom.Matrix();
	this.x1 = 0.0;
	this.y1 = 0.0;
	this.x2 = 0.0;
	this.y2 = 0.0;
};
$hxClasses["format.svg.Grad"] = format.svg.Grad;
format.svg.Grad.__name__ = ["format","svg","Grad"];
format.svg.Grad.__super__ = format.gfx.Gradient;
format.svg.Grad.prototype = $extend(format.gfx.Gradient.prototype,{
	updateMatrix: function(inMatrix) {
		var dx = this.x2 - this.x1;
		var dy = this.y2 - this.y1;
		var theta = Math.atan2(dy,dx);
		var len = Math.sqrt(dx * dx + dy * dy);
		var mtx = new openfl.geom.Matrix();
		if(this.type == openfl.display.GradientType.LINEAR) {
			mtx.createGradientBox(1.0,1.0);
			mtx.scale(len,len);
		} else {
			if(this.radius != 0.0) this.focus = len / this.radius;
			mtx.createGradientBox(1.0,1.0);
			mtx.translate(-0.5,-0.5);
			mtx.scale(this.radius * 2,this.radius * 2);
		}
		mtx.rotate(theta);
		mtx.translate(this.x1,this.y1);
		mtx.concat(this.gradMatrix);
		mtx.concat(inMatrix);
		this.matrix = mtx;
	}
	,__class__: format.svg.Grad
});
format.svg.Group = function() {
	this.name = "";
	this.children = [];
};
$hxClasses["format.svg.Group"] = format.svg.Group;
format.svg.Group.__name__ = ["format","svg","Group"];
format.svg.Group.prototype = {
	hasGroup: function(inName) {
		return this.findGroup(inName) != null;
	}
	,findGroup: function(inName) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			switch(child[1]) {
			case 1:
				var group = child[2];
				if(group.name == inName) return group;
				break;
			default:
			}
		}
		return null;
	}
	,__class__: format.svg.Group
};
format.svg.DisplayElement = $hxClasses["format.svg.DisplayElement"] = { __ename__ : ["format","svg","DisplayElement"], __constructs__ : ["DisplayPath","DisplayGroup","DisplayText"] };
format.svg.DisplayElement.DisplayPath = function(path) { var $x = ["DisplayPath",0,path]; $x.__enum__ = format.svg.DisplayElement; $x.toString = $estr; return $x; };
format.svg.DisplayElement.DisplayGroup = function(group) { var $x = ["DisplayGroup",1,group]; $x.__enum__ = format.svg.DisplayElement; $x.toString = $estr; return $x; };
format.svg.DisplayElement.DisplayText = function(text) { var $x = ["DisplayText",2,text]; $x.__enum__ = format.svg.DisplayElement; $x.toString = $estr; return $x; };
format.svg.Path = function() {
};
$hxClasses["format.svg.Path"] = format.svg.Path;
format.svg.Path.__name__ = ["format","svg","Path"];
format.svg.Path.prototype = {
	__class__: format.svg.Path
};
format.svg.PathParser = function() {
	if(format.svg.PathParser.sCommandArgs == null) {
		format.svg.PathParser.sCommandArgs = [];
		var _g = 0;
		while(_g < 128) {
			var i = _g++;
			format.svg.PathParser.sCommandArgs[i] = this.commandArgs(i);
		}
	}
};
$hxClasses["format.svg.PathParser"] = format.svg.PathParser;
format.svg.PathParser.__name__ = ["format","svg","PathParser"];
format.svg.PathParser.sCommandArgs = null;
format.svg.PathParser.prototype = {
	parse: function(pathToParse,inConvertCubics) {
		this.lastMoveX = this.lastMoveY = 0;
		var pos = 0;
		var args = new Array();
		var segments = new Array();
		var current_command_pos = 0;
		var current_command = -1;
		var current_args = -1;
		this.prev = null;
		var len = pathToParse.length;
		var finished = false;
		while(pos <= len) {
			var code;
			if(pos == len) code = 32; else code = HxOverrides.cca(pathToParse,pos);
			var command;
			if(code > 0 && code < 128) command = format.svg.PathParser.sCommandArgs[code]; else command = format.svg.PathParser.UNKNOWN;
			if(command == format.svg.PathParser.UNKNOWN) throw "failed parsing path near '" + HxOverrides.substr(pathToParse,pos,null) + "'";
			if(command == format.svg.PathParser.SEPARATOR) pos++; else if(command <= format.svg.PathParser.FLOAT) {
				var end = pos + 1;
				var e_pos = -1;
				var seen_dot = command == format.svg.PathParser.FLOAT_DOT;
				if(command == format.svg.PathParser.FLOAT_EXP) {
					e_pos = 0;
					seen_dot = true;
				}
				while(end < pathToParse.length) {
					var ch = HxOverrides.cca(pathToParse,end);
					var code1;
					if(ch < 0 || ch > 127) code1 = format.svg.PathParser.UNKNOWN; else code1 = format.svg.PathParser.sCommandArgs[ch];
					if(code1 > format.svg.PathParser.FLOAT) break;
					if(code1 == format.svg.PathParser.FLOAT_DOT && seen_dot) break;
					if(e_pos >= 0) {
						if(code1 == format.svg.PathParser.FLOAT_SIGN) {
							if(e_pos != 0) break;
						} else if(code1 != format.svg.PathParser.FLOAT) break;
						e_pos++;
					} else if(code1 == format.svg.PathParser.FLOAT_EXP) {
						if(e_pos >= 0) break;
						e_pos = 0;
						seen_dot = true;
					} else if(code1 == format.svg.PathParser.FLOAT_SIGN) break;
					end++;
				}
				if(current_command < 0) {
				} else {
					var f = Std.parseFloat(HxOverrides.substr(pathToParse,pos,end - pos));
					args.push(f);
				}
				pos = end;
			} else {
				current_command = code;
				current_args = command;
				finished = false;
				current_command_pos = pos;
				args = [];
				pos++;
			}
			var px = 0.0;
			var py = 0.0;
			if(current_command >= 0) {
				if(current_args == args.length) {
					if(inConvertCubics && this.prev != null) {
						px = this.prev.prevX();
						py = this.prev.prevY();
					}
					this.prev = this.createCommand(current_command,args);
					if(this.prev == null) throw "Unknown command " + String.fromCharCode(current_command) + " near '" + HxOverrides.substr(pathToParse,current_command_pos,null) + "'";
					if(inConvertCubics && this.prev.getType() == 4) {
						var cubic = this.prev;
						var quads = cubic.toQuadratics(px,py);
						var _g = 0;
						while(_g < quads.length) {
							var q = quads[_g];
							++_g;
							segments.push(q);
						}
					} else segments.push(this.prev);
					finished = true;
					if(current_args == 0) {
						current_args = -1;
						current_command = -1;
					} else if(current_command == 77) current_command = 76; else if(current_command == 109) current_command = 108;
					current_command_pos = pos;
					args = [];
				}
			}
		}
		if(current_command >= 0 && !finished) throw "Unfinished command (" + args.length + "/" + current_args + ") near '" + HxOverrides.substr(pathToParse,current_command_pos,null) + "'";
		return segments;
	}
	,commandArgs: function(inCode) {
		if(inCode == 10) return format.svg.PathParser.SEPARATOR;
		var str = String.fromCharCode(inCode).toUpperCase();
		if(str >= "0" && str <= "9") return format.svg.PathParser.FLOAT;
		switch(str) {
		case "Z":
			return 0;
		case "H":case "V":
			return 1;
		case "M":case "L":case "T":
			return 2;
		case "S":case "Q":
			return 4;
		case "C":
			return 6;
		case "A":
			return 7;
		case "\t":case "\n":case " ":case "\r":case ",":
			return format.svg.PathParser.SEPARATOR;
		case "-":
			return format.svg.PathParser.FLOAT_SIGN;
		case "+":
			return format.svg.PathParser.FLOAT_SIGN;
		case "E":case "e":
			return format.svg.PathParser.FLOAT_EXP;
		case ".":
			return format.svg.PathParser.FLOAT_DOT;
		}
		return format.svg.PathParser.UNKNOWN;
	}
	,prevX: function() {
		if(this.prev != null) return this.prev.prevX(); else return 0;
	}
	,prevY: function() {
		if(this.prev != null) return this.prev.prevY(); else return 0;
	}
	,prevCX: function() {
		if(this.prev != null) return this.prev.prevCX(); else return 0;
	}
	,prevCY: function() {
		if(this.prev != null) return this.prev.prevCY(); else return 0;
	}
	,createCommand: function(code,a) {
		switch(code) {
		case 77:
			this.lastMoveX = a[0];
			this.lastMoveY = a[1];
			return new format.svg.MoveSegment(this.lastMoveX,this.lastMoveY);
		case 109:
			this.lastMoveX = a[0] + this.prevX();
			this.lastMoveY = a[1] + this.prevY();
			return new format.svg.MoveSegment(this.lastMoveX,this.lastMoveY);
		case 76:
			return new format.svg.DrawSegment(a[0],a[1]);
		case 108:
			return new format.svg.DrawSegment(a[0] + this.prevX(),a[1] + this.prevY());
		case 72:
			return new format.svg.DrawSegment(a[0],this.prevY());
		case 104:
			return new format.svg.DrawSegment(a[0] + this.prevX(),this.prevY());
		case 86:
			return new format.svg.DrawSegment(this.prevX(),a[0]);
		case 118:
			return new format.svg.DrawSegment(this.prevX(),a[0] + this.prevY());
		case 67:
			return new format.svg.CubicSegment(a[0],a[1],a[2],a[3],a[4],a[5]);
		case 99:
			var rx = this.prevX();
			var ry = this.prevY();
			return new format.svg.CubicSegment(a[0] + rx,a[1] + ry,a[2] + rx,a[3] + ry,a[4] + rx,a[5] + ry);
		case 83:
			var rx1 = this.prevX();
			var ry1 = this.prevY();
			return new format.svg.CubicSegment(rx1 * 2 - this.prevCX(),ry1 * 2 - this.prevCY(),a[0],a[1],a[2],a[3]);
		case 115:
			var rx2 = this.prevX();
			var ry2 = this.prevY();
			return new format.svg.CubicSegment(rx2 * 2 - this.prevCX(),ry2 * 2 - this.prevCY(),a[0] + rx2,a[1] + ry2,a[2] + rx2,a[3] + ry2);
		case 81:
			return new format.svg.QuadraticSegment(a[0],a[1],a[2],a[3]);
		case 113:
			var rx3 = this.prevX();
			var ry3 = this.prevY();
			return new format.svg.QuadraticSegment(a[0] + rx3,a[1] + ry3,a[2] + rx3,a[3] + ry3);
		case 84:
			var rx4 = this.prevX();
			var ry4 = this.prevY();
			return new format.svg.QuadraticSegment(rx4 * 2 - this.prevCX(),rx4 * 2 - this.prevCY(),a[2],a[3]);
		case 116:
			var rx5 = this.prevX();
			var ry5 = this.prevY();
			return new format.svg.QuadraticSegment(rx5 * 2 - this.prevCX(),ry5 * 2 - this.prevCY(),a[0] + rx5,a[1] + ry5);
		case 65:
			return new format.svg.ArcSegment(this.prevX(),this.prevY(),a[0],a[1],a[2],a[3] != 0.,a[4] != 0.,a[5],a[6]);
		case 97:
			var rx6 = this.prevX();
			var ry6 = this.prevY();
			return new format.svg.ArcSegment(rx6,ry6,a[0],a[1],a[2],a[3] != 0.,a[4] != 0.,a[5] + rx6,a[6] + ry6);
		case 90:
			return new format.svg.DrawSegment(this.lastMoveX,this.lastMoveY);
		case 122:
			return new format.svg.DrawSegment(this.lastMoveX,this.lastMoveY);
		}
		return null;
	}
	,__class__: format.svg.PathParser
};
format.svg.PathSegment = function(inX,inY) {
	this.x = inX;
	this.y = inY;
};
$hxClasses["format.svg.PathSegment"] = format.svg.PathSegment;
format.svg.PathSegment.__name__ = ["format","svg","PathSegment"];
format.svg.PathSegment.prototype = {
	getType: function() {
		return 0;
	}
	,prevX: function() {
		return this.x;
	}
	,prevY: function() {
		return this.y;
	}
	,prevCX: function() {
		return this.x;
	}
	,prevCY: function() {
		return this.y;
	}
	,toGfx: function(inGfx,ioContext) {
		ioContext.setLast(this.x,this.y);
		ioContext.firstX = ioContext.lastX;
		ioContext.firstY = ioContext.lastY;
		inGfx.moveTo(ioContext.lastX,ioContext.lastY);
	}
	,__class__: format.svg.PathSegment
};
format.svg.MoveSegment = function(inX,inY) {
	format.svg.PathSegment.call(this,inX,inY);
};
$hxClasses["format.svg.MoveSegment"] = format.svg.MoveSegment;
format.svg.MoveSegment.__name__ = ["format","svg","MoveSegment"];
format.svg.MoveSegment.__super__ = format.svg.PathSegment;
format.svg.MoveSegment.prototype = $extend(format.svg.PathSegment.prototype,{
	getType: function() {
		return 1;
	}
	,__class__: format.svg.MoveSegment
});
format.svg.DrawSegment = function(inX,inY) {
	format.svg.PathSegment.call(this,inX,inY);
};
$hxClasses["format.svg.DrawSegment"] = format.svg.DrawSegment;
format.svg.DrawSegment.__name__ = ["format","svg","DrawSegment"];
format.svg.DrawSegment.__super__ = format.svg.PathSegment;
format.svg.DrawSegment.prototype = $extend(format.svg.PathSegment.prototype,{
	toGfx: function(inGfx,ioContext) {
		ioContext.setLast(this.x,this.y);
		inGfx.lineTo(ioContext.lastX,ioContext.lastY);
	}
	,getType: function() {
		return 2;
	}
	,__class__: format.svg.DrawSegment
});
format.svg.QuadraticSegment = function(inCX,inCY,inX,inY) {
	format.svg.PathSegment.call(this,inX,inY);
	this.cx = inCX;
	this.cy = inCY;
};
$hxClasses["format.svg.QuadraticSegment"] = format.svg.QuadraticSegment;
format.svg.QuadraticSegment.__name__ = ["format","svg","QuadraticSegment"];
format.svg.QuadraticSegment.__super__ = format.svg.PathSegment;
format.svg.QuadraticSegment.prototype = $extend(format.svg.PathSegment.prototype,{
	prevCX: function() {
		return this.cx;
	}
	,prevCY: function() {
		return this.cy;
	}
	,toGfx: function(inGfx,ioContext) {
		ioContext.setLast(this.x,this.y);
		inGfx.curveTo(ioContext.transX(this.cx,this.cy),ioContext.transY(this.cx,this.cy),ioContext.lastX,ioContext.lastY);
	}
	,getType: function() {
		return 3;
	}
	,__class__: format.svg.QuadraticSegment
});
format.svg.CubicSegment = function(inCX1,inCY1,inCX2,inCY2,inX,inY) {
	format.svg.PathSegment.call(this,inX,inY);
	this.cx1 = inCX1;
	this.cy1 = inCY1;
	this.cx2 = inCX2;
	this.cy2 = inCY2;
};
$hxClasses["format.svg.CubicSegment"] = format.svg.CubicSegment;
format.svg.CubicSegment.__name__ = ["format","svg","CubicSegment"];
format.svg.CubicSegment.__super__ = format.svg.PathSegment;
format.svg.CubicSegment.prototype = $extend(format.svg.PathSegment.prototype,{
	prevCX: function() {
		return this.cx2;
	}
	,prevCY: function() {
		return this.cy2;
	}
	,Interp: function(a,b,frac) {
		return a + (b - a) * frac;
	}
	,toGfx: function(inGfx,ioContext) {
		var tx0 = ioContext.lastX;
		var ty0 = ioContext.lastY;
		var tx1 = ioContext.transX(this.cx1,this.cy1);
		var ty1 = ioContext.transY(this.cx1,this.cy1);
		var tx2 = ioContext.transX(this.cx2,this.cy2);
		var ty2 = ioContext.transY(this.cx2,this.cy2);
		ioContext.setLast(this.x,this.y);
		var tx3 = ioContext.lastX;
		var ty3 = ioContext.lastY;
		var pa_x = this.Interp(tx0,tx1,0.75);
		var pa_y = this.Interp(ty0,ty1,0.75);
		var pb_x = this.Interp(tx3,tx2,0.75);
		var pb_y = this.Interp(ty3,ty2,0.75);
		var dx = (tx3 - tx0) / 16;
		var dy = (ty3 - ty0) / 16;
		var pcx_1 = this.Interp(tx0,tx1,0.375);
		var pcy_1 = this.Interp(ty0,ty1,0.375);
		var pcx_2 = this.Interp(pa_x,pb_x,0.375) - dx;
		var pcy_2 = this.Interp(pa_y,pb_y,0.375) - dy;
		var pcx_3 = this.Interp(pb_x,pa_x,0.375) + dx;
		var pcy_3 = this.Interp(pb_y,pa_y,0.375) + dy;
		var pcx_4 = this.Interp(tx3,tx2,0.375);
		var pcy_4 = this.Interp(ty3,ty2,0.375);
		var pax_1 = (pcx_1 + pcx_2) * 0.5;
		var pay_1 = (pcy_1 + pcy_2) * 0.5;
		var pax_2 = (pa_x + pb_x) * 0.5;
		var pay_2 = (pa_y + pb_y) * 0.5;
		var pax_3 = (pcx_3 + pcx_4) * 0.5;
		var pay_3 = (pcy_3 + pcy_4) * 0.5;
		inGfx.curveTo(pcx_1,pcy_1,pax_1,pay_1);
		inGfx.curveTo(pcx_2,pcy_2,pax_2,pay_2);
		inGfx.curveTo(pcx_3,pcy_3,pax_3,pay_3);
		inGfx.curveTo(pcx_4,pcy_4,tx3,ty3);
	}
	,toQuadratics: function(tx0,ty0) {
		var result = new Array();
		var pa_x = this.Interp(tx0,this.cx1,0.75);
		var pa_y = this.Interp(ty0,this.cy1,0.75);
		var pb_x = this.Interp(this.x,this.cx2,0.75);
		var pb_y = this.Interp(this.y,this.cy2,0.75);
		var dx = (this.x - tx0) / 16;
		var dy = (this.y - ty0) / 16;
		var pcx_1 = this.Interp(tx0,this.cx1,0.375);
		var pcy_1 = this.Interp(ty0,this.cy1,0.375);
		var pcx_2 = this.Interp(pa_x,pb_x,0.375) - dx;
		var pcy_2 = this.Interp(pa_y,pb_y,0.375) - dy;
		var pcx_3 = this.Interp(pb_x,pa_x,0.375) + dx;
		var pcy_3 = this.Interp(pb_y,pa_y,0.375) + dy;
		var pcx_4 = this.Interp(this.x,this.cx2,0.375);
		var pcy_4 = this.Interp(this.y,this.cy2,0.375);
		var pax_1 = (pcx_1 + pcx_2) * 0.5;
		var pay_1 = (pcy_1 + pcy_2) * 0.5;
		var pax_2 = (pa_x + pb_x) * 0.5;
		var pay_2 = (pa_y + pb_y) * 0.5;
		var pax_3 = (pcx_3 + pcx_4) * 0.5;
		var pay_3 = (pcy_3 + pcy_4) * 0.5;
		result.push(new format.svg.QuadraticSegment(pcx_1,pcy_1,pax_1,pay_1));
		result.push(new format.svg.QuadraticSegment(pcx_2,pcy_2,pax_2,pay_2));
		result.push(new format.svg.QuadraticSegment(pcx_3,pcy_3,pax_3,pay_3));
		result.push(new format.svg.QuadraticSegment(pcx_4,pcy_4,this.x,this.y));
		return result;
	}
	,getType: function() {
		return 4;
	}
	,__class__: format.svg.CubicSegment
});
format.svg.ArcSegment = function(inX1,inY1,inRX,inRY,inRotation,inLargeArc,inSweep,x,y) {
	this.x1 = inX1;
	this.y1 = inY1;
	format.svg.PathSegment.call(this,x,y);
	this.rx = inRX;
	this.ry = inRY;
	this.phi = inRotation;
	this.fA = inLargeArc;
	this.fS = inSweep;
};
$hxClasses["format.svg.ArcSegment"] = format.svg.ArcSegment;
format.svg.ArcSegment.__name__ = ["format","svg","ArcSegment"];
format.svg.ArcSegment.__super__ = format.svg.PathSegment;
format.svg.ArcSegment.prototype = $extend(format.svg.PathSegment.prototype,{
	toGfx: function(inGfx,ioContext) {
		if(this.x1 == this.x && this.y1 == this.y) return;
		ioContext.setLast(this.x,this.y);
		if(this.rx == 0 || this.ry == 0) {
			inGfx.lineTo(ioContext.lastX,ioContext.lastY);
			return;
		}
		if(this.rx < 0) this.rx = -this.rx;
		if(this.ry < 0) this.ry = -this.ry;
		var p = this.phi * Math.PI / 180.0;
		var cos = Math.cos(p);
		var sin = Math.sin(p);
		var dx = (this.x1 - this.x) * 0.5;
		var dy = (this.y1 - this.y) * 0.5;
		var x1_ = cos * dx + sin * dy;
		var y1_ = -sin * dx + cos * dy;
		var rx2 = this.rx * this.rx;
		var ry2 = this.ry * this.ry;
		var x1_2 = x1_ * x1_;
		var y1_2 = y1_ * y1_;
		var s = (rx2 * ry2 - rx2 * y1_2 - ry2 * x1_2) / (rx2 * y1_2 + ry2 * x1_2);
		if(s < 0) s = 0; else if(this.fA == this.fS) s = -Math.sqrt(s); else s = Math.sqrt(s);
		var cx_ = s * this.rx * y1_ / this.ry;
		var cy_ = -s * this.ry * x1_ / this.rx;
		var xm = (this.x1 + this.x) * 0.5;
		var ym = (this.y1 + this.y) * 0.5;
		var cx = cos * cx_ - sin * cy_ + xm;
		var cy = sin * cx_ + cos * cy_ + ym;
		var theta = Math.atan2((y1_ - cy_) / this.ry,(x1_ - cx_) / this.rx);
		var dtheta = Math.atan2((-y1_ - cy_) / this.ry,(-x1_ - cx_) / this.rx) - theta;
		if(this.fS && dtheta < 0) dtheta += 2.0 * Math.PI; else if(!this.fS && dtheta > 0) dtheta -= 2.0 * Math.PI;
		var m = ioContext.matrix;
		var Txc;
		var Txs;
		var Tx0;
		var Tyc;
		var Tys;
		var Ty0;
		if(m != null) {
			Txc = m.a * this.rx;
			Txs = m.c * this.ry;
			Tx0 = m.a * cx + m.c * cy + m.tx;
			Tyc = m.b * this.rx;
			Tys = m.d * this.ry;
			Ty0 = m.b * cx + m.d * cy + m.ty;
		} else {
			Txc = this.rx;
			Txs = 0;
			Tx0 = cx + m.tx;
			Tyc = 0;
			Tys = this.ry;
			Ty0 = cy + m.ty;
		}
		var len = Math.abs(dtheta) * Math.sqrt(Txc * Txc + Txs * Txs + Tyc * Tyc + Tys * Tys);
		len *= 5;
		var steps = Math.round(len);
		if(steps > 1) {
			dtheta /= steps;
			var _g1 = 1;
			var _g = steps - 1;
			while(_g1 < _g) {
				var i = _g1++;
				var c = Math.cos(theta);
				var s1 = Math.sin(theta);
				theta += dtheta;
				inGfx.lineTo(Txc * c + Txs * s1 + Tx0,Tyc * c + Tys * s1 + Ty0);
			}
		}
		inGfx.lineTo(ioContext.lastX,ioContext.lastY);
	}
	,getType: function() {
		return 5;
	}
	,__class__: format.svg.ArcSegment
});
format.svg.RenderContext = function(inMatrix,inRect,inW,inH) {
	this.matrix = inMatrix;
	this.rect = inRect;
	if(inW != null) this.rectW = inW; else if(inRect != null) this.rectW = inRect.width; else this.rectW = 1;
	if(inH != null) this.rectH = inH; else if(inRect != null) this.rectH = inRect.height; else this.rectH = 1;
	this.firstX = 0;
	this.firstY = 0;
	this.lastX = 0;
	this.lastY = 0;
};
$hxClasses["format.svg.RenderContext"] = format.svg.RenderContext;
format.svg.RenderContext.__name__ = ["format","svg","RenderContext"];
format.svg.RenderContext.prototype = {
	transX: function(inX,inY) {
		if(this.rect != null && inX > this.rect.x) {
			if(inX > this.rect.get_right()) inX += this.rectW - this.rect.width; else inX = this.rect.x + this.rectW * (inX - this.rect.x) / this.rect.width;
		}
		return inX * this.matrix.a + inY * this.matrix.c + this.matrix.tx;
	}
	,transY: function(inX,inY) {
		if(this.rect != null && inY > this.rect.y) {
			if(inY > this.rect.get_right()) inY += this.rectH - this.rect.height; else inY = this.rect.y + this.rectH * (inY - this.rect.y) / this.rect.height;
		}
		return inX * this.matrix.b + inY * this.matrix.d + this.matrix.ty;
	}
	,setLast: function(inX,inY) {
		this.lastX = this.transX(inX,inY);
		this.lastY = this.transY(inX,inY);
	}
	,__class__: format.svg.RenderContext
};
format.svg.SVGData = function(inXML,inConvertCubics) {
	if(inConvertCubics == null) inConvertCubics = false;
	format.svg.Group.call(this);
	var svg = inXML.firstElement();
	if(svg == null || svg.get_nodeName() != "svg" && svg.get_nodeName() != "svg:svg") throw "Not an SVG file (" + (svg == null?"null":svg.get_nodeName()) + ")";
	this.mGrads = new haxe.ds.StringMap();
	this.mPathParser = new format.svg.PathParser();
	this.mConvertCubics = inConvertCubics;
	this.width = this.getFloatStyle("width",svg,null,0.0);
	this.height = this.getFloatStyle("height",svg,null,0.0);
	if(this.width == 0 && this.height == 0) this.width = this.height = 400; else if(this.width == 0) this.width = this.height; else if(this.height == 0) this.height = this.width;
	this.loadGroup(this,svg,new openfl.geom.Matrix(),null);
};
$hxClasses["format.svg.SVGData"] = format.svg.SVGData;
format.svg.SVGData.__name__ = ["format","svg","SVGData"];
format.svg.SVGData.__super__ = format.svg.Group;
format.svg.SVGData.prototype = $extend(format.svg.Group.prototype,{
	applyTransform: function(ioMatrix,inTrans) {
		var scale = 1.0;
		if(format.svg.SVGData.mTranslateMatch.match(inTrans)) ioMatrix.translate(Std.parseFloat(format.svg.SVGData.mTranslateMatch.matched(1)),Std.parseFloat(format.svg.SVGData.mTranslateMatch.matched(2))); else if(format.svg.SVGData.mScaleMatch.match(inTrans)) {
			var s = Std.parseFloat(format.svg.SVGData.mScaleMatch.matched(1));
			ioMatrix.scale(s,s);
			scale = s;
		} else if(format.svg.SVGData.mMatrixMatch.match(inTrans)) {
			var m = new openfl.geom.Matrix(Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(1)),Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(2)),Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(3)),Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(4)),Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(5)),Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(6)));
			m.concat(ioMatrix);
			ioMatrix.a = m.a;
			ioMatrix.b = m.b;
			ioMatrix.c = m.c;
			ioMatrix.d = m.d;
			ioMatrix.tx = m.tx;
			ioMatrix.ty = m.ty;
			scale = Math.sqrt(ioMatrix.a * ioMatrix.a + ioMatrix.c * ioMatrix.c);
		} else haxe.Log.trace("Warning, unknown transform:" + inTrans,{ fileName : "SVGData.hx", lineNumber : 117, className : "format.svg.SVGData", methodName : "applyTransform"});
		return scale;
	}
	,dumpGroup: function(g,indent) {
		haxe.Log.trace(indent + "Group:" + g.name,{ fileName : "SVGData.hx", lineNumber : 128, className : "format.svg.SVGData", methodName : "dumpGroup"});
		indent += "  ";
		var _g = 0;
		var _g1 = g.children;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			switch(e[1]) {
			case 0:
				var path = e[2];
				haxe.Log.trace(indent + "Path" + "  " + Std.string(path.matrix),{ fileName : "SVGData.hx", lineNumber : 135, className : "format.svg.SVGData", methodName : "dumpGroup"});
				break;
			case 1:
				var group = e[2];
				this.dumpGroup(group,indent + "   ");
				break;
			case 2:
				var text = e[2];
				haxe.Log.trace(indent + "Text " + text.text,{ fileName : "SVGData.hx", lineNumber : 137, className : "format.svg.SVGData", methodName : "dumpGroup"});
				break;
			}
		}
	}
	,getColorStyle: function(inKey,inNode,inStyles,inDefault) {
		var s = this.getStyle(inKey,inNode,inStyles,"");
		if(s == "") return inDefault;
		if(s.charAt(0) == "#") return Std.parseInt("0x" + HxOverrides.substr(s,1,null));
		return Std.parseInt(s);
	}
	,getFillStyle: function(inKey,inNode,inStyles) {
		var s = this.getStyle(inKey,inNode,inStyles,"");
		if(s == "") return format.svg.SVGData.defaultFill;
		if(s.charAt(0) == "#") return format.svg.FillType.FillSolid(Std.parseInt("0x" + HxOverrides.substr(s,1,null)));
		if(s == "none") return format.svg.FillType.FillNone;
		if(format.svg.SVGData.mURLMatch.match(s)) {
			var url = format.svg.SVGData.mURLMatch.matched(1);
			if(this.mGrads.exists(url)) return format.svg.FillType.FillGrad(this.mGrads.get(url));
			throw "Unknown url:" + url;
		}
		throw "Unknown fill string:" + s;
		return format.svg.FillType.FillNone;
	}
	,getFloat: function(inXML,inName,inDef) {
		if(inDef == null) inDef = 0.0;
		if(inXML.exists(inName)) return Std.parseFloat(inXML.get(inName));
		return inDef;
	}
	,getFloatStyle: function(inKey,inNode,inStyles,inDefault) {
		var s = this.getStyle(inKey,inNode,inStyles,"");
		if(s == "") return inDefault;
		return Std.parseFloat(s);
	}
	,getStrokeStyle: function(inKey,inNode,inStyles,inDefault) {
		var s = this.getStyle(inKey,inNode,inStyles,"");
		if(s == "") return inDefault;
		if(s == "none") return null;
		if(s.charAt(0) == "#") return Std.parseInt("0x" + HxOverrides.substr(s,1,null));
		return Std.parseInt(s);
	}
	,getStyle: function(inKey,inNode,inStyles,inDefault) {
		if(inNode != null && inNode.exists(inKey)) return inNode.get(inKey);
		if(inStyles != null && inStyles.exists(inKey)) return inStyles.get(inKey);
		return inDefault;
	}
	,getStyles: function(inNode,inPrevStyles) {
		if(!inNode.exists("style")) return inPrevStyles;
		var styles = new haxe.ds.StringMap();
		if(inPrevStyles != null) {
			var $it0 = inPrevStyles.keys();
			while( $it0.hasNext() ) {
				var s = $it0.next();
				styles.set(s,inPrevStyles.get(s));
			}
		}
		var style = inNode.get("style");
		var strings = format.svg.SVGData.mStyleSplit.split(style);
		var _g = 0;
		while(_g < strings.length) {
			var s1 = strings[_g];
			++_g;
			if(format.svg.SVGData.mStyleValue.match(s1)) styles.set(format.svg.SVGData.mStyleValue.matched(1),format.svg.SVGData.mStyleValue.matched(2));
		}
		return styles;
	}
	,loadDefs: function(inXML) {
		var _g = 0;
		while(_g < 2) {
			var pass = _g++;
			var $it0 = inXML.elements();
			while( $it0.hasNext() ) {
				var def = $it0.next();
				var name = def.get_nodeName();
				if(HxOverrides.substr(name,0,4) == "svg:") name = HxOverrides.substr(name,4,null);
				if(name == "linearGradient") this.loadGradient(def,openfl.display.GradientType.LINEAR,pass == 1); else if(name == "radialGradient") this.loadGradient(def,openfl.display.GradientType.RADIAL,pass == 1);
			}
		}
	}
	,loadGradient: function(inGrad,inType,inCrossLink) {
		var name = inGrad.get("id");
		var grad = new format.svg.Grad(inType);
		if(inCrossLink && inGrad.exists("xlink:href")) {
			var xlink = inGrad.get("xlink:href");
			if(xlink.charAt(0) != "#") throw "xlink - unkown syntax : " + xlink;
			var base = this.mGrads.get(HxOverrides.substr(xlink,1,null));
			if(base != null) {
				grad.colors = base.colors;
				grad.alphas = base.alphas;
				grad.ratios = base.ratios;
				grad.gradMatrix = base.gradMatrix.clone();
				grad.spread = base.spread;
				grad.interp = base.interp;
				grad.radius = base.radius;
			} else throw "Unknown xlink : " + xlink;
		}
		if(inGrad.exists("x1")) {
			grad.x1 = this.getFloat(inGrad,"x1");
			grad.y1 = this.getFloat(inGrad,"y1");
			grad.x2 = this.getFloat(inGrad,"x2");
			grad.y2 = this.getFloat(inGrad,"y2");
		} else {
			grad.x1 = this.getFloat(inGrad,"cx");
			grad.y1 = this.getFloat(inGrad,"cy");
			grad.x2 = this.getFloat(inGrad,"fx",grad.x1);
			grad.y2 = this.getFloat(inGrad,"fy",grad.y1);
		}
		grad.radius = this.getFloat(inGrad,"r");
		if(inGrad.exists("gradientTransform")) this.applyTransform(grad.gradMatrix,inGrad.get("gradientTransform"));
		var $it0 = inGrad.elements();
		while( $it0.hasNext() ) {
			var stop = $it0.next();
			var styles = this.getStyles(stop,null);
			grad.colors.push(this.getColorStyle("stop-color",stop,styles,0));
			grad.alphas.push(this.getFloatStyle("stop-opacity",stop,styles,1.0));
			grad.ratios.push(Std["int"](Std.parseFloat(stop.get("offset")) * 255.0));
		}
		this.mGrads.set(name,grad);
	}
	,loadGroup: function(g,inG,matrix,inStyles) {
		if(inG.exists("transform")) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			this.applyTransform(matrix,inG.get("transform"));
		}
		if(inG.exists("inkscape:label")) g.name = inG.get("inkscape:label"); else if(inG.exists("id")) g.name = inG.get("id");
		var styles = this.getStyles(inG,inStyles);
		var $it0 = inG.elements();
		while( $it0.hasNext() ) {
			var el = $it0.next();
			var name = el.get_nodeName();
			if(HxOverrides.substr(name,0,4) == "svg:") name = HxOverrides.substr(name,4,null);
			if(name == "defs") this.loadDefs(el); else if(name == "g") {
				if(!(el.exists("display") && el.get("display") == "none")) g.children.push(format.svg.DisplayElement.DisplayGroup(this.loadGroup(new format.svg.Group(),el,matrix,styles)));
			} else if(name == "path" || name == "line" || name == "polyline") g.children.push(format.svg.DisplayElement.DisplayPath(this.loadPath(el,matrix,styles,false,false))); else if(name == "rect") g.children.push(format.svg.DisplayElement.DisplayPath(this.loadPath(el,matrix,styles,true,false))); else if(name == "polygon") g.children.push(format.svg.DisplayElement.DisplayPath(this.loadPath(el,matrix,styles,false,false))); else if(name == "ellipse") g.children.push(format.svg.DisplayElement.DisplayPath(this.loadPath(el,matrix,styles,false,true))); else if(name == "circle") g.children.push(format.svg.DisplayElement.DisplayPath(this.loadPath(el,matrix,styles,false,true,true))); else if(name == "text") g.children.push(format.svg.DisplayElement.DisplayText(this.loadText(el,matrix,styles))); else if(name == "linearGradient") this.loadGradient(el,openfl.display.GradientType.LINEAR,true); else if(name == "radialGradient") this.loadGradient(el,openfl.display.GradientType.RADIAL,true); else {
			}
		}
		return g;
	}
	,loadPath: function(inPath,matrix,inStyles,inIsRect,inIsEllipse,inIsCircle) {
		if(inIsCircle == null) inIsCircle = false;
		if(inPath.exists("transform")) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			this.applyTransform(matrix,inPath.get("transform"));
		}
		var styles = this.getStyles(inPath,inStyles);
		var name;
		if(inPath.exists("id")) name = inPath.get("id"); else name = "";
		var path = new format.svg.Path();
		path.fill = this.getFillStyle("fill",inPath,styles);
		path.alpha = this.getFloatStyle("opacity",inPath,styles,1.0);
		path.fill_alpha = this.getFloatStyle("fill-opacity",inPath,styles,1.0);
		path.stroke_alpha = this.getFloatStyle("stroke-opacity",inPath,styles,1.0);
		path.stroke_colour = this.getStrokeStyle("stroke",inPath,styles,null);
		path.stroke_width = this.getFloatStyle("stroke-width",inPath,styles,1.0);
		path.stroke_caps = openfl.display.CapsStyle.ROUND;
		path.joint_style = openfl.display.JointStyle.ROUND;
		path.miter_limit = this.getFloatStyle("stroke-miterlimit",inPath,styles,3.0);
		path.segments = [];
		path.matrix = matrix;
		path.name = name;
		if(inIsRect) {
			var x;
			if(inPath.exists("x")) x = Std.parseFloat(inPath.get("x")); else x = 0;
			var y;
			if(inPath.exists("y")) y = Std.parseFloat(inPath.get("y")); else y = 0;
			var w = Std.parseFloat(inPath.get("width"));
			var h = Std.parseFloat(inPath.get("height"));
			var rx;
			if(inPath.exists("rx")) rx = Std.parseFloat(inPath.get("rx")); else rx = 0.0;
			var ry;
			if(inPath.exists("ry")) ry = Std.parseFloat(inPath.get("ry")); else ry = 0.0;
			if(rx == 0 || ry == 0) {
				path.segments.push(new format.svg.MoveSegment(x,y));
				path.segments.push(new format.svg.DrawSegment(x + w,y));
				path.segments.push(new format.svg.DrawSegment(x + w,y + h));
				path.segments.push(new format.svg.DrawSegment(x,y + h));
				path.segments.push(new format.svg.DrawSegment(x,y));
			} else {
				path.segments.push(new format.svg.MoveSegment(x,y + ry));
				path.segments.push(new format.svg.QuadraticSegment(x,y,x + rx,y));
				path.segments.push(new format.svg.DrawSegment(x + w - rx,y));
				path.segments.push(new format.svg.QuadraticSegment(x + w,y,x + w,y + rx));
				path.segments.push(new format.svg.DrawSegment(x + w,y + h - ry));
				path.segments.push(new format.svg.QuadraticSegment(x + w,y + h,x + w - rx,y + h));
				path.segments.push(new format.svg.DrawSegment(x + rx,y + h));
				path.segments.push(new format.svg.QuadraticSegment(x,y + h,x,y + h - ry));
				path.segments.push(new format.svg.DrawSegment(x,y + ry));
			}
		} else if(inIsEllipse) {
			var x1;
			if(inPath.exists("cx")) x1 = Std.parseFloat(inPath.get("cx")); else x1 = 0;
			var y1;
			if(inPath.exists("cy")) y1 = Std.parseFloat(inPath.get("cy")); else y1 = 0;
			var r;
			if(inIsCircle && inPath.exists("r")) r = Std.parseFloat(inPath.get("r")); else r = 0.0;
			var w1;
			if(inIsCircle) w1 = r; else if(inPath.exists("rx")) w1 = Std.parseFloat(inPath.get("rx")); else w1 = 0.0;
			var w_ = w1 * format.svg.SVGData.SIN45;
			var cw_ = w1 * format.svg.SVGData.TAN22;
			var h1;
			if(inIsCircle) h1 = r; else if(inPath.exists("ry")) h1 = Std.parseFloat(inPath.get("ry")); else h1 = 0.0;
			var h_ = h1 * format.svg.SVGData.SIN45;
			var ch_ = h1 * format.svg.SVGData.TAN22;
			path.segments.push(new format.svg.MoveSegment(x1 + w1,y1));
			path.segments.push(new format.svg.QuadraticSegment(x1 + w1,y1 + ch_,x1 + w_,y1 + h_));
			path.segments.push(new format.svg.QuadraticSegment(x1 + cw_,y1 + h1,x1,y1 + h1));
			path.segments.push(new format.svg.QuadraticSegment(x1 - cw_,y1 + h1,x1 - w_,y1 + h_));
			path.segments.push(new format.svg.QuadraticSegment(x1 - w1,y1 + ch_,x1 - w1,y1));
			path.segments.push(new format.svg.QuadraticSegment(x1 - w1,y1 - ch_,x1 - w_,y1 - h_));
			path.segments.push(new format.svg.QuadraticSegment(x1 - cw_,y1 - h1,x1,y1 - h1));
			path.segments.push(new format.svg.QuadraticSegment(x1 + cw_,y1 - h1,x1 + w_,y1 - h_));
			path.segments.push(new format.svg.QuadraticSegment(x1 + w1,y1 - ch_,x1 + w1,y1));
		} else {
			var d;
			if(inPath.exists("points")) d = "M" + inPath.get("points") + "z"; else if(inPath.exists("x1")) d = "M" + inPath.get("x1") + "," + inPath.get("y1") + " " + inPath.get("x2") + "," + inPath.get("y2") + "z"; else d = inPath.get("d");
			var _g = 0;
			var _g1 = this.mPathParser.parse(d,this.mConvertCubics);
			while(_g < _g1.length) {
				var segment = _g1[_g];
				++_g;
				path.segments.push(segment);
			}
		}
		return path;
	}
	,loadText: function(inText,matrix,inStyles) {
		if(inText.exists("transform")) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			this.applyTransform(matrix,inText.get("transform"));
		}
		var styles = this.getStyles(inText,inStyles);
		var text = new format.svg.Text();
		text.matrix = matrix;
		if(inText.exists("id")) text.name = inText.get("id"); else text.name = "";
		text.x = this.getFloat(inText,"x",0.0);
		text.y = this.getFloat(inText,"y",0.0);
		text.fill = this.getFillStyle("fill",inText,styles);
		text.fill_alpha = this.getFloatStyle("fill-opacity",inText,styles,1.0);
		text.stroke_alpha = this.getFloatStyle("stroke-opacity",inText,styles,1.0);
		text.stroke_colour = this.getStrokeStyle("stroke",inText,styles,null);
		text.stroke_width = this.getFloatStyle("stroke-width",inText,styles,1.0);
		text.font_family = this.getStyle("font-family",inText,styles,"");
		text.font_size = this.getFloatStyle("font-size",inText,styles,12);
		text.letter_spacing = this.getFloatStyle("letter-spacing",inText,styles,0);
		text.kerning = this.getFloatStyle("kerning",inText,styles,0);
		var string = "";
		var $it0 = inText.elements();
		while( $it0.hasNext() ) {
			var el = $it0.next();
			string += el.toString();
		}
		text.text = string;
		return text;
	}
	,__class__: format.svg.SVGData
});
format.svg.SVGRenderer = function(inSvg,inLayer) {
	this.mSvg = inSvg;
	this.width = this.mSvg.width;
	this.height = this.mSvg.height;
	this.mRoot = this.mSvg;
	if(inLayer != null) {
		this.mRoot = this.mSvg.findGroup(inLayer);
		if(this.mRoot == null) throw "Could not find SVG group: " + inLayer;
	}
};
$hxClasses["format.svg.SVGRenderer"] = format.svg.SVGRenderer;
format.svg.SVGRenderer.__name__ = ["format","svg","SVGRenderer"];
format.svg.SVGRenderer.toHaxe = function(inXML,inFilter) {
	return new format.svg.SVGRenderer(new format.svg.SVGData(inXML,true)).iterate(new format.gfx.Gfx2Haxe(),inFilter).commands;
};
format.svg.SVGRenderer.toBytes = function(inXML,inFilter) {
	return new format.svg.SVGRenderer(new format.svg.SVGData(inXML,true)).iterate(new format.gfx.GfxBytes(),inFilter);
};
format.svg.SVGRenderer.prototype = {
	iterate: function(inGfx,inFilter) {
		this.mGfx = inGfx;
		this.mMatrix = new openfl.geom.Matrix();
		this.mFilter = inFilter;
		this.mGroupPath = [];
		this.mGfx.size(this.width,this.height);
		this.iterateGroup(this.mRoot,true);
		this.mGfx.eof();
		return inGfx;
	}
	,hasGroup: function(inName) {
		return this.mRoot.hasGroup(inName);
	}
	,iterateText: function(inText) {
		if(this.mFilter != null && !this.mFilter(inText.name,this.mGroupPath)) return;
		this.mGfx.renderText(inText);
	}
	,iteratePath: function(inPath) {
		if(this.mFilter != null && !this.mFilter(inPath.name,this.mGroupPath)) return;
		if(inPath.segments.length == 0 || this.mGfx == null) return;
		var px = 0.0;
		var py = 0.0;
		var m = inPath.matrix.clone();
		m.concat(this.mMatrix);
		var context = new format.svg.RenderContext(m,this.mScaleRect,this.mScaleW,this.mScaleH);
		var geomOnly = this.mGfx.geometryOnly();
		if(!geomOnly) {
			inPath.segments[0].toGfx(this.mGfx,context);
			{
				var _g = inPath.fill;
				switch(_g[1]) {
				case 0:
					var grad = _g[2];
					grad.updateMatrix(m);
					this.mGfx.beginGradientFill(grad);
					break;
				case 1:
					var colour = _g[2];
					this.mGfx.beginFill(colour,inPath.fill_alpha * inPath.alpha);
					break;
				case 2:
					break;
				}
			}
			if(inPath.stroke_colour == null) {
			} else {
				var style = new format.gfx.LineStyle();
				var scale = Math.sqrt(m.a * m.a + m.c * m.c);
				style.thickness = inPath.stroke_width * scale;
				style.alpha = inPath.stroke_alpha * inPath.alpha;
				style.color = inPath.stroke_colour;
				style.capsStyle = inPath.stroke_caps;
				style.jointStyle = inPath.joint_style;
				style.miterLimit = inPath.miter_limit;
				this.mGfx.lineStyle(style);
			}
		}
		var _g1 = 0;
		var _g11 = inPath.segments;
		while(_g1 < _g11.length) {
			var segment = _g11[_g1];
			++_g1;
			segment.toGfx(this.mGfx,context);
		}
		this.mGfx.endFill();
		this.mGfx.endLineStyle();
	}
	,iterateGroup: function(inGroup,inIgnoreDot) {
		if(inIgnoreDot && inGroup.name != null && HxOverrides.substr(inGroup.name,0,1) == ".") return;
		this.mGroupPath.push(inGroup.name);
		var _g = 0;
		var _g1 = inGroup.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			switch(child[1]) {
			case 1:
				var group = child[2];
				this.iterateGroup(group,inIgnoreDot);
				break;
			case 0:
				var path = child[2];
				this.iteratePath(path);
				break;
			case 2:
				var text = child[2];
				this.iterateText(text);
				break;
			}
		}
		this.mGroupPath.pop();
	}
	,render: function(inGfx,inMatrix,inFilter,inScaleRect,inScaleW,inScaleH) {
		this.mGfx = new format.gfx.GfxGraphics(inGfx);
		if(inMatrix == null) this.mMatrix = new openfl.geom.Matrix(); else this.mMatrix = new openfl.geom.Matrix(inMatrix.a,inMatrix.b,inMatrix.c,inMatrix.d,inMatrix.tx,inMatrix.ty);
		this.mScaleRect = inScaleRect;
		this.mScaleW = inScaleW;
		this.mScaleH = inScaleH;
		this.mFilter = inFilter;
		this.mGroupPath = [];
		this.iterateGroup(this.mRoot,inFilter == null);
	}
	,renderRect: function(inGfx,inFilter,scaleRect,inBounds,inRect) {
		var matrix = new openfl.geom.Matrix();
		matrix.tx = inRect.x - inBounds.x;
		matrix.ty = inRect.y - inBounds.y;
		if(scaleRect != null) {
			var extraX = inRect.width - (inBounds.width - scaleRect.width);
			var extraY = inRect.height - (inBounds.height - scaleRect.height);
			this.render(inGfx,matrix,inFilter,scaleRect,extraX,extraY);
		} else this.render(inGfx,matrix,inFilter);
	}
	,renderRect0: function(inGfx,inFilter,scaleRect,inBounds,inRect) {
		var matrix = new openfl.geom.Matrix();
		matrix.tx = -inBounds.x;
		matrix.ty = -inBounds.y;
		if(scaleRect != null) {
			var extraX = inRect.width - (inBounds.width - scaleRect.width);
			var extraY = inRect.height - (inBounds.height - scaleRect.height);
			this.render(inGfx,matrix,inFilter,scaleRect,extraX,extraY);
		} else this.render(inGfx,matrix,inFilter);
	}
	,getExtent: function(inMatrix,inFilter,inIgnoreDot) {
		if(inIgnoreDot == null) inIgnoreDot = inFilter == null;
		var gfx = new format.gfx.GfxExtent();
		this.mGfx = gfx;
		if(inMatrix == null) this.mMatrix = new openfl.geom.Matrix(); else this.mMatrix = new openfl.geom.Matrix(inMatrix.a,inMatrix.b,inMatrix.c,inMatrix.d,inMatrix.tx,inMatrix.ty);
		this.mFilter = inFilter;
		this.mGroupPath = [];
		this.iterateGroup(this.mRoot,inIgnoreDot);
		return gfx.extent;
	}
	,findText: function(inFilter) {
		this.mFilter = inFilter;
		this.mGroupPath = [];
		var finder = new format.gfx.GfxTextFinder();
		this.mGfx = finder;
		this.iterateGroup(this.mRoot,false);
		return finder.text;
	}
	,getMatchingRect: function(inMatch) {
		return this.getExtent(null,function(_,groups) {
			return groups[1] != null && inMatch.match(groups[1]);
		},false);
	}
	,renderObject: function(inObj,inGfx,inMatrix,inFilter,inScale9) {
		this.render(inGfx,inMatrix,inFilter,inScale9);
		var rect = this.getExtent(inMatrix,function(_,groups) {
			return groups[1] == ".scale9";
		});
	}
	,renderSprite: function(inObj,inMatrix,inFilter,inScale9) {
		this.renderObject(inObj,inObj.get_graphics(),inMatrix,inFilter,inScale9);
	}
	,createShape: function(inMatrix,inFilter,inScale9) {
		var shape = new openfl.display.Shape();
		this.renderObject(shape,shape.get_graphics(),inMatrix,inFilter,inScale9);
		return shape;
	}
	,namedShape: function(inName) {
		return this.createShape(null,function(name,_) {
			return name == inName;
		});
	}
	,renderBitmap: function(inRect,inScale) {
		if(inScale == null) inScale = 1.0;
		this.mMatrix = new openfl.geom.Matrix(inScale,0,0,inScale,-inRect.x * inScale,-inRect.y * inScale);
		var w = Std["int"](Math.ceil(inRect == null?this.width:inRect.width * inScale));
		var h = Std["int"](Math.ceil(inRect == null?this.width:inRect.height * inScale));
		var bmp = new openfl.display.BitmapData(w,h,true,0);
		var shape = new openfl.display.Shape();
		this.mGfx = new format.gfx.GfxGraphics(shape.get_graphics());
		this.mGroupPath = [];
		this.iterateGroup(this.mRoot,true);
		bmp.draw(shape);
		this.mGfx = null;
		return bmp;
	}
	,__class__: format.svg.SVGRenderer
};
format.svg.Text = function() {
};
$hxClasses["format.svg.Text"] = format.svg.Text;
format.svg.Text.__name__ = ["format","svg","Text"];
format.svg.Text.prototype = {
	__class__: format.svg.Text
};
format.swf = {};
format.swf.exporters = {};
format.swf.exporters.core = {};
format.swf.exporters.core.FilterType = $hxClasses["format.swf.exporters.core.FilterType"] = { __ename__ : ["format","swf","exporters","core","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
format.swf.exporters.core.FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = format.swf.exporters.core.FilterType; $x.toString = $estr; return $x; };
format.swf.exporters.core.FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = format.swf.exporters.core.FilterType; $x.toString = $estr; return $x; };
format.swf.exporters.core.FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = format.swf.exporters.core.FilterType; $x.toString = $estr; return $x; };
format.swf.exporters.core.FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = format.swf.exporters.core.FilterType; $x.toString = $estr; return $x; };
format.swf.exporters.core.ShapeCommand = $hxClasses["format.swf.exporters.core.ShapeCommand"] = { __ename__ : ["format","swf","exporters","core","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
format.swf.exporters.core.ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = format.swf.exporters.core.ShapeCommand; $x.toString = $estr; return $x; };
format.swf.exporters.core.ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = format.swf.exporters.core.ShapeCommand; $x.toString = $estr; return $x; };
format.swf.exporters.core.ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = format.swf.exporters.core.ShapeCommand; $x.toString = $estr; return $x; };
format.swf.exporters.core.ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = format.swf.exporters.core.ShapeCommand; $x.toString = $estr; return $x; };
format.swf.exporters.core.ShapeCommand.EndFill = ["EndFill",4];
format.swf.exporters.core.ShapeCommand.EndFill.toString = $estr;
format.swf.exporters.core.ShapeCommand.EndFill.__enum__ = format.swf.exporters.core.ShapeCommand;
format.swf.exporters.core.ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = format.swf.exporters.core.ShapeCommand; $x.toString = $estr; return $x; };
format.swf.exporters.core.ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = format.swf.exporters.core.ShapeCommand; $x.toString = $estr; return $x; };
format.swf.exporters.core.ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = format.swf.exporters.core.ShapeCommand; $x.toString = $estr; return $x; };
openfl.text = {};
openfl.text.TextField = function() {
	openfl.display.InteractiveObject.call(this);
	this.__width = 100;
	this.__height = 100;
	this.__text = "";
	this.set_type(openfl.text.TextFieldType.DYNAMIC);
	this.set_autoSize(openfl.text.TextFieldAutoSize.NONE);
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.set_selectable(true);
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = openfl.text.GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.set_wordWrap(false);
	if(openfl.text.TextField.__defaultTextFormat == null) {
		openfl.text.TextField.__defaultTextFormat = new openfl.text.TextFormat("Times New Roman",12,0,false,false,false,"","",openfl.text.TextFormatAlign.LEFT,0,0,0,0);
		openfl.text.TextField.__defaultTextFormat.blockIndent = 0;
		openfl.text.TextField.__defaultTextFormat.bullet = false;
		openfl.text.TextField.__defaultTextFormat.letterSpacing = 0;
		openfl.text.TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl.text.TextField.__defaultTextFormat.clone();
};
$hxClasses["openfl.text.TextField"] = openfl.text.TextField;
openfl.text.TextField.__name__ = ["openfl","text","TextField"];
openfl.text.TextField.__defaultTextFormat = null;
openfl.text.TextField.__super__ = openfl.display.InteractiveObject;
openfl.text.TextField.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	appendText: function(text) {
		var _g = this;
		_g.set_text(_g.get_text() + text);
	}
	,getCharBoundaries: function(a) {
		openfl.Lib.notImplemented("TextField.getCharBoundaries");
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getCharIndexAtPoint");
		return 0;
	}
	,getLineIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getLineIndexAtPoint");
		return 0;
	}
	,getLineMetrics: function(lineIndex) {
		var height = this.get_textHeight();
		var lineWidth = this.__getLineWidth(lineIndex);
		var lineHeight = this.__getLineMetric(lineIndex,2);
		var ascender = this.__getLineMetric(lineIndex,0);
		var descender = this.__getLineMetric(lineIndex,1);
		var leading = this.__getLineMetric(lineIndex,3);
		var margin;
		var _g = this.__textFormat.align;
		switch(_g[1]) {
		case 0:case 2:
			margin = 2;
			break;
		case 1:
			margin = this.get_width() - lineWidth - 2;
			break;
		case 3:
			margin = (this.get_width() - lineWidth) / 2;
			break;
		}
		return new openfl.text.TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineOffset");
		return 0;
	}
	,getLineText: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineText");
		return "";
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		return this.__textFormat.clone();
	}
	,setSelection: function(beginIndex,endIndex) {
		openfl.Lib.notImplemented("TextField.setSelection");
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
	}
	,__clipText: function(value) {
		var textWidth = this.__getTextWidth(value);
		var fillPer = textWidth / this.__width;
		this.set_text(fillPer > 1?(function($this) {
			var $r;
			var _this = $this.get_text();
			var pos = -1 * Math.floor($this.get_text().length / fillPer);
			$r = HxOverrides.substr(_this,pos,null);
			return $r;
		}(this)):this.get_text());
		return this.get_text() + "";
	}
	,__disableInputMode: function() {
		this.this_onRemovedFromStage(null);
	}
	,__enableInputMode: function() {
		this.__cursorPosition = -1;
		if(this.__hiddenInput == null) {
			this.__hiddenInput = window.document.createElement("input");
			this.__hiddenInput.type = "text";
			this.__hiddenInput.style.position = "absolute";
			this.__hiddenInput.style.opacity = "0";
			this.__hiddenInput.style.color = "transparent";
			this.__hiddenInput.style.left = "0px";
			this.__hiddenInput.style.top = "50%";
			if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
				this.__hiddenInput.style.fontSize = "0px";
				this.__hiddenInput.style.width = "0px";
				this.__hiddenInput.style.height = "0px";
			} else {
				this.__hiddenInput.style.width = "1px";
				this.__hiddenInput.style.height = "1px";
			}
			this.__hiddenInput.style.pointerEvents = "none";
			this.__hiddenInput.style.zIndex = "-10000000";
			if(this.maxChars > 0) this.__hiddenInput.maxLength = this.maxChars;
			window.document.body.appendChild(this.__hiddenInput);
			this.__hiddenInput.value = this.__text;
		}
		if(this.stage != null) this.this_onAddedToStage(null); else {
			this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.this_onAddedToStage));
			this.addEventListener(openfl.events.Event.REMOVED_FROM_STAGE,$bind(this,this.this_onRemovedFromStage));
		}
	}
	,__findFont: function(name) {
		return null;
	}
	,__getBounds: function(rect,matrix) {
		var bounds = new openfl.geom.Rectangle(0,0,this.__width,this.__height);
		bounds = bounds.transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.type == openfl.text.TextFieldType.INPUT && this.selectable) return lime.ui.MouseCursor.TEXT; else return null;
	}
	,__getFont: function(format) {
		var font;
		if(format.italic) font = "italic "; else font = "normal ";
		font += "normal ";
		if(format.bold) font += "bold "; else font += "normal ";
		font += format.size + "px";
		font += "/" + (format.size + format.leading) + "px ";
		font += "'" + (function($this) {
			var $r;
			var _g = format.font;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case "_sans":
					$r = "sans-serif";
					break;
				case "_serif":
					$r = "serif";
					break;
				case "_typewriter":
					$r = "monospace";
					break;
				default:
					$r = format.font;
				}
				return $r;
			}($this));
			return $r;
		}(this));
		font += "'";
		return font;
	}
	,__getFontInstance: function(format) {
		return null;
	}
	,__getLineBreaks: function() {
		var lines = 0;
		var _g1 = 0;
		var _g;
		var s = this.get_text();
		_g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			var $char = haxe.Utf8.charCodeAt(this.get_text(),i);
			if($char == openfl.text.TextField.__utf8_endline_code) lines++;
		}
		return lines;
	}
	,__getLineBreakIndeces: function() {
		var breaks = [];
		var _g1 = 0;
		var _g;
		var s = this.get_text();
		_g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			var $char = haxe.Utf8.charCodeAt(this.get_text(),i);
			if($char == openfl.text.TextField.__utf8_endline_code) breaks.push(i);
		}
		return breaks;
	}
	,__getLineBreaksInRange: function(i) {
		var lines = 0;
		if(this.__ranges.length > i && i >= 0) {
			var range = this.__ranges[i];
			if(range.start > 0 && range.end < this.get_text().length) {
				var _g1 = range.start;
				var _g = range.end + 1;
				while(_g1 < _g) {
					var j = _g1++;
					var $char = haxe.Utf8.charCodeAt(this.get_text(),i);
					if($char == openfl.text.TextField.__utf8_endline_code) lines++;
				}
			}
		}
		return lines;
	}
	,__getLineIndeces: function(line) {
		var breaks = this.__getLineBreakIndeces();
		var i = 0;
		var first_char = 0;
		var last_char = this.get_text().length - 1;
		var _g = 0;
		while(_g < breaks.length) {
			var br = breaks[_g];
			++_g;
			if(i == line) {
				first_char = br + 1;
				if(i != breaks.length - 1) last_char = breaks[i + 1] - 1;
			}
			i++;
		}
		return [first_char,last_char];
	}
	,__getLineWidth: function(line) {
		var measurements = this.__measureTextSub(false);
		var currWidth = 0.0;
		var bestWidth = 0.0;
		var linebreaks = this.__getLineBreakIndeces();
		var currLine = 0;
		var _g1 = 0;
		var _g = measurements.length;
		while(_g1 < _g) {
			var i = _g1++;
			var measure = measurements[i];
			if(HxOverrides.indexOf(linebreaks,i,0) != -1) {
				if(currLine == line) return currWidth; else if(line == -1 && currWidth > bestWidth) bestWidth = currWidth;
				currWidth = 0;
				currLine++;
			} else currWidth += measurements[i];
		}
		if(currLine == line) bestWidth = currWidth; else if(line == -1 && currWidth > bestWidth) bestWidth = currWidth;
		return bestWidth;
	}
	,__getLineMetric: function(line,metric) {
		if(this.__ranges == null) return this.__getLineMetricSubRangesNull(true,metric); else return this.__getLineMetricSubRangesNotNull(line,metric);
	}
	,__getLineMetricSubRangesNull: function(singleLine,metric) {
		if(singleLine == null) singleLine = false;
		var font = this.__getFontInstance(this.__textFormat);
		if(font != null) switch(metric) {
		case 2:
			return this.__getLineMetricSubRangesNull(singleLine,0) + this.__getLineMetricSubRangesNull(singleLine,1) + this.__getLineMetricSubRangesNull(singleLine,3);
		case 0:
			return font.get_ascender() / font.get_unitsPerEM() * this.__textFormat.size;
		case 1:
			return Math.abs(font.get_descender() / font.get_unitsPerEM() * this.__textFormat.size);
		case 3:
			return this.__textFormat.leading;
		default:
			return 0;
		}
		return 0;
	}
	,__getLineMetricSubRangesNotNull: function(specificLine,metric) {
		var lineChars = this.__getLineIndeces(specificLine);
		var m = 0.0;
		var best_m = 0.0;
		var _g = 0;
		var _g1 = this.__ranges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			if(range.start >= lineChars[0]) {
				var font = this.__getFontInstance(range.format);
				if(font != null) switch(metric) {
				case 2:
					m = this.__getLineMetricSubRangesNotNull(specificLine,0) + this.__getLineMetricSubRangesNotNull(specificLine,1) + this.__getLineMetricSubRangesNotNull(specificLine,3);
					break;
				case 0:
					m = font.get_ascender() / font.get_unitsPerEM() * this.__textFormat.size;
					break;
				case 1:
					m = Math.abs(font.get_descender() / font.get_unitsPerEM() * this.__textFormat.size);
					break;
				case 3:
					m = this.__textFormat.leading;
					break;
				default:
					m = 0;
				}
			}
			if(m > best_m) best_m = m;
			m = 0;
		}
		return best_m;
	}
	,__getPosition: function(x,y) {
		if(x <= 2) return 0;
		var value = this.get_text();
		var text = value;
		var totalW = 2;
		var pos = text.length;
		if(x < this.__getTextWidth(text) + 2) {
			var _g1 = 0;
			var _g = text.length;
			while(_g1 < _g) {
				var i = _g1++;
				totalW += this.__getTextWidth(text.charAt(i));
				if(totalW >= x) {
					pos = i;
					break;
				}
			}
		}
		return pos;
	}
	,__getTextWidth: function(text) {
		if(this.__context == null) {
			this.__canvas = window.document.createElement("canvas");
			this.__context = this.__canvas.getContext("2d");
		}
		this.__context.font = this.__getFont(this.__textFormat);
		this.__context.textAlign = "left";
		return this.__context.measureText(text).width;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__measureText: function(condense) {
		if(condense == null) condense = true;
		if(this.__context == null) {
			this.__canvas = window.document.createElement("canvas");
			this.__context = this.__canvas.getContext("2d");
		}
		if(this.__ranges == null) {
			this.__context.font = this.__getFont(this.__textFormat);
			return [this.__context.measureText(this.__text).width];
		} else {
			var measurements = [];
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				this.__context.font = this.__getFont(range.format);
				measurements.push(this.__context.measureText(this.get_text().substring(range.start,range.end)).width);
			}
			return measurements;
		}
	}
	,__measureTextSub: function(condense) {
		if(this.__textLayout == null) this.__textLayout = new lime.text.TextLayout();
		if(this.__ranges == null) return this.__measureTextSubRangesNull(condense); else return this.__measureTextSubRangesNotNull(condense);
		return null;
	}
	,__measureTextSubRangesNull: function(condense) {
		var font = this.__getFontInstance(this.__textFormat);
		var width = 0.0;
		var widths = [];
		if(font != null && this.__textFormat.size != null) {
			this.__textLayout.set_text(null);
			this.__textLayout.set_font(font);
			this.__textLayout.set_size(this.__textFormat.size | 0);
			this.__textLayout.set_text(this.__text);
			var _g = 0;
			var _g1 = this.__textLayout.positions;
			while(_g < _g1.length) {
				var position = _g1[_g];
				++_g;
				if(condense) width += position.advance.x; else widths.push(position.advance.x);
			}
		}
		if(condense) widths.push(width);
		return widths;
	}
	,__measureTextSubRangesNotNull: function(condense) {
		var measurements = [];
		var _g = 0;
		var _g1 = this.__ranges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			var font = this.__getFontInstance(range.format);
			var width = 0.0;
			if(font != null && range.format.size != null) {
				this.__textLayout.set_text(null);
				this.__textLayout.set_font(font);
				this.__textLayout.set_size(range.format.size | 0);
				this.__textLayout.set_text(this.get_text().substring(range.start,range.end));
				var _g2 = 0;
				var _g3 = this.__textLayout.positions;
				while(_g2 < _g3.length) {
					var position = _g3[_g2];
					++_g2;
					if(condense) width += position.advance.x; else measurements.push(position.advance.x);
				}
			}
			if(condense) measurements.push(width);
		}
		return measurements;
	}
	,__measureTextWithDOM: function() {
		var div = this.__div;
		if(this.__div == null) {
			div = window.document.createElement("div");
			div.innerHTML = new EReg("\n","g").replace(this.__text,"<br>");
			div.style.setProperty("font",this.__getFont(this.__textFormat),null);
			div.style.setProperty("pointer-events","none",null);
			div.style.position = "absolute";
			div.style.top = "110%";
			window.document.body.appendChild(div);
		}
		this.__measuredWidth = div.clientWidth;
		if(this.__div == null) div.style.width = Std.string(this.__width - 4) + "px";
		this.__measuredHeight = div.clientHeight;
		if(this.__div == null) window.document.body.removeChild(div);
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasTextField.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl._internal.renderer.dom.DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl._internal.renderer.opengl.GLTextField.render(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe.Timer.delay($bind(this,this.__startCursorTimer),500);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) this.__cursorTimer.stop();
	}
	,input_onKeyUp: function(event) {
		this.__isKeyDown = false;
		if(event == null) event == window.event;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		if(this.__hiddenInput.selectionDirection == "backward") {
			this.__cursorPosition = this.__hiddenInput.selectionStart;
			this.__selectionStart = this.__hiddenInput.selectionEnd;
		} else {
			this.__cursorPosition = this.__hiddenInput.selectionEnd;
			this.__selectionStart = this.__hiddenInput.selectionStart;
		}
		this.__dirty = true;
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE,true));
	}
	,input_onKeyDown: function(event) {
		this.__isKeyDown = true;
		if(event == null) event == window.event;
		var keyCode = event.which;
		var isShift = event.shiftKey;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		if(this.__hiddenInput.selectionDirection == "backward") {
			this.__cursorPosition = this.__hiddenInput.selectionStart;
			this.__selectionStart = this.__hiddenInput.selectionEnd;
		} else {
			this.__cursorPosition = this.__hiddenInput.selectionEnd;
			this.__selectionStart = this.__hiddenInput.selectionStart;
		}
		this.__dirty = true;
	}
	,stage_onMouseMove: function(event) {
		if(this.__hasFocus && this.__selectionStart >= 0) {
			var localPoint = this.globalToLocal(new openfl.geom.Point(event.stageX,event.stageY));
			this.__cursorPosition = this.__getPosition(localPoint.x,localPoint.y);
			this.__dirty = true;
		}
	}
	,stage_onMouseUp: function(event) {
		this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			var localPoint = this.globalToLocal(new openfl.geom.Point(event.stageX,event.stageY));
			var upPos = this.__getPosition(localPoint.x,localPoint.y);
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionStart,upPos));
			rightPos = Std["int"](Math.max(this.__selectionStart,upPos));
			this.__selectionStart = leftPos;
			this.__cursorPosition = rightPos;
			this.this_onFocusIn(null);
		}
	}
	,this_onAddedToStage: function(event) {
		this.addEventListener(openfl.events.FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
		this.addEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
		this.__hiddenInput.addEventListener("keydown",$bind(this,this.input_onKeyDown),true);
		this.__hiddenInput.addEventListener("keyup",$bind(this,this.input_onKeyUp),true);
		this.__hiddenInput.addEventListener("input",$bind(this,this.input_onKeyUp),true);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage.get_focus() == this) this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.__cursorPosition < 0) {
			this.__cursorPosition = this.__text.length;
			this.__selectionStart = this.__cursorPosition;
		}
		this.__hiddenInput.focus();
		this.__hiddenInput.selectionStart = this.__selectionStart;
		this.__hiddenInput.selectionEnd = this.__cursorPosition;
		this.__stopCursorTimer();
		this.__startCursorTimer();
		this.__hasFocus = true;
		this.__dirty = true;
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onFocusOut: function(event) {
		this.__cursorPosition = -1;
		this.__hasFocus = false;
		this.__stopCursorTimer();
		if(this.__hiddenInput != null) this.__hiddenInput.blur();
		this.__dirty = true;
	}
	,this_onMouseDown: function(event) {
		if(!this.selectable) return;
		var localPoint = this.globalToLocal(new openfl.geom.Point(event.stageX,event.stageY));
		this.__selectionStart = this.__getPosition(localPoint.x,localPoint.y);
		this.__cursorPosition = this.__selectionStart;
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onRemovedFromStage: function(event) {
		this.removeEventListener(openfl.events.FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
		this.removeEventListener(openfl.events.FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
		this.this_onFocusOut(null);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keydown",$bind(this,this.input_onKeyDown),true);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keyup",$bind(this,this.input_onKeyUp),true);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("input",$bind(this,this.input_onKeyUp),true);
		this.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage != null) this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		if(this.stage != null) this.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,set_autoSize: function(value) {
		if(value != this.autoSize) this.__dirty = true;
		return this.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.background) this.__dirty = true;
		return this.background = value;
	}
	,set_backgroundColor: function(value) {
		if(value != this.backgroundColor) this.__dirty = true;
		return this.backgroundColor = value;
	}
	,set_border: function(value) {
		if(value != this.border) this.__dirty = true;
		return this.border = value;
	}
	,set_borderColor: function(value) {
		if(value != this.borderColor) this.__dirty = true;
		return this.borderColor = value;
	}
	,get_bottomScrollV: function() {
		return this.get_numLines();
	}
	,get_caretPos: function() {
		return 0;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		return value;
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = true;
		if(this.__div == null) {
			value = new EReg("<br>","g").replace(value,"\n");
			value = new EReg("<br/>","g").replace(value,"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = new EReg("<.*?>","g").replace(value,"");
				if(this.__text != value && this.__hiddenInput != null) {
					var selectionStart = this.__hiddenInput.selectionStart;
					var selectionEnd = this.__hiddenInput.selectionEnd;
					this.__hiddenInput.value = value;
					this.__hiddenInput.selectionStart = selectionStart;
					this.__hiddenInput.selectionEnd = selectionEnd;
				}
				return this.__text = value;
			} else {
				value = "";
				this.__ranges = [];
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") continue;
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var end = closeFontIndex;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							var len = segment.indexOf("\"",faceIndex);
							format.font = HxOverrides.substr(segment,faceIndex + 6,len);
						}
						if(colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						if(sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
							var $r;
							var len1 = segment.indexOf("\"",sizeIndex);
							$r = HxOverrides.substr(segment,sizeIndex + 6,len1);
							return $r;
						}(this)));
						var sub = segment.substring(start,end);
						sub = new EReg("<.*?>","g").replace(sub,"");
						this.__ranges.push(new openfl.text.TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__ranges.push(new openfl.text.TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__ranges.push(new openfl.text.TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		if(this.__text != value && this.__hiddenInput != null) {
			var selectionStart1 = this.__hiddenInput.selectionStart;
			var selectionEnd1 = this.__hiddenInput.selectionEnd;
			this.__hiddenInput.value = value;
			this.__hiddenInput.selectionStart = selectionStart1;
			this.__hiddenInput.selectionEnd = selectionEnd1;
		}
		return this.__text = value;
	}
	,get_maxScrollH: function() {
		return 0;
	}
	,get_maxScrollV: function() {
		return 1;
	}
	,get_numLines: function() {
		if(this.get_text() != "" && this.get_text() != null) {
			var count = this.get_text().split("\n").length;
			if(this.__isHTML) count += this.get_text().split("<br>").length - 1;
			return count;
		}
		return 1;
	}
	,set_selectable: function(value) {
		if(!value && this.selectable && this.type == openfl.text.TextFieldType.INPUT) this.this_onRemovedFromStage(null);
		return this.selectable = value;
	}
	,get_text: function() {
		if(this.__isHTML) {
		}
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__text != value && this.__hiddenInput != null) {
			var selectionStart = this.__hiddenInput.selectionStart;
			var selectionEnd = this.__hiddenInput.selectionEnd;
			this.__hiddenInput.value = value;
			this.__hiddenInput.selectionStart = selectionStart;
			this.__hiddenInput.selectionEnd = selectionEnd;
		}
		if(this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = false;
		return this.__text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		if(this.__ranges != null) {
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				range.format.color = value;
			}
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		if(this.__canvas != null) {
			var sizes = this.__measureText();
			var total = 0;
			var _g = 0;
			while(_g < sizes.length) {
				var size = sizes[_g];
				++_g;
				total += size;
			}
			return total;
		} else if(this.__div != null) return this.__div.clientWidth; else {
			this.__measureTextWithDOM();
			return this.__measuredWidth;
		}
	}
	,get_textHeight: function() {
		if(this.__canvas != null) return this.__textFormat.size * 1.185; else if(this.__div != null) return this.__div.clientHeight; else {
			this.__measureTextWithDOM();
			return this.__measuredHeight + this.__textFormat.size * 0.185;
		}
	}
	,set_type: function(value) {
		if(value != this.type) {
			if(value == openfl.text.TextFieldType.INPUT) this.__enableInputMode(); else this.__disableInputMode();
			this.__dirty = true;
		}
		return this.type = value;
	}
	,get_width: function() {
		if(this.autoSize == openfl.text.TextFieldAutoSize.LEFT) return (this.get_textWidth() + 4) * this.get_scaleX(); else return this.__width * this.get_scaleX();
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_wordWrap: function(value) {
		return this.wordWrap = value;
	}
	,__class__: openfl.text.TextField
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_selectable:"set_selectable",get_numLines:"get_numLines",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretPos:"get_caretPos",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize"})
});
format.swf.lite = {};
format.swf.lite.DynamicTextField = function(swf,symbol) {
	openfl.text.TextField.call(this);
	this.swf = swf;
	this.symbol = symbol;
	this.set_width(symbol.width);
	this.set_height(symbol.height);
	this.multiline = symbol.multiline;
	this.set_wordWrap(symbol.wordWrap);
	this.displayAsPassword = symbol.password;
	this.set_border(symbol.border);
	this.set_selectable(symbol.selectable);
	var format = new openfl.text.TextFormat();
	if(symbol.color != null) format.color = symbol.color & 16777215;
	format.size = symbol.fontHeight / 20;
	var font = swf.symbols.get(symbol.fontID);
	if(font != null) format.leading = font.leading / 20 + format.size * 0.2;
	format.font = symbol.fontName;
	var found = false;
	var _g = format.font;
	if(_g == null) found = true; else switch(_g) {
	case "_sans":case "_serif":case "_typewriter":case "":
		found = true;
		break;
	default:
		var _g1 = 0;
		var _g2 = openfl.text.Font.enumerateFonts();
		while(_g1 < _g2.length) {
			var font1 = _g2[_g1];
			++_g1;
			if(font1.name == format.font) {
				found = true;
				break;
			}
		}
	}
	if(found) this.embedFonts = true; else haxe.Log.trace("Warning: Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "DynamicTextField.hx", lineNumber : 91, className : "format.swf.lite.DynamicTextField", methodName : "new"});
	format.leftMargin = symbol.leftMargin / 20;
	format.rightMargin = symbol.rightMargin / 20;
	format.indent = symbol.indent / 20;
	format.leading = symbol.leading / 20 + format.size * 0.2;
	if(symbol.align == "center") format.align = openfl.text.TextFormatAlign.CENTER; else if(symbol.align == "right") format.align = openfl.text.TextFormatAlign.RIGHT; else if(symbol.align == "justify") format.align = openfl.text.TextFormatAlign.JUSTIFY;
	this.set_defaultTextFormat(format);
	var plain = new EReg("</p>","g").replace(symbol.text,"\n");
	plain = new EReg("<br>","g").replace(symbol.text,"\n");
	this.set_text(new EReg("<.*?>","g").replace(plain,""));
	this.set_text(StringTools.htmlUnescape(this.get_text()));
};
$hxClasses["format.swf.lite.DynamicTextField"] = format.swf.lite.DynamicTextField;
format.swf.lite.DynamicTextField.__name__ = ["format","swf","lite","DynamicTextField"];
format.swf.lite.DynamicTextField.__super__ = openfl.text.TextField;
format.swf.lite.DynamicTextField.prototype = $extend(openfl.text.TextField.prototype,{
	__class__: format.swf.lite.DynamicTextField
});
format.swf.lite.MovieClip = function(swf,symbol) {
	openfl.display.MovieClip.call(this);
	this.swf = swf;
	this.symbol = symbol;
	if(!format.swf.lite.MovieClip.initialized) {
		format.swf.lite.MovieClip.clips = new Array();
		format.swf.lite.MovieClip.initialized = true;
	}
	this.__currentFrame = 1;
	this.__totalFrames = symbol.frames.length;
	this.update();
	if(this.__totalFrames > 1) {
		openfl.Lib.current.stage.addEventListener(openfl.events.Event.ENTER_FRAME,format.swf.lite.MovieClip.stage_onEnterFrame);
		this.play();
	}
};
$hxClasses["format.swf.lite.MovieClip"] = format.swf.lite.MovieClip;
format.swf.lite.MovieClip.__name__ = ["format","swf","lite","MovieClip"];
format.swf.lite.MovieClip.clips = null;
format.swf.lite.MovieClip.initialized = null;
format.swf.lite.MovieClip.stage_onEnterFrame = function(event) {
	var _g = 0;
	var _g1 = format.swf.lite.MovieClip.clips;
	while(_g < _g1.length) {
		var clip = _g1[_g];
		++_g;
		clip.enterFrame();
	}
};
format.swf.lite.MovieClip.__super__ = openfl.display.MovieClip;
format.swf.lite.MovieClip.prototype = $extend(openfl.display.MovieClip.prototype,{
	applyTween: function(start,end,ratio) {
		return start + (end - start) * ratio;
	}
	,createShape: function(symbol) {
		var shape = new openfl.display.Shape();
		var graphics = shape.get_graphics();
		var _g = 0;
		var _g1 = symbol.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 1:
				var alpha = command[3];
				var color = command[2];
				graphics.beginFill(color,alpha);
				break;
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmapID = command[2];
				var bitmap = this.swf.symbols.get(bitmapID);
				if(bitmap != null && bitmap.path != "") {
					var bitmapData = openfl.Assets.getBitmapData(bitmap.path);
					graphics.beginBitmapFill(bitmapData,matrix,repeat,smooth);
				}
				break;
			case 2:
				var focalPointRatio = command[9];
				var interpolationMethod = command[8];
				var spreadMethod = command[7];
				var matrix1 = command[6];
				var ratios = command[5];
				var alphas = command[4];
				var colors = command[3];
				var fillType = command[2];
				graphics.beginGradientFill(fillType,colors,alphas,ratios,matrix1,spreadMethod,interpolationMethod,focalPointRatio);
				break;
			case 3:
				var anchorY = command[5];
				var anchorX = command[4];
				var controlY = command[3];
				var controlX = command[2];
				graphics.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color1 = command[3];
				var thickness = command[2];
				if(thickness != null) graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit); else graphics.lineStyle();
				break;
			case 6:
				var y = command[3];
				var x = command[2];
				graphics.lineTo(x,y);
				break;
			case 7:
				var y1 = command[3];
				var x1 = command[2];
				graphics.moveTo(x1,y1);
				break;
			}
		}
		return shape;
	}
	,enterFrame: function() {
		if(this.lastUpdate == this.__currentFrame) {
			this.__currentFrame++;
			if(this.__currentFrame > this.__totalFrames) this.__currentFrame = 1;
		}
		this.update();
	}
	,getFrame: function(frame) {
		if(((frame | 0) === frame)) return frame; else if(typeof(frame) == "string") {
		}
		return 1;
	}
	,gotoAndPlay: function(frame,scene) {
		this.__currentFrame = this.getFrame(frame);
		this.update();
		this.play();
	}
	,gotoAndStop: function(frame,scene) {
		this.__currentFrame = this.getFrame(frame);
		this.update();
		this.stop();
	}
	,nextFrame: function() {
		var next = this.__currentFrame + 1;
		if(next > this.__totalFrames) next = this.__totalFrames;
		this.gotoAndStop(next);
	}
	,placeObject: function(displayObject,frameObject) {
		if(frameObject.name != null) displayObject.set_name(frameObject.name);
		if(frameObject.matrix != null) {
			displayObject.get_transform().set_matrix(frameObject.matrix);
			if(js.Boot.__instanceof(displayObject,format.swf.lite.DynamicTextField)) {
				var _g = displayObject;
				_g.set_x(_g.get_x() + displayObject.symbol.x);
				var _g1 = displayObject;
				_g1.set_y(_g1.get_y() + displayObject.symbol.y);
			}
		}
		if(frameObject.colorTransform != null) displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		if(frameObject.filters != null) {
			var filters = [];
			var _g2 = 0;
			var _g11 = frameObject.filters;
			while(_g2 < _g11.length) {
				var filter = _g11[_g2];
				++_g2;
				switch(filter[1]) {
				case 0:
					var quality = filter[4];
					var blurY = filter[3];
					var blurX = filter[2];
					filters.push(new openfl.filters.BlurFilter(blurX,blurY,quality));
					break;
				case 1:
					var matrix = filter[2];
					filters.push(new openfl.filters.ColorMatrixFilter(matrix));
					break;
				case 2:
					var hideObject = filter[12];
					var knockout = filter[11];
					var inner = filter[10];
					var quality1 = filter[9];
					var strength = filter[8];
					var blurY1 = filter[7];
					var blurX1 = filter[6];
					var alpha = filter[5];
					var color = filter[4];
					var angle = filter[3];
					var distance = filter[2];
					filters.push(new openfl.filters.DropShadowFilter(distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
					break;
				case 3:
					var knockout1 = filter[9];
					var inner1 = filter[8];
					var quality2 = filter[7];
					var strength1 = filter[6];
					var blurY2 = filter[5];
					var blurX2 = filter[4];
					var alpha1 = filter[3];
					var color1 = filter[2];
					filters.push(new openfl.filters.GlowFilter(color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
					break;
				}
			}
			displayObject.set_filters(filters);
		}
		Reflect.setField(this,displayObject.get_name(),displayObject);
	}
	,play: function() {
		if(!this.playing && this.__totalFrames > 1) {
			this.playing = true;
			format.swf.lite.MovieClip.clips.push(this);
		}
	}
	,prevFrame: function() {
		var previous = this.__currentFrame - 1;
		if(previous < 1) previous = 1;
		this.gotoAndStop(previous);
	}
	,renderFrame: function(index) {
		var frame = this.symbol.frames[index];
		var mask = null;
		var maskObject = null;
		var _g = 0;
		var _g1 = frame.objects;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			if(this.swf.symbols.exists(object.id)) {
				var symbol = this.swf.symbols.get(object.id);
				var displayObject = null;
				if(js.Boot.__instanceof(symbol,format.swf.lite.symbols.SpriteSymbol)) displayObject = new format.swf.lite.MovieClip(this.swf,symbol); else if(js.Boot.__instanceof(symbol,format.swf.lite.symbols.ShapeSymbol)) displayObject = this.createShape(symbol); else if(js.Boot.__instanceof(symbol,format.swf.lite.symbols.BitmapSymbol)) displayObject = new openfl.display.Bitmap(openfl.Assets.getBitmapData((js.Boot.__cast(symbol , format.swf.lite.symbols.BitmapSymbol)).path),openfl.display.PixelSnapping.AUTO,true); else if(js.Boot.__instanceof(symbol,format.swf.lite.symbols.DynamicTextSymbol)) displayObject = new format.swf.lite.DynamicTextField(this.swf,symbol); else if(js.Boot.__instanceof(symbol,format.swf.lite.symbols.StaticTextSymbol)) displayObject = new format.swf.lite.StaticTextField(this.swf,symbol);
				if(displayObject != null) {
					this.placeObject(displayObject,object);
					if(mask != null) {
						if(mask.clipDepth < object.depth) mask = null; else displayObject.set_mask(maskObject);
					} else displayObject.set_mask(null);
					if(object.clipDepth != 0) {
						mask = object;
						displayObject.set_visible(false);
						maskObject = displayObject;
					}
					this.addChild(displayObject);
				}
			}
		}
	}
	,stop: function() {
		if(this.playing) {
			this.playing = false;
			HxOverrides.remove(format.swf.lite.MovieClip.clips,this);
		}
	}
	,unflatten: function() {
		this.lastUpdate = -1;
		this.update();
	}
	,update: function() {
		if(this.__currentFrame != this.lastUpdate) {
			var _g1 = 0;
			var _g = this.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				var child = this.getChildAt(0);
				if(js.Boot.__instanceof(child,format.swf.lite.MovieClip)) child.stop();
				this.removeChildAt(0);
			}
			var frameIndex = this.__currentFrame - 1;
			if(frameIndex > -1) this.renderFrame(frameIndex);
		}
		this.lastUpdate = this.__currentFrame;
	}
	,__class__: format.swf.lite.MovieClip
});
format.swf.lite.SWFLite = function() {
	this.symbols = new haxe.ds.IntMap();
};
$hxClasses["format.swf.lite.SWFLite"] = format.swf.lite.SWFLite;
format.swf.lite.SWFLite.__name__ = ["format","swf","lite","SWFLite"];
format.swf.lite.SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	if(value == null) value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	return value;
};
format.swf.lite.SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	if(value == null) value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	return value;
};
format.swf.lite.SWFLite.unserialize = function(data) {
	if(data == null) return null;
	var unserializer = new haxe.Unserializer(data);
	unserializer.setResolver({ resolveClass : format.swf.lite.SWFLite.resolveClass, resolveEnum : format.swf.lite.SWFLite.resolveEnum});
	return unserializer.unserialize();
};
format.swf.lite.SWFLite.prototype = {
	createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) className = "";
		if(className == "") return new format.swf.lite.MovieClip(this,this.root); else {
			var $it0 = this.symbols.iterator();
			while( $it0.hasNext() ) {
				var symbol = $it0.next();
				if(symbol.className == className) {
					if(js.Boot.__instanceof(symbol,format.swf.lite.symbols.SpriteSymbol)) return new format.swf.lite.MovieClip(this,symbol);
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var $it0 = this.symbols.iterator();
		while( $it0.hasNext() ) {
			var symbol = $it0.next();
			if(symbol.className == className) {
				if(js.Boot.__instanceof(symbol,format.swf.lite.symbols.BitmapSymbol)) {
					var bitmap = symbol;
					return openfl.Assets.getBitmapData(bitmap.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var $it0 = this.symbols.iterator();
		while( $it0.hasNext() ) {
			var symbol = $it0.next();
			if(symbol.className == className) return true;
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe.Serializer();
		serializer.useCache = true;
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: format.swf.lite.SWFLite
};
openfl.AssetLibrary = function() {
	lime.AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl.AssetLibrary;
openfl.AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl.AssetLibrary.__super__ = lime.AssetLibrary;
openfl.AssetLibrary.prototype = $extend(lime.AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,getMusic: function(id) {
		return this.getSound(id);
	}
	,getSound: function(id) {
		return null;
	}
	,loadMovieClip: function(id,handler) {
		handler(this.getMovieClip(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,__class__: openfl.AssetLibrary
});
format.swf.lite.SWFLiteLibrary = function(id) {
	openfl.AssetLibrary.call(this);
	if(id != null) this.swf = format.swf.lite.SWFLite.unserialize(openfl.Assets.getText(id));
};
$hxClasses["format.swf.lite.SWFLiteLibrary"] = format.swf.lite.SWFLiteLibrary;
format.swf.lite.SWFLiteLibrary.__name__ = ["format","swf","lite","SWFLiteLibrary"];
format.swf.lite.SWFLiteLibrary.__super__ = openfl.AssetLibrary;
format.swf.lite.SWFLiteLibrary.prototype = $extend(openfl.AssetLibrary.prototype,{
	exists: function(id,type) {
		if(id == "" && type == "MOVIE_CLIP") return true;
		if(type == "IMAGE" || type == "MOVIE_CLIP") return this.swf.hasSymbol(id);
		return false;
	}
	,getImage: function(id) {
		return lime.graphics.Image.fromBitmapData(this.swf.getBitmapData(id));
	}
	,getMovieClip: function(id) {
		return this.swf.createMovieClip(id);
	}
	,load: function(handler) {
		handler(this);
	}
	,__class__: format.swf.lite.SWFLiteLibrary
});
format.swf.lite.StaticTextField = function(swf,symbol) {
	openfl.display.Shape.call(this);
	this.symbol = symbol;
	if(symbol.records != null) {
		var font = null;
		var color = 16777215;
		var x = symbol.matrix.tx;
		var y = symbol.matrix.ty;
		var _g = 0;
		var _g1 = symbol.records;
		while(_g < _g1.length) {
			var record = _g1[_g];
			++_g;
			if(record.fontID != null) font = swf.symbols.get(record.fontID);
			if(record.offsetX != null) x = symbol.matrix.tx + record.offsetX * 0.05;
			if(record.offsetY != null) y = symbol.matrix.ty + record.offsetY * 0.05;
			if(record.color != null) color = record.color;
			if(font != null) {
				var scale = record.fontHeight / 1024 * 0.05;
				var index;
				var code;
				var _g3 = 0;
				var _g2 = record.glyphs.length;
				while(_g3 < _g2) {
					var i = _g3++;
					index = record.glyphs[i];
					this.renderGlyph(font,index,color,scale,x,y);
					x += record.advances[i] * 0.05;
				}
			}
		}
	}
};
$hxClasses["format.swf.lite.StaticTextField"] = format.swf.lite.StaticTextField;
format.swf.lite.StaticTextField.__name__ = ["format","swf","lite","StaticTextField"];
format.swf.lite.StaticTextField.__super__ = openfl.display.Shape;
format.swf.lite.StaticTextField.prototype = $extend(openfl.display.Shape.prototype,{
	renderGlyph: function(font,character,color,scale,offsetX,offsetY) {
		var _g = 0;
		var _g1 = font.glyphs[character];
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 1:
				var alpha = command[3];
				this.get_graphics().beginFill(color & 16777215,(color >> 24 & 255) / 255);
				break;
			case 3:
				var anchorY = command[5];
				var anchorX = command[4];
				var controlY = command[3];
				var controlX = command[2];
				this.get_graphics().curveTo(controlX * scale + offsetX,controlY * scale + offsetY,anchorX * scale + offsetX,anchorY * scale + offsetY);
				break;
			case 4:
				this.get_graphics().endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color1 = command[3];
				var thickness = command[2];
				if(thickness != null) this.get_graphics().lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit); else this.get_graphics().lineStyle();
				break;
			case 6:
				var y = command[3];
				var x = command[2];
				this.get_graphics().lineTo(x * scale + offsetX,y * scale + offsetY);
				break;
			case 7:
				var y1 = command[3];
				var x1 = command[2];
				this.get_graphics().moveTo(x1 * scale + offsetX,y1 * scale + offsetY);
				break;
			default:
			}
		}
	}
	,__class__: format.swf.lite.StaticTextField
});
format.swf.lite.symbols = {};
format.swf.lite.symbols.SWFSymbol = function() {
};
$hxClasses["format.swf.lite.symbols.SWFSymbol"] = format.swf.lite.symbols.SWFSymbol;
format.swf.lite.symbols.SWFSymbol.__name__ = ["format","swf","lite","symbols","SWFSymbol"];
format.swf.lite.symbols.SWFSymbol.prototype = {
	__class__: format.swf.lite.symbols.SWFSymbol
};
format.swf.lite.symbols.BitmapSymbol = function() {
	format.swf.lite.symbols.SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.BitmapSymbol"] = format.swf.lite.symbols.BitmapSymbol;
format.swf.lite.symbols.BitmapSymbol.__name__ = ["format","swf","lite","symbols","BitmapSymbol"];
format.swf.lite.symbols.BitmapSymbol.__super__ = format.swf.lite.symbols.SWFSymbol;
format.swf.lite.symbols.BitmapSymbol.prototype = $extend(format.swf.lite.symbols.SWFSymbol.prototype,{
	__class__: format.swf.lite.symbols.BitmapSymbol
});
format.swf.lite.symbols.DynamicTextSymbol = function() {
	format.swf.lite.symbols.SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.DynamicTextSymbol"] = format.swf.lite.symbols.DynamicTextSymbol;
format.swf.lite.symbols.DynamicTextSymbol.__name__ = ["format","swf","lite","symbols","DynamicTextSymbol"];
format.swf.lite.symbols.DynamicTextSymbol.__super__ = format.swf.lite.symbols.SWFSymbol;
format.swf.lite.symbols.DynamicTextSymbol.prototype = $extend(format.swf.lite.symbols.SWFSymbol.prototype,{
	__class__: format.swf.lite.symbols.DynamicTextSymbol
});
format.swf.lite.symbols.FontSymbol = function() {
	format.swf.lite.symbols.SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.FontSymbol"] = format.swf.lite.symbols.FontSymbol;
format.swf.lite.symbols.FontSymbol.__name__ = ["format","swf","lite","symbols","FontSymbol"];
format.swf.lite.symbols.FontSymbol.__super__ = format.swf.lite.symbols.SWFSymbol;
format.swf.lite.symbols.FontSymbol.prototype = $extend(format.swf.lite.symbols.SWFSymbol.prototype,{
	__class__: format.swf.lite.symbols.FontSymbol
});
format.swf.lite.symbols.ShapeSymbol = function() {
	format.swf.lite.symbols.SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.ShapeSymbol"] = format.swf.lite.symbols.ShapeSymbol;
format.swf.lite.symbols.ShapeSymbol.__name__ = ["format","swf","lite","symbols","ShapeSymbol"];
format.swf.lite.symbols.ShapeSymbol.__super__ = format.swf.lite.symbols.SWFSymbol;
format.swf.lite.symbols.ShapeSymbol.prototype = $extend(format.swf.lite.symbols.SWFSymbol.prototype,{
	__class__: format.swf.lite.symbols.ShapeSymbol
});
format.swf.lite.symbols.SpriteSymbol = function() {
	format.swf.lite.symbols.SWFSymbol.call(this);
	this.frames = new Array();
};
$hxClasses["format.swf.lite.symbols.SpriteSymbol"] = format.swf.lite.symbols.SpriteSymbol;
format.swf.lite.symbols.SpriteSymbol.__name__ = ["format","swf","lite","symbols","SpriteSymbol"];
format.swf.lite.symbols.SpriteSymbol.__super__ = format.swf.lite.symbols.SWFSymbol;
format.swf.lite.symbols.SpriteSymbol.prototype = $extend(format.swf.lite.symbols.SWFSymbol.prototype,{
	__class__: format.swf.lite.symbols.SpriteSymbol
});
format.swf.lite.symbols.StaticTextSymbol = function() {
	format.swf.lite.symbols.SWFSymbol.call(this);
};
$hxClasses["format.swf.lite.symbols.StaticTextSymbol"] = format.swf.lite.symbols.StaticTextSymbol;
format.swf.lite.symbols.StaticTextSymbol.__name__ = ["format","swf","lite","symbols","StaticTextSymbol"];
format.swf.lite.symbols.StaticTextSymbol.__super__ = format.swf.lite.symbols.SWFSymbol;
format.swf.lite.symbols.StaticTextSymbol.prototype = $extend(format.swf.lite.symbols.SWFSymbol.prototype,{
	__class__: format.swf.lite.symbols.StaticTextSymbol
});
format.swf.lite.symbols.StaticTextRecord = function() {
};
$hxClasses["format.swf.lite.symbols.StaticTextRecord"] = format.swf.lite.symbols.StaticTextRecord;
format.swf.lite.symbols.StaticTextRecord.__name__ = ["format","swf","lite","symbols","StaticTextRecord"];
format.swf.lite.symbols.StaticTextRecord.prototype = {
	__class__: format.swf.lite.symbols.StaticTextRecord
};
format.swf.lite.timeline = {};
format.swf.lite.timeline.Frame = function() {
	this.objects = new Array();
};
$hxClasses["format.swf.lite.timeline.Frame"] = format.swf.lite.timeline.Frame;
format.swf.lite.timeline.Frame.__name__ = ["format","swf","lite","timeline","Frame"];
format.swf.lite.timeline.Frame.prototype = {
	__class__: format.swf.lite.timeline.Frame
};
format.swf.lite.timeline.FrameObject = function() {
};
$hxClasses["format.swf.lite.timeline.FrameObject"] = format.swf.lite.timeline.FrameObject;
format.swf.lite.timeline.FrameObject.__name__ = ["format","swf","lite","timeline","FrameObject"];
format.swf.lite.timeline.FrameObject.prototype = {
	__class__: format.swf.lite.timeline.FrameObject
};
haxe.StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe.CallStack;
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.lastException = null;
haxe.CallStack.getStack = function(e) {
	if(e == null) return [];
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe.CallStack.wrapCallSite != null) site = haxe.CallStack.wrapCallSite(site);
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe.StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe.StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe.CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe.CallStack.wrapCallSite = null;
haxe.CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		var a = haxe.CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe.CallStack.exceptionStack = function() {
	return haxe.CallStack.getStack(haxe.CallStack.lastException);
};
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe.CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe.CallStack.makeStack = function(s) {
	if(s == null) return []; else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe.StackItem.FilePos(meth == "Anonymous function"?haxe.StackItem.LocalFunction():meth == "Global code"?null:haxe.StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe.StackItem.Module(StringTools.trim(line)));
		}
		return m;
	} else return s;
};
haxe.Log = function() { };
$hxClasses["haxe.Log"] = haxe.Log;
haxe.Log.__name__ = ["haxe","Log"];
haxe.Log.trace = function(v,infos) {
	js.Boot.__trace(v,infos);
};
haxe.Resource = function() { };
$hxClasses["haxe.Resource"] = haxe.Resource;
haxe.Resource.__name__ = ["haxe","Resource"];
haxe.Resource.content = null;
haxe.Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe.crypto.Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe.Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return haxe.io.Bytes.ofString(x.str);
			return haxe.crypto.Base64.decode(x.data);
		}
	}
	return null;
};
haxe.Serializer = function() {
	this.buf = new StringBuf();
	this.cache = new Array();
	this.useCache = haxe.Serializer.USE_CACHE;
	this.useEnumIndex = haxe.Serializer.USE_ENUM_INDEX;
	this.shash = new haxe.ds.StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe.Serializer;
haxe.Serializer.__name__ = ["haxe","Serializer"];
haxe.Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.b += "R";
			if(x == null) this.buf.b += "null"; else this.buf.b += "" + x;
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.b += "y";
		s = encodeURIComponent(s);
		if(s.length == null) this.buf.b += "null"; else this.buf.b += "" + s.length;
		this.buf.b += ":";
		if(s == null) this.buf.b += "null"; else this.buf.b += "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				if(i == null) this.buf.b += "null"; else this.buf.b += "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		{
			var _g = Type["typeof"](v);
			switch(_g[1]) {
			case 0:
				this.buf.b += "n";
				break;
			case 1:
				var v1 = v;
				if(v1 == 0) {
					this.buf.b += "z";
					return;
				}
				this.buf.b += "i";
				if(v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
				break;
			case 2:
				var v2 = v;
				if(Math.isNaN(v2)) this.buf.b += "k"; else if(!Math.isFinite(v2)) if(v2 < 0) this.buf.b += "m"; else this.buf.b += "p"; else {
					this.buf.b += "d";
					if(v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
				}
				break;
			case 3:
				if(v) this.buf.b += "t"; else this.buf.b += "f";
				break;
			case 6:
				var c = _g[2];
				if(c == String) {
					this.serializeString(v);
					return;
				}
				if(this.useCache && this.serializeRef(v)) return;
				switch(c) {
				case Array:
					var ucount = 0;
					this.buf.b += "a";
					var l = v.length;
					var _g1 = 0;
					while(_g1 < l) {
						var i = _g1++;
						if(v[i] == null) ucount++; else {
							if(ucount > 0) {
								if(ucount == 1) this.buf.b += "n"; else {
									this.buf.b += "u";
									if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
								}
								ucount = 0;
							}
							this.serialize(v[i]);
						}
					}
					if(ucount > 0) {
						if(ucount == 1) this.buf.b += "n"; else {
							this.buf.b += "u";
							if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
						}
					}
					this.buf.b += "h";
					break;
				case List:
					this.buf.b += "l";
					var v3 = v;
					var $it0 = v3.iterator();
					while( $it0.hasNext() ) {
						var i1 = $it0.next();
						this.serialize(i1);
					}
					this.buf.b += "h";
					break;
				case Date:
					var d = v;
					this.buf.b += "v";
					this.buf.add(HxOverrides.dateStr(d));
					break;
				case haxe.ds.StringMap:
					this.buf.b += "b";
					var v4 = v;
					var $it1 = v4.keys();
					while( $it1.hasNext() ) {
						var k = $it1.next();
						this.serializeString(k);
						this.serialize(v4.get(k));
					}
					this.buf.b += "h";
					break;
				case haxe.ds.IntMap:
					this.buf.b += "q";
					var v5 = v;
					var $it2 = v5.keys();
					while( $it2.hasNext() ) {
						var k1 = $it2.next();
						this.buf.b += ":";
						if(k1 == null) this.buf.b += "null"; else this.buf.b += "" + k1;
						this.serialize(v5.get(k1));
					}
					this.buf.b += "h";
					break;
				case haxe.ds.ObjectMap:
					this.buf.b += "M";
					var v6 = v;
					var $it3 = v6.keys();
					while( $it3.hasNext() ) {
						var k2 = $it3.next();
						var id = Reflect.field(k2,"__id__");
						Reflect.deleteField(k2,"__id__");
						this.serialize(k2);
						k2.__id__ = id;
						this.serialize(v6.h[k2.__id__]);
					}
					this.buf.b += "h";
					break;
				case haxe.io.Bytes:
					var v7 = v;
					var i2 = 0;
					var max = v7.length - 2;
					var charsBuf = new StringBuf();
					var b64 = haxe.Serializer.BASE64;
					while(i2 < max) {
						var b1 = v7.get(i2++);
						var b2 = v7.get(i2++);
						var b3 = v7.get(i2++);
						charsBuf.add(b64.charAt(b1 >> 2));
						charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
						charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
						charsBuf.add(b64.charAt(b3 & 63));
					}
					if(i2 == max) {
						var b11 = v7.get(i2++);
						var b21 = v7.get(i2++);
						charsBuf.add(b64.charAt(b11 >> 2));
						charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
						charsBuf.add(b64.charAt(b21 << 2 & 63));
					} else if(i2 == max + 1) {
						var b12 = v7.get(i2++);
						charsBuf.add(b64.charAt(b12 >> 2));
						charsBuf.add(b64.charAt(b12 << 4 & 63));
					}
					var chars = charsBuf.b;
					this.buf.b += "s";
					if(chars.length == null) this.buf.b += "null"; else this.buf.b += "" + chars.length;
					this.buf.b += ":";
					if(chars == null) this.buf.b += "null"; else this.buf.b += "" + chars;
					break;
				default:
					if(this.useCache) this.cache.pop();
					if(v.hxSerialize != null) {
						this.buf.b += "C";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						v.hxSerialize(this);
						this.buf.b += "g";
					} else {
						this.buf.b += "c";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						this.serializeFields(v);
					}
				}
				break;
			case 4:
				if(this.useCache && this.serializeRef(v)) return;
				this.buf.b += "o";
				this.serializeFields(v);
				break;
			case 7:
				var e = _g[2];
				if(this.useCache) {
					if(this.serializeRef(v)) return;
					this.cache.pop();
				}
				if(this.useEnumIndex) this.buf.b += "j"; else this.buf.b += "w";
				this.serializeString(Type.getEnumName(e));
				if(this.useEnumIndex) {
					this.buf.b += ":";
					this.buf.b += Std.string(v[1]);
				} else this.serializeString(v[0]);
				this.buf.b += ":";
				var l1 = v.length;
				this.buf.b += Std.string(l1 - 2);
				var _g11 = 2;
				while(_g11 < l1) {
					var i3 = _g11++;
					this.serialize(v[i3]);
				}
				if(this.useCache) this.cache.push(v);
				break;
			case 5:
				throw "Cannot serialize function";
				break;
			default:
				throw "Cannot serialize " + Std.string(v);
			}
		}
	}
	,__class__: haxe.Serializer
};
haxe.Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe.Timer;
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.delay = function(f,time_ms) {
	var t = new haxe.Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe.Timer.measure = function(f,pos) {
	var t0 = haxe.Timer.stamp();
	var r = f();
	haxe.Log.trace(haxe.Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe.Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe.Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe.Timer
};
haxe.Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = new Array();
	this.cache = new Array();
	var r = haxe.Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe.Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe.Unserializer;
haxe.Unserializer.__name__ = ["haxe","Unserializer"];
haxe.Unserializer.initCodes = function() {
	var codes = new Array();
	var _g1 = 0;
	var _g = haxe.Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe.Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe.Unserializer.prototype = {
	setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw "Invalid object";
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw "Invalid object key";
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw "Invalid enum format";
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = new Array();
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			var p1 = this.pos;
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
			}
			return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw "Invalid string length";
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return Math.NaN;
		case 109:
			return Math.NEGATIVE_INFINITY;
		case 112:
			return Math.POSITIVE_INFINITY;
		case 97:
			var buf = this.buf;
			var a = new Array();
			this.cache.push(a);
			while(true) {
				var c1 = this.buf.charCodeAt(this.pos);
				if(c1 == 104) {
					this.pos++;
					break;
				}
				if(c1 == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw "Invalid reference";
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw "Invalid string reference";
			return this.scache[n2];
		case 120:
			throw this.unserialize();
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw "Class not found " + name;
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw "Enum not found " + name1;
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw "Enum not found " + name2;
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw "Unknown enum index " + name2 + "@" + index;
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe.ds.StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe.ds.IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c2 = this.get(this.pos++);
			while(c2 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c2 = this.get(this.pos++);
			}
			if(c2 != 104) throw "Invalid IntMap format";
			return h1;
		case 77:
			var h2 = new haxe.ds.ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			var s3 = HxOverrides.substr(this.buf,this.pos,19);
			d = HxOverrides.strDate(s3);
			this.cache.push(d);
			this.pos += 19;
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw "Invalid bytes length";
			var codes = haxe.Unserializer.CODES;
			if(codes == null) {
				codes = haxe.Unserializer.initCodes();
				haxe.Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = haxe.io.Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c21 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c21 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c22 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c22 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c22 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw "Class not found " + name3;
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw "Invalid custom data";
			return o2;
		default:
		}
		this.pos--;
		throw "Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos;
	}
	,__class__: haxe.Unserializer
};
haxe.Utf8 = function() { };
$hxClasses["haxe.Utf8"] = haxe.Utf8;
haxe.Utf8.__name__ = ["haxe","Utf8"];
haxe.Utf8.charCodeAt = function(s,index) {
	return HxOverrides.cca(s,index);
};
haxe.io = {};
haxe.io.Bytes = function(length,b) {
	this.length = length;
	this.b = b;
};
$hxClasses["haxe.io.Bytes"] = haxe.io.Bytes;
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	var a = new Array();
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		a.push(0);
	}
	return new haxe.io.Bytes(length,a);
};
haxe.io.Bytes.ofString = function(s) {
	var a = new Array();
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(a.length,a);
};
haxe.io.Bytes.ofData = function(b) {
	return new haxe.io.Bytes(b.length,b);
};
haxe.io.Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe.io.Bytes
};
haxe.crypto = {};
haxe.crypto.Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe.crypto.Base64;
haxe.crypto.Base64.__name__ = ["haxe","crypto","Base64"];
haxe.crypto.Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe.crypto.BaseCode(haxe.crypto.Base64.BYTES).decodeBytes(haxe.io.Bytes.ofString(str));
};
haxe.crypto.BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw "BaseCode : base length must be a power of two.";
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe.crypto.BaseCode;
haxe.crypto.BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe.crypto.BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe.io.Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = new Array();
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe.io.Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw "BaseCode : invalid encoded char";
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe.crypto.BaseCode
};
haxe.ds.BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe.ds.BalancedTree;
haxe.ds.BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe.ds.BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe.ds.TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe.ds.TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(l.left,l.key,l.value,new haxe.ds.TreeNode(l.right,k,v,r)); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe.ds.TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe.ds.TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe.ds.TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe.ds.BalancedTree
};
haxe.ds.TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe.ds.TreeNode;
haxe.ds.TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe.ds.TreeNode.prototype = {
	__class__: haxe.ds.TreeNode
};
haxe.ds.EnumValueMap = function() {
	haxe.ds.BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe.ds.EnumValueMap;
haxe.ds.EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe.ds.EnumValueMap.__interfaces__ = [IMap];
haxe.ds.EnumValueMap.__super__ = haxe.ds.BalancedTree;
haxe.ds.EnumValueMap.prototype = $extend(haxe.ds.BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe.ds.EnumValueMap
});
haxe.ds.GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe.ds.GenericCell;
haxe.ds.GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe.ds.GenericCell.prototype = {
	__class__: haxe.ds.GenericCell
};
haxe.ds.GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe.ds.GenericStack;
haxe.ds.GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe.ds.GenericStack.prototype = {
	add: function(item) {
		this.head = new haxe.ds.GenericCell(item,this.head);
	}
	,pop: function() {
		var k = this.head;
		if(k == null) return null; else {
			this.head = k.next;
			return k.elt;
		}
	}
	,__class__: haxe.ds.GenericStack
};
haxe.ds.ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe.ds.ObjectMap;
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [IMap];
haxe.ds.ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe.ds.ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe.ds.ObjectMap
};
haxe.io.BytesBuffer = function() {
	this.b = new Array();
};
$hxClasses["haxe.io.BytesBuffer"] = haxe.io.BytesBuffer;
haxe.io.BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe.io.BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe.io.Bytes(this.b.length,this.b);
		this.b = null;
		return bytes;
	}
	,__class__: haxe.io.BytesBuffer
};
haxe.io.Input = function() { };
$hxClasses["haxe.io.Input"] = haxe.io.Input;
haxe.io.Input.__name__ = ["haxe","io","Input"];
haxe.io.Input.prototype = {
	readByte: function() {
		throw "Not implemented";
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) throw haxe.io.Error.OutsideBounds;
		while(k > 0) {
			b[pos] = this.readByte();
			pos++;
			k--;
		}
		return len;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,readString: function(len) {
		var b = haxe.io.Bytes.alloc(len);
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe.io.Input
};
haxe.io.BytesInput = function(b,pos,len) {
	if(pos == null) pos = 0;
	if(len == null) len = b.length - pos;
	if(pos < 0 || len < 0 || pos + len > b.length) throw haxe.io.Error.OutsideBounds;
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe.io.BytesInput;
haxe.io.BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe.io.BytesInput.__super__ = haxe.io.Input;
haxe.io.BytesInput.prototype = $extend(haxe.io.Input.prototype,{
	readByte: function() {
		if(this.len == 0) throw new haxe.io.Eof();
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) throw haxe.io.Error.OutsideBounds;
		if(this.len == 0 && len > 0) throw new haxe.io.Eof();
		if(this.len < len) len = this.len;
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe.io.BytesInput
});
haxe.io.Output = function() { };
$hxClasses["haxe.io.Output"] = haxe.io.Output;
haxe.io.Output.__name__ = ["haxe","io","Output"];
haxe.io.BytesOutput = function() {
	this.b = new haxe.io.BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe.io.BytesOutput;
haxe.io.BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe.io.BytesOutput.__super__ = haxe.io.Output;
haxe.io.BytesOutput.prototype = $extend(haxe.io.Output.prototype,{
	writeByte: function(c) {
		this.b.b.push(c);
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe.io.BytesOutput
});
haxe.io.Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe.io.Eof;
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; };
haxe.io.Path = function(path) {
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe.io.Path;
haxe.io.Path.__name__ = ["haxe","io","Path"];
haxe.io.Path.withoutExtension = function(path) {
	var s = new haxe.io.Path(path);
	s.ext = null;
	return s.toString();
};
haxe.io.Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe.io.Path
};
haxe.io.StringInput = function(s) {
	haxe.io.BytesInput.call(this,haxe.io.Bytes.ofString(s));
};
$hxClasses["haxe.io.StringInput"] = haxe.io.StringInput;
haxe.io.StringInput.__name__ = ["haxe","io","StringInput"];
haxe.io.StringInput.__super__ = haxe.io.BytesInput;
haxe.io.StringInput.prototype = $extend(haxe.io.BytesInput.prototype,{
	__class__: haxe.io.StringInput
});
haxe.macro = {};
haxe.macro.Constant = $hxClasses["haxe.macro.Constant"] = { __ename__ : ["haxe","macro","Constant"], __constructs__ : ["CInt","CFloat","CString","CIdent","CRegexp"] };
haxe.macro.Constant.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CIdent = function(s) { var $x = ["CIdent",3,s]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CRegexp = function(r,opt) { var $x = ["CRegexp",4,r,opt]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Binop = $hxClasses["haxe.macro.Binop"] = { __ename__ : ["haxe","macro","Binop"], __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow"] };
haxe.macro.Binop.OpAdd = ["OpAdd",0];
haxe.macro.Binop.OpAdd.toString = $estr;
haxe.macro.Binop.OpAdd.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpMult = ["OpMult",1];
haxe.macro.Binop.OpMult.toString = $estr;
haxe.macro.Binop.OpMult.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpDiv = ["OpDiv",2];
haxe.macro.Binop.OpDiv.toString = $estr;
haxe.macro.Binop.OpDiv.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpSub = ["OpSub",3];
haxe.macro.Binop.OpSub.toString = $estr;
haxe.macro.Binop.OpSub.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpAssign = ["OpAssign",4];
haxe.macro.Binop.OpAssign.toString = $estr;
haxe.macro.Binop.OpAssign.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpEq = ["OpEq",5];
haxe.macro.Binop.OpEq.toString = $estr;
haxe.macro.Binop.OpEq.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpNotEq = ["OpNotEq",6];
haxe.macro.Binop.OpNotEq.toString = $estr;
haxe.macro.Binop.OpNotEq.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpGt = ["OpGt",7];
haxe.macro.Binop.OpGt.toString = $estr;
haxe.macro.Binop.OpGt.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpGte = ["OpGte",8];
haxe.macro.Binop.OpGte.toString = $estr;
haxe.macro.Binop.OpGte.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpLt = ["OpLt",9];
haxe.macro.Binop.OpLt.toString = $estr;
haxe.macro.Binop.OpLt.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpLte = ["OpLte",10];
haxe.macro.Binop.OpLte.toString = $estr;
haxe.macro.Binop.OpLte.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpAnd = ["OpAnd",11];
haxe.macro.Binop.OpAnd.toString = $estr;
haxe.macro.Binop.OpAnd.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpOr = ["OpOr",12];
haxe.macro.Binop.OpOr.toString = $estr;
haxe.macro.Binop.OpOr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpXor = ["OpXor",13];
haxe.macro.Binop.OpXor.toString = $estr;
haxe.macro.Binop.OpXor.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpBoolAnd = ["OpBoolAnd",14];
haxe.macro.Binop.OpBoolAnd.toString = $estr;
haxe.macro.Binop.OpBoolAnd.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpBoolOr = ["OpBoolOr",15];
haxe.macro.Binop.OpBoolOr.toString = $estr;
haxe.macro.Binop.OpBoolOr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpShl = ["OpShl",16];
haxe.macro.Binop.OpShl.toString = $estr;
haxe.macro.Binop.OpShl.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpShr = ["OpShr",17];
haxe.macro.Binop.OpShr.toString = $estr;
haxe.macro.Binop.OpShr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpUShr = ["OpUShr",18];
haxe.macro.Binop.OpUShr.toString = $estr;
haxe.macro.Binop.OpUShr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpMod = ["OpMod",19];
haxe.macro.Binop.OpMod.toString = $estr;
haxe.macro.Binop.OpMod.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpAssignOp = function(op) { var $x = ["OpAssignOp",20,op]; $x.__enum__ = haxe.macro.Binop; $x.toString = $estr; return $x; };
haxe.macro.Binop.OpInterval = ["OpInterval",21];
haxe.macro.Binop.OpInterval.toString = $estr;
haxe.macro.Binop.OpInterval.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpArrow = ["OpArrow",22];
haxe.macro.Binop.OpArrow.toString = $estr;
haxe.macro.Binop.OpArrow.__enum__ = haxe.macro.Binop;
haxe.macro.Unop = $hxClasses["haxe.macro.Unop"] = { __ename__ : ["haxe","macro","Unop"], __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"] };
haxe.macro.Unop.OpIncrement = ["OpIncrement",0];
haxe.macro.Unop.OpIncrement.toString = $estr;
haxe.macro.Unop.OpIncrement.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpDecrement = ["OpDecrement",1];
haxe.macro.Unop.OpDecrement.toString = $estr;
haxe.macro.Unop.OpDecrement.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpNot = ["OpNot",2];
haxe.macro.Unop.OpNot.toString = $estr;
haxe.macro.Unop.OpNot.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpNeg = ["OpNeg",3];
haxe.macro.Unop.OpNeg.toString = $estr;
haxe.macro.Unop.OpNeg.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpNegBits = ["OpNegBits",4];
haxe.macro.Unop.OpNegBits.toString = $estr;
haxe.macro.Unop.OpNegBits.__enum__ = haxe.macro.Unop;
haxe.macro.ExprDef = $hxClasses["haxe.macro.ExprDef"] = { __ename__ : ["haxe","macro","ExprDef"], __constructs__ : ["EConst","EArray","EBinop","EField","EParenthesis","EObjectDecl","EArrayDecl","ECall","ENew","EUnop","EVars","EFunction","EBlock","EFor","EIn","EIf","EWhile","ESwitch","ETry","EReturn","EBreak","EContinue","EUntyped","EThrow","ECast","EDisplay","EDisplayNew","ETernary","ECheckType","EMeta"] };
haxe.macro.ExprDef.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EArray = function(e1,e2) { var $x = ["EArray",1,e1,e2]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EBinop = function(op,e1,e2) { var $x = ["EBinop",2,op,e1,e2]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EField = function(e,field) { var $x = ["EField",3,e,field]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EParenthesis = function(e) { var $x = ["EParenthesis",4,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EObjectDecl = function(fields) { var $x = ["EObjectDecl",5,fields]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EArrayDecl = function(values) { var $x = ["EArrayDecl",6,values]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ECall = function(e,params) { var $x = ["ECall",7,e,params]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ENew = function(t,params) { var $x = ["ENew",8,t,params]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EUnop = function(op,postFix,e) { var $x = ["EUnop",9,op,postFix,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EVars = function(vars) { var $x = ["EVars",10,vars]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EFunction = function(name,f) { var $x = ["EFunction",11,name,f]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EBlock = function(exprs) { var $x = ["EBlock",12,exprs]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EFor = function(it,expr) { var $x = ["EFor",13,it,expr]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EIn = function(e1,e2) { var $x = ["EIn",14,e1,e2]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EIf = function(econd,eif,eelse) { var $x = ["EIf",15,econd,eif,eelse]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EWhile = function(econd,e,normalWhile) { var $x = ["EWhile",16,econd,e,normalWhile]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ESwitch = function(e,cases,edef) { var $x = ["ESwitch",17,e,cases,edef]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ETry = function(e,catches) { var $x = ["ETry",18,e,catches]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EReturn = function(e) { var $x = ["EReturn",19,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EBreak = ["EBreak",20];
haxe.macro.ExprDef.EBreak.toString = $estr;
haxe.macro.ExprDef.EBreak.__enum__ = haxe.macro.ExprDef;
haxe.macro.ExprDef.EContinue = ["EContinue",21];
haxe.macro.ExprDef.EContinue.toString = $estr;
haxe.macro.ExprDef.EContinue.__enum__ = haxe.macro.ExprDef;
haxe.macro.ExprDef.EUntyped = function(e) { var $x = ["EUntyped",22,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EThrow = function(e) { var $x = ["EThrow",23,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ECast = function(e,t) { var $x = ["ECast",24,e,t]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EDisplay = function(e,isCall) { var $x = ["EDisplay",25,e,isCall]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EDisplayNew = function(t) { var $x = ["EDisplayNew",26,t]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ETernary = function(econd,eif,eelse) { var $x = ["ETernary",27,econd,eif,eelse]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ECheckType = function(e,t) { var $x = ["ECheckType",28,e,t]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EMeta = function(s,e) { var $x = ["EMeta",29,s,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ComplexType = $hxClasses["haxe.macro.ComplexType"] = { __ename__ : ["haxe","macro","ComplexType"], __constructs__ : ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional"] };
haxe.macro.ComplexType.TPath = function(p) { var $x = ["TPath",0,p]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TFunction = function(args,ret) { var $x = ["TFunction",1,args,ret]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TAnonymous = function(fields) { var $x = ["TAnonymous",2,fields]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TParent = function(t) { var $x = ["TParent",3,t]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TExtend = function(p,fields) { var $x = ["TExtend",4,p,fields]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TOptional = function(t) { var $x = ["TOptional",5,t]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.Access = $hxClasses["haxe.macro.Access"] = { __ename__ : ["haxe","macro","Access"], __constructs__ : ["APublic","APrivate","AStatic","AOverride","ADynamic","AInline","AMacro"] };
haxe.macro.Access.APublic = ["APublic",0];
haxe.macro.Access.APublic.toString = $estr;
haxe.macro.Access.APublic.__enum__ = haxe.macro.Access;
haxe.macro.Access.APrivate = ["APrivate",1];
haxe.macro.Access.APrivate.toString = $estr;
haxe.macro.Access.APrivate.__enum__ = haxe.macro.Access;
haxe.macro.Access.AStatic = ["AStatic",2];
haxe.macro.Access.AStatic.toString = $estr;
haxe.macro.Access.AStatic.__enum__ = haxe.macro.Access;
haxe.macro.Access.AOverride = ["AOverride",3];
haxe.macro.Access.AOverride.toString = $estr;
haxe.macro.Access.AOverride.__enum__ = haxe.macro.Access;
haxe.macro.Access.ADynamic = ["ADynamic",4];
haxe.macro.Access.ADynamic.toString = $estr;
haxe.macro.Access.ADynamic.__enum__ = haxe.macro.Access;
haxe.macro.Access.AInline = ["AInline",5];
haxe.macro.Access.AInline.toString = $estr;
haxe.macro.Access.AInline.__enum__ = haxe.macro.Access;
haxe.macro.Access.AMacro = ["AMacro",6];
haxe.macro.Access.AMacro.toString = $estr;
haxe.macro.Access.AMacro.__enum__ = haxe.macro.Access;
haxe.macro.FieldType = $hxClasses["haxe.macro.FieldType"] = { __ename__ : ["haxe","macro","FieldType"], __constructs__ : ["FVar","FFun","FProp"] };
haxe.macro.FieldType.FVar = function(t,e) { var $x = ["FVar",0,t,e]; $x.__enum__ = haxe.macro.FieldType; $x.toString = $estr; return $x; };
haxe.macro.FieldType.FFun = function(f) { var $x = ["FFun",1,f]; $x.__enum__ = haxe.macro.FieldType; $x.toString = $estr; return $x; };
haxe.macro.FieldType.FProp = function(get,set,t,e) { var $x = ["FProp",2,get,set,t,e]; $x.__enum__ = haxe.macro.FieldType; $x.toString = $estr; return $x; };
haxe.macro.Type = $hxClasses["haxe.macro.Type"] = { __ename__ : ["haxe","macro","Type"], __constructs__ : ["TMono","TEnum","TInst","TType","TFun","TAnonymous","TDynamic","TLazy","TAbstract"] };
haxe.macro.Type.TMono = function(t) { var $x = ["TMono",0,t]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TEnum = function(t,params) { var $x = ["TEnum",1,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TInst = function(t,params) { var $x = ["TInst",2,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TType = function(t,params) { var $x = ["TType",3,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TFun = function(args,ret) { var $x = ["TFun",4,args,ret]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TAnonymous = function(a) { var $x = ["TAnonymous",5,a]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TDynamic = function(t) { var $x = ["TDynamic",6,t]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TLazy = function(f) { var $x = ["TLazy",7,f]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TAbstract = function(t,params) { var $x = ["TAbstract",8,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.ui = {};
haxe.ui.toolkit = {};
haxe.ui.toolkit.core = {};
haxe.ui.toolkit.core.interfaces = {};
haxe.ui.toolkit.core.interfaces.IClonable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IClonable"] = haxe.ui.toolkit.core.interfaces.IClonable;
haxe.ui.toolkit.core.interfaces.IClonable.__name__ = ["haxe","ui","toolkit","core","interfaces","IClonable"];
haxe.ui.toolkit.core.interfaces.IClonable.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IClonable
};
haxe.ui.toolkit.core.interfaces.IDrawable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDrawable"] = haxe.ui.toolkit.core.interfaces.IDrawable;
haxe.ui.toolkit.core.interfaces.IDrawable.__name__ = ["haxe","ui","toolkit","core","interfaces","IDrawable"];
haxe.ui.toolkit.core.interfaces.IDrawable.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDrawable
};
haxe.ui.toolkit.core.interfaces.IEventDispatcher = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IEventDispatcher"] = haxe.ui.toolkit.core.interfaces.IEventDispatcher;
haxe.ui.toolkit.core.interfaces.IEventDispatcher.__name__ = ["haxe","ui","toolkit","core","interfaces","IEventDispatcher"];
haxe.ui.toolkit.core.interfaces.IEventDispatcher.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IEventDispatcher
};
haxe.ui.toolkit.core.interfaces.IDisplayObject = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDisplayObject"] = haxe.ui.toolkit.core.interfaces.IDisplayObject;
haxe.ui.toolkit.core.interfaces.IDisplayObject.__name__ = ["haxe","ui","toolkit","core","interfaces","IDisplayObject"];
haxe.ui.toolkit.core.interfaces.IDisplayObject.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IEventDispatcher];
haxe.ui.toolkit.core.interfaces.IDisplayObject.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDisplayObject
};
haxe.ui.toolkit.core.DisplayObject = function() {
	this._alpha = 1;
	this._includeInLayout = true;
	this._valign = "top";
	this._halign = "left";
	this._invalidating = false;
	this._ready = false;
	this._minHeight = 0;
	this._minWidth = 0;
	this._percentHeight = -1;
	this._percentWidth = -1;
	this._height = 0;
	this._width = 0;
	this._z = 0;
	this._y = 0;
	this._x = 0;
	this._sprite = new openfl.display.Sprite();
	this._sprite.tabChildren = false;
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this._onAddedToStage),false,100);
};
$hxClasses["haxe.ui.toolkit.core.DisplayObject"] = haxe.ui.toolkit.core.DisplayObject;
haxe.ui.toolkit.core.DisplayObject.__name__ = ["haxe","ui","toolkit","core","DisplayObject"];
haxe.ui.toolkit.core.DisplayObject.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IDrawable,haxe.ui.toolkit.core.interfaces.IDisplayObject,haxe.ui.toolkit.core.interfaces.IEventDispatcher];
haxe.ui.toolkit.core.DisplayObject.prototype = {
	preInitialize: function() {
	}
	,initialize: function() {
	}
	,postInitialize: function() {
	}
	,_onAddedToStage: function(event) {
		this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this._onAddedToStage));
		this.preInitialize();
		this._ready = true;
		this.initialize();
		this.postInitialize();
		this.invalidate(273);
		var event1 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "init");
		this.dispatchEvent(event1);
		var event2 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "ready");
		this.dispatchEvent(event2);
	}
	,get_parent: function() {
		return this._parent;
	}
	,set_parent: function(value) {
		this._parent = value;
		return value;
	}
	,get_root: function() {
		return this._root;
	}
	,set_root: function(value) {
		this._root = value;
		return value;
	}
	,get_id: function() {
		return this._id;
	}
	,set_id: function(value) {
		this._id = value;
		return value;
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(value) {
		this._x = value | 0;
		this._sprite.set_x(this._x);
		return value;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(value) {
		this._y = value | 0;
		this._sprite.set_y(this._y);
		return value;
	}
	,get_rotationX: function() {
		return 0;
	}
	,set_rotationX: function(value) {
		return value;
	}
	,get_rotationY: function() {
		return 0;
	}
	,set_rotationY: function(value) {
		return value;
	}
	,get_rotationZ: function() {
		return 0;
	}
	,set_rotationZ: function(value) {
		return value;
	}
	,get_width: function() {
		return this._width / this.get_sprite().get_scaleX();
	}
	,set_width: function(value) {
		value = Math.round(value);
		if(this._width == value) return value;
		this._width = value;
		this._invalidating = false;
		this.invalidate(272);
		if(this._parent != null) this._parent.invalidate(1);
		var event = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "resize");
		this.dispatchEvent(event);
		return value;
	}
	,get_height: function() {
		return this._height / this.get_sprite().get_scaleY();
	}
	,set_height: function(value) {
		value = Math.round(value);
		if(this._height == value) return value;
		this._height = value;
		this._invalidating = false;
		this.invalidate(272);
		if(this._parent != null) this._parent.invalidate(1);
		var event = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "resize");
		this.dispatchEvent(event);
		return value;
	}
	,get_percentWidth: function() {
		return this._percentWidth;
	}
	,set_percentWidth: function(value) {
		if(this._percentWidth == value) return value;
		this._percentWidth = value;
		this.invalidate();
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_percentHeight: function() {
		return this._percentHeight;
	}
	,set_percentHeight: function(value) {
		if(this._percentHeight == value) return value;
		this._percentHeight = value;
		this.invalidate();
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_minWidth: function() {
		return this._minWidth;
	}
	,set_minWidth: function(value) {
		this._minWidth = value;
		return value;
	}
	,get_minHeight: function() {
		return this._minHeight;
	}
	,set_minHeight: function(value) {
		this._minHeight = value;
		return value;
	}
	,get_ready: function() {
		return this._ready;
	}
	,get_sprite: function() {
		return this._sprite;
	}
	,get_stageX: function() {
		var c;
		c = js.Boot.__cast(this , haxe.ui.toolkit.core.interfaces.IDisplayObject);
		var xpos = 0;
		while(c != null) {
			xpos += c.get_x();
			if(c.get_sprite().get_scrollRect() != null) xpos -= c.get_sprite().get_scrollRect().get_left();
			c = c.get_parent();
		}
		return xpos;
	}
	,get_stageY: function() {
		var c;
		c = js.Boot.__cast(this , haxe.ui.toolkit.core.interfaces.IDisplayObject);
		var ypos = 0;
		while(c != null) {
			ypos += c.get_y();
			if(c.get_sprite().get_scrollRect() != null) ypos -= c.get_sprite().get_scrollRect().get_top();
			c = c.get_parent();
		}
		return ypos;
	}
	,get_visible: function() {
		return this._sprite.get_visible();
	}
	,set_visible: function(value) {
		this._sprite.set_visible(value);
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		if(value != this._alpha) {
			this._alpha = value;
			this.invalidate();
		}
		return value;
	}
	,get_includeInLayout: function() {
		return this._includeInLayout;
	}
	,set_includeInLayout: function(value) {
		this._includeInLayout = value;
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_horizontalAlign: function() {
		return this._halign;
	}
	,set_horizontalAlign: function(value) {
		this._halign = value;
		if(this._ready) this.get_parent().invalidate(1);
		return value;
	}
	,get_verticalAlign: function() {
		return this._valign;
	}
	,set_verticalAlign: function(value) {
		this._valign = value;
		if(this._ready) this.get_parent().invalidate(1);
		return value;
	}
	,get_useHandCursor: function() {
		return this.get_sprite().useHandCursor;
	}
	,set_useHandCursor: function(value) {
		this.get_sprite().useHandCursor = value;
		this.get_sprite().buttonMode = true;
		return value;
	}
	,hitTest: function(xpos,ypos) {
		var b = false;
		var sx = this.get_stageX();
		var sy = this.get_stageY();
		if(xpos > sx && xpos < sx + this.get_width() && ypos > sy && ypos < sy + this.get_height()) b = true;
		return b;
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		this._invalidating = true;
		if((type & 16) == 16 || (type & 4096) == 4096) this.paint();
		this._invalidating = false;
	}
	,dispose: function() {
		this.removeAllEventListeners();
	}
	,interceptEvent: function(event) {
		var uiEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + event.type);
		if(js.Boot.__instanceof(event,openfl.events.MouseEvent)) {
			var mouseEvent = event;
			uiEvent.stageX = mouseEvent.stageX;
			uiEvent.stageY = mouseEvent.stageY;
		}
		this.dispatchEvent(uiEvent);
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(StringTools.startsWith(type,"haxeui_")) {
			var interceptEventType = HxOverrides.substr(type,"haxeui_".length,type.length);
			if(this._interceptMap == null) this._interceptMap = new haxe.ds.StringMap();
			if(this._interceptMap.exists(interceptEventType) == false) this._interceptMap.set(interceptEventType,0); else {
				var value = this._interceptMap.get(interceptEventType) + 1;
				this._interceptMap.set(interceptEventType,value);
			}
			if(this._interceptMap.get(interceptEventType) == 0) this.addEventListener(interceptEventType,$bind(this,this.interceptEvent),useCapture,priority,useWeakReference);
		}
		if(this._eventListeners == null) this._eventListeners = new haxe.ds.StringMap();
		var list = this._eventListeners.get(type);
		if(list == null) {
			list = new Array();
			this._eventListeners.set(type,list);
		}
		list.push(listener);
		this._sprite.addEventListener(type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js.Boot.__instanceof(event,haxe.ui.toolkit.events.UIEvent)) (js.Boot.__cast(event , haxe.ui.toolkit.events.UIEvent)).displayObject = this;
		return this._sprite.dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		return this._sprite.hasEventListener(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(StringTools.startsWith(type,"haxeui_")) {
			var interceptEventType = HxOverrides.substr(type,"haxeui_".length,type.length);
			if(this._interceptMap != null && this._interceptMap.exists(interceptEventType)) {
				var value = this._interceptMap.get(interceptEventType) - 1;
				this._interceptMap.set(interceptEventType,value);
				if(this._interceptMap.get(interceptEventType) <= 0) {
					this._interceptMap.remove(interceptEventType);
					this.removeEventListener(interceptEventType,$bind(this,this.interceptEvent),useCapture);
				}
			}
		}
		if(this._eventListeners != null && this._eventListeners.exists(type)) {
			var list = this._eventListeners.get(type);
			if(list != null) HxOverrides.remove(list,listener);
		}
		this._sprite.removeEventListener(type,listener,useCapture);
	}
	,willTrigger: function(type) {
		return this._sprite.willTrigger(type);
	}
	,get_graphics: function() {
		return this._sprite.get_graphics();
	}
	,paint: function() {
		this._sprite.get_graphics().clear();
		this._sprite.get_graphics().beginFill(13421772);
		this._sprite.get_graphics().lineStyle(1,8947848);
		this._sprite.get_graphics().drawRect(0,0,this._width,this._height);
		this._sprite.get_graphics().endFill();
	}
	,removeEventListenerType: function(eventType) {
		if(this._eventListeners != null) {
			var list = this._eventListeners.get(eventType);
			if(list != null) while(list.length != 0) this.removeEventListener(eventType,list.pop());
		}
	}
	,removeAllEventListeners: function() {
		if(this._eventListeners != null) {
			var $it0 = this._eventListeners.keys();
			while( $it0.hasNext() ) {
				var eventType = $it0.next();
				var list = this._eventListeners.get(eventType);
				while(list.length != 0) {
					this.removeEventListener(eventType,list.pop());
					list = this._eventListeners.get(eventType);
				}
			}
		}
	}
	,getListenerCount: function(type,listener) {
		var count = 0;
		if(this._eventListeners.exists(type)) {
			var list = this._eventListeners.get(type);
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				if(l == listener) count++;
			}
		}
		return count;
	}
	,removeEventFunction: function(arr,fn) {
		return HxOverrides.remove(arr,fn);
	}
	,_handleEvent: function(event) {
		var fnName = "on" + haxe.ui.toolkit.util.StringUtil.capitalizeFirstLetter(StringTools.replace(event.type,"haxeui_",""));
		var fn = Reflect.field(this,fnName);
		if(fn != null) {
			var fnEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + event.type,event.get_component());
			fnEvent.data = event.data;
			fnEvent.displayObject = this;
			fn(fnEvent);
		}
	}
	,set_onInit: function(value) {
		this.onInit = value;
		this.addEventListener("haxeui_" + "init",$bind(this,this._handleEvent));
		return value;
	}
	,set_onResize: function(value) {
		this.onResize = value;
		this.addEventListener("haxeui_" + "resize",$bind(this,this._handleEvent));
		return value;
	}
	,set_onReady: function(value) {
		this.onReady = value;
		this.addEventListener("haxeui_" + "ready",$bind(this,this._handleEvent));
		return value;
	}
	,set_onClick: function(value) {
		this.onClick = value;
		this.addEventListener("haxeui_" + "click",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseDown: function(value) {
		this.onMouseDown = value;
		this.addEventListener("haxeui_" + "mouseDown",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseUp: function(value) {
		this.onMouseUp = value;
		this.addEventListener("haxeui_" + "mouseUp",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseOver: function(value) {
		this.onMouseOver = value;
		this.addEventListener("haxeui_" + "mouseOver",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseOut: function(value) {
		this.onMouseOut = value;
		this.addEventListener("haxeui_" + "mouseOut",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseMove: function(value) {
		this.onMouseMove = value;
		this.addEventListener("haxeui_" + "mouseMove",$bind(this,this._handleEvent));
		return value;
	}
	,set_onDoubleClick: function(value) {
		this.onDoubleClick = value;
		this.addEventListener("haxeui_" + "doubleClick",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRollOver: function(value) {
		this.onRollOver = value;
		this.addEventListener("haxeui_" + "rollOver",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRollOut: function(value) {
		this.onRollOut = value;
		this.addEventListener("haxeui_" + "rollOut",$bind(this,this._handleEvent));
		return value;
	}
	,set_onChange: function(value) {
		this.onChange = value;
		this.addEventListener("haxeui_" + "change",$bind(this,this._handleEvent));
		return value;
	}
	,set_onScroll: function(value) {
		this.onScroll = value;
		this.addEventListener("haxeui_" + "scroll",$bind(this,this._handleEvent));
		return value;
	}
	,set_onAdded: function(value) {
		this.onAdded = value;
		this.addEventListener("haxeui_" + "added",$bind(this,this._handleEvent));
		return value;
	}
	,set_onAddedToStage: function(value) {
		this.onAddedToStage = value;
		this.addEventListener("haxeui_" + "addedToStage",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRemoved: function(value) {
		this.onRemoved = value;
		this.addEventListener("haxeui_" + "removed",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRemovedFromStage: function(value) {
		this.onRemovedFromStage = value;
		this.addEventListener("haxeui_" + "removedFromStage",$bind(this,this._handleEvent));
		return value;
	}
	,set_onActivate: function(value) {
		this.onActivate = value;
		this.addEventListener("haxeui_" + "activate",$bind(this,this._handleEvent));
		return value;
	}
	,set_onDeactivate: function(value) {
		this.onDeactivate = value;
		this.addEventListener("haxeui_" + "deactivate",$bind(this,this._handleEvent));
		return value;
	}
	,set_onGlyphClick: function(value) {
		this.onGlyphClick = value;
		this.addEventListener("haxeui_" + "glyphClick",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMenuSelect: function(value) {
		this.onMenuSelect = value;
		this.addEventListener("haxeui_" + "menuSelect",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMenuOpen: function(value) {
		this.onMenuOpen = value;
		this.addEventListener("haxeui_" + "menuOpen",$bind(this,this._handleEvent));
		return value;
	}
	,clone: function() {
		var c = this.self();
		c.set_id(this.get_id());
		c.set_x(this.get_x());
		c.set_y(this.get_y());
		c.set_rotationX(this.get_rotationX());
		c.set_rotationY(this.get_rotationY());
		c.set_rotationZ(this.get_rotationZ());
		c.set_width(this.get_width());
		c.set_height(this.get_height());
		c.set_percentWidth(this.get_percentWidth());
		c.set_percentHeight(this.get_percentHeight());
		c.set_minWidth(this.get_minWidth());
		c.set_minHeight(this.get_minHeight());
		c.set_alpha(this.get_alpha());
		c.set_includeInLayout(this.get_includeInLayout());
		c.set_horizontalAlign(this.get_horizontalAlign());
		c.set_verticalAlign(this.get_verticalAlign());
		c.set_useHandCursor(this.get_useHandCursor());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.DisplayObject();
	}
	,__class__: haxe.ui.toolkit.core.DisplayObject
	,__properties__: {set_onMenuOpen:"set_onMenuOpen",set_onMenuSelect:"set_onMenuSelect",set_onGlyphClick:"set_onGlyphClick",set_onDeactivate:"set_onDeactivate",set_onActivate:"set_onActivate",set_onRemovedFromStage:"set_onRemovedFromStage",set_onRemoved:"set_onRemoved",set_onAddedToStage:"set_onAddedToStage",set_onAdded:"set_onAdded",set_onScroll:"set_onScroll",set_onChange:"set_onChange",set_onRollOut:"set_onRollOut",set_onRollOver:"set_onRollOver",set_onDoubleClick:"set_onDoubleClick",set_onMouseMove:"set_onMouseMove",set_onMouseOut:"set_onMouseOut",set_onMouseOver:"set_onMouseOver",set_onMouseUp:"set_onMouseUp",set_onMouseDown:"set_onMouseDown",set_onClick:"set_onClick",set_onReady:"set_onReady",set_onResize:"set_onResize",set_onInit:"set_onInit",get_graphics:"get_graphics",set_useHandCursor:"set_useHandCursor",get_useHandCursor:"get_useHandCursor",set_verticalAlign:"set_verticalAlign",get_verticalAlign:"get_verticalAlign",set_horizontalAlign:"set_horizontalAlign",get_horizontalAlign:"get_horizontalAlign",set_includeInLayout:"set_includeInLayout",get_includeInLayout:"get_includeInLayout",set_alpha:"set_alpha",get_alpha:"get_alpha",set_visible:"set_visible",get_visible:"get_visible",get_stageY:"get_stageY",get_stageX:"get_stageX",get_sprite:"get_sprite",get_ready:"get_ready",set_minHeight:"set_minHeight",get_minHeight:"get_minHeight",set_minWidth:"set_minWidth",get_minWidth:"get_minWidth",set_percentHeight:"set_percentHeight",get_percentHeight:"get_percentHeight",set_percentWidth:"set_percentWidth",get_percentWidth:"get_percentWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_id:"set_id",get_id:"get_id",set_root:"set_root",get_root:"get_root",set_parent:"set_parent",get_parent:"get_parent"}
};
haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"] = haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer;
haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer.__name__ = ["haxe","ui","toolkit","core","interfaces","IDisplayObjectContainer"];
haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDisplayObject];
haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer
};
haxe.ui.toolkit.core.DisplayObjectContainer = function() {
	this._autoSize = false;
	haxe.ui.toolkit.core.DisplayObject.call(this);
	this._layout = new haxe.ui.toolkit.layout.DefaultLayout();
	this._children = new Array();
};
$hxClasses["haxe.ui.toolkit.core.DisplayObjectContainer"] = haxe.ui.toolkit.core.DisplayObjectContainer;
haxe.ui.toolkit.core.DisplayObjectContainer.__name__ = ["haxe","ui","toolkit","core","DisplayObjectContainer"];
haxe.ui.toolkit.core.DisplayObjectContainer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer];
haxe.ui.toolkit.core.DisplayObjectContainer.__super__ = haxe.ui.toolkit.core.DisplayObject;
haxe.ui.toolkit.core.DisplayObjectContainer.prototype = $extend(haxe.ui.toolkit.core.DisplayObject.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.DisplayObject.prototype.initialize.call(this);
		this._layout.set_container(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.DisplayObject.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256 || (type & 1) == 1) this._layout.refresh();
		this._invalidating = false;
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.invalidate(type,recursive);
			}
		}
	}
	,get_numChildren: function() {
		var arr = this._children;
		return arr.length;
	}
	,get_children: function() {
		var arr = this._children;
		return arr;
	}
	,indexOfChild: function(child) {
		var index = Lambda.indexOf(this.get_children(),child);
		return index;
	}
	,getChildAt: function(index) {
		return this.get_children()[index];
	}
	,addChildAt: function(child,index) {
		if(child == null) return null;
		var childSprite = child.get_sprite();
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) (js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)).set_parent(this);
		child.set_root(this.get_root());
		this._children.splice(index,0,child);
		this._sprite.addChildAt(childSprite,index);
		this.invalidate(1);
		return child;
	}
	,addChild: function(child) {
		if(child == null) return null;
		var childSprite = child.get_sprite();
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) (js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)).set_parent(this);
		child.set_root(this.get_root());
		this._children.push(child);
		this._sprite.addChild(childSprite);
		this.invalidate(1);
		return child;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		if(child == null) return null;
		var childSprite = child.get_sprite();
		this._sprite.removeChild(childSprite);
		HxOverrides.remove(this._children,child);
		if(dispose == true) child.dispose();
		this.invalidate(1);
		return child;
	}
	,removeChildAt: function(index,dispose) {
		if(dispose == null) dispose = true;
		return this.removeChild(this.getChildAt(index),dispose);
	}
	,removeAllChildren: function(dispose) {
		if(dispose == null) dispose = true;
		var arr = this.get_children();
		while(arr.length > 0) {
			var child = arr[0];
			this.removeChild(child,dispose);
		}
		while(this.get_sprite().get_numChildren() > 0) this.get_sprite().removeChildAt(0);
	}
	,contains: function(child) {
		if(child == null) return false;
		return this.get_sprite().contains(child.get_sprite());
	}
	,setChildIndex: function(child,index) {
		if(child != null) this.get_sprite().setChildIndex(child.get_sprite(),index);
	}
	,findChildAs: function(type) {
		var match = null;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(child,type)) {
				match = child;
				break;
			}
		}
		return match;
	}
	,findChild: function(id,type,recursive) {
		if(recursive == null) recursive = false;
		var match = null;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_id() == id) {
				match = child;
				break;
			}
		}
		if(match == null && recursive == true) {
			var _g2 = 0;
			var _g11 = this.get_children();
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				if(js.Boot.__instanceof(child1,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) {
					var c;
					c = js.Boot.__cast(child1 , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer);
					var temp = c.findChild(id,type,recursive);
					if(temp != null) {
						match = temp;
						break;
					}
				}
			}
		}
		return match;
	}
	,findComponentUnderPoint: function(stageX,stageY) {
		var c = null;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.hitTest(stageX,stageY) == true) {
				c = child;
				break;
			}
		}
		return c;
	}
	,get_layout: function() {
		return this._layout;
	}
	,set_layout: function(value) {
		this._layout = value;
		this._layout.set_container(this);
		if(this._ready) this.invalidate(1);
		return value;
	}
	,get_autoSize: function() {
		return this._autoSize;
	}
	,set_autoSize: function(value) {
		this._autoSize = value;
		if(this._ready) this.invalidate(1);
		return this._autoSize;
	}
	,dispose: function() {
		while(this.get_children().length > 0) {
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				try {
					this.removeChild(child);
				} catch( e ) {
					var stack = haxe.CallStack.exceptionStack();
					haxe.Log.trace("Problem removing component: " + Std.string(this) + ", " + Std.string(child) + "(" + Std.string(e) + "), callstack:",{ fileName : "DisplayObjectContainer.hx", lineNumber : 246, className : "haxe.ui.toolkit.core.DisplayObjectContainer", methodName : "dispose"});
					haxe.Log.trace(haxe.CallStack.toString(stack),{ fileName : "DisplayObjectContainer.hx", lineNumber : 247, className : "haxe.ui.toolkit.core.DisplayObjectContainer", methodName : "dispose"});
				}
			}
		}
		haxe.ui.toolkit.core.DisplayObject.prototype.dispose.call(this);
	}
	,set_root: function(value) {
		haxe.ui.toolkit.core.DisplayObject.prototype.set_root.call(this,value);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.set_root(value);
		}
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.DisplayObject.prototype.clone.call(this);
		c.set_autoSize(this.get_autoSize());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.DisplayObjectContainer();
	}
	,__class__: haxe.ui.toolkit.core.DisplayObjectContainer
	,__properties__: $extend(haxe.ui.toolkit.core.DisplayObject.prototype.__properties__,{set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",get_children:"get_children",set_layout:"set_layout",get_layout:"get_layout",get_numChildren:"get_numChildren"})
});
haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject"] = haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject;
haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject.__name__ = ["haxe","ui","toolkit","core","interfaces","IStyleableDisplayObject"];
haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer];
haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject
};
haxe.ui.toolkit.core.StyleableDisplayObject = function() {
	this._lazyLoadStyles = true;
	haxe.ui.toolkit.core.DisplayObjectContainer.call(this);
};
$hxClasses["haxe.ui.toolkit.core.StyleableDisplayObject"] = haxe.ui.toolkit.core.StyleableDisplayObject;
haxe.ui.toolkit.core.StyleableDisplayObject.__name__ = ["haxe","ui","toolkit","core","StyleableDisplayObject"];
haxe.ui.toolkit.core.StyleableDisplayObject.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject];
haxe.ui.toolkit.core.StyleableDisplayObject.__super__ = haxe.ui.toolkit.core.DisplayObjectContainer;
haxe.ui.toolkit.core.StyleableDisplayObject.prototype = $extend(haxe.ui.toolkit.core.DisplayObjectContainer.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.core.DisplayObjectContainer.prototype.preInitialize.call(this);
		this.refreshStyle();
	}
	,paint: function() {
		if(this._width == 0 || this._height == 0 || this._ready == false) return;
		var rc = new openfl.geom.Rectangle(0,0,this._width,this._height);
		haxe.ui.toolkit.style.StyleHelper.paintStyle(this.get_graphics(),this._baseStyle,rc);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.DisplayObjectContainer.prototype.invalidate.call(this,type,recursive);
		if((type & 1048576) == 1048576) this.refreshStyle();
	}
	,set_id: function(value) {
		if(value == this.get_id()) return value;
		var v = haxe.ui.toolkit.core.DisplayObjectContainer.prototype.set_id.call(this,value);
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			this._baseStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this);
			this.invalidate(16);
		}
		return v;
	}
	,set_layout: function(value) {
		value = haxe.ui.toolkit.core.DisplayObjectContainer.prototype.set_layout.call(this,value);
		if(this._baseStyle != null) {
			if(this.get_layout() != null) {
				if(this._baseStyle.get_paddingLeft() != -1) this.get_layout().get_padding().set_left(this._baseStyle.get_paddingLeft());
				if(this._baseStyle.get_paddingTop() != -1) this.get_layout().get_padding().set_top(this._baseStyle.get_paddingTop());
				if(this._baseStyle.get_paddingRight() != -1) this.get_layout().get_padding().set_right(this._baseStyle.get_paddingRight());
				if(this._baseStyle.get_paddingBottom() != -1) this.get_layout().get_padding().set_bottom(this._baseStyle.get_paddingBottom());
				if(this._baseStyle.get_spacingX() != -1) this._layout.set_spacingX(this._baseStyle.get_spacingX());
				if(this._baseStyle.get_spacingY() != -1) this._layout.set_spacingY(this._baseStyle.get_spacingY());
			}
		}
		return value;
	}
	,get_baseStyle: function() {
		if(this._baseStyle == null) {
			this._baseStyle = new haxe.ui.toolkit.style.Style();
			this._baseStyle.set_target(this);
		}
		return this._baseStyle;
	}
	,set_baseStyle: function(value) {
		this._baseStyle = value;
		this._baseStyle.set_target(this);
		return value;
	}
	,get_styleName: function() {
		return this._styleName;
	}
	,set_styleName: function(value) {
		this._styleName = value;
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			this._baseStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this);
			this.invalidate(1048592);
		}
		return value;
	}
	,get_styleString: function() {
		return this._styleString;
	}
	,set_styleString: function(value) {
		this._styleString = value;
		return value;
	}
	,get_style: function() {
		if(this._inlineStyle == null) {
			this._inlineStyle = new haxe.ui.toolkit.style.Style();
			this._inlineStyle.set_target(this);
		}
		return this._inlineStyle;
	}
	,set_style: function(value) {
		this._inlineStyle = value;
		if(this._inlineStyle != null) this._inlineStyle.set_target(this);
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			this._baseStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this);
			this.invalidate(16);
		}
		return value;
	}
	,storeStyle: function(id,value) {
		if(this._storedStyles == null) this._storedStyles = new haxe.ds.StringMap();
		this._storedStyles.set(id,value);
	}
	,retrieveStyle: function(id) {
		var storedStyle = null;
		if(this._lazyLoadStyles == false) {
			if(this._storedStyles == null) return null;
			storedStyle = this._storedStyles.get(id);
		} else if(this._ready) {
			if(this._storedStyles != null) storedStyle = this._storedStyles.get(id);
			if(storedStyle == null) {
				storedStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this,id);
				this.storeStyle(id,storedStyle);
			}
		}
		return storedStyle;
	}
	,applyStyle: function() {
		if(this._baseStyle == null) return;
		if(this._inlineStyle != null) this._baseStyle.merge(this._inlineStyle);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_alpha() != -1) this._sprite.set_alpha(this._baseStyle.get_alpha()); else this._sprite.set_alpha(this.get_alpha());
			if(this._baseStyle.get_horizontalAlignment() != null) this.set_horizontalAlign(this._baseStyle.get_horizontalAlignment());
			if(this._baseStyle.get_verticalAlignment() != null) this.set_verticalAlign(this._baseStyle.get_verticalAlignment());
			if(this._baseStyle.get_filter() != null) this._sprite.set_filters([this._baseStyle.get_filter()]); else this._sprite.set_filters([]);
			if(this._baseStyle.get_visibleSet() == true) this.set_visible(this._baseStyle.get_visible());
		}
		this.invalidate(16);
	}
	,buildStyles: function() {
	}
	,clearStyles: function(recursive) {
		if(recursive == null) recursive = false;
		this._storedStyles = new haxe.ds.StringMap();
		if(recursive == true && this.get_children() != null) {
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.StyleableDisplayObject)) (js.Boot.__cast(c , haxe.ui.toolkit.core.StyleableDisplayObject)).clearStyles(recursive);
			}
		}
	}
	,refreshStyle: function() {
		if(this._lazyLoadStyles == false) this.buildStyles();
		if(js.Boot.__instanceof(this,haxe.ui.toolkit.core.StateComponent)) {
			var state = (js.Boot.__cast(this , haxe.ui.toolkit.core.StateComponent)).get_state();
			if(state == null) state = "normal";
			this._baseStyle = this.retrieveStyle(state);
			if(this._baseStyle == null) this._baseStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this,(js.Boot.__cast(this , haxe.ui.toolkit.core.StateComponent)).get_state());
		} else this._baseStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this);
		this._baseStyle.merge(this._inlineStyle);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_width() != -1 && this.get_width() == 0) this.set_width(this._baseStyle.get_width());
			if(this._baseStyle.get_height() != -1 && this.get_height() == 0) this.set_height(this._baseStyle.get_height());
			if(this._baseStyle.get_percentWidth() != -1 && this.get_percentWidth() == -1) this.set_percentWidth(this._baseStyle.get_percentWidth());
			if(this._baseStyle.get_percentHeight() != -1 && this.get_percentHeight() == -1) this.set_percentHeight(this._baseStyle.get_percentHeight());
			if(this._baseStyle.get_autoSizeSet()) this.set_autoSize(this._baseStyle.get_autoSize());
			if(this.get_layout() != null) {
				if(this._baseStyle.get_paddingLeft() != -1) this.get_layout().get_padding().set_left(this._baseStyle.get_paddingLeft());
				if(this._baseStyle.get_paddingTop() != -1) this.get_layout().get_padding().set_top(this._baseStyle.get_paddingTop());
				if(this._baseStyle.get_paddingRight() != -1) this.get_layout().get_padding().set_right(this._baseStyle.get_paddingRight());
				if(this._baseStyle.get_paddingBottom() != -1) this.get_layout().get_padding().set_bottom(this._baseStyle.get_paddingBottom());
				if(this._baseStyle.get_spacingX() != -1) this._layout.set_spacingX(this._baseStyle.get_spacingX());
				if(this._baseStyle.get_spacingY() != -1) this._layout.set_spacingY(this._baseStyle.get_spacingY());
			}
		}
		this.applyStyle();
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.DisplayObjectContainer.prototype.clone.call(this);
		c.set_baseStyle(this.get_baseStyle());
		c.set_styleName(this.get_styleName());
		c.set_style(this.get_style());
		c.set_styleString(this.get_styleString());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.StyleableDisplayObject();
	}
	,__class__: haxe.ui.toolkit.core.StyleableDisplayObject
	,__properties__: $extend(haxe.ui.toolkit.core.DisplayObjectContainer.prototype.__properties__,{set_styleString:"set_styleString",get_styleString:"get_styleString",set_style:"set_style",get_style:"get_style",set_styleName:"set_styleName",get_styleName:"get_styleName",set_baseStyle:"set_baseStyle",get_baseStyle:"get_baseStyle"})
});
haxe.ui.toolkit.core.interfaces.IComponent = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IComponent"] = haxe.ui.toolkit.core.interfaces.IComponent;
haxe.ui.toolkit.core.interfaces.IComponent.__name__ = ["haxe","ui","toolkit","core","interfaces","IComponent"];
haxe.ui.toolkit.core.interfaces.IComponent.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject];
haxe.ui.toolkit.core.interfaces.IComponent.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IComponent
};
haxe.ui.toolkit.core.Component = function() {
	this._toolTipTimer = null;
	this._disabled = false;
	this._clipContent = false;
	haxe.ui.toolkit.core.StyleableDisplayObject.call(this);
};
$hxClasses["haxe.ui.toolkit.core.Component"] = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.core.Component.__name__ = ["haxe","ui","toolkit","core","Component"];
haxe.ui.toolkit.core.Component.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IComponent];
haxe.ui.toolkit.core.Component.addNamedComponentsFrom = function(parent,list) {
	if(parent == null) return;
	if(parent.get_id() != null) list.push(parent);
	var _g = 0;
	var _g1 = parent.get_children();
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		haxe.ui.toolkit.core.Component.addNamedComponentsFrom(js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IComponent),list);
	}
};
haxe.ui.toolkit.core.Component.__super__ = haxe.ui.toolkit.core.StyleableDisplayObject;
haxe.ui.toolkit.core.Component.prototype = $extend(haxe.ui.toolkit.core.StyleableDisplayObject.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.StyleableDisplayObject.prototype.initialize.call(this);
		if(js.Boot.__instanceof(this,haxe.ui.toolkit.core.interfaces.IDraggable)) this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onComponentMouseDown));
		this.initScriplet();
	}
	,postInitialize: function() {
		if(this._disabled == true) this.set_disabled(true);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.StyleableDisplayObject.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256 && this._clipContent == true) this.get_sprite().set_scrollRect(new openfl.geom.Rectangle(0,0,this.get_width(),this.get_height()));
		this._invalidating = false;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(value != null) {
			if(StringTools.startsWith(value,"@#")) value = HxOverrides.substr(value,2,value.length) + "_" + haxe.ui.toolkit.core.Client.get_instance().get_language(); else if(StringTools.startsWith(value,"asset://")) {
				var assetId = HxOverrides.substr(value,8,value.length);
				value = haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(assetId);
				value = StringTools.replace(value,"\r","");
			}
			this._text = value;
		}
		return value;
	}
	,get_clipWidth: function() {
		if(this.get_sprite().get_scrollRect() == null) return this.get_width();
		return this.get_sprite().get_scrollRect().width;
	}
	,set_clipWidth: function(value) {
		this.get_sprite().set_scrollRect(new openfl.geom.Rectangle(0,0,value,this.get_clipHeight()));
		return value;
	}
	,get_clipHeight: function() {
		if(this.get_sprite().get_scrollRect() == null) return this.get_height();
		return this.get_sprite().get_scrollRect().height;
	}
	,set_clipHeight: function(value) {
		this.get_sprite().set_scrollRect(new openfl.geom.Rectangle(0,0,this.get_clipWidth(),value));
		return value;
	}
	,get_clipContent: function() {
		return this._clipContent;
	}
	,set_clipContent: function(value) {
		this._clipContent = value;
		if(this._clipContent == false) this.clearClip();
		this.invalidate(256);
		return value;
	}
	,clearClip: function() {
		this.get_sprite().set_scrollRect(null);
	}
	,get_disabled: function() {
		return this._disabled;
	}
	,set_disabled: function(value) {
		if(value == true) {
			if(this._cachedListeners == null) this._cachedListeners = new haxe.ds.StringMap();
			var $it0 = this._eventListeners.keys();
			while( $it0.hasNext() ) {
				var type = $it0.next();
				if(this.disablableEventType(type) == true) {
					var list = this._eventListeners.get(type);
					var cachedList = this._cachedListeners.get(type);
					if(cachedList == null) {
						cachedList = new Array();
						this._cachedListeners.set(type,cachedList);
					}
					var _g = 0;
					while(_g < list.length) {
						var listener = list[_g];
						++_g;
						cachedList.push(listener);
						this.removeEventListener(type,listener);
					}
				}
			}
		}
		this._disabled = value;
		var _g1 = 0;
		var _g11 = this.get_children();
		while(_g1 < _g11.length) {
			var child = _g11[_g1];
			++_g1;
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.Component)) (js.Boot.__cast(child , haxe.ui.toolkit.core.Component)).set_disabled(value);
		}
		if(value == false) {
			if(this._cachedListeners != null) {
				var $it1 = this._cachedListeners.keys();
				while( $it1.hasNext() ) {
					var type1 = $it1.next();
					var list1 = this._cachedListeners.get(type1);
					var _g2 = 0;
					while(_g2 < list1.length) {
						var listener1 = list1[_g2];
						++_g2;
						this.addEventListener(type1,listener1);
					}
					list1 = new Array();
				}
				this._cachedListeners = null;
			}
		}
		if(js.Boot.__instanceof(this,haxe.ui.toolkit.core.StateComponent)) {
			var stateComponent;
			stateComponent = js.Boot.__cast(this , haxe.ui.toolkit.core.StateComponent);
			if(value == true) {
				if(stateComponent.hasState("disabled")) stateComponent.set_state("disabled");
			} else if(stateComponent.hasState("normal")) stateComponent.set_state("normal");
		}
		return value;
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(newValue) {
		this.set_text("" + Std.string(newValue));
		return newValue;
	}
	,get_toolTip: function() {
		return this._toolTip;
	}
	,set_toolTip: function(value) {
		this._toolTip = value;
		this.removeEventListener("haxeui_" + "mouseOver",$bind(this,this._onComponentMouseOver));
		this.removeEventListener("haxeui_" + "mouseOut",$bind(this,this._onComponentMouseOut));
		this.removeEventListener("haxeui_" + "click",$bind(this,this._onComponentClick));
		this.removeEventListener("haxeui_" + "change",$bind(this,this._onComponentClick));
		if(this._toolTip != null) {
			this.addEventListener("haxeui_" + "mouseOver",$bind(this,this._onComponentMouseOver));
			this.addEventListener("haxeui_" + "mouseOut",$bind(this,this._onComponentMouseOut));
			this.addEventListener("haxeui_" + "click",$bind(this,this._onComponentClick));
			this.addEventListener("haxeui_" + "change",$bind(this,this._onComponentClick));
		}
		return value;
	}
	,_onComponentMouseOver: function(event) {
		var _g = this;
		if(this._toolTipTimer != null) {
			this._toolTipTimer.stop();
			this._toolTipTimer = null;
		}
		if(this._toolTipTimer == null) this._toolTipTimer = haxe.Timer.delay(function() {
			haxe.ui.toolkit.core.ToolTipManager.get_instance().showToolTip(_g,null,event);
		},haxe.ui.toolkit.core.ToolTipManager.get_instance().defaults.delay);
	}
	,_onComponentMouseOut: function(event) {
		if(this._toolTipTimer != null) {
			this._toolTipTimer.stop();
			this._toolTipTimer = null;
		}
		if(haxe.ui.toolkit.core.ToolTipManager.get_instance().toolTipVisible(this) == true && this.hitTest(event.stageX,event.stageY) == false) haxe.ui.toolkit.core.ToolTipManager.get_instance().hideCurrentToolTip();
	}
	,_onComponentClick: function(event) {
		if(this._toolTipTimer != null) {
			this._toolTipTimer.stop();
			this._toolTipTimer = null;
		}
		if(haxe.ui.toolkit.core.ToolTipManager.get_instance().toolTipVisible(this) == true) haxe.ui.toolkit.core.ToolTipManager.get_instance().hideCurrentToolTip();
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this._disabled == true && this.disablableEventType(type) == true) {
			if(this._cachedListeners == null) this._cachedListeners = new haxe.ds.StringMap();
			var list = this._cachedListeners.get(type);
			if(list == null) {
				list = new Array();
				this._cachedListeners.set(type,list);
			}
			list.push(listener);
			return;
		}
		haxe.ui.toolkit.core.StyleableDisplayObject.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this._disabled == true && this.disablableEventType(type) == true) {
			if(this._cachedListeners != null && this._cachedListeners.exists(type)) {
				var list = this._cachedListeners.get(type);
				if(list != null) {
					HxOverrides.remove(list,listener);
					if(list.length == 0) this._cachedListeners.remove(type);
				}
			}
		}
		haxe.ui.toolkit.core.StyleableDisplayObject.prototype.removeEventListener.call(this,type,listener,useCapture);
	}
	,disablableEventType: function(type) {
		return type == openfl.events.MouseEvent.MOUSE_DOWN || type == openfl.events.MouseEvent.MOUSE_MOVE || type == openfl.events.MouseEvent.MOUSE_OVER || type == openfl.events.MouseEvent.MOUSE_OUT || type == openfl.events.MouseEvent.MOUSE_UP || type == openfl.events.MouseEvent.MOUSE_WHEEL || type == openfl.events.MouseEvent.CLICK;
	}
	,_onComponentMouseDown: function(event) {
		if(js.Boot.__instanceof(this,haxe.ui.toolkit.core.interfaces.IDraggable)) {
			if((js.Boot.__cast(this , haxe.ui.toolkit.core.interfaces.IDraggable)).allowDrag(event) == false) return;
		}
		this.mouseDownPos = new openfl.geom.Point(event.stageX - this.get_stageX(),event.stageY - this.get_stageY());
		this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onComponentMouseMove));
		this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onComponentMouseUp));
	}
	,_onComponentMouseUp: function(event) {
		this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onComponentMouseMove));
		this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onComponentMouseUp));
	}
	,_onComponentMouseMove: function(event) {
		this.set_x(event.stageX - this.mouseDownPos.x);
		this.set_y(event.stageY - this.mouseDownPos.y);
	}
	,addScriptlet: function(scriptlet) {
		var found = false;
		var item = this;
		while(item != null) {
			if(item.get_scriptletSource() != null) {
				found = true;
				break;
			}
			item = item.get_parent();
		}
		if(found == false) item = this;
		if(item != null) {
			if(item.get_scriptletSource() == null) item.set_scriptletSource("");
			var _g = item;
			_g.set_scriptletSource(_g.get_scriptletSource() + scriptlet);
		}
	}
	,findInterp: function() {
		var found = false;
		var item = this;
		while(item != null) {
			if(item._interp != null) {
				found = true;
				break;
			}
			item = item.get_parent();
		}
		if(found == false) return null;
		return item._interp;
	}
	,executeScriptletExpr: function(expr) {
		try {
			var parser = new hscript.Parser();
			var line = parser.parseString(expr);
			this.findInterp().expr(line);
		} catch( e ) {
			haxe.Log.trace("Problem executing scriptlet: " + Std.string(e),{ fileName : "Component.hx", lineNumber : 391, className : "haxe.ui.toolkit.core.Component", methodName : "executeScriptletExpr"});
		}
	}
	,addScriptletEventHandler: function(event,scriptlet) {
		var _g = this;
		event = "haxeui_" + event;
		this.addEventListener(event,function(e) {
			_g.executeScriptletExpr(scriptlet);
		});
	}
	,get_scriptletSource: function() {
		return this._scriptletSource;
	}
	,set_scriptletSource: function(value) {
		this._scriptletSource = value;
		return value;
	}
	,initScriplet: function() {
		if(this._scriptletSource != null) try {
			var parser = new hscript.Parser();
			var program = parser.parseString(this._scriptletSource);
			this._interp = new haxe.ui.toolkit.hscript.ScriptInterp();
			var comps = this.get_namedComponents();
			var _g = 0;
			while(_g < comps.length) {
				var comp = comps[_g];
				++_g;
				var safeId = haxe.ui.toolkit.util.StringUtil.capitalizeHyphens(comp.get_id());
				this._interp.variables.set(safeId,comp);
			}
			this._interp.execute(program);
		} catch( e ) {
			haxe.Log.trace("Problem running script: " + Std.string(e),{ fileName : "Component.hx", lineNumber : 428, className : "haxe.ui.toolkit.core.Component", methodName : "initScriplet"});
		}
	}
	,get_namedComponents: function() {
		var list = new Array();
		haxe.ui.toolkit.core.Component.addNamedComponentsFrom(this,list);
		return list;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StyleableDisplayObject.prototype.clone.call(this);
		c.set_text(this.get_text());
		c.set_disabled(this.get_disabled());
		c.userData = this.userData;
		c.set_value(this.get_value());
		c.set_toolTip(this.get_toolTip());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.Component();
	}
	,__class__: haxe.ui.toolkit.core.Component
	,__properties__: $extend(haxe.ui.toolkit.core.StyleableDisplayObject.prototype.__properties__,{get_namedComponents:"get_namedComponents",set_scriptletSource:"set_scriptletSource",get_scriptletSource:"get_scriptletSource",set_toolTip:"set_toolTip",get_toolTip:"get_toolTip",set_value:"set_value",get_value:"get_value",set_disabled:"set_disabled",get_disabled:"get_disabled",set_clipContent:"set_clipContent",get_clipContent:"get_clipContent",set_clipHeight:"set_clipHeight",get_clipHeight:"get_clipHeight",set_clipWidth:"set_clipWidth",get_clipWidth:"get_clipWidth",set_text:"set_text",get_text:"get_text"})
});
haxe.ui.toolkit.containers = {};
haxe.ui.toolkit.containers.Container = function() {
	haxe.ui.toolkit.core.Component.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.Container"] = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.Container.__name__ = ["haxe","ui","toolkit","containers","Container"];
haxe.ui.toolkit.containers.Container.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.Container.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.containers.Container.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			c.addChild(child.clone());
		}
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Container();
	}
	,__class__: haxe.ui.toolkit.containers.Container
});
haxe.ui.toolkit.containers.Absolute = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(false);
	this.set_layout(new haxe.ui.toolkit.layout.AbsoluteLayout());
};
$hxClasses["haxe.ui.toolkit.containers.Absolute"] = haxe.ui.toolkit.containers.Absolute;
haxe.ui.toolkit.containers.Absolute.__name__ = ["haxe","ui","toolkit","containers","Absolute"];
haxe.ui.toolkit.containers.Absolute.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.Absolute.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.Absolute.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Absolute();
	}
	,__class__: haxe.ui.toolkit.containers.Absolute
});
haxe.ui.toolkit.containers.VBox = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
};
$hxClasses["haxe.ui.toolkit.containers.VBox"] = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.containers.VBox.__name__ = ["haxe","ui","toolkit","containers","VBox"];
haxe.ui.toolkit.containers.VBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.VBox.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.VBox.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.VBox();
	}
	,__class__: haxe.ui.toolkit.containers.VBox
});
haxe.ui.toolkit.containers.Accordion = function() {
	this._selectedIndex = -1;
	haxe.ui.toolkit.containers.VBox.call(this);
	this._autoSize = false;
	this._panels = new Array();
	this._buttons = new Array();
};
$hxClasses["haxe.ui.toolkit.containers.Accordion"] = haxe.ui.toolkit.containers.Accordion;
haxe.ui.toolkit.containers.Accordion.__name__ = ["haxe","ui","toolkit","containers","Accordion"];
haxe.ui.toolkit.containers.Accordion.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.Accordion.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.containers.Accordion.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.VBox.prototype.initialize.call(this);
		if(this._selectedIndex != -1) {
			var cachedIndex = this._selectedIndex;
			this._selectedIndex = -1;
			this.showPage(cachedIndex);
		}
	}
	,addChild: function(child) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.AccordionButton)) r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child); else {
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) (js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)).set_autoSize(false);
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.StyleableDisplayObject)) (js.Boot.__cast(child , haxe.ui.toolkit.core.StyleableDisplayObject)).set_styleName("page");
			child.set_percentHeight(100);
			child.set_percentWidth(100);
			this._panels.push(child);
			var button = new haxe.ui.toolkit.containers.AccordionButton();
			button.set_styleName("expandable");
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.Component)) button.set_text((js.Boot.__cast(child , haxe.ui.toolkit.core.Component)).get_text());
			button.userData = this._panels.length - 1;
			button.set_id("accordionButton_" + (this._panels.length - 1));
			button.set_percentWidth(100);
			button.set_toggle(true);
			button.set_selected(false);
			button.set_allowSelection(false);
			button.addEventListener("haxeui_" + "click",$bind(this,this._onButtonClick));
			this._buttons.push(button);
			this.addChild(button);
			child.set_visible(false);
			r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.AccordionButton)) HxOverrides.remove(this._buttons,child); else HxOverrides.remove(this._panels,child);
		return haxe.ui.toolkit.containers.VBox.prototype.removeChild.call(this,child,dispose);
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		if(this._ready == true) this._buttons[value].set_selected(true); else this._selectedIndex = value;
		return value;
	}
	,get_selectedButton: function() {
		if(this._selectedIndex == -1) return null;
		return this.getButton(this._selectedIndex);
	}
	,getButton: function(index) {
		return this._buttons[index];
	}
	,showPage: function(index) {
		var button = this._buttons[index];
		button.set_selected(true);
	}
	,_onButtonClick: function(event) {
		var index = event.get_component().userData;
		this.showPanel(index);
		this.dispatchEvent(new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change"));
	}
	,showPanel: function(index) {
		var button = this._buttons[index];
		button.set_selected(true);
		var panel = this._panels[index];
		var buttonOld = null;
		var panelOld = null;
		var ucy = this.get_layout().get_usableHeight();
		if(this._selectedIndex > -1) {
			buttonOld = this._buttons[this._selectedIndex];
			panelOld = this._panels[this._selectedIndex];
			if(button != buttonOld) this.unselectButton(buttonOld);
		}
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.containers.Accordion);
		if(transition == "slide") {
			panel.set_percentHeight(-1);
			panel.set_height(0);
			panel.set_visible(true);
			motion.Actuate.tween(panel,.2,{ height : ucy, clipHeight : ucy},true).ease(motion.easing.Linear.get_easeNone()).onUpdate($bind(this,this._onTweenUpdate),[ucy,panel,panelOld]).onComplete($bind(this,this._onTweenComplete),[panel,panelOld,buttonOld]);
		} else if(transition == "fade") {
			panel.get_sprite().set_alpha(0);
			panel.set_visible(true);
			if(panelOld != null) {
				this.unselectButton(buttonOld);
				panelOld.set_visible(false);
			}
			motion.Actuate.tween(panel.get_sprite(),.2,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone());
		} else {
			panel.set_visible(true);
			if(panelOld != null) {
				this.unselectButton(buttonOld);
				panelOld.set_visible(false);
			}
		}
		if(panelOld == panel) this._selectedIndex = -1; else this._selectedIndex = index;
	}
	,unselectButton: function(button) {
		button.set_selected(false);
	}
	,_onTweenUpdate: function(ucy,panel,panelOld) {
		if(panelOld != null) {
			panelOld.set_height(ucy - panel.get_height());
			panelOld.set_clipHeight(panelOld.get_height());
		}
	}
	,_onTweenComplete: function(panel,panelOld,buttonOld) {
		panel.clearClip();
		panel.set_percentHeight(100);
		if(panelOld != null) {
			panelOld.set_visible(false);
			this.unselectButton(buttonOld);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		c.removeAllChildren();
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.AccordionButton) == false) c.addChild(child.clone());
		}
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Accordion();
	}
	,__class__: haxe.ui.toolkit.containers.Accordion
	,__properties__: $extend(haxe.ui.toolkit.containers.VBox.prototype.__properties__,{get_selectedButton:"get_selectedButton",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
haxe.ui.toolkit.core.interfaces.IStateComponent = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IStateComponent"] = haxe.ui.toolkit.core.interfaces.IStateComponent;
haxe.ui.toolkit.core.interfaces.IStateComponent.__name__ = ["haxe","ui","toolkit","core","interfaces","IStateComponent"];
haxe.ui.toolkit.core.interfaces.IStateComponent.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IComponent];
haxe.ui.toolkit.core.interfaces.IStateComponent.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IStateComponent
};
haxe.ui.toolkit.core.StateComponent = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this._states = new Array();
};
$hxClasses["haxe.ui.toolkit.core.StateComponent"] = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.core.StateComponent.__name__ = ["haxe","ui","toolkit","core","StateComponent"];
haxe.ui.toolkit.core.StateComponent.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IStateComponent];
haxe.ui.toolkit.core.StateComponent.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.core.StateComponent.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	buildStyles: function() {
		var _g = 0;
		var _g1 = this.get_states();
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var stateStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this,s);
			if(stateStyle != null) this.storeStyle(s,stateStyle);
		}
	}
	,addStates: function(stateNames,rebuildStyles) {
		if(rebuildStyles == null) rebuildStyles = true;
		var _g = 0;
		while(_g < stateNames.length) {
			var stateName = stateNames[_g];
			++_g;
			this.addState(stateName,false);
		}
		if(rebuildStyles == true && this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
		}
	}
	,addState: function(stateName,rebuildStyles) {
		if(rebuildStyles == null) rebuildStyles = true;
		if(this.hasState(stateName) == false) {
			this._states.push(stateName);
			if(rebuildStyles == true && this._ready) {
				if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			}
		}
	}
	,get_state: function() {
		return this._state;
	}
	,set_state: function(value) {
		if(this._state != value) {
			this._state = value;
			if(this.retrieveStyle(this._state) != null) this.set_baseStyle(this.retrieveStyle(this._state)); else this.invalidate(4096);
		}
		return value;
	}
	,get_states: function() {
		return this._states;
	}
	,hasState: function(state) {
		if(this.get_states() == null) return false;
		return Lambda.indexOf(this.get_states(),state) != -1;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		c.set_state(this.get_state());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.StateComponent();
	}
	,__class__: haxe.ui.toolkit.core.StateComponent
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{get_states:"get_states",set_state:"set_state",get_state:"get_state"})
});
haxe.ui.toolkit.core.interfaces.IFocusable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IFocusable"] = haxe.ui.toolkit.core.interfaces.IFocusable;
haxe.ui.toolkit.core.interfaces.IFocusable.__name__ = ["haxe","ui","toolkit","core","interfaces","IFocusable"];
haxe.ui.toolkit.core.interfaces.IFocusable.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IFocusable
};
haxe.ui.toolkit.controls = {};
haxe.ui.toolkit.controls.Button = function() {
	this.dispatchChangeEvents = true;
	this._mouseIn = false;
	this._iconPosition = "left";
	this._allowSelection = true;
	this._selected = false;
	this._toggle = false;
	this._down = false;
	this._remainPressed = false;
	this._allowFocus = true;
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this.set_state("normal");
	this._layout = new haxe.ui.toolkit.layout.HorizontalLayout();
	this.set_autoSize(true);
	if(haxe.ui.toolkit.controls.Button._groups == null) haxe.ui.toolkit.controls.Button._groups = new haxe.ds.StringMap();
};
$hxClasses["haxe.ui.toolkit.controls.Button"] = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.Button.__name__ = ["haxe","ui","toolkit","controls","Button"];
haxe.ui.toolkit.controls.Button.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IFocusable];
haxe.ui.toolkit.controls.Button._groups = null;
haxe.ui.toolkit.controls.Button.optionInGroup = function(value,option) {
	var exists = false;
	var arr = haxe.ui.toolkit.controls.Button._groups.get(value);
	if(arr != null) {
		var _g = 0;
		while(_g < arr.length) {
			var test = arr[_g];
			++_g;
			if(test == option) {
				exists = true;
				break;
			}
		}
	}
	return exists;
};
haxe.ui.toolkit.controls.Button.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Button.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	dispose: function() {
		if(this.get_group() != null) {
			var arr = haxe.ui.toolkit.controls.Button._groups.get(this._group);
			HxOverrides.remove(arr,this);
		}
		haxe.ui.toolkit.core.StateComponent.prototype.dispose.call(this);
	}
	,get_remainPressed: function() {
		return this._remainPressed;
	}
	,set_remainPressed: function(value) {
		this._remainPressed = value;
		return value;
	}
	,get_icon: function() {
		if(this._icon == null) return null;
		return this._icon.get_resource();
	}
	,set_icon: function(value) {
		if(value != null) {
			if(this._icon == null) {
				this._icon = new haxe.ui.toolkit.controls.Image();
				this._icon.set_id("icon");
			}
			if(this._icon.get_resource() != value) {
				this._icon.set_resource(value);
				this.organiseChildren();
			}
		} else if(this._icon != null) this._icon.set_visible(false);
		return value;
	}
	,organiseChildren: function() {
		if(this._ready == false) return;
		this.removeAllChildren(false);
		if(this._icon != null) {
			this._icon.set_horizontalAlign("center");
			this._icon.set_verticalAlign("center");
		}
		if(this._label != null) {
			this._label.set_horizontalAlign("center");
			this._label.set_verticalAlign("center");
		}
		if(this.get_autoSize() == false || this.get_percentWidth() > 0) {
			if(this._label != null) {
				this._label.set_percentWidth(100);
				this._label.set_autoSize(false);
			}
		}
		if(this._iconPosition == "left") {
			this.set_layout(new haxe.ui.toolkit.layout.HorizontalLayout());
			this.addChild(this._icon);
			this.addChild(this._label);
		} else if(this._iconPosition == "right") {
			this.set_layout(new haxe.ui.toolkit.layout.HorizontalLayout());
			this.addChild(this._label);
			this.addChild(this._icon);
		} else if(this._iconPosition == "top") {
			this.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
			this.addChild(this._icon);
			this.addChild(this._label);
		} else if(this._iconPosition == "bottom") {
			this.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
			this.addChild(this._label);
			this.addChild(this._icon);
		} else if(this._iconPosition == "center") {
			this.set_layout(new haxe.ui.toolkit.layout.BoxLayout());
			this.addChild(this._label);
			this.addChild(this._icon);
		}
		if(this._iconPosition == "fill" && this._icon != null) {
			this._icon.set_width(this.get_width());
			this._icon.set_height(this.get_height());
		}
		if(this.get_layout().get_usableHeight() <= 0) {
			var cy = 0;
			if(this._label != null) cy = this._label.get_height() + this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom();
			if(this._icon != null) {
				var temp = this._icon.get_height() + this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom();
				if(temp > cy) cy = temp;
			}
			this.set_height(cy);
		}
		this.invalidate(1048576);
	}
	,preInitialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.preInitialize.call(this);
	}
	,initialize: function() {
		var _g = this;
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this._onMouseOver));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this._onMouseOut));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		this.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this._onMouseClick));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,function(e) {
			if(_g._mouseIn == false) {
				_g._mouseIn = true;
				var mouseEvent = new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OVER,false,e.cancelable,e.localX,e.localY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta,e.commandKey,e.clickCount);
				_g.dispatchEvent(mouseEvent);
				haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(_g,_g.__onScreenMouseMove));
			}
		});
		this.organiseChildren();
	}
	,__onScreenMouseMove: function(e) {
		if(this._mouseIn == true) {
			if(this.hitTest(e.stageX,e.stageY) == false) {
				haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onScreenMouseMove));
				this._mouseIn = false;
				var mouseEvent = new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OUT,false,e.cancelable,e.localX,e.localY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta,e.commandKey,e.clickCount);
				this.dispatchEvent(mouseEvent);
			}
		}
	}
	,set_disabled: function(value) {
		haxe.ui.toolkit.core.StateComponent.prototype.set_disabled.call(this,value);
		if(value == true) {
			this.get_sprite().buttonMode = false;
			this.get_sprite().useHandCursor = false;
		} else {
			this.get_sprite().buttonMode = true;
			this.get_sprite().useHandCursor = true;
		}
		return value;
	}
	,get_text: function() {
		if(this._label == null) return null;
		return this._label.get_text();
	}
	,set_text: function(value) {
		value = haxe.ui.toolkit.core.StateComponent.prototype.set_text.call(this,value);
		if(value != null) {
			if(this._label == null) {
				this._label = new haxe.ui.toolkit.controls.Text();
				this._label.set_id("label");
				this._label.set_multiline(this._multiline);
				this._label.set_wrapLines(this._multiline);
			}
			this._label.set_value(value);
			this.organiseChildren();
		} else if(this._label != null) this._label.set_visible(false);
		return value;
	}
	,_onMouseOver: function(event) {
		if(this._selected == false) {
			if(event.buttonDown == false || this._down == false) this.set_state("over"); else this.set_state("down");
		}
	}
	,_onMouseOut: function(event) {
		if(this._selected == false) {
			if(this._remainPressed == false || event.buttonDown == false) this.set_state("normal"); else {
			}
		}
	}
	,_onMouseDown: function(event) {
		if(this._allowSelection == true) {
			this._down = true;
			this.set_state("down");
			haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		}
	}
	,_onMouseUp: function(event) {
		if(this._allowSelection == true && this.get_toggle() == false) {
			this._down = false;
			if(this.hitTest(event.stageX,event.stageY)) this.set_state("over"); else this.set_state("normal");
			haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		}
	}
	,_onMouseClick: function(event) {
		if(this._icon != null && this._icon.hitTest(event.stageX,event.stageY)) this.dispatchEvent(new haxe.ui.toolkit.events.UIEvent("haxeui_" + "glyphClick"));
		if(this._toggle == true && this._allowSelection == true) {
			this.set_selected(!this.get_selected());
			if(this.get_selected() == false && this.hitTest(event.stageX,event.stageY)) this.set_state("over");
		}
	}
	,get_states: function() {
		return ["normal","over","down","disabled"];
	}
	,set_state: function(value) {
		haxe.ui.toolkit.core.StateComponent.prototype.set_state.call(this,value);
		if(value == "down") this._down = true;
		return value;
	}
	,get_allowFocus: function() {
		return this._allowFocus;
	}
	,set_allowFocus: function(value) {
		return value;
	}
	,get_iconPosition: function() {
		return this._iconPosition;
	}
	,set_iconPosition: function(value) {
		if(this._iconPosition != value) {
			this._iconPosition = value;
			this.organiseChildren();
		}
		return value;
	}
	,get_toggle: function() {
		return this._toggle;
	}
	,set_toggle: function(value) {
		this._toggle = value;
		return value;
	}
	,get_selected: function() {
		return this._selected;
	}
	,set_selected: function(value) {
		if(this._toggle == true && this._selected != value) {
			if(this._group != null && value == false) {
				var arr = haxe.ui.toolkit.controls.Button._groups.get(this._group);
				var hasSelection = false;
				if(arr != null) {
					var _g = 0;
					while(_g < arr.length) {
						var button = arr[_g];
						++_g;
						if(button != this && button.get_selected() == true) {
							hasSelection = true;
							break;
						}
					}
				}
				if(hasSelection == false) return value;
			}
			this._selected = value;
			if(this._group != null && value == true) {
				var arr1 = haxe.ui.toolkit.controls.Button._groups.get(this._group);
				if(arr1 != null) {
					var _g1 = 0;
					while(_g1 < arr1.length) {
						var button1 = arr1[_g1];
						++_g1;
						if(button1 != this) button1.set_selected(false);
					}
				}
			}
			if(this.dispatchChangeEvents == true) {
				var event = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change");
				this.dispatchEvent(event);
			}
		}
		this._selected = value;
		if(this._selected == true) this.set_state("down"); else if(this.get_root() != null && this.hitTest(this.get_root().get_mousePosition().x,this.get_root().get_mousePosition().y) == true) this.set_state("over"); else this.set_state("normal");
		return value;
	}
	,get_group: function() {
		return this._group;
	}
	,set_group: function(value) {
		if(value != null) {
			var arr = haxe.ui.toolkit.controls.Button._groups.get(value);
			if(arr != null) HxOverrides.remove(arr,this);
		}
		this._group = value;
		if(value == null) return value;
		var arr1 = haxe.ui.toolkit.controls.Button._groups.get(value);
		if(arr1 == null) arr1 = new Array();
		if(haxe.ui.toolkit.controls.Button.optionInGroup(value,this) == false) arr1.push(this);
		haxe.ui.toolkit.controls.Button._groups.set(value,arr1);
		return value;
	}
	,get_allowSelection: function() {
		return this._allowSelection;
	}
	,set_allowSelection: function(value) {
		this._allowSelection = value;
		return value;
	}
	,get_multiline: function() {
		return this._multiline;
	}
	,set_multiline: function(value) {
		this._multiline = value;
		if(this._label != null) {
			this._label.set_multiline(this._multiline);
			this._label.set_wrapLines(this._multiline);
		}
		return value;
	}
	,applyStyle: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.applyStyle.call(this);
		if(this._label != null) {
			var labelStyle = new haxe.ui.toolkit.style.Style();
			if(this._baseStyle != null) {
				labelStyle.set_fontName(this._baseStyle.get_fontName());
				labelStyle.set_fontSize(this._baseStyle.get_fontSize());
				labelStyle.set_fontEmbedded(this._baseStyle.get_fontEmbedded());
				labelStyle.set_fontBold(this._baseStyle.get_fontBold());
				labelStyle.set_fontItalic(this._baseStyle.get_fontItalic());
				labelStyle.set_fontUnderline(this._baseStyle.get_fontUnderline());
				labelStyle.set_color(this._baseStyle.get_color());
				labelStyle.set_textAlign(this._baseStyle.get_textAlign());
			}
			this._label.set_baseStyle(labelStyle);
		}
		if(this._baseStyle != null) {
			if(this._baseStyle.get_icon() != null) this.set_icon(this._baseStyle.get_icon());
			if(this._baseStyle.get_iconPosition() != null) this.set_iconPosition(this._baseStyle.get_iconPosition());
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		c.set_remainPressed(this.get_remainPressed());
		c.set_icon(this.get_icon());
		c.set_allowFocus(this.get_allowFocus());
		c.set_iconPosition(this.get_iconPosition());
		c.set_toggle(this.get_toggle());
		c.set_selected(this.get_selected());
		c.set_group(this.get_group());
		c.set_allowSelection(this.get_allowSelection());
		c.set_multiline(this.get_multiline());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Button();
	}
	,__class__: haxe.ui.toolkit.controls.Button
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_multiline:"set_multiline",get_multiline:"get_multiline",set_allowSelection:"set_allowSelection",get_allowSelection:"get_allowSelection",set_group:"set_group",get_group:"get_group",set_selected:"set_selected",get_selected:"get_selected",set_toggle:"set_toggle",get_toggle:"get_toggle",set_iconPosition:"set_iconPosition",get_iconPosition:"get_iconPosition",set_allowFocus:"set_allowFocus",get_allowFocus:"get_allowFocus",set_icon:"set_icon",get_icon:"get_icon",set_remainPressed:"set_remainPressed",get_remainPressed:"get_remainPressed"})
});
haxe.ui.toolkit.containers.AccordionButton = function() {
	haxe.ui.toolkit.controls.Button.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.AccordionButton"] = haxe.ui.toolkit.containers.AccordionButton;
haxe.ui.toolkit.containers.AccordionButton.__name__ = ["haxe","ui","toolkit","containers","AccordionButton"];
haxe.ui.toolkit.containers.AccordionButton.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.AccordionButton.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.containers.AccordionButton.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.AccordionButton();
	}
	,__class__: haxe.ui.toolkit.containers.AccordionButton
});
haxe.ui.toolkit.containers.Box = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe.ui.toolkit.layout.BoxLayout());
};
$hxClasses["haxe.ui.toolkit.containers.Box"] = haxe.ui.toolkit.containers.Box;
haxe.ui.toolkit.containers.Box.__name__ = ["haxe","ui","toolkit","containers","Box"];
haxe.ui.toolkit.containers.Box.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.Box.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.Box.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Box();
	}
	,__class__: haxe.ui.toolkit.containers.Box
});
haxe.ui.toolkit.containers.CalendarView = function() {
	haxe.ui.toolkit.containers.VBox.call(this);
	this._calendar = new haxe.ui.toolkit.controls.Calendar();
	this._autoSize = false;
	this._calendar.set_percentWidth(100);
	this._calendar.set_percentHeight(100);
};
$hxClasses["haxe.ui.toolkit.containers.CalendarView"] = haxe.ui.toolkit.containers.CalendarView;
haxe.ui.toolkit.containers.CalendarView.__name__ = ["haxe","ui","toolkit","containers","CalendarView"];
haxe.ui.toolkit.containers.CalendarView.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.containers.CalendarView.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.VBox.prototype.initialize.call(this);
		var hbox = new haxe.ui.toolkit.containers.HBox();
		hbox.set_percentWidth(100);
		this._prevMonthButton = new haxe.ui.toolkit.controls.Button();
		this._prevMonthButton.set_text("<");
		this._prevMonthButton.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this._onPrevClicked));
		hbox.addChild(this._prevMonthButton);
		var spacer = new haxe.ui.toolkit.controls.Spacer();
		spacer.set_percentWidth(50);
		this._currentMonthYear = new haxe.ui.toolkit.controls.Text();
		this._currentMonthYear.set_text("December 2013");
		this._currentMonthYear.set_id("currentMonthYear");
		this._currentMonthYear.set_percentWidth(100);
		this._currentMonthYear.set_autoSize(false);
		hbox.addChild(this._currentMonthYear);
		var spacer1 = new haxe.ui.toolkit.controls.Spacer();
		spacer1.set_percentWidth(50);
		this._nextMonthButton = new haxe.ui.toolkit.controls.Button();
		this._nextMonthButton.set_text(">");
		this._nextMonthButton.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this._onNextClicked));
		hbox.addChild(this._nextMonthButton);
		this.addChild(hbox);
		this._calendar.addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onDateChanged));
		this.addChild(this._calendar);
		this.displayMonthYear();
	}
	,get_date: function() {
		return this._calendar.get_date();
	}
	,set_date: function(value) {
		this._calendar.set_date(value);
		return value;
	}
	,get_selectedDate: function() {
		return this._calendar.get_selectedDate();
	}
	,set_selectedDate: function(value) {
		this._calendar.set_selectedDate(value);
		return value;
	}
	,_onPrevClicked: function(event) {
		this._calendar.previousMonth();
		this.displayMonthYear();
	}
	,_onNextClicked: function(event) {
		this._calendar.nextMonth();
		this.displayMonthYear();
	}
	,_onDateChanged: function(event) {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
	,displayMonthYear: function() {
		var monthName = haxe.ui.toolkit.containers.CalendarView.MONTH_NAMES[this._calendar.get_date().getMonth()];
		this._currentMonthYear.set_text(monthName + " " + this._calendar.get_date().getFullYear());
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.CalendarView();
	}
	,__class__: haxe.ui.toolkit.containers.CalendarView
	,__properties__: $extend(haxe.ui.toolkit.containers.VBox.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate",set_date:"set_date",get_date:"get_date"})
});
haxe.ui.toolkit.containers.ContinuousHBox = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this._layout = new haxe.ui.toolkit.layout.HorizontalContinuousLayout();
};
$hxClasses["haxe.ui.toolkit.containers.ContinuousHBox"] = haxe.ui.toolkit.containers.ContinuousHBox;
haxe.ui.toolkit.containers.ContinuousHBox.__name__ = ["haxe","ui","toolkit","containers","ContinuousHBox"];
haxe.ui.toolkit.containers.ContinuousHBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.ContinuousHBox.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.ContinuousHBox.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ContinuousHBox();
	}
	,__class__: haxe.ui.toolkit.containers.ContinuousHBox
});
haxe.ui.toolkit.containers.ContinuousVBox = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this._layout = new haxe.ui.toolkit.layout.VerticalContinuousLayout();
};
$hxClasses["haxe.ui.toolkit.containers.ContinuousVBox"] = haxe.ui.toolkit.containers.ContinuousVBox;
haxe.ui.toolkit.containers.ContinuousVBox.__name__ = ["haxe","ui","toolkit","containers","ContinuousVBox"];
haxe.ui.toolkit.containers.ContinuousVBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.ContinuousVBox.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.ContinuousVBox.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ContinuousVBox();
	}
	,__class__: haxe.ui.toolkit.containers.ContinuousVBox
});
haxe.ui.toolkit.containers.ExpandablePanel = function() {
	this.startExpanded = true;
	haxe.ui.toolkit.containers.VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ExpandablePanel"] = haxe.ui.toolkit.containers.ExpandablePanel;
haxe.ui.toolkit.containers.ExpandablePanel.__name__ = ["haxe","ui","toolkit","containers","ExpandablePanel"];
haxe.ui.toolkit.containers.ExpandablePanel.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.containers.ExpandablePanel.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.VBox.prototype.initialize.call(this);
	}
	,addChild: function(child) {
		if(this._button == null) {
			this._button = new haxe.ui.toolkit.containers.ExpandableButton();
			this._button.set_percentWidth(100);
			this._button.set_text(this.get_text());
			this._button.set_toggle(true);
			this._button.set_selected(this.startExpanded?true:false);
			this._button.addEventListener("haxeui_" + "change",$bind(this,this.onClickButton));
			this._button.set_styleName("expandable");
			haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,this._button);
		}
		if(this._panel == null) {
			this._panel = new haxe.ui.toolkit.containers.VBox();
			this._panel.set_id("content");
			this._panel.set_percentWidth(100);
			haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,this._panel);
			this._panel.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.panelAdded));
		}
		return this._panel.addChild(child);
	}
	,onClickButton: function(e) {
		if(this._button.get_selected()) this.showPanel(); else this.hidePanel();
	}
	,panelAdded: function(e) {
		this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.panelAdded));
		if(!this.startExpanded) this._panel.set_visible(false);
	}
	,showPanel: function() {
		var _g = this;
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.containers.ExpandablePanel);
		if(transition == "slide") {
			var startH = this._panel.get_height();
			this._panel.invalidate(256);
			var finalH = this._panel.get_height();
			this._panel.set_visible(true);
			this._panel._height = startH;
			this._panel.set_clipHeight(startH);
			motion.Actuate.tween(this._panel,.2,{ _height : finalH, clipHeight : finalH},true).ease(motion.easing.Linear.get_easeNone()).onUpdate(function() {
				_g.invalidate(256);
			});
		} else this._panel.set_visible(true);
	}
	,hidePanel: function() {
		var _g = this;
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.containers.ExpandablePanel);
		if(transition == "slide") motion.Actuate.tween(this._panel,.2,{ _height : 0, clipHeight : 0},true).ease(motion.easing.Linear.get_easeNone()).onUpdate(function() {
			_g.invalidate(256);
		}).onComplete(function() {
			_g._panel.set_visible(false);
		}); else this._panel.set_visible(false);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ExpandablePanel();
	}
	,__class__: haxe.ui.toolkit.containers.ExpandablePanel
});
haxe.ui.toolkit.containers.ExpandableButton = function() {
	haxe.ui.toolkit.controls.Button.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ExpandableButton"] = haxe.ui.toolkit.containers.ExpandableButton;
haxe.ui.toolkit.containers.ExpandableButton.__name__ = ["haxe","ui","toolkit","containers","ExpandableButton"];
haxe.ui.toolkit.containers.ExpandableButton.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.containers.ExpandableButton.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ExpandableButton();
	}
	,__class__: haxe.ui.toolkit.containers.ExpandableButton
});
haxe.ui.toolkit.containers.Grid = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe.ui.toolkit.layout.GridLayout());
};
$hxClasses["haxe.ui.toolkit.containers.Grid"] = haxe.ui.toolkit.containers.Grid;
haxe.ui.toolkit.containers.Grid.__name__ = ["haxe","ui","toolkit","containers","Grid"];
haxe.ui.toolkit.containers.Grid.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.Grid.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.Grid.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	get_columns: function() {
		return (js.Boot.__cast(this._layout , haxe.ui.toolkit.layout.GridLayout)).get_columns();
	}
	,set_columns: function(value) {
		(js.Boot.__cast(this._layout , haxe.ui.toolkit.layout.GridLayout)).set_columns(value);
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		c.set_columns(this.get_columns());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Grid();
	}
	,__class__: haxe.ui.toolkit.containers.Grid
	,__properties__: $extend(haxe.ui.toolkit.containers.Container.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
haxe.ui.toolkit.containers.HBox = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe.ui.toolkit.layout.HorizontalLayout());
};
$hxClasses["haxe.ui.toolkit.containers.HBox"] = haxe.ui.toolkit.containers.HBox;
haxe.ui.toolkit.containers.HBox.__name__ = ["haxe","ui","toolkit","containers","HBox"];
haxe.ui.toolkit.containers.HBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.HBox.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.HBox.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.HBox();
	}
	,__class__: haxe.ui.toolkit.containers.HBox
});
haxe.ui.toolkit.containers.HSplitter = function() {
	haxe.ui.toolkit.containers.HBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.HSplitter"] = haxe.ui.toolkit.containers.HSplitter;
haxe.ui.toolkit.containers.HSplitter.__name__ = ["haxe","ui","toolkit","containers","HSplitter"];
haxe.ui.toolkit.containers.HSplitter.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.HSplitter.__super__ = haxe.ui.toolkit.containers.HBox;
haxe.ui.toolkit.containers.HSplitter.prototype = $extend(haxe.ui.toolkit.containers.HBox.prototype,{
	addChild: function(child) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.HSplitterGripper)) r = haxe.ui.toolkit.containers.HBox.prototype.addChild.call(this,child); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe.ui.toolkit.containers.HSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChild(gripper);
			}
			r = haxe.ui.toolkit.containers.HBox.prototype.addChild.call(this,child);
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.HSplitterGripper)) r = haxe.ui.toolkit.containers.HBox.prototype.addChildAt.call(this,child,index); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe.ui.toolkit.containers.HSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChildAt(gripper,index);
			}
			r = haxe.ui.toolkit.containers.HBox.prototype.addChildAt.call(this,child,index + 1);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.HSplitterGripper)) r = haxe.ui.toolkit.containers.HBox.prototype.removeChild.call(this,child,dispose); else {
			if(this.get_numChildren() > 1) this.removeChild(this.getChildAt(this.indexOfChild(child) - 1),dispose);
			r = haxe.ui.toolkit.containers.HBox.prototype.removeChild.call(this,child,dispose);
		}
		return r;
	}
	,_onMouseDown: function(event) {
		this._percents = new haxe.ds.ObjectMap();
		this._gripper = event.get_component();
		this._mouseDownOffset = event.stageX - this._gripper.get_x();
		this._invalidating = true;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(c,haxe.ui.toolkit.containers.HSplitterGripper) == false) {
				if(c.get_percentWidth() != -1) {
					var value = c.get_percentWidth();
					this._percents.set(c,value);
					c.set_percentWidth(-1);
				}
			}
		}
		this._invalidating = false;
		this.invalidate(1);
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,_onMouseMove: function(event) {
		if(this._gripper != null) {
			var delta = event.stageX - this._gripper.get_x() - this._mouseDownOffset;
			var index = this.indexOfChild(this._gripper);
			var before = this.getChildAt(index - 1);
			var after = this.getChildAt(index + 1);
			var newBefore = before.get_width() + delta;
			var newAfter = after.get_width() - delta;
			if(newBefore > before.get_minWidth() && newAfter > after.get_minWidth() && newBefore - (before.get_layout().get_padding().get_left() + before.get_layout().get_padding().get_right()) > 0 && newAfter - (after.get_layout().get_padding().get_left() + after.get_layout().get_padding().get_right()) > 0) {
				before.set_width(newBefore);
				after.set_width(newAfter);
			}
		}
	}
	,_onMouseUp: function(event) {
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		this._gripper = null;
		var ucx = this.get_width();
		ucx -= (this.get_numChildren() - 1) / 2 * (2 * this.get_layout().get_spacingX());
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(this._percents.h.__keys__[c.__id__] != null == false) ucx -= c.get_width();
		}
		this._invalidating = true;
		var $it0 = this._percents.keys();
		while( $it0.hasNext() ) {
			var c1 = $it0.next();
			var newPercent = c1.get_width() / ucx * 100;
			c1.set_percentWidth(newPercent);
		}
		this._invalidating = false;
		this.invalidate(1);
		this._percents = null;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.HBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.HSplitter();
	}
	,__class__: haxe.ui.toolkit.containers.HSplitter
});
haxe.ui.toolkit.containers.HSplitterGripper = function() {
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_remainPressed(true);
	this.set_useHandCursor(true);
};
$hxClasses["haxe.ui.toolkit.containers.HSplitterGripper"] = haxe.ui.toolkit.containers.HSplitterGripper;
haxe.ui.toolkit.containers.HSplitterGripper.__name__ = ["haxe","ui","toolkit","containers","HSplitterGripper"];
haxe.ui.toolkit.containers.HSplitterGripper.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.containers.HSplitterGripper.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.HSplitterGripper();
	}
	,__class__: haxe.ui.toolkit.containers.HSplitterGripper
});
haxe.ui.toolkit.containers.ScrollView = function() {
	this._virtualScrolling = false;
	this._autoHideScrolls = false;
	this._scrollSensitivity = 1;
	this._inertialScrolling = false;
	this._inertiaSensitivity = 5;
	this._inertiaSpeed = new openfl.geom.Point(0,0);
	this._showVScroll = true;
	this._showHScroll = true;
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this._layout = new haxe.ui.toolkit.containers.ScrollViewLayout();
	this._eventTarget = new openfl.display.Sprite();
	this._eventTarget.set_visible(false);
	this._container = new haxe.ui.toolkit.containers.Box();
	this._container.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
	this._container.set_id("container");
	this._container.set_percentWidth(this._container.set_percentHeight(100));
	this.addChild(this._container);
};
$hxClasses["haxe.ui.toolkit.containers.ScrollView"] = haxe.ui.toolkit.containers.ScrollView;
haxe.ui.toolkit.containers.ScrollView.__name__ = ["haxe","ui","toolkit","containers","ScrollView"];
haxe.ui.toolkit.containers.ScrollView.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.containers.ScrollView.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.preInitialize.call(this);
		if(this._baseStyle != null) {
			this._autoHideScrolls = this._baseStyle.get_autoHideScrolls();
			if(Reflect.getProperty(this._layout,"inlineScrolls") != null) Reflect.setProperty(this._layout,"inlineScrolls",this._baseStyle.get_inlineScrolls());
		}
	}
	,initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onMouseWheel));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.get_sprite().addChild(this._eventTarget);
	}
	,postInitialize: function() {
		var _g = this;
		haxe.ui.toolkit.core.StateComponent.prototype.postInitialize.call(this);
		var content = this._container.getChildAt(0);
		if(content != null) (js.Boot.__cast(content , haxe.ui.toolkit.core.interfaces.IEventDispatcher)).addEventListener("haxeui_" + "resize",function(e) {
			_g.invalidate(256);
		});
	}
	,addChild: function(child) {
		var r = null;
		if(child == this._container || child == this._hscroll || child == this._vscroll) r = haxe.ui.toolkit.core.StateComponent.prototype.addChild.call(this,child); else {
			if(this._container.get_numChildren() >= 1) haxe.Log.trace("WARNING: ScrollView will only use the first child as the scroll content",{ fileName : "ScrollView.hx", lineNumber : 102, className : "haxe.ui.toolkit.containers.ScrollView", methodName : "addChild"});
			r = this._container.addChild(child);
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(child == this._container || child == this._hscroll || child == this._vscroll) r = haxe.ui.toolkit.core.StateComponent.prototype.addChildAt.call(this,child,index); else {
			if(this._container.get_numChildren() >= 1) haxe.Log.trace("WARNING: ScrollView will only use the first child as the scroll content",{ fileName : "ScrollView.hx", lineNumber : 115, className : "haxe.ui.toolkit.containers.ScrollView", methodName : "addChildAt"});
			r = this._container.addChildAt(child,index);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(child == this._container || child == this._hscroll || child == this._vscroll) r = haxe.ui.toolkit.core.StateComponent.prototype.removeChild.call(this,child,dispose); else r = this._container.removeChild(child,dispose);
		return r;
	}
	,dispose: function() {
		this.get_sprite().removeChild(this._eventTarget);
		haxe.ui.toolkit.core.StateComponent.prototype.dispose.call(this);
	}
	,get_inertialScrolling: function() {
		return this._inertialScrolling;
	}
	,set_inertialScrolling: function(value) {
		this._inertialScrolling = value;
		return value;
	}
	,get_virtualScrolling: function() {
		return this._virtualScrolling;
	}
	,set_virtualScrolling: function(value) {
		this._virtualScrolling = value;
		return value;
	}
	,get_showHScroll: function() {
		return this._showHScroll;
	}
	,set_showHScroll: function(value) {
		this._showHScroll = value;
		return value;
	}
	,get_showVScroll: function() {
		return this._showVScroll;
	}
	,set_showVScroll: function(value) {
		this._showVScroll = value;
		return value;
	}
	,get_hscrollPos: function() {
		if(this._hscroll != null) return this._hscroll.get_pos();
		return 0;
	}
	,set_hscrollPos: function(value) {
		if(this._hscroll != null) this._hscroll.set_pos(value);
		return value;
	}
	,get_hscrollMin: function() {
		if(this._hscroll != null) return this._hscroll.get_min();
		return 0;
	}
	,set_hscrollMin: function(value) {
		if(this._virtualScrolling == true) {
		}
		return value;
	}
	,get_hscrollMax: function() {
		if(this._hscroll != null) return this._hscroll.get_max();
		return 0;
	}
	,set_hscrollMax: function(value) {
		if(this._virtualScrolling == true) {
			this.createHScroll(true);
			this._hscroll.set_max(value);
		}
		return value;
	}
	,get_hscrollPageSize: function() {
		if(this._hscroll != null) return this._hscroll.get_pageSize();
		return 0;
	}
	,set_hscrollPageSize: function(value) {
		if(this._virtualScrolling == true) {
		}
		return value;
	}
	,get_vscrollPos: function() {
		if(this._vscroll != null) return this._vscroll.get_pos();
		return 0;
	}
	,set_vscrollPos: function(value) {
		if(this._vscroll != null) this._vscroll.set_pos(value);
		return value;
	}
	,get_vscrollMin: function() {
		if(this._vscroll != null) return this._vscroll.get_min();
		return 0;
	}
	,set_vscrollMin: function(value) {
		if(this._virtualScrolling == true) {
		}
		return value;
	}
	,get_vscrollMax: function() {
		if(this._vscroll != null) return this._vscroll.get_max();
		return 0;
	}
	,set_vscrollMax: function(value) {
		if(this._virtualScrolling == true) {
			this.createVScroll(true);
			this._vscroll.set_max(value);
		}
		return value;
	}
	,get_vscrollPageSize: function() {
		if(this._vscroll != null) return this._vscroll.get_pageSize();
		return 0;
	}
	,set_vscrollPageSize: function(value) {
		if(this._virtualScrolling == true) {
			this.createVScroll(true);
			this._vscroll.set_pageSize(value);
		}
		return value;
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.StateComponent.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256) {
			this.checkScrolls();
			this.updateScrollRect();
			this.resizeEventTarget();
		}
		this._invalidating = false;
	}
	,_onInertiaEnterFrame: function(event) {
		this._eventTarget.set_visible(true);
		var content = this._container.getChildAt(0);
		if(content != null) {
			this._inertiaSpeed.x *= 0.8;
			this._inertiaSpeed.y *= 0.8;
			if(content.get_width() > this.get_layout().get_usableWidth() || this._virtualScrolling == true) {
				if(this._showHScroll == true && this._autoHideScrolls == true) this._hscroll.set_visible(true);
				if(this._hscroll != null) {
					var _g = this._hscroll;
					_g.set_pos(_g.get_pos() - this._inertiaSpeed.x);
				}
			}
			if(content.get_height() > this.get_layout().get_usableHeight() || this._virtualScrolling == true) {
				if(this._showVScroll == true && this._autoHideScrolls == true) this._vscroll.set_visible(true);
				if(this._vscroll != null) {
					var _g1 = this._vscroll;
					_g1.set_pos(_g1.get_pos() - this._inertiaSpeed.y);
				}
			}
			if(Math.abs(this._inertiaSpeed.x) < 0.1 && Math.abs(this._inertiaSpeed.y) < 0.1) haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this._onInertiaEnterFrame));
		}
	}
	,_onHScrollChange: function(event) {
		this.updateScrollRect();
		var event1 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "scroll");
		this.dispatchEvent(event1);
	}
	,_onVScrollChange: function(event) {
		this.updateScrollRect();
		var event1 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "scroll");
		this.dispatchEvent(event1);
	}
	,_onMouseWheel: function(event) {
		var content = this._container.getChildAt(0);
		if(event.shiftKey || content.get_height() < this.get_layout().get_usableHeight()) {
			if(this._hscroll != null && content.get_width() > this.get_layout().get_usableWidth()) {
				if(event.delta != 0) {
					if(event.delta < 0) this._hscroll.incrementValue(); else if(event.delta > 0) this._hscroll.deincrementValue();
				}
			}
		} else if(this._vscroll != null && content.get_height() > this.get_layout().get_usableHeight()) {
			if(event.delta != 0) {
				if(event.delta < 0) this._vscroll.incrementValue(); else if(event.delta > 0) this._vscroll.deincrementValue();
			}
		}
	}
	,_onMouseDown: function(event) {
		var inScroll = false;
		if(this._vscroll != null && this._vscroll.get_visible() == true) inScroll = this._vscroll.hitTest(event.stageX,event.stageY);
		if(this._hscroll != null && this._hscroll.get_visible() == true && inScroll == false) inScroll = this._hscroll.hitTest(event.stageX,event.stageY);
		if(this._inertialScrolling == true) {
			haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this._onInertiaEnterFrame));
			this._inertiaTime = openfl.Lib.getTimer();
		}
		var content = this._container.getChildAt(0);
		if(content != null && inScroll == false && this._virtualScrolling == false) {
			if(content.get_width() > this.get_layout().get_usableWidth() || content.get_height() > this.get_layout().get_usableHeight()) {
				this._downPos = new openfl.geom.Point(event.stageX,event.stageY);
				haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
				haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
			}
		}
		if(this._virtualScrolling == true && (this._vscroll != null || this._hscroll != null)) {
			this._downPos = new openfl.geom.Point(event.stageX,event.stageY);
			haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
			haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		}
	}
	,_onScreenMouseMove: function(event) {
		if(this._downPos != null) {
			var ypos = event.stageY - this._downPos.y;
			var xpos = event.stageX - this._downPos.x;
			var target = event.target;
			while(target != null && js.Boot.__instanceof(target,openfl.display.DisplayObject)) {
				xpos /= target.get_scaleX();
				ypos /= target.get_scaleY();
				target = target.parent;
			}
			if(this._inertialScrolling == true) {
				var time = (openfl.Lib.getTimer() - this._inertiaTime) / 100;
				this._inertiaSpeed = new openfl.geom.Point(xpos / time,ypos / time);
				this._inertiaTime = openfl.Lib.getTimer();
			}
			if(Math.abs(xpos) >= this._scrollSensitivity || Math.abs(ypos) >= this._scrollSensitivity) {
				this._eventTarget.set_visible(true);
				var content = this._container.getChildAt(0);
				if(content != null) {
					if(xpos != 0 && (content.get_width() > this.get_layout().get_usableWidth() || this._virtualScrolling == true)) {
						if(this._showHScroll == true && this._autoHideScrolls == true) this._hscroll.set_visible(true);
						if(this._hscroll != null) {
							var _g = this._hscroll;
							_g.set_pos(_g.get_pos() - xpos);
						}
					}
					if(ypos != 0 && (content.get_height() > this.get_layout().get_usableHeight() || this._virtualScrolling == true)) {
						if(this._showVScroll == true && this._autoHideScrolls == true) this._vscroll.set_visible(true);
						if(this._vscroll != null) {
							var _g1 = this._vscroll;
							_g1.set_pos(_g1.get_pos() - ypos);
						}
					}
					this._downPos = new openfl.geom.Point(event.stageX,event.stageY);
				}
			}
		}
	}
	,_onScreenMouseUp: function(event) {
		if(this._inertialScrolling == true && openfl.Lib.getTimer() - this._inertiaTime < 100) {
			if(Math.abs(this._inertiaSpeed.x) > this._inertiaSensitivity || Math.abs(this._inertiaSpeed.y) > this._inertiaSensitivity) haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this._onInertiaEnterFrame));
		}
		this._eventTarget.set_visible(false);
		this._downPos = null;
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		if(this._hscroll != null && this._showHScroll == true && this._autoHideScrolls == true) this._hscroll.set_visible(false);
		if(this._vscroll != null && this._showVScroll == true && this._autoHideScrolls == true) this._vscroll.set_visible(false);
	}
	,checkScrolls: function() {
		if(this._virtualScrolling == true) return;
		var content = this._container.getChildAt(0);
		if(content != null) {
			var invalidateLayout = false;
			var hpos = 0;
			if(this._hscroll != null) hpos = this._hscroll.get_pos();
			if(content.get_width() - hpos > this.get_layout().get_usableWidth()) {
				if(this.createHScroll() == true) {
					this._hscroll.set_visible(false);
					invalidateLayout = true;
				}
				this._hscroll.set_max(content.get_width() - this.get_layout().get_usableWidth());
				this._hscroll.set_pageSize(this.get_layout().get_usableWidth() / content.get_width() * this._hscroll.get_max());
				if(this._hscroll.get_visible() == false && this._showHScroll == true && this._autoHideScrolls == false) {
					this._hscroll.set_visible(true);
					invalidateLayout = true;
				}
			} else if(this._hscroll != null) {
				if(this._hscroll.get_pos() != 0) this._hscroll.set_pos(content.get_width() - this.get_layout().get_usableWidth());
				if(this._hscroll.get_pos() == 0) {
					if(this._hscroll.get_visible() == true) {
						this._hscroll.set_visible(false);
						invalidateLayout = true;
					}
				} else {
					this._hscroll.set_max(content.get_width() - this.get_layout().get_usableWidth());
					this._hscroll.set_pageSize(this.get_layout().get_usableWidth() / content.get_width() * this._hscroll.get_max());
				}
			}
			var vpos = 0;
			if(this._vscroll != null) vpos = this._vscroll.get_pos();
			if(content.get_height() - vpos > this.get_layout().get_usableHeight()) {
				if(this.createVScroll() == true) {
					this._vscroll.set_visible(false);
					invalidateLayout = true;
				}
				this._vscroll.set_max(content.get_height() - this.get_layout().get_usableHeight());
				this._vscroll.set_pageSize(this.get_layout().get_usableHeight() / content.get_height() * this._vscroll.get_max());
				if(this._vscroll.get_visible() == false && this._showVScroll == true && this._autoHideScrolls == false) {
					this._vscroll.set_visible(true);
					invalidateLayout = true;
				}
			} else if(this._vscroll != null) {
				if(this._vscroll.get_pos() != 0) this._vscroll.set_pos(content.get_height() - this.get_layout().get_usableHeight());
				if(this._vscroll.get_pos() == 0) {
					if(this._vscroll.get_visible() == true) {
						this._vscroll.set_visible(false);
						invalidateLayout = true;
					}
				} else {
					this._vscroll.set_max(content.get_height() - this.get_layout().get_usableHeight());
					this._vscroll.set_pageSize(this.get_layout().get_usableHeight() / content.get_height() * this._vscroll.get_max());
				}
			}
			if(invalidateLayout) {
				this._invalidating = false;
				this.invalidate(1);
			}
		}
	}
	,createHScroll: function(invalidateLayout) {
		if(invalidateLayout == null) invalidateLayout = false;
		var created = false;
		if(this._hscroll == null) {
			this._hscroll = new haxe.ui.toolkit.controls.HScroll();
			this._hscroll.set_id("hscroll");
			this._hscroll.set_percentWidth(100);
			this._hscroll.addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onHScrollChange));
			if(this._showHScroll == false) this._hscroll.set_visible(false); else if(this._autoHideScrolls == true) this._hscroll.set_visible(false); else this._hscroll.set_visible(true);
			invalidateLayout = true;
			this.addChild(this._hscroll);
			created = true;
		}
		if(invalidateLayout) {
			if(this.get_percentWidth() == -1) this._invalidating = false;
			this.invalidate(1);
		}
		return created;
	}
	,createVScroll: function(invalidateLayout) {
		if(invalidateLayout == null) invalidateLayout = false;
		var created = false;
		if(this._vscroll == null) {
			this._vscroll = new haxe.ui.toolkit.controls.VScroll();
			this._vscroll.set_id("vscroll");
			this._vscroll.set_percentHeight(100);
			this._vscroll.addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onVScrollChange));
			if(this._showVScroll == false) this._vscroll.set_visible(false); else if(this._autoHideScrolls == true) this._vscroll.set_visible(false); else this._vscroll.set_visible(true);
			invalidateLayout = true;
			this.addChild(this._vscroll);
			created = true;
		}
		if(invalidateLayout) {
			if(this.get_percentHeight() == -1) this._invalidating = false;
			this.invalidate(1);
		}
		return created;
	}
	,updateScrollRect: function() {
		if(!this._ready) return;
		if(this.get_numChildren() > 0 && this._virtualScrolling == false) {
			var content = this._container.getChildAt(0);
			if(content != null) {
				var xpos = 0;
				if(this._hscroll != null) xpos = this._hscroll.get_pos();
				var ypos = 0;
				if(this._vscroll != null) ypos = this._vscroll.get_pos();
				content.set_x(-xpos);
				content.set_y(-ypos);
				this._container.get_sprite().set_scrollRect(new openfl.geom.Rectangle(0,0,this.get_layout().get_usableWidth(),this.get_layout().get_usableHeight()));
			}
		} else this._container.get_sprite().set_scrollRect(new openfl.geom.Rectangle(0,0,this.get_layout().get_usableWidth(),this.get_layout().get_usableHeight()));
	}
	,resizeEventTarget: function() {
		var targetX = this.get_layout().get_padding().get_left();
		var targetY = this.get_layout().get_padding().get_top();
		var targetCX = this.get_width() - (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right());
		var targetCY = this.get_height() - (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom());
		if(this._vscroll != null && this._vscroll.get_visible() == true) targetCX -= this._vscroll.get_width();
		if(this._hscroll != null && this._hscroll.get_visible() == true) targetCY -= this._hscroll.get_height();
		this._eventTarget.set_alpha(0);
		this._eventTarget.get_graphics().clear();
		this._eventTarget.get_graphics().beginFill(16711935);
		this._eventTarget.get_graphics().lineStyle(0);
		this._eventTarget.get_graphics().drawRect(targetX,targetY,targetCX,targetCY);
		this._eventTarget.get_graphics().endFill();
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ScrollView();
	}
	,__class__: haxe.ui.toolkit.containers.ScrollView
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_vscrollPageSize:"set_vscrollPageSize",get_vscrollPageSize:"get_vscrollPageSize",set_vscrollMax:"set_vscrollMax",get_vscrollMax:"get_vscrollMax",set_vscrollMin:"set_vscrollMin",get_vscrollMin:"get_vscrollMin",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",set_hscrollPageSize:"set_hscrollPageSize",get_hscrollPageSize:"get_hscrollPageSize",set_hscrollMax:"set_hscrollMax",get_hscrollMax:"get_hscrollMax",set_hscrollMin:"set_hscrollMin",get_hscrollMin:"get_hscrollMin",set_hscrollPos:"set_hscrollPos",get_hscrollPos:"get_hscrollPos",set_showVScroll:"set_showVScroll",get_showVScroll:"get_showVScroll",set_showHScroll:"set_showHScroll",get_showHScroll:"get_showHScroll",set_virtualScrolling:"set_virtualScrolling",get_virtualScrolling:"get_virtualScrolling",set_inertialScrolling:"set_inertialScrolling",get_inertialScrolling:"get_inertialScrolling"})
});
haxe.ui.toolkit.core.interfaces.IDataComponent = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDataComponent"] = haxe.ui.toolkit.core.interfaces.IDataComponent;
haxe.ui.toolkit.core.interfaces.IDataComponent.__name__ = ["haxe","ui","toolkit","core","interfaces","IDataComponent"];
haxe.ui.toolkit.core.interfaces.IDataComponent.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDataComponent
};
haxe.ui.toolkit.containers.ListView = function() {
	this._allowSelection = true;
	this._lastSelection = -1;
	haxe.ui.toolkit.containers.ScrollView.call(this);
	this.set_autoSize(false);
	this.set_dataSource(new haxe.ui.toolkit.data.ArrayDataSource());
	this._selectedItems = new Array();
	this._content = new haxe.ui.toolkit.containers.VBox();
	this._content.set_id("content");
	this._content.set_percentWidth(100);
	this.addChild(this._content);
	this._itemRenderer = haxe.ui.toolkit.core.renderers.BasicItemRenderer;
};
$hxClasses["haxe.ui.toolkit.containers.ListView"] = haxe.ui.toolkit.containers.ListView;
haxe.ui.toolkit.containers.ListView.__name__ = ["haxe","ui","toolkit","containers","ListView"];
haxe.ui.toolkit.containers.ListView.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDataComponent];
haxe.ui.toolkit.containers.ListView.__super__ = haxe.ui.toolkit.containers.ScrollView;
haxe.ui.toolkit.containers.ListView.prototype = $extend(haxe.ui.toolkit.containers.ScrollView.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.ScrollView.prototype.initialize.call(this);
		if(this._dataSource == null) this.set_dataSource(new haxe.ui.toolkit.data.ArrayDataSource());
		this._dataSource.open();
		this.syncUI();
		this.checkScrolls();
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.containers.ScrollView.prototype.invalidate.call(this,type,recursive);
		if((type & 65536) == 65536) this.syncUI();
	}
	,dispose: function() {
		if(this._dataSource != null) this._dataSource.close();
		haxe.ui.toolkit.containers.ScrollView.prototype.dispose.call(this);
	}
	,addChild: function(child) {
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IItemRenderer)) {
			this._itemRenderer = child;
			return child;
		}
		return haxe.ui.toolkit.containers.ScrollView.prototype.addChild.call(this,child);
	}
	,addChildAt: function(child,index) {
		return haxe.ui.toolkit.containers.ScrollView.prototype.addChildAt.call(this,child,index);
	}
	,get_listSize: function() {
		return this._content.get_children().length;
	}
	,get_itemHeight: function() {
		if(this._content.get_children().length == 0) return 0;
		var n = 0;
		var cy = this._content.get_layout().get_padding().get_top() + this._content.get_layout().get_padding().get_bottom();
		var scy = this._content.get_layout().get_spacingY();
		var _g = 0;
		var _g1 = this._content.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			cy += child.get_height() + scy;
			n++;
			if(n > 100) break;
		}
		if(n > 0) cy -= scy;
		return cy / n;
	}
	,getItem: function(index) {
		return js.Boot.__cast(this._content.get_children()[index] , haxe.ui.toolkit.core.interfaces.IItemRenderer);
	}
	,get_selectedItems: function() {
		return this._selectedItems;
	}
	,get_selectedIndex: function() {
		var index = -1;
		if(this._selectedItems != null && this._selectedItems.length > 0) index = Lambda.indexOf(this._content.get_children(),this._selectedItems[0]);
		return index;
	}
	,set_selectedIndex: function(value) {
		if(this._ready == false) return value;
		if(value < 0) {
			var _g = 0;
			var _g1 = this._selectedItems;
			while(_g < _g1.length) {
				var selectedItem = _g1[_g];
				++_g;
				selectedItem.set_state("normal");
			}
			this._selectedItems = new Array();
		} else if(this._content.getChildAt(value) != null) {
			var item;
			item = js.Boot.__cast(this._content.getChildAt(value) , haxe.ui.toolkit.core.interfaces.IItemRenderer);
			if(item != null) this.handleListSelection(item,null);
		}
		return value;
	}
	,get_content: function() {
		var c = null;
		if(this.get_numChildren() > 0) c = js.Boot.__cast(this.getChildAt(0) , haxe.ui.toolkit.core.Component);
		return c;
	}
	,get_itemRenderer: function() {
		return this._itemRenderer;
	}
	,set_itemRenderer: function(value) {
		this._itemRenderer = value;
		return value;
	}
	,get_allowSelection: function() {
		return this._allowSelection;
	}
	,set_allowSelection: function(value) {
		this._allowSelection = value;
		return value;
	}
	,get_dataSource: function() {
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		if(this._dataSource != null) {
			if(js.Boot.__instanceof(this._dataSource,haxe.ui.toolkit.core.interfaces.IEventDispatcher)) (js.Boot.__cast(this._dataSource , haxe.ui.toolkit.core.interfaces.IEventDispatcher)).removeEventListener(openfl.events.Event.CHANGE,$bind(this,this._onDataSourceChanged));
		}
		this._dataSource = value;
		if(js.Boot.__instanceof(this._dataSource,haxe.ui.toolkit.core.interfaces.IEventDispatcher)) (js.Boot.__cast(this._dataSource , haxe.ui.toolkit.core.interfaces.IEventDispatcher)).addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onDataSourceChanged));
		if(this._ready == true) this.syncUI();
		this._lastSelection = -1;
		return value;
	}
	,_onDataSourceChanged: function(event) {
		this.syncUI();
	}
	,syncUI: function() {
		var pos = 0;
		if(this._dataSource != null) {
			if(this.get_dataSource().moveFirst()) do {
				var dataHash = this.get_dataSource().hash();
				var data = this.get_dataSource().get();
				var item = null;
				if(this._content.getChildAt(pos) != null) item = js.Boot.__cast(this._content.getChildAt(pos) , haxe.ui.toolkit.core.interfaces.IItemRenderer);
				if(item == null) {
					this.addListViewItem(dataHash,data,pos);
					pos++;
				} else if(item.hash == dataHash) {
					item.set_data(data);
					pos++;
				} else {
					while(item != null && item.hash != dataHash) {
						this.removeListViewItem(pos);
						item = js.Boot.__cast(this._content.getChildAt(pos) , haxe.ui.toolkit.core.interfaces.IItemRenderer);
					}
					pos++;
				}
			} while(this.get_dataSource().moveNext());
		}
		var _g1 = pos;
		var _g = this._content.get_children().length;
		while(_g1 < _g) {
			var n = _g1++;
			this.removeListViewItem(n);
		}
		var n1 = 0;
		var _g2 = 0;
		var _g11 = this._content.get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			var item1;
			item1 = js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IItemRenderer);
			if(js.Boot.__instanceof(item1,haxe.ui.toolkit.core.StyleableDisplayObject) == true && js.Boot.__instanceof(item1,haxe.ui.toolkit.controls.Divider) == false) {
				var styleName;
				if(n1 % 2 == 0) styleName = "even"; else styleName = "odd";
				if(!this.isSelected(item1) && (js.Boot.__cast(item1 , haxe.ui.toolkit.core.StyleableDisplayObject)).get_styleName() != styleName) (js.Boot.__cast(item1 , haxe.ui.toolkit.core.StyleableDisplayObject)).set_styleName(styleName);
			}
			n1++;
		}
	}
	,addListViewItem: function(dataHash,data,index) {
		if(index == null) index = -1;
		if(data == null) return;
		var item = null;
		if(data.divider == true) {
			item = new haxe.ui.toolkit.controls.Divider();
			item.hash = dataHash;
			item.set_data(data);
		} else {
			item = this.createRendererInstance();
			item.set_autoSize(true);
			item.hash = dataHash;
			item.set_percentWidth(100);
			item.set_data(data);
			if(js.Boot.__instanceof(item,haxe.ui.toolkit.core.StyleableDisplayObject)) {
				var styleName;
				if(this._content.get_numChildren() % 2 == 0) styleName = "even"; else styleName = "odd";
				(js.Boot.__cast(item , haxe.ui.toolkit.core.StyleableDisplayObject)).set_styleName(styleName);
			}
		}
		if(item != null) {
			if(index == -1) this._content.addChild(item); else this._content.addChildAt(item,index);
		}
		this.invalidate(256);
		if(data.divider == null || data.divider == false) {
			(js.Boot.__cast(item , haxe.ui.toolkit.core.interfaces.IDisplayObject)).addEventListener("haxeui_" + "mouseOver",$bind(this,this._onListItemMouseOver));
			(js.Boot.__cast(item , haxe.ui.toolkit.core.interfaces.IDisplayObject)).addEventListener("haxeui_" + "mouseOut",$bind(this,this._onListItemMouseOut));
			(js.Boot.__cast(item , haxe.ui.toolkit.core.interfaces.IDisplayObject)).addEventListener("haxeui_" + "click",$bind(this,this._onListItemClick));
		}
	}
	,removeListViewItem: function(index) {
		var item;
		item = js.Boot.__cast(this._content.getChildAt(index) , haxe.ui.toolkit.core.interfaces.IItemRenderer);
		var sIndex = Lambda.indexOf(this._selectedItems,item);
		if(sIndex != -1) HxOverrides.remove(this._selectedItems,item);
		if(item != null) {
			this._content.removeChild(item);
			this.invalidate(256);
		}
	}
	,_onListItemMouseOver: function(event) {
		if(this._allowSelection == false) return;
		if(Std["is"](event.get_component(),haxe.ui.toolkit.core.interfaces.IStateComponent)) (js.Boot.__cast(event.get_component() , haxe.ui.toolkit.core.interfaces.IStateComponent)).set_state("over");
	}
	,_onListItemMouseOut: function(event) {
		if(this._allowSelection == false) return;
		if(Std["is"](event.get_component(),haxe.ui.toolkit.core.interfaces.IStateComponent)) {
			var item = event.get_component();
			if(this.isSelected(item)) (js.Boot.__cast(item , haxe.ui.toolkit.core.interfaces.IStateComponent)).set_state("selected"); else (js.Boot.__cast(item , haxe.ui.toolkit.core.interfaces.IStateComponent)).set_state("normal");
		}
	}
	,_onListItemClick: function(event) {
		if(this._allowSelection == false) return;
		if(Std["is"](event.get_component(),haxe.ui.toolkit.core.interfaces.IItemRenderer)) {
			var item = event.get_component();
			if(item.allowSelection(event.stageX,event.stageY)) {
				this.handleListSelection(item,event);
				this.handleClick(item);
			}
		}
	}
	,handleListSelection: function(item,event,raiseEvent) {
		if(raiseEvent == null) raiseEvent = true;
		var shiftPressed = false;
		var ctrlPressed = false;
		if(event != null && js.Boot.__instanceof(event,openfl.events.MouseEvent)) {
			var mouseEvent;
			mouseEvent = js.Boot.__cast(event , openfl.events.MouseEvent);
			shiftPressed = mouseEvent.shiftKey;
			ctrlPressed = mouseEvent.ctrlKey;
		}
		if(ctrlPressed == true) {
		} else if(shiftPressed == true) {
		} else {
			var _g = 0;
			var _g1 = this._selectedItems;
			while(_g < _g1.length) {
				var selectedItem = _g1[_g];
				++_g;
				if(selectedItem != item) selectedItem.set_state("normal");
			}
			this._selectedItems = new Array();
		}
		if(this.isSelected(item)) {
			HxOverrides.remove(this._selectedItems,item);
			item.set_state("over");
		} else {
			this._selectedItems.push(item);
			item.set_state("selected");
		}
		this.ensureVisible(item);
		if(raiseEvent == true) {
			if(this.get_selectedIndex() != -1) {
				var item1 = this._content.getChildAt(this.get_selectedIndex());
				if(item1 != null) item1.dispatchProxyEvent("haxeui_" + "change",event);
			}
		}
	}
	,handleClick: function(item) {
		var index = Lambda.indexOf(this._content.get_children(),item);
		if(this._lastSelection == index) {
			var event = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "doubleClick");
			this.dispatchEvent(event);
			this._lastSelection = -1;
		} else this._lastSelection = index;
	}
	,isSelected: function(item) {
		return Lambda.indexOf(this._selectedItems,item) != -1;
	}
	,getItemIndex: function(item) {
		var index = -1;
		if(item != null) index = Lambda.indexOf(this._content.get_children(),item);
		return index;
	}
	,setSelectedIndexNoEvent: function(value) {
		if(this._ready == false) return value;
		if(this._content.getChildAt(value) != null) {
			var item;
			item = js.Boot.__cast(this._content.getChildAt(value) , haxe.ui.toolkit.core.interfaces.IItemRenderer);
			if(item != null) this.handleListSelection(item,null,false);
		}
		return value;
	}
	,ensureVisible: function(item) {
		if(item == null) return;
		var vpos = 0;
		if(this._vscroll != null) vpos = this._vscroll.get_pos();
		if(item.get_y() + item.get_height() > vpos + this._container.get_clipHeight()) this._vscroll.set_pos(item.get_y() + item.get_height() - this._container.get_clipHeight()); else if(item.get_y() < vpos) this._vscroll.set_pos(item.get_y());
	}
	,createRendererInstance: function() {
		var r = null;
		if(this._itemRenderer == null) return null;
		if(js.Boot.__instanceof(this._itemRenderer,haxe.ui.toolkit.core.interfaces.IItemRenderer)) r = (js.Boot.__cast(this._itemRenderer , haxe.ui.toolkit.core.interfaces.IItemRenderer)).clone(); else if(js.Boot.__instanceof(this._itemRenderer,Class)) {
			var cls;
			cls = js.Boot.__cast(this._itemRenderer , Class);
			r = Type.createInstance(cls,[]);
		} else if(typeof(this._itemRenderer) == "string") {
			var classString;
			classString = js.Boot.__cast(this._itemRenderer , String);
			var cls1 = Type.resolveClass(classString);
			r = Type.createInstance(cls1,[]);
		}
		if(r != null) r.eventDispatcher = this;
		r.set_useHandCursor(this._allowSelection);
		return r;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.ScrollView.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ListView();
	}
	,set_onComponentEvent: function(value) {
		this.onComponentEvent = value;
		this.addEventListener("haxeui_" + "componentEvent",$bind(this,this._handleEvent));
		return value;
	}
	,__class__: haxe.ui.toolkit.containers.ListView
	,__properties__: $extend(haxe.ui.toolkit.containers.ScrollView.prototype.__properties__,{set_onComponentEvent:"set_onComponentEvent",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource",set_allowSelection:"set_allowSelection",get_allowSelection:"get_allowSelection",set_itemRenderer:"set_itemRenderer",get_itemRenderer:"get_itemRenderer",get_content:"get_content",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",get_selectedItems:"get_selectedItems",get_itemHeight:"get_itemHeight",get_listSize:"get_listSize"})
});
haxe.ui.toolkit.containers.MenuBar = function() {
	haxe.ui.toolkit.containers.HBox.call(this);
	this._autoSize = false;
};
$hxClasses["haxe.ui.toolkit.containers.MenuBar"] = haxe.ui.toolkit.containers.MenuBar;
haxe.ui.toolkit.containers.MenuBar.__name__ = ["haxe","ui","toolkit","containers","MenuBar"];
haxe.ui.toolkit.containers.MenuBar.__super__ = haxe.ui.toolkit.containers.HBox;
haxe.ui.toolkit.containers.MenuBar.prototype = $extend(haxe.ui.toolkit.containers.HBox.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.HBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.MenuBar();
	}
	,__class__: haxe.ui.toolkit.containers.MenuBar
});
haxe.ui.toolkit.core.interfaces.ILayout = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.ILayout"] = haxe.ui.toolkit.core.interfaces.ILayout;
haxe.ui.toolkit.core.interfaces.ILayout.__name__ = ["haxe","ui","toolkit","core","interfaces","ILayout"];
haxe.ui.toolkit.core.interfaces.ILayout.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.core.interfaces.ILayout.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.ILayout
};
haxe.ui.toolkit.layout = {};
haxe.ui.toolkit.layout.Layout = function() {
	this._spacingY = 0;
	this._spacingX = 0;
	this._padding = new openfl.geom.Rectangle();
};
$hxClasses["haxe.ui.toolkit.layout.Layout"] = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.Layout.__name__ = ["haxe","ui","toolkit","layout","Layout"];
haxe.ui.toolkit.layout.Layout.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.ILayout];
haxe.ui.toolkit.layout.Layout.prototype = {
	get_container: function() {
		return this._container;
	}
	,set_container: function(value) {
		this._container = value;
		this.refresh();
		return value;
	}
	,get_padding: function() {
		return this._padding;
	}
	,set_padding: function(value) {
		this._padding = value;
		this.refresh();
		return value;
	}
	,get_spacingX: function() {
		return this._spacingX;
	}
	,set_spacingX: function(value) {
		this._spacingX = value;
		this.refresh();
		return value;
	}
	,get_spacingY: function() {
		return this._spacingY;
	}
	,set_spacingY: function(value) {
		this._spacingY = value;
		this.refresh();
		return value;
	}
	,refresh: function() {
		if(this.get_container() != null && this.get_container().get_ready()) {
			this.resizeChildren();
			this.repositionChildren();
		}
	}
	,resizeChildren: function() {
	}
	,repositionChildren: function() {
	}
	,autoSize: function(totalWidth,totalHeight) {
		if(this.get_container().get_autoSize()) {
			if(totalWidth > 0 && totalWidth != this.get_innerWidth() && this.get_container().get_percentWidth() == -1) this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
			if(totalHeight > 0 && totalHeight != this.get_innerHeight() && this.get_container().get_percentHeight() == -1) this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom()));
		} else if(totalWidth > 0 && this.get_container().get_height() == 0 && this.get_container().get_percentWidth() > -1) {
			this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
			this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom()));
		} else if(totalHeight > 0 && this.get_container().get_width() == 0 && this.get_container().get_percentHeight() > -1) {
			this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
			this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom()));
		} else if(totalWidth > 0 && this.get_container().get_height() == 0) this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom())); else if(totalHeight > 0 && this.get_container().get_width() == 0) this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
	}
	,get_innerWidth: function() {
		if(this.get_container() == null) return 0;
		var icx = this.get_container().get_width() - (this.get_padding().get_left() + this.get_padding().get_right());
		return icx;
	}
	,get_innerHeight: function() {
		if(this.get_container() == null) return 0;
		var icy = this.get_container().get_height() - (this.get_padding().get_top() + this.get_padding().get_bottom());
		return icy;
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		return ucy;
	}
	,clone: function() {
		var c = this.self();
		c.set_padding(this.get_padding());
		c.set_spacingX(this.get_spacingX());
		c.set_spacingY(this.get_spacingY());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.Layout();
	}
	,__class__: haxe.ui.toolkit.layout.Layout
	,__properties__: {get_usableHeight:"get_usableHeight",get_usableWidth:"get_usableWidth",get_innerHeight:"get_innerHeight",get_innerWidth:"get_innerWidth",set_spacingY:"set_spacingY",get_spacingY:"get_spacingY",set_spacingX:"set_spacingX",get_spacingX:"get_spacingX",set_padding:"set_padding",get_padding:"get_padding",set_container:"set_container",get_container:"get_container"}
};
haxe.ui.toolkit.layout.DefaultLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.DefaultLayout"] = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.layout.DefaultLayout.__name__ = ["haxe","ui","toolkit","layout","DefaultLayout"];
haxe.ui.toolkit.layout.DefaultLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.DefaultLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			if(child.get_width() > totalWidth) totalWidth = child.get_width();
			if(child.get_height() > totalHeight) totalHeight = child.get_height();
		}
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			child.set_x(xpos);
			child.set_y(ypos);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.DefaultLayout();
	}
	,__class__: haxe.ui.toolkit.layout.DefaultLayout
});
haxe.ui.toolkit.containers.ScrollViewLayout = function() {
	this._inlineScrolls = false;
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ScrollViewLayout"] = haxe.ui.toolkit.containers.ScrollViewLayout;
haxe.ui.toolkit.containers.ScrollViewLayout.__name__ = ["haxe","ui","toolkit","containers","ScrollViewLayout"];
haxe.ui.toolkit.containers.ScrollViewLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.containers.ScrollViewLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var hscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.HScroll);
		var vscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.VScroll);
		if(hscroll != null) hscroll.set_y(this.get_container().get_height() - hscroll.get_height() - this.get_padding().get_bottom());
		if(vscroll != null) vscroll.set_x(this.get_container().get_width() - vscroll.get_width() - this.get_padding().get_right());
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var vscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.VScroll);
		if(vscroll != null && vscroll.get_visible() == true && this._inlineScrolls == false) ucx -= vscroll.get_width() + this.get_spacingX();
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var hscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.HScroll);
		if(hscroll != null && hscroll.get_visible() && this._inlineScrolls == false) ucy -= hscroll.get_height() + this.get_spacingY();
		return ucy;
	}
	,get_inlineScrolls: function() {
		return this._inlineScrolls;
	}
	,set_inlineScrolls: function(value) {
		this._inlineScrolls = value;
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ScrollViewLayout();
	}
	,__class__: haxe.ui.toolkit.containers.ScrollViewLayout
	,__properties__: $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype.__properties__,{set_inlineScrolls:"set_inlineScrolls",get_inlineScrolls:"get_inlineScrolls"})
});
haxe.ui.toolkit.containers.SpriteContainer = function(childSprite) {
	haxe.ui.toolkit.core.Component.call(this);
	this.set_childSprite(childSprite);
	this.set_autoSize(true);
};
$hxClasses["haxe.ui.toolkit.containers.SpriteContainer"] = haxe.ui.toolkit.containers.SpriteContainer;
haxe.ui.toolkit.containers.SpriteContainer.__name__ = ["haxe","ui","toolkit","containers","SpriteContainer"];
haxe.ui.toolkit.containers.SpriteContainer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.SpriteContainer.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.containers.SpriteContainer.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		if(this._childSprite != null) {
			if(this.get_autoSize() == true) {
				this._childSprite.set_x(this.get_layout().get_padding().get_left());
				this._childSprite.set_y(this.get_layout().get_padding().get_top());
				this.set_width(this._childSprite.get_width() + (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right()));
				this.set_height(this._childSprite.get_height() + (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom()));
			}
		}
	}
	,dispose: function() {
		if(this._childSprite != null) this.get_sprite().removeChild(this._childSprite);
		haxe.ui.toolkit.core.Component.prototype.dispose.call(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		haxe.ui.toolkit.core.Component.prototype.invalidate.call(this,type,recursive);
		if((type & 256) == 256) {
			if(this._stretch == true && this._childSprite != null) {
				this._childSprite.set_x(this.get_layout().get_padding().get_left());
				this._childSprite.set_y(this.get_layout().get_padding().get_top());
				this._childSprite.set_width(this.get_width() - (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right()));
				this._childSprite.set_height(this.get_height() - (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom()));
			}
		}
	}
	,get_childSprite: function() {
		return this._childSprite;
	}
	,set_childSprite: function(value) {
		if(value == null && this._childSprite != null) {
			this.get_sprite().removeChild(this._childSprite);
			this._childSprite = null;
		}
		if(value != this._childSprite) {
			if(this._childSprite != null) this.get_sprite().removeChild(this._childSprite);
			this._childSprite = value;
			this.get_sprite().addChild(this._childSprite);
			if(this.get_autoSize() == true && this.get_ready()) {
				this._childSprite.set_x(this.get_layout().get_padding().get_left());
				this._childSprite.set_y(this.get_layout().get_padding().get_top());
				this.set_width(this._childSprite.get_width() + (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right()));
				this.set_height(this._childSprite.get_height() + (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom()));
			}
		}
		return value;
	}
	,get_spriteClass: function() {
		return this._spriteClass;
	}
	,set_spriteClass: function(value) {
		if(value == null) {
			this.set_childSprite(null);
			this._spriteClass = null;
			return value;
		}
		if(value != this._spriteClass) {
			var cls = Type.resolveClass(value);
			if(cls != null) {
				var inst = Type.createInstance(cls,[]);
				if(inst != null && js.Boot.__instanceof(inst,openfl.display.Sprite)) {
					this.set_childSprite(inst);
					this._spriteClass = value;
				}
			}
		}
		return value;
	}
	,get_stretch: function() {
		return this._stretch;
	}
	,set_stretch: function(value) {
		if(this._stretch == value) return value;
		this._autoSize = !value;
		this._stretch = value;
		this.invalidate(256);
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		c.set_childSprite(this.get_childSprite());
		c.set_spriteClass(this.get_spriteClass());
		c.set_stretch(this.get_stretch());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.SpriteContainer();
	}
	,__class__: haxe.ui.toolkit.containers.SpriteContainer
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_stretch:"set_stretch",get_stretch:"get_stretch",set_spriteClass:"set_spriteClass",get_spriteClass:"get_spriteClass",set_childSprite:"set_childSprite",get_childSprite:"get_childSprite"})
});
haxe.ui.toolkit.containers.Stack = function() {
	this._history = new List();
	this._selectedIndex = -1;
	haxe.ui.toolkit.core.Component.call(this);
	this._clipContent = true;
};
$hxClasses["haxe.ui.toolkit.containers.Stack"] = haxe.ui.toolkit.containers.Stack;
haxe.ui.toolkit.containers.Stack.__name__ = ["haxe","ui","toolkit","containers","Stack"];
haxe.ui.toolkit.containers.Stack.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.containers.Stack.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	addChild: function(child) {
		var r = haxe.ui.toolkit.core.Component.prototype.addChild.call(this,child);
		r.set_visible(this.get_children().length - 1 == this._selectedIndex);
		r.get_sprite().set_alpha(1);
		return r;
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		if(value != this._selectedIndex) {
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.containers.Stack);
			var _g1 = 0;
			var _g = this.get_children().length;
			while(_g1 < _g) {
				var n = _g1++;
				var item = [this.get_children()[n]];
				if(n == value) {
					if(transition == "slide") {
						if(value < this._selectedIndex) {
							item[0].get_sprite().set_alpha(1);
							item[0].set_visible(true);
							item[0].set_x(-item[0].get_width());
							motion.Actuate.tween(item[0],.2,{ x : this.get_layout().get_padding().get_left()},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function() {
								return function() {
								};
							})());
						} else {
							item[0].get_sprite().set_alpha(1);
							item[0].set_visible(true);
							item[0].set_x(this.get_width());
							motion.Actuate.tween(item[0],.2,{ x : this.get_layout().get_padding().get_left()},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function() {
								return function() {
								};
							})());
						}
					} else if(transition == "fade") {
						item[0].set_x(this.get_layout().get_padding().get_left());
						item[0].get_sprite().set_alpha(0);
						item[0].set_visible(true);
						motion.Actuate.tween(item[0].get_sprite(),.2,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function() {
							return function() {
							};
						})());
					} else {
						item[0].set_x(this.get_layout().get_padding().get_left());
						item[0].get_sprite().set_alpha(1);
						item[0].set_visible(true);
					}
				} else if(n == this._selectedIndex) {
					if(transition == "slide") {
						item[0].get_sprite().set_alpha(1);
						if(value < this._selectedIndex) motion.Actuate.tween(item[0],.2,{ x : this.get_width()},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function(item) {
							return function() {
								item[0].set_visible(false);
							};
						})(item)); else motion.Actuate.tween(item[0],.2,{ x : -item[0].get_width()},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function(item) {
							return function() {
								item[0].set_visible(false);
							};
						})(item));
					} else if(transition == "fade") {
						item[0].set_x(this.get_layout().get_padding().get_left());
						motion.Actuate.tween(item[0].get_sprite(),.2,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function(item) {
							return function() {
								item[0].set_visible(false);
							};
						})(item));
					} else {
						item[0].set_x(this.get_layout().get_padding().get_left());
						item[0].get_sprite().set_alpha(1);
						item[0].set_visible(false);
					}
				}
			}
			this._history.push(this._selectedIndex);
			this._selectedIndex = value;
			var event = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(event);
		}
		return value;
	}
	,back: function() {
		var last = this._history.pop();
		if(last == null) return;
		this.set_selectedIndex(last);
		this._history.pop();
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Stack();
	}
	,__class__: haxe.ui.toolkit.containers.Stack
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
haxe.ui.toolkit.containers.TabView = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this._layout = new haxe.ui.toolkit.layout.VerticalLayout();
	this._tabs = new haxe.ui.toolkit.controls.TabBar();
	this._tabs.set_percentWidth(100);
	this._tabs.addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onTabsChange));
	this._tabs.addEventListener("haxeui_" + "glyphClick",$bind(this,this._onGlyphClick));
	this.addChild(this._tabs);
	this._stack = new haxe.ui.toolkit.containers.Stack();
	this._stack.set_percentWidth(this._stack.set_percentHeight(100));
	this._stack.set_styleName("page");
	this.addChild(this._stack);
};
$hxClasses["haxe.ui.toolkit.containers.TabView"] = haxe.ui.toolkit.containers.TabView;
haxe.ui.toolkit.containers.TabView.__name__ = ["haxe","ui","toolkit","containers","TabView"];
haxe.ui.toolkit.containers.TabView.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.containers.TabView.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	_onTabsChange: function(event) {
		this._stack.set_selectedIndex(this._tabs.get_selectedIndex());
		var event1 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change");
		this.dispatchEvent(event1);
	}
	,_onGlyphClick: function(event) {
		var newEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "glyphClick");
		newEvent.data = event.data;
		this.dispatchEvent(newEvent);
	}
	,initialize: function() {
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this.set_selectedIndex(0);
	}
	,addChild: function(child) {
		var r = null;
		if(child == this._tabs || child == this._stack) r = haxe.ui.toolkit.core.Component.prototype.addChild.call(this,child); else {
			r = this._stack.addChild(child);
			var label = "";
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.Component)) label = (js.Boot.__cast(child , haxe.ui.toolkit.core.Component)).get_text();
			this._tabs.addTab(label).set_styleName(child.get_id());
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(child == this._tabs || child == this._stack) r = haxe.ui.toolkit.core.Component.prototype.addChildAt.call(this,child,index); else {
			r = this._stack.addChildAt(child,index);
			var label = "";
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.Component)) label = (js.Boot.__cast(child , haxe.ui.toolkit.core.Component)).get_text();
			this._tabs.addTab(label).set_styleName(child.get_id());
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(child == this._tabs || child == this._stack) r = haxe.ui.toolkit.core.Component.prototype.removeChild.call(this,child,dispose); else r = this._stack.removeChild(child,dispose);
		return r;
	}
	,get_selectedIndex: function() {
		return this._tabs.get_selectedIndex();
	}
	,set_selectedIndex: function(value) {
		this._tabs.set_selectedIndex(value);
		return value;
	}
	,get_pageCount: function() {
		return this._stack.get_numChildren();
	}
	,get_selectedPage: function() {
		return this.getTabPage(this.get_selectedIndex());
	}
	,setTabText: function(index,text) {
		this._tabs.setTabText(index,text);
	}
	,removeTab: function(index) {
		this._stack.removeChildAt(index);
		this._tabs.removeTab(index);
	}
	,getTabButton: function(index) {
		return this._tabs.getTabButton(index);
	}
	,getTabPage: function(index) {
		return this._stack.getChildAt(index);
	}
	,removeAllTabs: function() {
		this._stack.removeAllChildren();
		this._tabs.removeAllTabs();
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.TabView();
	}
	,__class__: haxe.ui.toolkit.containers.TabView
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{get_selectedPage:"get_selectedPage",get_pageCount:"get_pageCount",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
haxe.ui.toolkit.containers.TableView = function() {
	this._lastSelection = -1;
	haxe.ui.toolkit.core.Component.call(this);
	this._columnDefs = new haxe.ui.toolkit.containers.TableViewColumnDefs();
	this.set_dataSource(new haxe.ui.toolkit.data.ArrayDataSource());
	this._scrollView = new haxe.ui.toolkit.containers.ScrollView();
	this._scrollView.get_style().set_borderSize(0);
	this._selectedItems = new Array();
	this._scrollView.set_percentWidth(100);
	this._scrollView.set_percentHeight(100);
	this._scrollContent = new haxe.ui.toolkit.containers.VBox();
	this._scrollContent.set_id("tableContent");
	this._scrollContent.set_autoSize(true);
	this._scrollView.addChild(this._scrollContent);
};
$hxClasses["haxe.ui.toolkit.containers.TableView"] = haxe.ui.toolkit.containers.TableView;
haxe.ui.toolkit.containers.TableView.__name__ = ["haxe","ui","toolkit","containers","TableView"];
haxe.ui.toolkit.containers.TableView.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDataComponent];
haxe.ui.toolkit.containers.TableView.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.containers.TableView.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this.addChild(this._scrollView);
		if(this._dataSource == null) this.set_dataSource(new haxe.ui.toolkit.data.ArrayDataSource());
		this._dataSource.open();
		this.syncUI();
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		haxe.ui.toolkit.core.Component.prototype.invalidate.call(this,type,recursive);
		if(this._ready && (type & 256) == 256) {
			if(this._scrollView.get_layout().get_usableWidth() > 0) this.resizeColumns();
		}
	}
	,get_dataSource: function() {
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		if(this._dataSource != null) {
			if(js.Boot.__instanceof(this._dataSource,openfl.events.IEventDispatcher)) (js.Boot.__cast(this._dataSource , openfl.events.IEventDispatcher)).removeEventListener(openfl.events.Event.CHANGE,$bind(this,this._onDataSourceChanged));
		}
		this._dataSource = value;
		if(js.Boot.__instanceof(this._dataSource,openfl.events.IEventDispatcher)) (js.Boot.__cast(this._dataSource , openfl.events.IEventDispatcher)).addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onDataSourceChanged));
		if(this._ready == true) this.syncUI();
		return value;
	}
	,_onDataSourceChanged: function(event) {
		this.syncUI();
	}
	,get_columns: function() {
		return this._columnDefs;
	}
	,set_columns: function(value) {
		this._columnDefs = value;
		return value;
	}
	,syncUI: function() {
		var pos = 0;
		if(this._dataSource != null) {
			if(this.get_dataSource().moveFirst()) do {
				var dataHash = this.get_dataSource().hash();
				var data = this.get_dataSource().get();
				var item = null;
				if(this._scrollContent.getChildAt(pos) != null) item = js.Boot.__cast(this._scrollContent.getChildAt(pos) , haxe.ui.toolkit.containers.TableViewRow);
				if(item == null) {
					this.addTableRow(dataHash,data,pos);
					pos++;
				} else if(item.hash == dataHash) pos++; else {
					while(item != null && item.hash != dataHash) item = js.Boot.__cast(this._scrollContent.getChildAt(pos) , haxe.ui.toolkit.containers.TableViewRow);
					pos++;
				}
			} while(this.get_dataSource().moveNext());
		}
	}
	,addTableRow: function(dataHash,data,index) {
		if(index == null) index = -1;
		if(data == null) return;
		var _g = 0;
		var _g1 = Reflect.fields(data);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f != "__get_id__") {
				if(this._columnDefs.has(f) == false) {
					this._columnDefs.add(f);
					haxe.Log.trace(f,{ fileName : "TableView.hx", lineNumber : 162, className : "haxe.ui.toolkit.containers.TableView", methodName : "addTableRow"});
				}
			}
		}
		var item = new haxe.ui.toolkit.containers.TableViewRow(this);
		item.set_autoSize(true);
		item.set_data(data);
		item.hash = dataHash;
		var id;
		if(this._scrollContent.get_numChildren() % 2 == 0) id = "even"; else id = "odd";
		item.set_id(id);
		if(index == -1) this._scrollContent.addChild(item); else this._scrollContent.addChildAt(item,index);
		this._scrollView.invalidate(256);
	}
	,resizeColumns: function() {
		if(this._scrollContent.get_numChildren() == 0) return;
		var sx = (js.Boot.__cast(this._scrollContent.getChildAt(0) , haxe.ui.toolkit.containers.TableViewRow)).get_layout().get_spacingX();
		var cols = this._columnDefs.iterator();
		var totalWidth = 0;
		var _g = 0;
		while(_g < cols.length) {
			var c = cols[_g];
			++_g;
			totalWidth += c.calculatedWidth + sx;
		}
		if(totalWidth < this._scrollView.get_layout().get_usableWidth()) {
			var diff = this._scrollView.get_layout().get_usableWidth() - totalWidth;
			var newWidth = cols[cols.length - 1].calculatedWidth + diff;
			var _g1 = 0;
			var _g11 = this._scrollContent.get_children();
			while(_g1 < _g11.length) {
				var child = _g11[_g1];
				++_g1;
				var temp;
				temp = js.Boot.__cast(child , haxe.ui.toolkit.containers.TableViewRow);
				temp.getChildAt(temp.get_numChildren() - 1).set_width(newWidth);
			}
		}
	}
	,handleListSelection: function(item,event,raiseEvent) {
		if(raiseEvent == null) raiseEvent = true;
		var shiftPressed = false;
		var ctrlPressed = false;
		if(event != null && js.Boot.__instanceof(event,openfl.events.MouseEvent)) {
			var mouseEvent;
			mouseEvent = js.Boot.__cast(event , openfl.events.MouseEvent);
			shiftPressed = mouseEvent.shiftKey;
			ctrlPressed = mouseEvent.ctrlKey;
		}
		if(ctrlPressed == true) {
		} else if(shiftPressed == true) {
		} else {
			var _g = 0;
			var _g1 = this._selectedItems;
			while(_g < _g1.length) {
				var selectedItem = _g1[_g];
				++_g;
				if(selectedItem != item) selectedItem.set_state("normal");
			}
			this._selectedItems = new Array();
		}
		if(this.isSelected(item)) {
			HxOverrides.remove(this._selectedItems,item);
			item.set_state("over");
		} else {
			this._selectedItems.push(item);
			item.set_state("selected");
		}
		if(raiseEvent == true) {
			var event1 = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(event1);
		}
	}
	,handleClick: function(item,event) {
		var index = Lambda.indexOf(this._scrollContent.get_children(),item);
		if(this._lastSelection == index) {
			var event1 = new openfl.events.MouseEvent(openfl.events.MouseEvent.DOUBLE_CLICK);
			this.dispatchEvent(event1);
			this._lastSelection = -1;
		} else this._lastSelection = index;
	}
	,isSelected: function(item) {
		return Lambda.indexOf(this._selectedItems,item) != -1;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.TableView();
	}
	,__class__: haxe.ui.toolkit.containers.TableView
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"})
});
haxe.ui.toolkit.containers.TableViewColumnDefs = function() {
	this._columns = new Array();
};
$hxClasses["haxe.ui.toolkit.containers.TableViewColumnDefs"] = haxe.ui.toolkit.containers.TableViewColumnDefs;
haxe.ui.toolkit.containers.TableViewColumnDefs.__name__ = ["haxe","ui","toolkit","containers","TableViewColumnDefs"];
haxe.ui.toolkit.containers.TableViewColumnDefs.prototype = {
	add: function(id,width,title) {
		if(title == null) title = "";
		if(width == null) width = 0;
		if(this.has(id) == false) {
			var c = new haxe.ui.toolkit.containers.TableViewColumnDef();
			c.id = id;
			c.width = width;
			this._columns.push(c);
		}
	}
	,has: function(id) {
		var b = false;
		var _g = 0;
		var _g1 = this._columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.id == id) b = true;
		}
		return b;
	}
	,iterator: function() {
		return this._columns;
	}
	,findColumn: function(id) {
		var c = null;
		var _g = 0;
		var _g1 = this._columns;
		while(_g < _g1.length) {
			var test = _g1[_g];
			++_g;
			if(test.id == id) {
				c = test;
				break;
			}
		}
		return c;
	}
	,__class__: haxe.ui.toolkit.containers.TableViewColumnDefs
};
haxe.ui.toolkit.containers.TableViewColumnDef = function() {
	this.calculatedWidth = 0;
	this.width = 0;
	this.type = "text";
};
$hxClasses["haxe.ui.toolkit.containers.TableViewColumnDef"] = haxe.ui.toolkit.containers.TableViewColumnDef;
haxe.ui.toolkit.containers.TableViewColumnDef.__name__ = ["haxe","ui","toolkit","containers","TableViewColumnDef"];
haxe.ui.toolkit.containers.TableViewColumnDef.prototype = {
	__class__: haxe.ui.toolkit.containers.TableViewColumnDef
};
haxe.ui.toolkit.containers.TableViewRow = function(parentTable) {
	haxe.ui.toolkit.containers.HBox.call(this);
	this._states = new Array();
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this.set_state("normal");
	this._parentTable = parentTable;
};
$hxClasses["haxe.ui.toolkit.containers.TableViewRow"] = haxe.ui.toolkit.containers.TableViewRow;
haxe.ui.toolkit.containers.TableViewRow.__name__ = ["haxe","ui","toolkit","containers","TableViewRow"];
haxe.ui.toolkit.containers.TableViewRow.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IStateComponent];
haxe.ui.toolkit.containers.TableViewRow.__super__ = haxe.ui.toolkit.containers.HBox;
haxe.ui.toolkit.containers.TableViewRow.prototype = $extend(haxe.ui.toolkit.containers.HBox.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.HBox.prototype.initialize.call(this);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this._onMouseOver));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this._onMouseOut));
		this.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this._onMouseClick));
	}
	,_onMouseOver: function(event) {
		this.set_state("over");
	}
	,_onMouseOut: function(event) {
		if(this._parentTable.isSelected(this)) this.set_state("selected"); else this.set_state("normal");
	}
	,_onMouseClick: function(event) {
		this._parentTable.handleListSelection(this,event);
		this._parentTable.handleClick(this,event);
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		var _g = 0;
		var _g1 = this._parentTable.get_columns().iterator();
		while(_g < _g1.length) {
			var colDef = [_g1[_g]];
			++_g;
			if(Object.prototype.hasOwnProperty.call(value,colDef[0].id)) {
				var c = [null];
				var colValue = Reflect.field(value,colDef[0].id);
				var type = "text";
				if(typeof(colValue) == "string") c[0] = this.createColumnComponent(colValue,"text"); else {
					if(Object.prototype.hasOwnProperty.call(colValue,"type")) type = js.Boot.__cast(Reflect.field(colValue,"type") , String);
					var componentValue = null;
					if(Object.prototype.hasOwnProperty.call(colValue,"value")) componentValue = Reflect.field(colValue,"value");
					c[0] = this.createColumnComponent(componentValue,type);
				}
				if(c[0] != null) {
					if(type == "list") {
						if(Object.prototype.hasOwnProperty.call(colValue,"dataSource")) {
							var controlDataSource = Reflect.field(colValue,"dataSource");
							var ds = null;
							if((controlDataSource instanceof Array) && controlDataSource.__enum__ == null) {
								ds = new haxe.ui.toolkit.data.ArrayDataSource();
								var _g2 = 0;
								var _g3;
								_g3 = js.Boot.__cast(controlDataSource , Array);
								while(_g2 < _g3.length) {
									var o = _g3[_g2];
									++_g2;
									ds.add(o);
								}
							}
							(js.Boot.__cast(c[0] , haxe.ui.toolkit.controls.selection.ListSelector)).set_dataSource(ds);
						}
					}
					c[0].set_autoSize(true);
					this.addChild(c[0]);
					c[0].addEventListener(openfl.events.Event.ADDED_TO_STAGE,(function(c,colDef) {
						return function(e) {
							if(colDef[0].width <= 0) {
								if(c[0].get_width() > colDef[0].calculatedWidth) colDef[0].calculatedWidth = c[0].get_width(); else c[0].set_width(colDef[0].calculatedWidth);
							} else {
								c[0].set_width(colDef[0].width);
								colDef[0].calculatedWidth = colDef[0].width;
							}
						};
					})(c,colDef));
				}
			}
		}
		return value;
	}
	,createColumnComponent: function(value,type) {
		var c = null;
		if(value == null) {
			c = new haxe.ui.toolkit.controls.Spacer();
			return c;
		}
		switch(type) {
		case "text":
			c = new haxe.ui.toolkit.controls.Text();
			c.set_autoSize(false);
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.Text)).set_text(js.Boot.__cast(value , String));
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.Text)).addStates(this.get_states());
			break;
		case "button":
			c = new haxe.ui.toolkit.controls.Button();
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.Button)).set_text(js.Boot.__cast(value , String));
			break;
		case "slider":
			c = new haxe.ui.toolkit.controls.HSlider();
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.HSlider)).set_pos(Std.parseInt(value));
			break;
		case "progress":
			c = new haxe.ui.toolkit.controls.HProgress();
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.HProgress)).set_pos(Std.parseInt(value));
			break;
		case "list":
			c = new haxe.ui.toolkit.controls.selection.ListSelector();
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.selection.ListSelector)).set_text(js.Boot.__cast(value , String));
			break;
		default:
			c = new haxe.ui.toolkit.controls.Spacer();
		}
		return c;
	}
	,buildStyles: function() {
		var _g = 0;
		var _g1 = this.get_states();
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var stateStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this,s);
			if(stateStyle != null) this.storeStyle(s,stateStyle);
		}
	}
	,addStates: function(stateNames) {
		var _g = 0;
		while(_g < stateNames.length) {
			var stateName = stateNames[_g];
			++_g;
			this._states.push(stateName);
		}
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
		}
	}
	,get_state: function() {
		return this._state;
	}
	,set_state: function(value) {
		if(this._state != value) {
			this._state = value;
			if(this.retrieveStyle(this._state) != null) this.set_baseStyle(this.retrieveStyle(this._state)); else this.invalidate(4096);
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(js.Boot.__instanceof(c,haxe.ui.toolkit.controls.Text)) {
					var cx = (js.Boot.__cast(c , haxe.ui.toolkit.controls.Text)).get_width();
					(js.Boot.__cast(c , haxe.ui.toolkit.controls.Text)).set_state(value);
					(js.Boot.__cast(c , haxe.ui.toolkit.controls.Text)).set_width(cx);
				}
			}
		}
		return value;
	}
	,get_states: function() {
		return ["normal","over","selected"];
	}
	,hasState: function(state) {
		if(this.get_states() == null) return false;
		return Lambda.indexOf(this.get_states(),state) != -1;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.HBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.TableViewRow();
	}
	,__class__: haxe.ui.toolkit.containers.TableViewRow
	,__properties__: $extend(haxe.ui.toolkit.containers.HBox.prototype.__properties__,{get_states:"get_states",set_state:"set_state",get_state:"get_state",set_data:"set_data",get_data:"get_data"})
});
haxe.ui.toolkit.containers.VSplitter = function() {
	haxe.ui.toolkit.containers.VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.VSplitter"] = haxe.ui.toolkit.containers.VSplitter;
haxe.ui.toolkit.containers.VSplitter.__name__ = ["haxe","ui","toolkit","containers","VSplitter"];
haxe.ui.toolkit.containers.VSplitter.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.VSplitter.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.containers.VSplitter.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	addChild: function(child) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.VSplitterGripper)) r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe.ui.toolkit.containers.VSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChild(gripper);
			}
			r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child);
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.VSplitterGripper)) r = haxe.ui.toolkit.containers.VBox.prototype.addChildAt.call(this,child,index); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe.ui.toolkit.containers.VSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChildAt(gripper,index);
			}
			r = haxe.ui.toolkit.containers.VBox.prototype.addChildAt.call(this,child,index + 1);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.VSplitterGripper)) r = haxe.ui.toolkit.containers.VBox.prototype.removeChild.call(this,child,dispose); else {
			if(this.get_numChildren() > 1) this.removeChild(this.getChildAt(this.indexOfChild(child) - 1),dispose);
			r = haxe.ui.toolkit.containers.VBox.prototype.removeChild.call(this,child,dispose);
		}
		return r;
	}
	,_onMouseDown: function(event) {
		this._percents = new haxe.ds.ObjectMap();
		this._gripper = event.get_component();
		this._mouseDownOffset = event.stageY - this._gripper.get_y();
		this._invalidating = true;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(c,haxe.ui.toolkit.containers.VSplitterGripper) == false) {
				if(c.get_percentHeight() != -1) {
					var value = c.get_percentHeight();
					this._percents.set(c,value);
					c.set_percentHeight(-1);
				}
			}
		}
		this._invalidating = false;
		this.invalidate(1);
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,_onMouseMove: function(event) {
		if(this._gripper != null) {
			var delta = event.stageY - this._gripper.get_y() - this._mouseDownOffset;
			var index = this.indexOfChild(this._gripper);
			var before = this.getChildAt(index - 1);
			var after = this.getChildAt(index + 1);
			var newBefore = before.get_height() + delta;
			var newAfter = after.get_height() - delta;
			if(newBefore > before.get_minHeight() && newAfter > after.get_minHeight() && newBefore - (before.get_layout().get_padding().get_top() + before.get_layout().get_padding().get_bottom()) > 0 && newAfter - (after.get_layout().get_padding().get_top() + after.get_layout().get_padding().get_bottom()) > 0) {
				before.set_height(newBefore);
				after.set_height(newAfter);
			}
		}
	}
	,_onMouseUp: function(event) {
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		this._gripper = null;
		var ucy = this.get_height();
		ucy -= (this.get_numChildren() - 1) / 2 * (2 * this.get_layout().get_spacingY());
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(this._percents.h.__keys__[c.__id__] != null == false) ucy -= c.get_height();
		}
		this._invalidating = true;
		var $it0 = this._percents.keys();
		while( $it0.hasNext() ) {
			var c1 = $it0.next();
			var newPercent = c1.get_height() / ucy * 100;
			c1.set_percentHeight(newPercent);
		}
		this._invalidating = false;
		this.invalidate(1);
		this._percents = null;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.VSplitter();
	}
	,__class__: haxe.ui.toolkit.containers.VSplitter
});
haxe.ui.toolkit.containers.VSplitterGripper = function() {
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_remainPressed(true);
	this.set_useHandCursor(true);
};
$hxClasses["haxe.ui.toolkit.containers.VSplitterGripper"] = haxe.ui.toolkit.containers.VSplitterGripper;
haxe.ui.toolkit.containers.VSplitterGripper.__name__ = ["haxe","ui","toolkit","containers","VSplitterGripper"];
haxe.ui.toolkit.containers.VSplitterGripper.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.containers.VSplitterGripper.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.VSplitterGripper();
	}
	,__class__: haxe.ui.toolkit.containers.VSplitterGripper
});
haxe.ui.toolkit.controls.Calendar = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this._layout = new haxe.ui.toolkit.controls.CalendarLayout();
	this._autoSize = false;
	this._dayItems = new Array();
	this._selectedDate = new Date();
};
$hxClasses["haxe.ui.toolkit.controls.Calendar"] = haxe.ui.toolkit.controls.Calendar;
haxe.ui.toolkit.controls.Calendar.__name__ = ["haxe","ui","toolkit","controls","Calendar"];
haxe.ui.toolkit.controls.Calendar.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.Calendar.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.core.Component.prototype.preInitialize.call(this);
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 7) {
				var j = _g1++;
				var dayItem = new haxe.ui.toolkit.controls.CalendarDay();
				dayItem.addEventListener(openfl.events.MouseEvent.CLICK,this.buildMouseClickFunction(this._dayItems.length));
				this._dayItems.push(dayItem);
				this.addChild(dayItem);
			}
		}
		this.set_date(new Date());
	}
	,previousMonth: function() {
		this._month--;
		if(this._month < 0) {
			this._month = 11;
			this._year--;
		}
		this._day = js.Boot.__cast(Math.min(this._day,this.getEndDay(this._month,this._year)) , Int);
		this.set_date(new Date(this._year,this._month,this._day,0,0,0));
	}
	,nextMonth: function() {
		this._month++;
		if(this._month > 11) {
			this._month = 0;
			this._year++;
		}
		this._day = js.Boot.__cast(Math.min(this._day,this.getEndDay(this._month,this._year)) , Int);
		this.set_date(new Date(this._year,this._month,this._day,0,0,0));
	}
	,get_date: function() {
		return this._date;
	}
	,set_date: function(value) {
		this._date = value;
		this._year = this._date.getFullYear();
		this._month = this._date.getMonth();
		this._day = this._date.getDate();
		var startDay = new Date(this._year,this._month,1,0,0,0).getDay();
		var endDay = this.getEndDay(this._month,this._year);
		var _g = 0;
		var _g1 = this._dayItems;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.set_visible(false);
			item.set_id(null);
		}
		var _g2 = 0;
		while(_g2 < endDay) {
			var i = _g2++;
			var item1 = this._dayItems[i + startDay];
			item1.set_visible(true);
			item1.set_text("" + (i + 1));
			if(i + 1 == this._selectedDate.getDate() && this._month == this._selectedDate.getMonth() && this._year == this._selectedDate.getFullYear()) item1.set_id("selectedDay");
		}
		return value;
	}
	,get_selectedDate: function() {
		return this._selectedDate;
	}
	,set_selectedDate: function(value) {
		this._selectedDate = value;
		this.set_date(this._date);
		return value;
	}
	,getEndDay: function(month,year) {
		var endDay = -1;
		switch(month) {
		case 1:
			if(year % 400 == 0 || year % 100 != 0 && year % 4 == 0) endDay = 29; else endDay = 28;
			break;
		case 3:case 5:case 8:case 10:
			endDay = 30;
			break;
		default:
			endDay = 31;
		}
		return endDay;
	}
	,buildMouseClickFunction: function(index) {
		var _g = this;
		return function(event) {
			_g.mouseClickButton(index);
		};
	}
	,mouseClickButton: function(index) {
		var item = this._dayItems[index];
		var day = Std.parseInt(item.get_text());
		this.set_selectedDate(new Date(this._year,this._month,day,0,0,0));
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Calendar();
	}
	,__class__: haxe.ui.toolkit.controls.Calendar
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate",set_date:"set_date",get_date:"get_date"})
});
haxe.ui.toolkit.controls.CalendarDay = function() {
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_autoSize(false);
};
$hxClasses["haxe.ui.toolkit.controls.CalendarDay"] = haxe.ui.toolkit.controls.CalendarDay;
haxe.ui.toolkit.controls.CalendarDay.__name__ = ["haxe","ui","toolkit","controls","CalendarDay"];
haxe.ui.toolkit.controls.CalendarDay.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.CalendarDay.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.CalendarDay();
	}
	,__class__: haxe.ui.toolkit.controls.CalendarDay
});
haxe.ui.toolkit.controls.CalendarLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.CalendarLayout"] = haxe.ui.toolkit.controls.CalendarLayout;
haxe.ui.toolkit.controls.CalendarLayout.__name__ = ["haxe","ui","toolkit","controls","CalendarLayout"];
haxe.ui.toolkit.controls.CalendarLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.controls.CalendarLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var children = this.get_container().get_children();
		var ucx = this.get_usableWidth() - 6 * this.get_spacingX() + (this.get_padding().get_left() + this.get_padding().get_right());
		var ucy = this.get_usableHeight() - 5 * this.get_spacingY() + (this.get_padding().get_top() + this.get_padding().get_bottom());
		var bcx = ucx / 7;
		var bcy = ucy / 6;
		var xpos = 0;
		var ypos = 0;
		var n = 0;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 7) {
				var j = _g1++;
				var child = children[n];
				if(child != null) {
					child.set_x(xpos);
					child.set_y(ypos);
					child.set_width(bcx);
					child.set_height(bcy);
					n++;
					xpos += bcx + this.get_spacingX();
				}
			}
			xpos = 0;
			ypos += bcy + this.get_spacingY();
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.CalendarLayout();
	}
	,__class__: haxe.ui.toolkit.controls.CalendarLayout
});
haxe.ui.toolkit.controls.CheckBox = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this.set_autoSize(true);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this._value = new haxe.ui.toolkit.controls.CheckBoxValue();
	this._label = new haxe.ui.toolkit.controls.Text();
	this.set_layout(new haxe.ui.toolkit.layout.HorizontalLayout());
};
$hxClasses["haxe.ui.toolkit.controls.CheckBox"] = haxe.ui.toolkit.controls.CheckBox;
haxe.ui.toolkit.controls.CheckBox.__name__ = ["haxe","ui","toolkit","controls","CheckBox"];
haxe.ui.toolkit.controls.CheckBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.CheckBox.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.CheckBox.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	initialize: function() {
		var _g = this;
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this._value.set_verticalAlign("center");
		this.addChild(this._value);
		this.addChild(this._label);
		this._label.addEventListener("haxeui_" + "click",function(e) {
			_g._value.cycleValues();
		});
		this._value.addEventListener("haxeui_" + "change",function(e1) {
			_g.set_selected(_g._value.get_value() == "selected");
		});
	}
	,get_text: function() {
		return this._label.get_text();
	}
	,set_text: function(value) {
		value = haxe.ui.toolkit.core.Component.prototype.set_text.call(this,value);
		this._label.set_text(value);
		return value;
	}
	,get_selected: function() {
		return this._selected;
	}
	,set_selected: function(value) {
		if(this._selected == value) return value;
		this._value.set_value(value == true?"selected":"unselected");
		this._selected = value;
		var event = new openfl.events.Event(openfl.events.Event.CHANGE);
		this.dispatchEvent(event);
		return value;
	}
	,applyStyle: function() {
		haxe.ui.toolkit.core.Component.prototype.applyStyle.call(this);
		if(this._label != null) {
			var labelStyle = new haxe.ui.toolkit.style.Style();
			if(this._baseStyle != null) {
				labelStyle.set_fontName(this._baseStyle.get_fontName());
				labelStyle.set_fontSize(this._baseStyle.get_fontSize());
				labelStyle.set_fontEmbedded(this._baseStyle.get_fontEmbedded());
				labelStyle.set_color(this._baseStyle.get_color());
			}
			this._label.set_baseStyle(labelStyle);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		c.set_selected(this.get_selected());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.CheckBox();
	}
	,__class__: haxe.ui.toolkit.controls.CheckBox
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_selected:"set_selected",get_selected:"get_selected"})
});
haxe.ui.toolkit.controls.Value = function() {
	this._interactive = true;
	this._value = "";
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this._autoSize = false;
	this._layout = new haxe.ui.toolkit.layout.AbsoluteLayout();
	this._values = new haxe.ds.StringMap();
	this._valuesList = new Array();
	this.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this._onMouseClick));
};
$hxClasses["haxe.ui.toolkit.controls.Value"] = haxe.ui.toolkit.controls.Value;
haxe.ui.toolkit.controls.Value.__name__ = ["haxe","ui","toolkit","controls","Value"];
haxe.ui.toolkit.controls.Value.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.Value.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Value.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	addValue: function(value) {
		if(this._values.get(value) == null) {
			var valueControl = new haxe.ui.toolkit.controls.Button();
			valueControl.set_id(value);
			valueControl.set_percentWidth(100);
			valueControl.set_percentHeight(100);
			this._values.set(value,valueControl);
			this._valuesList.push(value);
			valueControl.set_visible(this._value == value);
			this.addChild(valueControl);
		}
	}
	,cycleValues: function() {
		var currentIndex = Lambda.indexOf(this._valuesList,this._value);
		currentIndex++;
		if(currentIndex > this._valuesList.length - 1) currentIndex = 0;
		this.set_value(this._valuesList[currentIndex]);
	}
	,_onMouseClick: function(event) {
		if(this._interactive == true) this.cycleValues();
	}
	,get_value: function() {
		return this._value;
	}
	,set_value: function(newValue) {
		if(newValue != this._value) {
			var valueControl;
			var key = newValue;
			valueControl = this._values.get(key);
			if(valueControl != null) {
				var currentControl = this._values.get(this._value);
				if(currentControl != null) currentControl.set_visible(false);
				this._value = newValue;
				valueControl.set_visible(true);
			}
			this.dispatchEvent(new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change"));
		}
		return newValue;
	}
	,get_interactive: function() {
		return this._interactive;
	}
	,set_interactive: function(value) {
		this._interactive = value;
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		var _g = 0;
		var _g1 = this._valuesList;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			c.addValue(v);
		}
		return c;
		c.set_interactive(this.get_interactive());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Value();
	}
	,__class__: haxe.ui.toolkit.controls.Value
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_interactive:"set_interactive",get_interactive:"get_interactive"})
});
haxe.ui.toolkit.controls.CheckBoxValue = function() {
	haxe.ui.toolkit.controls.Value.call(this);
	this._value = "unselected";
	this.addValue("selected");
	this.addValue("unselected");
};
$hxClasses["haxe.ui.toolkit.controls.CheckBoxValue"] = haxe.ui.toolkit.controls.CheckBoxValue;
haxe.ui.toolkit.controls.CheckBoxValue.__name__ = ["haxe","ui","toolkit","controls","CheckBoxValue"];
haxe.ui.toolkit.controls.CheckBoxValue.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.CheckBoxValue.__super__ = haxe.ui.toolkit.controls.Value;
haxe.ui.toolkit.controls.CheckBoxValue.prototype = $extend(haxe.ui.toolkit.controls.Value.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Value.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.CheckBoxValue();
	}
	,__class__: haxe.ui.toolkit.controls.CheckBoxValue
});
haxe.ui.toolkit.core.interfaces.IItemRenderer = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IItemRenderer"] = haxe.ui.toolkit.core.interfaces.IItemRenderer;
haxe.ui.toolkit.core.interfaces.IItemRenderer.__name__ = ["haxe","ui","toolkit","core","interfaces","IItemRenderer"];
haxe.ui.toolkit.core.interfaces.IItemRenderer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IStateComponent];
haxe.ui.toolkit.core.interfaces.IItemRenderer.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IItemRenderer
};
haxe.ui.toolkit.controls.Divider = function() {
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
};
$hxClasses["haxe.ui.toolkit.controls.Divider"] = haxe.ui.toolkit.controls.Divider;
haxe.ui.toolkit.controls.Divider.__name__ = ["haxe","ui","toolkit","controls","Divider"];
haxe.ui.toolkit.controls.Divider.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IItemRenderer];
haxe.ui.toolkit.controls.Divider.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Divider.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this._line = new haxe.ui.toolkit.core.Component();
		this._line.set_id("line");
		this._line.set_percentWidth(100);
		this.addChild(this._line);
	}
	,get_text: function() {
		if(this._label == null) return null;
		return this._label.get_text();
	}
	,set_text: function(value) {
		if(this._label == null) {
			this._label = new haxe.ui.toolkit.controls.Text();
			this._label.set_id("text");
			this.addChildAt(this._label,0);
		}
		return this._label.set_text(value);
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		if(this.get_data().text != null) this.set_text(this.get_data().text);
		return value;
	}
	,allowSelection: function(stageX,stageY) {
		return false;
	}
	,update: function() {
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Divider();
	}
	,__class__: haxe.ui.toolkit.controls.Divider
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_data:"set_data",get_data:"get_data"})
});
haxe.ui.toolkit.core.interfaces.IDirectional = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDirectional"] = haxe.ui.toolkit.core.interfaces.IDirectional;
haxe.ui.toolkit.core.interfaces.IDirectional.__name__ = ["haxe","ui","toolkit","core","interfaces","IDirectional"];
haxe.ui.toolkit.core.interfaces.IDirectional.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDirectional
};
haxe.ui.toolkit.core.interfaces.IScrollable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IScrollable"] = haxe.ui.toolkit.core.interfaces.IScrollable;
haxe.ui.toolkit.core.interfaces.IScrollable.__name__ = ["haxe","ui","toolkit","core","interfaces","IScrollable"];
haxe.ui.toolkit.core.interfaces.IScrollable.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IScrollable
};
haxe.ui.toolkit.controls.Progress = function() {
	this._incrementSize = 1;
	this._pos = 0;
	this._max = 100;
	this._min = 0;
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this.set_direction("horizontal");
	this._valueBgComp = new haxe.ui.toolkit.core.StateComponent();
	this._valueBgComp.addStates(["normal","disabled"]);
	this._valueBgComp.set_id("background");
	this._valueComp = new haxe.ui.toolkit.core.StateComponent();
	this._valueComp.addStates(["normal","disabled"]);
	this._valueComp.set_id("value");
};
$hxClasses["haxe.ui.toolkit.controls.Progress"] = haxe.ui.toolkit.controls.Progress;
haxe.ui.toolkit.controls.Progress.__name__ = ["haxe","ui","toolkit","controls","Progress"];
haxe.ui.toolkit.controls.Progress.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IDirectional,haxe.ui.toolkit.core.interfaces.IScrollable];
haxe.ui.toolkit.controls.Progress.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Progress.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.addChild(this._valueBgComp);
		this._valueBgComp.addChild(this._valueComp);
	}
	,get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		if(value == "horizontal") this._layout = new haxe.ui.toolkit.controls.HProgressLayout(); else if(value == "vertical") this._layout = new haxe.ui.toolkit.controls.VProgressLayout();
		return value;
	}
	,get_min: function() {
		return this._min;
	}
	,set_min: function(value) {
		if(value != this._min) {
			this._min = value;
			var changeEvent = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return value;
	}
	,get_max: function() {
		return this._max;
	}
	,set_max: function(value) {
		if(value != this._max) {
			this._max = value;
			var changeEvent = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return this._max;
	}
	,get_pos: function() {
		return this._pos;
	}
	,set_pos: function(value) {
		if(this._ready) {
			if(value < this._min) value = this._min;
			if(value > this._max) value = this._max;
		}
		if(value != this._pos) {
			this._pos = value;
			var changeEvent = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return value;
	}
	,get_pageSize: function() {
		return 0;
	}
	,set_pageSize: function(value) {
		return value;
	}
	,get_incrementSize: function() {
		return this._incrementSize;
	}
	,set_incrementSize: function(value) {
		this._incrementSize = value;
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		c.set_direction(this.get_direction());
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		c.set_pos(this.get_pos());
		c.set_pageSize(this.get_pageSize());
		c.set_incrementSize(this.get_incrementSize());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Progress();
	}
	,__class__: haxe.ui.toolkit.controls.Progress
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_incrementSize:"set_incrementSize",get_incrementSize:"get_incrementSize",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_pos:"set_pos",get_pos:"get_pos",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_direction:"set_direction",get_direction:"get_direction"})
});
haxe.ui.toolkit.controls.HProgress = function() {
	haxe.ui.toolkit.controls.Progress.call(this);
	this.set_direction("horizontal");
};
$hxClasses["haxe.ui.toolkit.controls.HProgress"] = haxe.ui.toolkit.controls.HProgress;
haxe.ui.toolkit.controls.HProgress.__name__ = ["haxe","ui","toolkit","controls","HProgress"];
haxe.ui.toolkit.controls.HProgress.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.HProgress.__super__ = haxe.ui.toolkit.controls.Progress;
haxe.ui.toolkit.controls.HProgress.prototype = $extend(haxe.ui.toolkit.controls.Progress.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Progress.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.HProgress();
	}
	,__class__: haxe.ui.toolkit.controls.HProgress
});
haxe.ui.toolkit.controls.Scroll = function() {
	this._direction = "vertical";
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.addStates(["normal","disabled"]);
};
$hxClasses["haxe.ui.toolkit.controls.Scroll"] = haxe.ui.toolkit.controls.Scroll;
haxe.ui.toolkit.controls.Scroll.__name__ = ["haxe","ui","toolkit","controls","Scroll"];
haxe.ui.toolkit.controls.Scroll.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDirectional];
haxe.ui.toolkit.controls.Scroll.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Scroll.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Scroll();
	}
	,__class__: haxe.ui.toolkit.controls.Scroll
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_direction:"set_direction",get_direction:"get_direction"})
});
haxe.ui.toolkit.controls.HScroll = function() {
	this._hasButtons = true;
	this._scrollDirection = 0;
	this._mouseDownOffset = -1;
	this._incrementSize = 20;
	this._pageSize = 0;
	this._max = 100;
	this._min = 0;
	this._pos = 0;
	haxe.ui.toolkit.controls.Scroll.call(this);
	this._layout = new haxe.ui.toolkit.controls.HScrollLayout();
};
$hxClasses["haxe.ui.toolkit.controls.HScroll"] = haxe.ui.toolkit.controls.HScroll;
haxe.ui.toolkit.controls.HScroll.__name__ = ["haxe","ui","toolkit","controls","HScroll"];
haxe.ui.toolkit.controls.HScroll.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IScrollable];
haxe.ui.toolkit.controls.HScroll.__super__ = haxe.ui.toolkit.controls.Scroll;
haxe.ui.toolkit.controls.HScroll.prototype = $extend(haxe.ui.toolkit.controls.Scroll.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.controls.Scroll.prototype.preInitialize.call(this);
		if(this._baseStyle != null) this._hasButtons = this._baseStyle.get_hasButtons();
	}
	,initialize: function() {
		haxe.ui.toolkit.controls.Scroll.prototype.initialize.call(this);
		if(this._hasButtons == true) {
			this._deincButton = new haxe.ui.toolkit.controls.Button();
			this._deincButton.set_autoSize(false);
			this._deincButton.set_iconPosition("center");
			this._deincButton.set_percentHeight(100);
			this._deincButton.set_width(this.get_layout().get_innerHeight());
			this._deincButton.set_id("deinc");
			this._deincButton.set_styleName("left");
			this._deincButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onDeinc));
			this.addChild(this._deincButton);
			this._incButton = new haxe.ui.toolkit.controls.Button();
			this._incButton.set_autoSize(false);
			this._incButton.set_iconPosition("center");
			this._incButton.set_percentHeight(100);
			this._incButton.set_width(this.get_layout().get_innerHeight());
			this._incButton.set_id("inc");
			this._incButton.set_styleName("right");
			this._incButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onInc));
			this.addChild(this._incButton);
		}
		this._thumb = new haxe.ui.toolkit.controls.Button();
		this._thumb.set_iconPosition("center");
		this._thumb.set_autoSize(false);
		this._thumb.set_width(50);
		this._thumb.set_percentHeight(100);
		this._thumb.set_id("thumb");
		this._thumb.set_styleName("thumb");
		this._thumb.set_remainPressed(true);
		this._thumb.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onThumbMouseDown));
		this.addChild(this._thumb);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
	}
	,_onThumbMouseDown: function(event) {
		var ptStage = new openfl.geom.Point(event.stageX,event.stageY);
		this._mouseDownOffset = ptStage.x - this._thumb.get_x();
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScreenMouseMove: function(event) {
		var xpos = event.stageX - this._mouseDownOffset;
		var minX = 0;
		if(this._deincButton != null) minX = this._deincButton.get_width() + this.get_layout().get_spacingX();
		var maxX = this.get_layout().get_usableWidth() - this._thumb.get_width();
		if(this._deincButton != null) maxX += this._deincButton.get_width() + this.get_layout().get_spacingX();
		if(xpos < minX) xpos = minX; else if(xpos > maxX) xpos = maxX;
		var ucx = this.get_layout().get_usableWidth();
		ucx -= this._thumb.get_width();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = xpos - minX;
		var newValue = this.get_min() + v / ucx * m;
		this.set_pos(newValue | 0);
	}
	,_onScreenMouseUp: function(event) {
		this._mouseDownOffset = -1;
		if(this._scrollTimer != null) this._scrollTimer.stop();
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onDeinc: function(event) {
		this.deincrementValue();
		this._scrollDirection = 0;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl.utils.Timer(50,1);
			this._scrollTimer.addEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onInc: function(event) {
		this.incrementValue();
		this._scrollDirection = 1;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl.utils.Timer(50,1);
			this._scrollTimer.addEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScrollTimerComplete: function(event) {
		if(this._scrollTimer != null) {
			if(this._scrollDirection == 1) this.incrementValue(); else if(this._scrollDirection == 0) this.deincrementValue();
			this._scrollTimer.reset();
			this._scrollTimer.start();
		}
	}
	,_onMouseDown: function(event) {
		if(event.localX > this._thumb.get_x()) {
			var _g = this;
			_g.set_pos(_g.get_pos() + this.get_pageSize());
		} else {
			var _g1 = this;
			_g1.set_pos(_g1.get_pos() - this.get_pageSize());
		}
	}
	,get_pos: function() {
		return this._pos;
	}
	,set_pos: function(value) {
		if(value < this._min) value = this._min;
		if(value > this._max) value = this._max;
		if(value != this._pos) {
			this._pos = value;
			var changeEvent = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return value;
	}
	,get_min: function() {
		return this._min;
	}
	,set_min: function(value) {
		if(value != this._min) {
			this._min = value;
			if(this._pos < this._min) this._pos = this._min;
			this.invalidate(1);
		}
		return value;
	}
	,get_max: function() {
		return this._max;
	}
	,set_max: function(value) {
		if(value != this._max) {
			this._max = value;
			if(this._pos > this._max) this._pos = this._max;
			this.invalidate(1);
		}
		return value;
	}
	,get_pageSize: function() {
		return this._pageSize;
	}
	,set_pageSize: function(value) {
		if(value != this._pageSize) {
			this._pageSize = value;
			this.invalidate(1);
		}
		return value;
	}
	,get_incrementSize: function() {
		return this._incrementSize;
	}
	,set_incrementSize: function(value) {
		this._incrementSize = value;
		return value;
	}
	,deincrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() - this._incrementSize);
	}
	,incrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() + this._incrementSize);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Scroll.prototype.clone.call(this);
		c.set_pos(this.get_pos());
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		c.set_pageSize(this.get_pageSize());
		c.set_incrementSize(this.get_incrementSize());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.HScroll();
	}
	,__class__: haxe.ui.toolkit.controls.HScroll
	,__properties__: $extend(haxe.ui.toolkit.controls.Scroll.prototype.__properties__,{set_incrementSize:"set_incrementSize",get_incrementSize:"get_incrementSize",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_pos:"set_pos",get_pos:"get_pos"})
});
haxe.ui.toolkit.controls.HScrollLayout = function() {
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.HScrollLayout"] = haxe.ui.toolkit.controls.HScrollLayout;
haxe.ui.toolkit.controls.HScrollLayout.__name__ = ["haxe","ui","toolkit","controls","HScrollLayout"];
haxe.ui.toolkit.controls.HScrollLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.controls.HScrollLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		if(deinc != null) deinc.set_width(this.get_innerHeight());
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_width(this.get_innerHeight());
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var ucx = this.get_usableWidth();
			var thumbWidth = scroll.get_pageSize() / m * ucx;
			if(thumbWidth < this.get_innerHeight()) thumbWidth = this.get_innerHeight(); else if(thumbWidth > ucx) thumbWidth = ucx;
			if(thumbWidth > 0 && Math.isNaN(thumbWidth) == false) thumb.set_width(thumbWidth);
		}
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_x(this.get_container().get_width() - inc.get_width() - this.get_padding().get_right());
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var u = this.get_usableWidth();
			u -= thumb.get_width();
			var x = (scroll.get_pos() - scroll.get_min()) / m * u;
			x += this.get_padding().get_left();
			if(deinc != null) x += deinc.get_width() + this.get_spacingX();
			thumb.set_x(x);
		}
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(deinc != null) ucx -= deinc.get_width() + this.get_spacingX();
		if(inc != null) ucx -= inc.get_width() + this.get_spacingX();
		return ucx;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.HScrollLayout();
	}
	,__class__: haxe.ui.toolkit.controls.HScrollLayout
});
haxe.ui.toolkit.controls.Slider = function() {
	this._mouseDownOffset = -1;
	haxe.ui.toolkit.controls.Progress.call(this);
	this._valueBgComp.get_sprite().buttonMode = true;
	this._valueBgComp.get_sprite().useHandCursor = true;
};
$hxClasses["haxe.ui.toolkit.controls.Slider"] = haxe.ui.toolkit.controls.Slider;
haxe.ui.toolkit.controls.Slider.__name__ = ["haxe","ui","toolkit","controls","Slider"];
haxe.ui.toolkit.controls.Slider.__super__ = haxe.ui.toolkit.controls.Progress;
haxe.ui.toolkit.controls.Slider.prototype = $extend(haxe.ui.toolkit.controls.Progress.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.Progress.prototype.initialize.call(this);
		this._thumb = new haxe.ui.toolkit.controls.Button();
		this._thumb.set_id("thumb");
		this._thumb.set_remainPressed(true);
		this._thumb.set_autoSize(false);
		this._thumb.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.addChild(this._thumb);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onMouseWheel));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onBackgroundMouseDown));
	}
	,get_value: function() {
		return this.get_pos();
	}
	,set_value: function(newValue) {
		this.set_pos(Std.parseFloat(newValue));
		return newValue;
	}
	,_onMouseDown: function(event) {
	}
	,_onScreenMouseMove: function(event) {
	}
	,_onScreenMouseUp: function(event) {
		this._mouseDownOffset = -1;
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onBackgroundMouseDown: function(event) {
	}
	,calcPosFromCoord: function(coord) {
		return 0;
	}
	,_onMouseWheel: function(event) {
		if(event.delta != 0) {
			if(this._direction == "horizontal") {
				if(event.delta < 0) {
					var _g = this;
					_g.set_pos(_g.get_pos() + 5);
				} else if(event.delta > 0) {
					var _g1 = this;
					_g1.set_pos(_g1.get_pos() - 5);
				}
			} else if(this._direction == "vertical") {
				if(event.delta < 0) {
					var _g2 = this;
					_g2.set_pos(_g2.get_pos() - 5);
				} else if(event.delta > 0) {
					var _g3 = this;
					_g3.set_pos(_g3.get_pos() + 5);
				}
			}
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Progress.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Slider();
	}
	,__class__: haxe.ui.toolkit.controls.Slider
});
haxe.ui.toolkit.controls.HSlider = function() {
	haxe.ui.toolkit.controls.Slider.call(this);
	this.set_direction("horizontal");
};
$hxClasses["haxe.ui.toolkit.controls.HSlider"] = haxe.ui.toolkit.controls.HSlider;
haxe.ui.toolkit.controls.HSlider.__name__ = ["haxe","ui","toolkit","controls","HSlider"];
haxe.ui.toolkit.controls.HSlider.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.HSlider.__super__ = haxe.ui.toolkit.controls.Slider;
haxe.ui.toolkit.controls.HSlider.prototype = $extend(haxe.ui.toolkit.controls.Slider.prototype,{
	_onMouseDown: function(event) {
		this.startTracking(event.stageX - this._thumb.get_stageX());
	}
	,_onScreenMouseMove: function(event) {
		var xpos = event.stageX - this.get_stageX() - this._mouseDownOffset;
		this.set_pos(Std["int"](this.calcPosFromCoord(xpos)));
	}
	,_onBackgroundMouseDown: function(event) {
		if(this._thumb.hitTest(event.stageX,event.stageY) == false) {
			var xpos = event.stageX - this.get_stageX();
			xpos -= this._thumb.get_width() / 2;
			this.set_pos(Std["int"](this.calcPosFromCoord(xpos)));
			this._thumb.set_state("down");
			this.startTracking(this._thumb.get_width() / 2);
		}
	}
	,startTracking: function(offset) {
		this._mouseDownOffset = offset;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,calcPosFromCoord: function(xpos) {
		var minX = 0;
		var maxX = this.get_layout().get_usableWidth() - this._thumb.get_width();
		if(xpos < minX) xpos = minX; else if(xpos > maxX) xpos = maxX;
		var ucx = this.get_layout().get_usableWidth();
		ucx -= this._thumb.get_width();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = xpos - minX;
		var newValue = this.get_min() + v / ucx * m;
		return newValue;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Slider.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.HSlider();
	}
	,__class__: haxe.ui.toolkit.controls.HSlider
});
haxe.ui.toolkit.controls.Image = function() {
	this._updatingContent = false;
	this._autoDisposeBitmapData = false;
	this._autoHeight = true;
	this._autoWidth = true;
	haxe.ui.toolkit.core.Component.call(this);
	this.set_autoSize(true);
};
$hxClasses["haxe.ui.toolkit.controls.Image"] = haxe.ui.toolkit.controls.Image;
haxe.ui.toolkit.controls.Image.__name__ = ["haxe","ui","toolkit","controls","Image"];
haxe.ui.toolkit.controls.Image.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.Image.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.Image.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this.updateContent();
	}
	,dispose: function() {
		this.disposeContent();
		haxe.ui.toolkit.core.Component.prototype.dispose.call(this);
	}
	,disposeContent: function() {
		if(this._bmp != null) {
			if(this._autoDisposeBitmapData == true) this._bmp.bitmapData.dispose();
			this.get_sprite().removeChild(this._bmp);
			this._bmp = null;
		}
		if(this._gifWrapper != null && this.get_sprite().contains(this._gifWrapper)) {
			this._gifWrapper.dispose();
			this.get_sprite().removeChild(this._gifWrapper);
			this._gifWrapper = null;
		}
		if(this._svgSprite != null && this.get_sprite().contains(this._svgSprite)) {
			this.get_sprite().removeChild(this._svgSprite);
			this._svgSprite = null;
		}
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		haxe.ui.toolkit.core.Component.prototype.invalidate.call(this,type,recursive);
		if((type & 256) == 256) this.updateContent();
	}
	,get_value: function() {
		return this.get_resource();
	}
	,set_value: function(newValue) {
		this.set_resource(newValue);
		return newValue;
	}
	,set_width: function(value) {
		this._autoWidth = false;
		this._autoSize = false;
		return haxe.ui.toolkit.core.Component.prototype.set_width.call(this,value);
	}
	,set_height: function(value) {
		this._autoHeight = false;
		this._autoSize = false;
		return haxe.ui.toolkit.core.Component.prototype.set_height.call(this,value);
	}
	,get_resource: function() {
		return this._resource;
	}
	,set_resource: function(value) {
		var _g = this;
		this.disposeContent();
		if(typeof(value) == "string") {
			if(StringTools.endsWith(value,".gif")) this.loadGif(value,function(gif) {
				_g.updateGif(gif);
			}); else if(StringTools.endsWith(value,".svg")) this.loadSvg(value,function(svg) {
				_g.updateSvg(svg);
			}); else this.loadBitmap(value,function(bmpData) {
				_g.updateBitmap(bmpData);
			});
		} else if(js.Boot.__instanceof(value,openfl.display.Bitmap)) this.updateBitmap((js.Boot.__cast(value , openfl.display.Bitmap)).bitmapData); else if(js.Boot.__instanceof(value,openfl.display.BitmapData)) this.updateBitmap(js.Boot.__cast(value , openfl.display.BitmapData));
		this._resource = value;
		return value;
	}
	,loadGif: function(res,callback) {
		if(StringTools.startsWith(res,"http://")) {
			var l = new openfl.net.URLLoader();
			l.set_dataFormat(openfl.net.URLLoaderDataFormat.BINARY);
			l.load(new openfl.net.URLRequest(res));
			l.addEventListener(openfl.events.Event.COMPLETE,function(dyn) {
				callback(com.yagp.GifDecoder.parseByteArray(l.data));
			});
		} else callback(com.yagp.GifDecoder.parseByteArray(haxe.ui.toolkit.resources.ResourceManager.get_instance().getBytes(res)));
	}
	,updateGif: function(gif) {
		var player = new com.yagp.GifPlayer(gif);
		this._gifWrapper = new com.yagp.GifPlayerWrapper(player);
		this.updateContent();
	}
	,loadSvg: function(res,callback) {
		if(StringTools.startsWith(res,"http://")) {
			var l = new openfl.net.URLLoader();
			l.set_dataFormat(openfl.net.URLLoaderDataFormat.TEXT);
			l.load(new openfl.net.URLRequest(res));
			l.addEventListener(openfl.events.Event.COMPLETE,function(dyn) {
				callback(new format.SVG(l.data));
			});
		} else callback(haxe.ui.toolkit.resources.ResourceManager.get_instance().getSVG(res));
	}
	,updateSvg: function(svg) {
		this._svgSprite = new openfl.display.Sprite();
		svg.render(this._svgSprite.get_graphics());
		this._svgSprite.set_width(svg.data.width);
		this._svgSprite.set_height(svg.data.height);
		this.updateContent();
	}
	,loadBitmap: function(res,callback) {
		if(StringTools.startsWith(res,"http://")) {
			var l = new openfl.display.Loader();
			l.load(new openfl.net.URLRequest(res));
			l.contentLoaderInfo.addEventListener(openfl.events.Event.INIT,function(dyn) {
				var bmp;
				bmp = js.Boot.__cast(l.content , openfl.display.Bitmap);
				var bmpData = new openfl.display.BitmapData(bmp.get_width(),bmp.get_height(),true,0);
				bmpData.draw(bmp.bitmapData);
				callback(bmpData);
			});
		} else callback(haxe.ui.toolkit.resources.ResourceManager.get_instance().getBitmapData(res));
	}
	,updateBitmap: function(bmpData) {
		this._bmp = new openfl.display.Bitmap(bmpData);
		this.updateContent();
	}
	,updateContent: function() {
		if(this._updatingContent) return;
		this._updatingContent = true;
		if(this._gifWrapper != null) {
			if(this.get_sprite().contains(this._gifWrapper) == false) this.get_sprite().addChild(this._gifWrapper);
			if(this.get_ready()) {
				if(this._autoWidth && this._autoHeight) {
					this.set_width(this._gifWrapper.get_width());
					this.set_height(this._gifWrapper.get_height());
					this._autoWidth = true;
					this._autoHeight = true;
				} else if(this._autoWidth) {
					this._gifWrapper.set_height(this.get_height());
					this._gifWrapper.set_scaleX(this._gifWrapper.get_scaleY());
					this.set_width(this._gifWrapper.get_width());
					this._autoWidth = true;
				} else if(this._autoHeight) {
					this._gifWrapper.set_width(this.get_width());
					this._gifWrapper.set_scaleY(this._gifWrapper.get_scaleX());
					this.set_height(this._gifWrapper.get_height());
					this._autoHeight = true;
				} else {
					this._gifWrapper.set_width(this.get_width());
					this._gifWrapper.set_height(this.get_height());
				}
			}
		}
		if(this._svgSprite != null) {
			if(this.get_sprite().contains(this._svgSprite) == false) this.get_sprite().addChild(this._svgSprite);
			if(this.get_ready()) {
				if(this._autoWidth && this._autoHeight) {
					this.set_width(this._svgSprite.get_width());
					this.set_height(this._svgSprite.get_height());
					this._autoWidth = true;
					this._autoHeight = true;
				} else if(this._autoWidth) {
					this._svgSprite.set_height(this.get_height());
					this._svgSprite.set_scaleX(this._svgSprite.get_scaleY());
					this.set_width(this._svgSprite.get_width());
					this._autoWidth = true;
				} else if(this._autoHeight) {
					this._svgSprite.set_width(this.get_width());
					this._svgSprite.set_scaleY(this._svgSprite.get_scaleX());
					this.set_height(this._svgSprite.get_height());
					this._autoHeight = true;
				} else {
					this._svgSprite.set_width(this.get_width());
					this._svgSprite.set_height(this.get_height());
				}
			}
		}
		if(this._bmp != null) {
			if(this.get_sprite().contains(this._bmp) == false) this.get_sprite().addChild(this._bmp);
			if(this.get_ready()) {
				if(this._autoWidth && this._autoHeight) {
					this.set_width(this._bmp.bitmapData.width);
					this.set_height(this._bmp.bitmapData.height);
					this._autoWidth = true;
					this._autoHeight = true;
				} else if(this._autoWidth) {
					this._bmp.set_height(this.get_height());
					this._bmp.set_scaleX(this._bmp.get_scaleY());
					this.set_width(this._bmp.get_width());
					this._autoWidth = true;
				} else if(this._autoHeight) {
					this._bmp.set_width(this.get_width());
					this._bmp.set_scaleY(this._bmp.get_scaleX());
					this.set_height(this._bmp.get_height());
					this._autoHeight = true;
				} else {
					this._bmp.set_width(this.get_width());
					this._bmp.set_height(this.get_height());
				}
			}
		}
		this._updatingContent = false;
	}
	,get_autoDisposeBitmapData: function() {
		return this._autoDisposeBitmapData;
	}
	,set_autoDisposeBitmapData: function(value) {
		this._autoDisposeBitmapData = value;
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		c.set_resource(this.get_resource());
		c.set_autoDisposeBitmapData(this.get_autoDisposeBitmapData());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Image();
	}
	,__class__: haxe.ui.toolkit.controls.Image
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_autoDisposeBitmapData:"set_autoDisposeBitmapData",get_autoDisposeBitmapData:"get_autoDisposeBitmapData",set_resource:"set_resource",get_resource:"get_resource"})
});
haxe.ui.toolkit.controls.Text = function() {
	haxe.ui.toolkit.core.StateComponent.call(this);
	this._valign = "center";
	this.set_autoSize(true);
	this._textDisplay = new haxe.ui.toolkit.text.TextDisplay();
	this._textDisplay.set_text("");
};
$hxClasses["haxe.ui.toolkit.controls.Text"] = haxe.ui.toolkit.controls.Text;
haxe.ui.toolkit.controls.Text.__name__ = ["haxe","ui","toolkit","controls","Text"];
haxe.ui.toolkit.controls.Text.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.Text.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Text.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.get_sprite().addChild(this._textDisplay.get_display());
		this._textDisplay.set_autoSize(this.get_autoSize());
		this._textDisplay.set_text(this.get_text());
		if(this.get_autoSize() == true) {
			if(this.get_width() == 0) this.set_width(this._textDisplay.get_display().get_width());
			if(this.get_height() == 0) this.set_height(this._textDisplay.get_display().get_height());
		}
	}
	,dispose: function() {
		if(this.get_sprite().contains(this._textDisplay.get_display())) this.get_sprite().removeChild(this._textDisplay.get_display());
		haxe.ui.toolkit.core.StateComponent.prototype.dispose.call(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.StateComponent.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256 && this._autoSize == false) {
			this._textDisplay.get_display().set_width(this.get_layout().get_innerWidth());
			this._textDisplay.get_display().set_height(this.get_layout().get_innerHeight());
		}
		this._invalidating = false;
	}
	,get_text: function() {
		return this._textDisplay.get_text();
	}
	,set_text: function(value) {
		value = haxe.ui.toolkit.core.StateComponent.prototype.set_text.call(this,value);
		this._textDisplay.set_text(value);
		if(this.get_autoSize() == true) {
			this.set_width(this._textDisplay.get_display().get_width());
			this.set_height(this._textDisplay.get_display().get_height());
		}
		return value;
	}
	,set_autoSize: function(value) {
		value = haxe.ui.toolkit.core.StateComponent.prototype.set_autoSize.call(this,value);
		if(this._textDisplay != null) this._textDisplay.set_autoSize(value);
		return value;
	}
	,set_width: function(value) {
		haxe.ui.toolkit.core.StateComponent.prototype.set_width.call(this,value);
		this._textDisplay.get_display().set_width(value);
		this._textDisplay.set_text(this.get_text());
		this.set_height(this._textDisplay.get_display().get_height());
		return value;
	}
	,applyStyle: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.applyStyle.call(this);
		if(this._textDisplay != null) {
			this._textDisplay.set_style(this._baseStyle);
			if(this.get_autoSize() == true) {
				this.set_width(this._textDisplay.get_display().get_width());
				this.set_height(this._textDisplay.get_display().get_height());
			}
		}
	}
	,get_multiline: function() {
		return this._textDisplay.get_multiline();
	}
	,set_multiline: function(value) {
		this._textDisplay.set_multiline(value);
		return value;
	}
	,get_wrapLines: function() {
		return this._textDisplay.get_wrapLines();
	}
	,set_wrapLines: function(value) {
		this._textDisplay.set_wrapLines(value);
		return value;
	}
	,get_selectable: function() {
		return this._textDisplay.get_selectable();
	}
	,set_selectable: function(value) {
		return this._textDisplay.set_selectable(value);
	}
	,get_textAlign: function() {
		if(this._textDisplay == null) return null;
		return this._textDisplay.get_textAlign();
	}
	,set_textAlign: function(value) {
		if(this._textDisplay != null) this._textDisplay.set_textAlign(value);
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		c.set_multiline(this.get_multiline());
		c.set_wrapLines(this.get_wrapLines());
		c.set_selectable(this.get_selectable());
		c.set_textAlign(this.get_textAlign());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Text();
	}
	,__class__: haxe.ui.toolkit.controls.Text
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_selectable:"set_selectable",get_selectable:"get_selectable",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",set_multiline:"set_multiline",get_multiline:"get_multiline"})
});
haxe.ui.toolkit.controls.Link = function() {
	this._isOver = false;
	this._isDown = false;
	haxe.ui.toolkit.controls.Text.call(this);
	this.set_useHandCursor(true);
};
$hxClasses["haxe.ui.toolkit.controls.Link"] = haxe.ui.toolkit.controls.Link;
haxe.ui.toolkit.controls.Link.__name__ = ["haxe","ui","toolkit","controls","Link"];
haxe.ui.toolkit.controls.Link.__super__ = haxe.ui.toolkit.controls.Text;
haxe.ui.toolkit.controls.Link.prototype = $extend(haxe.ui.toolkit.controls.Text.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.Text.prototype.initialize.call(this);
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onScreenMouseDown));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onScreenMouseDown: function(e) {
		if(this.hitTest(e.stageX,e.stageY) == true) {
			this._isDown = true;
			this.set_state("down");
			haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		}
	}
	,_onScreenMouseMove: function(e) {
		if(this.hitTest(e.stageX,e.stageY) == true) {
			if(this._isDown == true) this.set_state("down"); else this.set_state("over");
			this._isOver = true;
		} else if(this._isOver == true) {
			this.set_state("normal");
			this._isOver = false;
		}
	}
	,_onScreenMouseUp: function(e) {
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this.hitTest(e.stageX,e.stageY) == true && this._isDown == true) {
			this._isDown = false;
			this.set_state("over");
			var uiEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "click");
			this.dispatchEvent(uiEvent);
			if(this.url != null) openfl.Lib.getURL(new openfl.net.URLRequest(this.url));
		} else if(this._isOver == false) {
			this._isDown = false;
			this.set_state("normal");
		}
	}
	,get_states: function() {
		return ["normal","over","down"];
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Text.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Link();
	}
	,__class__: haxe.ui.toolkit.controls.Link
});
haxe.ui.toolkit.controls.Menu = function() {
	haxe.ui.toolkit.containers.VBox.call(this);
	this._subMenus = new haxe.ds.ObjectMap();
};
$hxClasses["haxe.ui.toolkit.controls.Menu"] = haxe.ui.toolkit.controls.Menu;
haxe.ui.toolkit.controls.Menu.__name__ = ["haxe","ui","toolkit","controls","Menu"];
haxe.ui.toolkit.controls.Menu.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.controls.Menu.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.VBox.prototype.initialize.call(this);
		if(this.get_rootMenu() == this) this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
	}
	,addChild: function(child) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.MenuItem)) {
			(js.Boot.__cast(child , haxe.ui.toolkit.controls.MenuItem)).addEventListener(openfl.events.MouseEvent.MOUSE_OVER,this.buildMouseOverFunction(this.get_numChildren()));
			(js.Boot.__cast(child , haxe.ui.toolkit.controls.MenuItem)).addEventListener(openfl.events.MouseEvent.CLICK,this.buildMouseClickFunction(this.get_numChildren()));
			r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child);
		} else if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.MenuSeparator)) r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child); else if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.Menu)) {
			var item = new haxe.ui.toolkit.controls.MenuItem();
			(js.Boot.__cast(child , haxe.ui.toolkit.controls.Menu))._parentMenu = this;
			item.set_text((js.Boot.__cast(child , haxe.ui.toolkit.controls.Menu)).get_text());
			item.set_styleName("expandable");
			var value;
			value = js.Boot.__cast(child , haxe.ui.toolkit.controls.Menu);
			this._subMenus.set(item,value);
			this.addChild(item);
		}
		return r;
	}
	,_onRootMouseDown: function(event) {
		var mouseIn = false;
		var menu = this.get_rootMenu();
		while(menu != null) {
			if(menu.hitTest(event.stageX,event.stageY) == true) {
				mouseIn = true;
				break;
			}
			menu = menu._currentSubMenu;
		}
		if(mouseIn == false) this.get_rootMenu().hideSubMenus();
	}
	,buildMouseOverFunction: function(index) {
		var _g = this;
		return function(event) {
			_g.mouseOverItem(index);
		};
	}
	,buildMouseClickFunction: function(index) {
		var _g = this;
		return function(event) {
			_g.mouseClickItem(index);
		};
	}
	,mouseClickItem: function(index) {
		if(this.getChildAt(index) == null) return;
		var item;
		item = js.Boot.__cast(this.getChildAt(index) , haxe.ui.toolkit.controls.MenuItem);
		var subMenu = this._subMenus.h[item.__id__];
		if(subMenu == null) {
			this.get_rootMenu().hideSubMenus();
			var e = new haxe.ui.toolkit.events.MenuEvent(haxe.ui.toolkit.events.MenuEvent.SELECT,item);
			this.get_rootMenu().dispatchEvent(e);
		}
	}
	,mouseOverItem: function(index) {
		if(this.getChildAt(index) == null) return;
		var item;
		item = js.Boot.__cast(this.getChildAt(index) , haxe.ui.toolkit.controls.MenuItem);
		var subMenu = this._subMenus.h[item.__id__];
		if(this._currentItem != null) {
			this._currentItem.set_selected(false);
			this._currentItem = null;
		}
		if(this._currentSubMenu != null && this._currentSubMenu != subMenu) this.hideSubMenus();
		if(subMenu != null) {
			this.showSubMenu(item);
			this._currentItem = item;
		} else {
		}
	}
	,showSubMenu: function(item) {
		item.set_selected(true);
		var subMenu = this._subMenus.h[item.__id__];
		if(subMenu != null && subMenu != this._currentSubMenu) {
			subMenu.set_x(item.get_stageX() + item.get_width());
			subMenu.set_y(item.get_stageY());
			this.get_root().addChild(subMenu);
			this._currentSubMenu = subMenu;
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.Menu);
			if(transition == "slide") {
				subMenu.set_clipHeight(0);
				subMenu.get_sprite().set_alpha(1);
				subMenu.set_visible(true);
				motion.Actuate.tween(subMenu,.1,{ clipHeight : subMenu.get_height()},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
					subMenu.clearClip();
				});
			} else if(transition == "fade") {
				subMenu.get_sprite().set_alpha(0);
				subMenu.set_visible(true);
				motion.Actuate.tween(subMenu.get_sprite(),.1,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				});
			} else {
				subMenu.get_sprite().set_alpha(1);
				subMenu.set_visible(true);
			}
			var e = new haxe.ui.toolkit.events.MenuEvent(haxe.ui.toolkit.events.MenuEvent.OPEN,item);
			e.menu = subMenu;
			this.get_rootMenu().dispatchEvent(e);
		}
	}
	,hideSubMenus: function() {
		var _g = this;
		if(this._currentSubMenu == null) return;
		var ref = this._currentSubMenu;
		ref.hideSubMenus();
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.Menu);
		if(transition == "slide") {
			this._currentSubMenu.get_sprite().set_alpha(1);
			motion.Actuate.tween(ref,.1,{ clipHeight : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				ref.set_visible(false);
				ref.clearClip();
				_g.get_root().removeChild(ref,false);
				_g._currentSubMenu = null;
				ref.hideSubMenus();
			});
		} else if(transition == "fade") motion.Actuate.tween(ref.get_sprite(),.1,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			ref.set_visible(false);
			_g.get_root().removeChild(ref,false);
			_g._currentSubMenu = null;
			ref.hideSubMenus();
		}); else {
			ref.get_sprite().set_alpha(1);
			ref.set_visible(false);
			this.get_root().removeChild(ref,false);
			this._currentSubMenu = null;
			ref.hideSubMenus();
		}
		if(this._currentItem != null) {
			this._currentItem.set_selected(false);
			this._currentItem = null;
		}
	}
	,get_currentSubMenu: function() {
		return this._currentSubMenu;
	}
	,get_parentMenu: function() {
		return this._parentMenu;
	}
	,get_rootMenu: function() {
		var menu = this;
		while(menu._parentMenu != null) menu = menu._parentMenu;
		return menu;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Menu();
	}
	,__class__: haxe.ui.toolkit.controls.Menu
	,__properties__: $extend(haxe.ui.toolkit.containers.VBox.prototype.__properties__,{get_rootMenu:"get_rootMenu",get_parentMenu:"get_parentMenu",get_currentSubMenu:"get_currentSubMenu"})
});
haxe.ui.toolkit.controls.MenuButton = function() {
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_toggle(true);
	this.set_allowSelection(false);
};
$hxClasses["haxe.ui.toolkit.controls.MenuButton"] = haxe.ui.toolkit.controls.MenuButton;
haxe.ui.toolkit.controls.MenuButton.__name__ = ["haxe","ui","toolkit","controls","MenuButton"];
haxe.ui.toolkit.controls.MenuButton._currentMenuButton = null;
haxe.ui.toolkit.controls.MenuButton.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.MenuButton.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.Button.prototype.initialize.call(this);
		if(this._menu != null) {
			this._menu.addEventListener(haxe.ui.toolkit.events.MenuEvent.SELECT,$bind(this,this._onMenuSelect));
			this._menu.addEventListener(haxe.ui.toolkit.events.MenuEvent.OPEN,$bind(this,this._onMenuOpen));
		}
	}
	,addChild: function(child) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.MenuItem)) {
			if(this._menu == null) {
				this._menu = new haxe.ui.toolkit.controls.Menu();
				this._menu.set_root(this.get_root());
			}
			this._menu.addChild(child);
		} else if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.Menu)) this._menu = js.Boot.__cast(child , haxe.ui.toolkit.controls.Menu); else r = haxe.ui.toolkit.controls.Button.prototype.addChild.call(this,child);
		return r;
	}
	,_onMouseOver: function(event) {
		haxe.ui.toolkit.controls.Button.prototype._onMouseOver.call(this,event);
		if(haxe.ui.toolkit.controls.MenuButton._currentMenuButton != null && haxe.ui.toolkit.controls.MenuButton._currentMenuButton != this) {
			haxe.ui.toolkit.controls.MenuButton._currentMenuButton.hideMenu();
			this.showMenu();
		}
	}
	,_onMouseClick: function(event) {
		if(this.get_root().indexOfChild(this._menu) == -1) this.showMenu(); else this.hideMenu();
	}
	,set_selected: function(value) {
		this._selected = value;
		if(this._selected == true) this.set_state("down"); else this.set_state("normal");
		return value;
	}
	,_onRootMouseDown: function(event) {
		var mouseIn = false;
		if(this.hitTest(event.stageX,event.stageY) == true) mouseIn = true;
		if(this._menu != null && this._menu.hitTest(event.stageX,event.stageY) == true) mouseIn = true;
		if(this._menu != null && mouseIn == false) {
			var menu = this._menu.get_rootMenu();
			while(menu != null) {
				if(menu.hitTest(event.stageX,event.stageY) == true) {
					mouseIn = true;
					break;
				}
				menu = menu.get_currentSubMenu();
			}
		}
		if(this._menu != null && mouseIn == false) this.hideMenu();
	}
	,_onMenuSelect: function(event) {
		this.hideMenu();
		var e = new haxe.ui.toolkit.events.MenuEvent(haxe.ui.toolkit.events.MenuEvent.SELECT,event.menuItem);
		this.dispatchEvent(e);
		var uiEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "menuSelect",event.menuItem);
		this.dispatchEvent(uiEvent);
	}
	,_onMenuOpen: function(event) {
		var e = new haxe.ui.toolkit.events.MenuEvent(haxe.ui.toolkit.events.MenuEvent.OPEN);
		e.menu = event.menu;
		this.dispatchEvent(e);
	}
	,showMenu: function() {
		var _g = this;
		this.set_selected(true);
		this._menu.set_x(this.get_stageX() - this.get_root().get_stageX());
		this._menu.set_y(this.get_stageY() + this.get_height() - this.get_root().get_stageY());
		this.get_root().addChild(this._menu);
		this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
		haxe.ui.toolkit.controls.MenuButton._currentMenuButton = this;
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.Menu);
		if(transition == "slide") {
			this._menu.set_clipHeight(0);
			this._menu.get_sprite().set_alpha(1);
			this._menu.set_visible(true);
			motion.Actuate.tween(this._menu,.1,{ clipHeight : this._menu.get_height()},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				_g._menu.clearClip();
			});
		} else if(transition == "fade") {
			this._menu.get_sprite().set_alpha(0);
			this._menu.set_visible(true);
			motion.Actuate.tween(this._menu.get_sprite(),.1,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			});
		} else {
			this._menu.get_sprite().set_alpha(1);
			this._menu.set_visible(true);
		}
		var event = new haxe.ui.toolkit.events.MenuEvent(haxe.ui.toolkit.events.MenuEvent.OPEN);
		event.menu = this._menu;
		this.dispatchEvent(event);
	}
	,hideMenu: function() {
		var _g = this;
		this.set_selected(false);
		this._menu.hideSubMenus();
		this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.Menu);
		if(transition == "slide") {
			this._menu.get_sprite().set_alpha(1);
			motion.Actuate.tween(this._menu,.1,{ clipHeight : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				_g._menu.set_visible(false);
				_g._menu.clearClip();
				_g.get_root().removeChild(_g._menu,false);
			});
		} else if(transition == "fade") motion.Actuate.tween(this._menu.get_sprite(),.1,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			_g._menu.set_visible(false);
			_g.get_root().removeChild(_g._menu,false);
		}); else {
			this._menu.get_sprite().set_alpha(1);
			this._menu.set_visible(false);
			this.get_root().removeChild(this._menu,false);
		}
		haxe.ui.toolkit.controls.MenuButton._currentMenuButton = null;
		this.set_selected(false);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.MenuButton();
	}
	,__class__: haxe.ui.toolkit.controls.MenuButton
});
haxe.ui.toolkit.controls.MenuItem = function() {
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_toggle(true);
	this.set_allowSelection(false);
};
$hxClasses["haxe.ui.toolkit.controls.MenuItem"] = haxe.ui.toolkit.controls.MenuItem;
haxe.ui.toolkit.controls.MenuItem.__name__ = ["haxe","ui","toolkit","controls","MenuItem"];
haxe.ui.toolkit.controls.MenuItem.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.MenuItem.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	set_selected: function(value) {
		this._selected = value;
		if(this._selected == true) this.set_state("down"); else this.set_state("normal");
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.MenuItem();
	}
	,__class__: haxe.ui.toolkit.controls.MenuItem
});
haxe.ui.toolkit.controls.MenuSeparator = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
};
$hxClasses["haxe.ui.toolkit.controls.MenuSeparator"] = haxe.ui.toolkit.controls.MenuSeparator;
haxe.ui.toolkit.controls.MenuSeparator.__name__ = ["haxe","ui","toolkit","controls","MenuSeparator"];
haxe.ui.toolkit.controls.MenuSeparator.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.MenuSeparator.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.MenuSeparator.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this._line = new haxe.ui.toolkit.core.Component();
		this._line.set_id("line");
		this._line.set_percentWidth(100);
		this.addChild(this._line);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.MenuSeparator();
	}
	,__class__: haxe.ui.toolkit.controls.MenuSeparator
});
haxe.ui.toolkit.controls.OptionBox = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	if(haxe.ui.toolkit.controls.OptionBox._groups == null) haxe.ui.toolkit.controls.OptionBox._groups = new haxe.ds.StringMap();
	this._value = new haxe.ui.toolkit.controls.OptionBoxValue();
	this._value.set_interactive(false);
	this._label = new haxe.ui.toolkit.controls.Text();
	this._layout = new haxe.ui.toolkit.layout.HorizontalLayout();
	this._autoSize = true;
};
$hxClasses["haxe.ui.toolkit.controls.OptionBox"] = haxe.ui.toolkit.controls.OptionBox;
haxe.ui.toolkit.controls.OptionBox.__name__ = ["haxe","ui","toolkit","controls","OptionBox"];
haxe.ui.toolkit.controls.OptionBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.OptionBox._groups = null;
haxe.ui.toolkit.controls.OptionBox.optionInGroup = function(value,option) {
	var exists = false;
	var arr = haxe.ui.toolkit.controls.OptionBox._groups.get(value);
	if(arr != null) {
		var _g = 0;
		while(_g < arr.length) {
			var test = arr[_g];
			++_g;
			if(test == option) {
				exists = true;
				break;
			}
		}
	}
	return exists;
};
haxe.ui.toolkit.controls.OptionBox.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.OptionBox.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	dispose: function() {
		if(this.get_group() != null) {
			var arr = haxe.ui.toolkit.controls.OptionBox._groups.get(this._group);
			HxOverrides.remove(arr,this);
		}
		haxe.ui.toolkit.core.Component.prototype.dispose.call(this);
	}
	,initialize: function() {
		var _g = this;
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this._value.set_verticalAlign("center");
		this.addChild(this._value);
		this.addChild(this._label);
		this.addEventListener(openfl.events.MouseEvent.CLICK,function(e) {
			if(_g.get_selected() == false) _g.set_selected(!_g.get_selected());
		});
	}
	,get_text: function() {
		return this._label.get_text();
	}
	,set_text: function(value) {
		value = haxe.ui.toolkit.core.Component.prototype.set_text.call(this,value);
		this._label.set_text(value);
		return value;
	}
	,get_selected: function() {
		return this._value.get_value() == "selected";
	}
	,set_selected: function(value) {
		if(this.get_selected() == value) return value;
		if(this._group != null && value == false) {
			var arr = haxe.ui.toolkit.controls.OptionBox._groups.get(this._group);
			var hasSelection = false;
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) {
					var option = arr[_g];
					++_g;
					if(option != this && option.get_selected() == true) {
						hasSelection = true;
						break;
					}
				}
			}
			if(hasSelection == false) return value;
		}
		this._value.set_value(value == true?"selected":"unselected");
		if(this._group != null && value == true) {
			var arr1 = haxe.ui.toolkit.controls.OptionBox._groups.get(this._group);
			if(arr1 != null) {
				var _g1 = 0;
				while(_g1 < arr1.length) {
					var option1 = arr1[_g1];
					++_g1;
					if(option1 != this) option1.set_selected(false);
				}
			}
		}
		var event = new openfl.events.Event(openfl.events.Event.CHANGE);
		this.dispatchEvent(event);
		return value;
	}
	,get_group: function() {
		return this._group;
	}
	,set_group: function(value) {
		if(value != null) {
			var arr = haxe.ui.toolkit.controls.OptionBox._groups.get(value);
			if(arr != null) HxOverrides.remove(arr,this);
		}
		this._group = value;
		var arr1 = haxe.ui.toolkit.controls.OptionBox._groups.get(value);
		if(arr1 == null) arr1 = new Array();
		if(haxe.ui.toolkit.controls.OptionBox.optionInGroup(value,this) == false) arr1.push(this);
		haxe.ui.toolkit.controls.OptionBox._groups.set(value,arr1);
		return value;
	}
	,applyStyle: function() {
		haxe.ui.toolkit.core.Component.prototype.applyStyle.call(this);
		if(this._label != null) {
			var labelStyle = new haxe.ui.toolkit.style.Style();
			if(this._baseStyle != null) {
				labelStyle.set_fontName(this._baseStyle.get_fontName());
				labelStyle.set_fontSize(this._baseStyle.get_fontSize());
				labelStyle.set_fontEmbedded(this._baseStyle.get_fontEmbedded());
				labelStyle.set_color(this._baseStyle.get_color());
			}
			this._label.set_baseStyle(labelStyle);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		c.set_selected(this.get_selected());
		c.set_group(this.get_group());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.OptionBox();
	}
	,__class__: haxe.ui.toolkit.controls.OptionBox
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_group:"set_group",get_group:"get_group",set_selected:"set_selected",get_selected:"get_selected"})
});
haxe.ui.toolkit.controls.OptionBoxValue = function() {
	haxe.ui.toolkit.controls.Value.call(this);
	this._value = "unselected";
	this.addValue("selected");
	this.addValue("unselected");
};
$hxClasses["haxe.ui.toolkit.controls.OptionBoxValue"] = haxe.ui.toolkit.controls.OptionBoxValue;
haxe.ui.toolkit.controls.OptionBoxValue.__name__ = ["haxe","ui","toolkit","controls","OptionBoxValue"];
haxe.ui.toolkit.controls.OptionBoxValue.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.OptionBoxValue.__super__ = haxe.ui.toolkit.controls.Value;
haxe.ui.toolkit.controls.OptionBoxValue.prototype = $extend(haxe.ui.toolkit.controls.Value.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Value.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.OptionBoxValue();
	}
	,__class__: haxe.ui.toolkit.controls.OptionBoxValue
});
haxe.ui.toolkit.controls.HProgressLayout = function() {
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.HProgressLayout"] = haxe.ui.toolkit.controls.HProgressLayout;
haxe.ui.toolkit.controls.HProgressLayout.__name__ = ["haxe","ui","toolkit","controls","HProgressLayout"];
haxe.ui.toolkit.controls.HProgressLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.controls.HProgressLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
		var background = this.get_container().findChild("background",haxe.ui.toolkit.core.Component);
		var value = null;
		if(background != null) value = background.findChild("value");
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		if(value != null) {
			var ucx = this.get_usableWidth();
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) ucx -= thumb.get_width();
			value.set_percentWidth(-1);
			var cx = (scroll.get_pos() - scroll.get_min()) / (scroll.get_max() - scroll.get_min()) * ucx;
			if(cx < 0) cx = 0; else if(cx > ucx) cx = ucx;
			if(thumb != null) cx += thumb.get_width() / 2;
			if(cx == 0) value.set_visible(false); else {
				value.set_width(cx);
				value.set_visible(true);
			}
		}
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var background = this.get_container().findChild("background",haxe.ui.toolkit.core.Component);
		var value = null;
		if(background != null) {
			background.set_y(this.get_container().get_height() / 2 - background.get_height() / 2);
			value = background.findChild("value");
		}
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		if(value != null) {
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) {
				var xpos = this.get_padding().get_left() + value.get_x() + value.get_width() - thumb.get_width() / 2;
				thumb.set_x(xpos | 0);
			}
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.HProgressLayout();
	}
	,__class__: haxe.ui.toolkit.controls.HProgressLayout
});
haxe.ui.toolkit.controls.VProgressLayout = function() {
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.VProgressLayout"] = haxe.ui.toolkit.controls.VProgressLayout;
haxe.ui.toolkit.controls.VProgressLayout.__name__ = ["haxe","ui","toolkit","controls","VProgressLayout"];
haxe.ui.toolkit.controls.VProgressLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.controls.VProgressLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
		var background = this.get_container().findChild("background",haxe.ui.toolkit.core.Component);
		var value = null;
		if(background != null) value = background.findChild("value");
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		if(value != null) {
			var ucy = this.get_usableHeight();
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) ucy -= thumb.get_height();
			value.set_percentHeight(-1);
			var cy = (scroll.get_pos() - scroll.get_min()) / (scroll.get_max() - scroll.get_min()) * ucy;
			if(cy < 0) cy = 0; else if(cy > ucy) cy = ucy;
			if(thumb != null) cy += thumb.get_height() / 2;
			if(cy == 0) value.set_visible(false); else {
				value.set_height(cy);
				value.set_visible(true);
			}
		}
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var background = this.get_container().findChild("background",haxe.ui.toolkit.core.Component);
		var value = null;
		if(background != null) {
			background.set_x(this.get_container().get_width() / 2 - background.get_width() / 2);
			value = background.findChild("value");
		}
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		if(value != null) {
			var ucy = this.get_usableHeight();
			value.set_y(ucy - value.get_height() - background.get_layout().get_padding().get_bottom());
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) {
				var ypos = this.get_padding().get_top() + value.get_y() - thumb.get_height() / 2;
				thumb.set_y(ypos | 0);
			}
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.VProgressLayout();
	}
	,__class__: haxe.ui.toolkit.controls.VProgressLayout
});
haxe.ui.toolkit.controls.Spacer = function() {
	haxe.ui.toolkit.core.Component.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.Spacer"] = haxe.ui.toolkit.controls.Spacer;
haxe.ui.toolkit.controls.Spacer.__name__ = ["haxe","ui","toolkit","controls","Spacer"];
haxe.ui.toolkit.controls.Spacer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.Spacer.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.Spacer.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Spacer();
	}
	,__class__: haxe.ui.toolkit.controls.Spacer
});
haxe.ui.toolkit.controls.TabBar = function() {
	this._selectedIndex = -1;
	haxe.ui.toolkit.containers.ScrollView.call(this);
	this.set_autoSize(false);
	this._scrollSensitivity = 5;
	this._showHScroll = this._showVScroll = false;
	this._content = new haxe.ui.toolkit.containers.HBox();
	this._content.set_id("content");
	this._content.set_percentHeight(100);
	this._content.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onMouseWheel));
	this.addChild(this._content);
};
$hxClasses["haxe.ui.toolkit.controls.TabBar"] = haxe.ui.toolkit.controls.TabBar;
haxe.ui.toolkit.controls.TabBar.__name__ = ["haxe","ui","toolkit","controls","TabBar"];
haxe.ui.toolkit.controls.TabBar.__super__ = haxe.ui.toolkit.containers.ScrollView;
haxe.ui.toolkit.controls.TabBar.prototype = $extend(haxe.ui.toolkit.containers.ScrollView.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.ScrollView.prototype.initialize.call(this);
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		if(value != this._selectedIndex) {
			var _g1 = 0;
			var _g = this._content.get_children().length;
			while(_g1 < _g) {
				var n = _g1++;
				var button;
				button = js.Boot.__cast(this._content.get_children()[n] , haxe.ui.toolkit.controls.Button);
				if(n == value) button.set_selected(true); else button.set_selected(false);
			}
			this._selectedIndex = value;
			var event = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(event);
		}
		return value;
	}
	,get_numTabs: function() {
		return this._content.get_numChildren();
	}
	,addTab: function(text) {
		var _g = this;
		var button = new haxe.ui.toolkit.controls.Button();
		button.set_text(text);
		button.set_toggle(true);
		button.set_id("tabButton");
		button.set_verticalAlign("bottom");
		button.set_allowSelection(false);
		this._content.addChild(button);
		button.set_selected(this._content.get_children().length - 1 == this._selectedIndex);
		button.addEventListener("haxeui_" + "click",$bind(this,this.tabButtonClick),false,1);
		button.addEventListener("haxeui_" + "glyphClick",$bind(this,this.tabGlyphClick));
		button.addEventListener(openfl.events.Event.ADDED_TO_STAGE,function(e) {
			var cy = _g.get_height();
			var newCY = button.get_height() + _g.get_baseStyle().get_paddingTop() + _g.get_baseStyle().get_paddingBottom();
			if(newCY > cy) _g.set_height(newCY);
			button.removeEventListenerType(openfl.events.Event.ADDED_TO_STAGE);
		});
		return button;
	}
	,removeTab: function(index) {
		this._content.removeChildAt(index);
		var newIndex = this.get_selectedIndex();
		if(newIndex > this._content.get_numChildren() - 1) newIndex = this._content.get_numChildren() - 1;
		this.set_selectedIndex(-1);
		this.set_selectedIndex(newIndex);
	}
	,getTabButton: function(index) {
		return this._content.getChildAt(index);
	}
	,removeAllTabs: function() {
		this._content.removeAllChildren();
		this._selectedIndex = -1;
	}
	,setTabText: function(index,text) {
		var button;
		button = js.Boot.__cast(this._content.getChildAt(index) , haxe.ui.toolkit.controls.Button);
		button.set_text(text);
	}
	,tabButtonClick: function(event) {
		this.set_selectedIndex(this._content.indexOfChild(event.displayObject));
	}
	,tabGlyphClick: function(event) {
		var newEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "glyphClick");
		newEvent.data = this._content.indexOfChild(event.displayObject);
		this.dispatchEvent(newEvent);
	}
	,_onMouseWheel: function(event) {
		if(this._hscroll != null && this._content.get_width() > this.get_layout().get_usableWidth()) {
			if(event.delta != 0) {
				if(event.delta < 0) this._hscroll.incrementValue(); else if(event.delta > 0) this._hscroll.deincrementValue();
			}
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.ScrollView.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.TabBar();
	}
	,__class__: haxe.ui.toolkit.controls.TabBar
	,__properties__: $extend(haxe.ui.toolkit.containers.ScrollView.prototype.__properties__,{get_numTabs:"get_numTabs",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
haxe.ui.toolkit.controls.TextInput = function() {
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this._layout = new haxe.ui.toolkit.controls.TextInputLayout();
	this._textDisplay = new haxe.ui.toolkit.text.TextDisplay();
	this._textDisplay.set_interactive(true);
	this._textDisplay.set_autoSize(false);
	this._textDisplay.set_text("");
};
$hxClasses["haxe.ui.toolkit.controls.TextInput"] = haxe.ui.toolkit.controls.TextInput;
haxe.ui.toolkit.controls.TextInput.__name__ = ["haxe","ui","toolkit","controls","TextInput"];
haxe.ui.toolkit.controls.TextInput.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.TextInput.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.TextInput.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.preInitialize.call(this);
	}
	,initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.get_sprite().addChild(this._textDisplay.get_display());
		if(this.get_multiline() == true) {
			this._textDisplay.get_display().set_width(this._layout.get_innerWidth());
			this._textDisplay.get_display().set_height(this._layout.get_innerHeight());
		}
		this._textDisplay.get_display().addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onTextChange));
		this._textDisplay.get_display().addEventListener(openfl.events.Event.SCROLL,$bind(this,this._onTextScroll));
		this.checkScrolls();
		if(this._textPlaceHolder != null && this.contains(this._textPlaceHolder) == false) this.addChild(this._textPlaceHolder);
		if(this._textPlaceHolder != null) {
			if(this.get_text().length > 0) this._textPlaceHolder.set_visible(false);
			this._textPlaceHolder.set_textAlign(this._textDisplay.get_textAlign());
			this.setChildIndex(this._textPlaceHolder,0);
		}
	}
	,dispose: function() {
		this._textDisplay.get_display().removeEventListener(openfl.events.Event.CHANGE,$bind(this,this._onTextChange));
		this._textDisplay.get_display().removeEventListener(openfl.events.Event.SCROLL,$bind(this,this._onTextScroll));
		this.get_sprite().removeChild(this._textDisplay.get_display());
		if(this._textPlaceHolder != null && this.contains(this._textPlaceHolder)) this.removeChild(this._textPlaceHolder);
		haxe.ui.toolkit.core.StateComponent.prototype.dispose.call(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.StateComponent.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256) {
			this.checkScrolls();
			this._textDisplay.get_display().set_width(this.get_layout().get_innerWidth());
			this._textDisplay.get_display().set_height(this.get_layout().get_innerHeight());
		}
		this._invalidating = false;
	}
	,set_disabled: function(value) {
		haxe.ui.toolkit.core.StateComponent.prototype.set_disabled.call(this,value);
		if(value == true) this._textDisplay.set_interactive(false); else this._textDisplay.set_interactive(true);
		return value;
	}
	,_onTextChange: function(event) {
		this.checkScrolls();
		if(this._textPlaceHolder != null) this._textPlaceHolder.set_visible(this.get_text().length == 0);
	}
	,_onTextScroll: function(event) {
		this.checkScrolls();
	}
	,_onVScrollChange: function(event) {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
	}
	,_onHScrollChange: function(event) {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
	}
	,get_text: function() {
		return this._textDisplay.get_text();
	}
	,set_text: function(value) {
		value = haxe.ui.toolkit.core.StateComponent.prototype.set_text.call(this,value);
		this._textDisplay.set_text(value);
		return value;
	}
	,applyStyle: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.applyStyle.call(this);
		if(this._textDisplay != null) this._textDisplay.set_style(this._baseStyle);
	}
	,get_multiline: function() {
		return this._textDisplay.get_multiline();
	}
	,set_multiline: function(value) {
		this._textDisplay.set_wrapLines(value);
		this._textDisplay.set_multiline(value);
		return value;
	}
	,get_selectionBeginIndex: function() {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
		var n = 0;
		return n;
	}
	,get_selectionEndIndex: function() {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
		var n = 0;
		return n;
	}
	,get_selectedTextFormat: function() {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
		return tf.getTextFormat(this.get_selectionBeginIndex() - 1,this.get_selectionEndIndex());
	}
	,get_wrapLines: function() {
		return this._textDisplay.get_wrapLines();
	}
	,set_wrapLines: function(value) {
		this._textDisplay.set_wrapLines(value);
		return value;
	}
	,get_displayAsPassword: function() {
		return this._textDisplay.get_displayAsPassword();
	}
	,set_displayAsPassword: function(value) {
		this._textDisplay.set_displayAsPassword(value);
		return value;
	}
	,get_placeholderText: function() {
		if(this._textPlaceHolder == null) return null;
		return this._textPlaceHolder.get_text();
	}
	,set_placeholderText: function(value) {
		if(this._textPlaceHolder == null) {
			this._textPlaceHolder = new haxe.ui.toolkit.controls.Text();
			this._textPlaceHolder.set_autoSize(false);
			this._textPlaceHolder.set_id("placeholder");
		}
		this._textPlaceHolder.set_text(value);
		if(this._ready && this.contains(this._textPlaceHolder) == false && value != null) this.addChild(this._textPlaceHolder);
		if(value == null) {
			if(this.contains(this._textPlaceHolder)) this.removeChild(this._textPlaceHolder);
			this._textPlaceHolder = null;
		}
		if(this._textPlaceHolder != null) this._textPlaceHolder.set_visible(this.get_text().length == 0);
		return value;
	}
	,get_textAlign: function() {
		if(this._textDisplay == null) return null;
		return this._textDisplay.get_textAlign();
	}
	,set_textAlign: function(value) {
		if(this._textDisplay != null) this._textDisplay.set_textAlign(value);
		if(this._textPlaceHolder != null) this._textPlaceHolder.set_textAlign(value);
		return value;
	}
	,get_maxChars: function() {
		return this._textDisplay.get_maxChars();
	}
	,set_maxChars: function(value) {
		return this._textDisplay.set_maxChars(value);
	}
	,get_restrictChars: function() {
		return this._textDisplay.get_restrictChars();
	}
	,set_restrictChars: function(value) {
		return this._textDisplay.set_restrictChars(value);
	}
	,get_vscrollPos: function() {
		if(this._vscroll != null) return this._vscroll.get_pos();
		return 0;
	}
	,set_vscrollPos: function(value) {
		if(this._vscroll != null) this._vscroll.set_pos(value);
		return value;
	}
	,get_vscrollMin: function() {
		if(this._vscroll != null) return this._vscroll.get_min();
		return 0;
	}
	,get_vscrollMax: function() {
		if(this._vscroll != null) return this._vscroll.get_max();
		return 0;
	}
	,replaceSelectedText: function(s) {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
	}
	,focus: function() {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
		tf.stage.set_focus(tf);
	}
	,checkScrolls: function() {
		if(this.get_multiline() == false || this.get_ready() == false) return;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		c.set_multiline(this.get_multiline());
		c.set_wrapLines(this.get_wrapLines());
		c.set_displayAsPassword(this.get_displayAsPassword());
		c.set_placeholderText(this.get_placeholderText());
		c.set_textAlign(this.get_textAlign());
		c.set_maxChars(this.get_maxChars());
		c.set_restrictChars(this.get_restrictChars());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.TextInput();
	}
	,__class__: haxe.ui.toolkit.controls.TextInput
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{get_vscrollMax:"get_vscrollMax",get_vscrollMin:"get_vscrollMin",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",set_restrictChars:"set_restrictChars",get_restrictChars:"get_restrictChars",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_placeholderText:"set_placeholderText",get_placeholderText:"get_placeholderText",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",get_selectedTextFormat:"get_selectedTextFormat",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_multiline:"set_multiline",get_multiline:"get_multiline"})
});
haxe.ui.toolkit.controls.TextInputLayout = function() {
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.TextInputLayout"] = haxe.ui.toolkit.controls.TextInputLayout;
haxe.ui.toolkit.controls.TextInputLayout.__name__ = ["haxe","ui","toolkit","controls","TextInputLayout"];
haxe.ui.toolkit.controls.TextInputLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.controls.TextInputLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
		if(this.get_container().get_sprite().get_numChildren() > 0) {
			var vscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.VScroll);
			var text = this.findTextField();
			if(text != null) {
				text.set_x(this.get_padding().get_left());
				if(text.multiline == true) {
					text.set_y(this.get_padding().get_top());
					text.set_height(this.get_usableHeight());
				} else {
					text.set_height(text.get_defaultTextFormat().size + 8);
					text.set_y(this.get_container().get_height() / 2 - text.get_height() / 2);
				}
				text.set_width(this.get_usableWidth());
				var placeholder = this.get_container().findChild("placeholder");
				if(placeholder != null) {
					placeholder.set_width(text.get_width());
					placeholder.set_height(text.get_height());
				}
			}
		}
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var vscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.VScroll);
		if(vscroll != null) vscroll.set_x(this.get_container().get_width() - vscroll.get_width() - this.get_padding().get_right());
		var hscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.HScroll);
		if(hscroll != null) hscroll.set_y(this.get_container().get_height() - hscroll.get_height() - this.get_padding().get_bottom());
		var text = this.findTextField();
		var placeholder = this.get_container().findChild("placeholder");
		if(text != null && placeholder != null) {
			placeholder.set_x(text.get_x());
			placeholder.set_y(text.get_y() + 1);
		}
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var vscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.VScroll);
		if(vscroll != null && vscroll.get_visible() == true) ucx -= vscroll.get_width() + this.get_spacingX();
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var hscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.HScroll);
		if(hscroll != null && hscroll.get_visible() == true) ucy -= hscroll.get_height() - this.get_spacingY();
		return ucy;
	}
	,findTextField: function() {
		var tf = null;
		var _g1 = 0;
		var _g = this.get_container().get_sprite().get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			var child = this.get_container().get_sprite().getChildAt(i);
			if(js.Boot.__instanceof(child,openfl.text.TextField)) {
				tf = js.Boot.__cast(child , openfl.text.TextField);
				break;
			}
		}
		return tf;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.TextInputLayout();
	}
	,__class__: haxe.ui.toolkit.controls.TextInputLayout
});
haxe.ui.toolkit.controls.ToolTip = function() {
	this.options = null;
	this.component = null;
	haxe.ui.toolkit.containers.Box.call(this);
	this._autoSize = true;
	this._textField = new haxe.ui.toolkit.controls.Text();
	this._textField.set_text("");
	this.addChild(this._textField);
};
$hxClasses["haxe.ui.toolkit.controls.ToolTip"] = haxe.ui.toolkit.controls.ToolTip;
haxe.ui.toolkit.controls.ToolTip.__name__ = ["haxe","ui","toolkit","controls","ToolTip"];
haxe.ui.toolkit.controls.ToolTip.__super__ = haxe.ui.toolkit.containers.Box;
haxe.ui.toolkit.controls.ToolTip.prototype = $extend(haxe.ui.toolkit.containers.Box.prototype,{
	set_text: function(value) {
		value = haxe.ui.toolkit.containers.Box.prototype.set_text.call(this,value);
		this._textField.set_text(value);
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.Box.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.ToolTip();
	}
	,__class__: haxe.ui.toolkit.controls.ToolTip
});
haxe.ui.toolkit.controls.VProgress = function() {
	haxe.ui.toolkit.controls.Progress.call(this);
	this.set_direction("vertical");
};
$hxClasses["haxe.ui.toolkit.controls.VProgress"] = haxe.ui.toolkit.controls.VProgress;
haxe.ui.toolkit.controls.VProgress.__name__ = ["haxe","ui","toolkit","controls","VProgress"];
haxe.ui.toolkit.controls.VProgress.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.VProgress.__super__ = haxe.ui.toolkit.controls.Progress;
haxe.ui.toolkit.controls.VProgress.prototype = $extend(haxe.ui.toolkit.controls.Progress.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Progress.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.VProgress();
	}
	,__class__: haxe.ui.toolkit.controls.VProgress
});
haxe.ui.toolkit.controls.VScroll = function() {
	this._hasButtons = true;
	this._scrollDirection = 0;
	this._mouseDownOffset = -1;
	this._incrementSize = 20;
	this._pageSize = 0;
	this._max = 100;
	this._min = 0;
	this._pos = 0;
	haxe.ui.toolkit.controls.Scroll.call(this);
	this._layout = new haxe.ui.toolkit.controls.VScrollLayout();
};
$hxClasses["haxe.ui.toolkit.controls.VScroll"] = haxe.ui.toolkit.controls.VScroll;
haxe.ui.toolkit.controls.VScroll.__name__ = ["haxe","ui","toolkit","controls","VScroll"];
haxe.ui.toolkit.controls.VScroll.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IScrollable];
haxe.ui.toolkit.controls.VScroll.__super__ = haxe.ui.toolkit.controls.Scroll;
haxe.ui.toolkit.controls.VScroll.prototype = $extend(haxe.ui.toolkit.controls.Scroll.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.controls.Scroll.prototype.preInitialize.call(this);
		if(this._baseStyle != null) this._hasButtons = this._baseStyle.get_hasButtons();
	}
	,initialize: function() {
		haxe.ui.toolkit.controls.Scroll.prototype.initialize.call(this);
		if(this._hasButtons == true) {
			this._deincButton = new haxe.ui.toolkit.controls.Button();
			this._deincButton.set_autoSize(false);
			this._deincButton.set_iconPosition("center");
			this._deincButton.set_percentWidth(100);
			this._deincButton.set_height(this.get_layout().get_innerWidth());
			this._deincButton.set_id("deinc");
			this._deincButton.set_styleName("up");
			this._deincButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onDeinc));
			this.addChild(this._deincButton);
			this._incButton = new haxe.ui.toolkit.controls.Button();
			this._incButton.set_autoSize(false);
			this._incButton.set_iconPosition("center");
			this._incButton.set_percentWidth(100);
			this._incButton.set_height(this.get_layout().get_innerWidth());
			this._incButton.set_id("inc");
			this._incButton.set_styleName("down");
			this._incButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onInc));
			this.addChild(this._incButton);
		}
		this._thumb = new haxe.ui.toolkit.controls.Button();
		this._thumb.set_iconPosition("center");
		this._thumb.set_autoSize(false);
		this._thumb.set_percentWidth(100);
		this._thumb.set_height(50);
		this._thumb.set_id("thumb");
		this._thumb.set_styleName("thumb");
		this._thumb.set_remainPressed(true);
		this._thumb.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onThumbMouseDown));
		this.addChild(this._thumb);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
	}
	,_onThumbMouseDown: function(event) {
		var ptStage = new openfl.geom.Point(event.stageX,event.stageY);
		this._mouseDownOffset = ptStage.y - this._thumb.get_y();
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScreenMouseMove: function(event) {
		var ypos = event.stageY - this._mouseDownOffset;
		var minY = 0;
		if(this._deincButton != null) minY = this._deincButton.get_height() + this.get_layout().get_spacingY();
		var maxY = this.get_layout().get_usableHeight() - this._thumb.get_height();
		if(this._deincButton != null) maxY += this._deincButton.get_height() + this.get_layout().get_spacingY();
		if(ypos < minY) ypos = minY; else if(ypos > maxY) ypos = maxY;
		var ucy = this.get_layout().get_usableHeight();
		ucy -= this._thumb.get_height();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = ypos - minY;
		var newValue = this.get_min() + v / ucy * m;
		this.set_pos(newValue | 0);
	}
	,_onScreenMouseUp: function(event) {
		this._mouseDownOffset = -1;
		if(this._scrollTimer != null) this._scrollTimer.stop();
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onDeinc: function(event) {
		this.deincrementValue();
		this._scrollDirection = 0;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl.utils.Timer(50,1);
			this._scrollTimer.addEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onInc: function(event) {
		this.incrementValue();
		this._scrollDirection = 1;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl.utils.Timer(50,1);
			this._scrollTimer.addEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScrollTimerComplete: function(event) {
		if(this._scrollTimer != null) {
			if(this._scrollDirection == 1) this.incrementValue(); else if(this._scrollDirection == 0) this.deincrementValue();
			this._scrollTimer.reset();
			this._scrollTimer.start();
		}
	}
	,_onMouseDown: function(event) {
		if(event.localY > this._thumb.get_y()) {
			var _g = this;
			_g.set_pos(_g.get_pos() + this.get_pageSize());
		} else {
			var _g1 = this;
			_g1.set_pos(_g1.get_pos() - this.get_pageSize());
		}
	}
	,get_pos: function() {
		return this._pos;
	}
	,set_pos: function(value) {
		if(value < this._min) value = this._min;
		if(value > this._max) value = this._max;
		if(value != this._pos) {
			this._pos = value;
			var changeEvent = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return value;
	}
	,get_min: function() {
		return this._min;
	}
	,set_min: function(value) {
		if(value != this._min) {
			this._min = value;
			if(this._pos < this._min) this._pos = this._min;
			this.invalidate(1);
		}
		return value;
	}
	,get_max: function() {
		return this._max;
	}
	,set_max: function(value) {
		if(value != this._max) {
			this._max = value;
			if(this._pos > this._max) this._pos = this._max;
			this.invalidate(1);
		}
		return value;
	}
	,get_pageSize: function() {
		return this._pageSize;
	}
	,set_pageSize: function(value) {
		if(value != this._pageSize) {
			this._pageSize = value;
			this.invalidate(1);
		}
		return value;
	}
	,get_incrementSize: function() {
		return this._incrementSize;
	}
	,set_incrementSize: function(value) {
		this._incrementSize = value;
		return value;
	}
	,deincrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() - this._incrementSize);
	}
	,incrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() + this._incrementSize);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Scroll.prototype.clone.call(this);
		c.set_pos(this.get_pos());
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		c.set_pageSize(this.get_pageSize());
		c.set_incrementSize(this.get_incrementSize());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.VScroll();
	}
	,__class__: haxe.ui.toolkit.controls.VScroll
	,__properties__: $extend(haxe.ui.toolkit.controls.Scroll.prototype.__properties__,{set_incrementSize:"set_incrementSize",get_incrementSize:"get_incrementSize",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_pos:"set_pos",get_pos:"get_pos"})
});
haxe.ui.toolkit.controls.VScrollLayout = function() {
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.VScrollLayout"] = haxe.ui.toolkit.controls.VScrollLayout;
haxe.ui.toolkit.controls.VScrollLayout.__name__ = ["haxe","ui","toolkit","controls","VScrollLayout"];
haxe.ui.toolkit.controls.VScrollLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.controls.VScrollLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		if(deinc != null) deinc.set_height(this.get_innerWidth());
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_height(this.get_innerWidth());
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var ucy = this.get_usableHeight();
			var thumbHeight = scroll.get_pageSize() / m * ucy;
			if(thumbHeight < this.get_innerWidth()) thumbHeight = this.get_innerWidth(); else if(thumbHeight > ucy) thumbHeight = ucy;
			if(thumbHeight > 0 && Math.isNaN(thumbHeight) == false) thumb.set_height(thumbHeight);
		}
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_y(this.get_container().get_height() - inc.get_height() - this.get_padding().get_bottom());
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var u = this.get_usableHeight();
			u -= thumb.get_height();
			var y = (scroll.get_pos() - scroll.get_min()) / m * u;
			y += this.get_padding().get_top();
			if(deinc != null) y += deinc.get_height() + this.get_spacingY();
			thumb.set_y(y);
		}
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(deinc != null) ucy -= deinc.get_height() + this.get_spacingY();
		if(inc != null) ucy -= inc.get_height() + this.get_spacingY();
		return ucy;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.VScrollLayout();
	}
	,__class__: haxe.ui.toolkit.controls.VScrollLayout
});
haxe.ui.toolkit.controls.VSlider = function() {
	haxe.ui.toolkit.controls.Slider.call(this);
	this.set_direction("vertical");
};
$hxClasses["haxe.ui.toolkit.controls.VSlider"] = haxe.ui.toolkit.controls.VSlider;
haxe.ui.toolkit.controls.VSlider.__name__ = ["haxe","ui","toolkit","controls","VSlider"];
haxe.ui.toolkit.controls.VSlider.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.VSlider.__super__ = haxe.ui.toolkit.controls.Slider;
haxe.ui.toolkit.controls.VSlider.prototype = $extend(haxe.ui.toolkit.controls.Slider.prototype,{
	_onMouseDown: function(event) {
		this.startTracking(event.stageY - this._thumb.get_stageY());
	}
	,_onScreenMouseMove: function(event) {
		var ypos = event.stageY - this.get_stageY() - this._mouseDownOffset;
		this.set_pos(Std["int"](this.calcPosFromCoord(ypos)));
	}
	,_onBackgroundMouseDown: function(event) {
		if(this._thumb.hitTest(event.stageX,event.stageY) == false) {
			var ypos = event.stageY - this.get_stageY();
			ypos -= this._thumb.get_height() / 2;
			this.set_pos(Std["int"](this.calcPosFromCoord(ypos)));
			this._thumb.set_state("down");
			this.startTracking(this._thumb.get_height() / 2);
		}
	}
	,startTracking: function(offset) {
		this._mouseDownOffset = offset;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,calcPosFromCoord: function(ypos) {
		var minY = 0;
		var maxY = this.get_layout().get_usableHeight() - this._thumb.get_height();
		if(ypos < minY) ypos = minY; else if(ypos > maxY) ypos = maxY;
		var ucy = this.get_layout().get_usableHeight();
		ucy -= this._thumb.get_height();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = ypos - minY;
		var newValue = this.get_max() - v / ucy * m;
		return newValue;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Slider.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.VSlider();
	}
	,__class__: haxe.ui.toolkit.controls.VSlider
});
haxe.ui.toolkit.controls.popups = {};
haxe.ui.toolkit.controls.popups.PopupContent = function() {
	haxe.ui.toolkit.containers.VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.popups.PopupContent"] = haxe.ui.toolkit.controls.popups.PopupContent;
haxe.ui.toolkit.controls.popups.PopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","PopupContent"];
haxe.ui.toolkit.controls.popups.PopupContent.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.controls.popups.PopupContent.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	onButtonClicked: function(button) {
		return true;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.PopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.PopupContent
});
haxe.ui.toolkit.controls.popups.SimplePopupContent = function(text) {
	if(text == null) text = "";
	haxe.ui.toolkit.controls.popups.PopupContent.call(this);
	this._autoSize = true;
	this._textControl = new haxe.ui.toolkit.controls.Text();
	this._textControl.set_multiline(true);
	this._textControl.set_wrapLines(true);
	this._textControl.set_percentWidth(100);
	this._textControl.set_text(text);
	this._textControl.set_autoSize(true);
};
$hxClasses["haxe.ui.toolkit.controls.popups.SimplePopupContent"] = haxe.ui.toolkit.controls.popups.SimplePopupContent;
haxe.ui.toolkit.controls.popups.SimplePopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","SimplePopupContent"];
haxe.ui.toolkit.controls.popups.SimplePopupContent.__super__ = haxe.ui.toolkit.controls.popups.PopupContent;
haxe.ui.toolkit.controls.popups.SimplePopupContent.prototype = $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.popups.PopupContent.prototype.initialize.call(this);
		this.addChild(this._textControl);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.popups.PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.SimplePopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.SimplePopupContent
});
haxe.ui.toolkit.controls.popups.BusyPopupContent = function(text) {
	if(text == null) text = "";
	haxe.ui.toolkit.controls.popups.SimplePopupContent.call(this,text);
};
$hxClasses["haxe.ui.toolkit.controls.popups.BusyPopupContent"] = haxe.ui.toolkit.controls.popups.BusyPopupContent;
haxe.ui.toolkit.controls.popups.BusyPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","BusyPopupContent"];
haxe.ui.toolkit.controls.popups.BusyPopupContent.__super__ = haxe.ui.toolkit.controls.popups.SimplePopupContent;
haxe.ui.toolkit.controls.popups.BusyPopupContent.prototype = $extend(haxe.ui.toolkit.controls.popups.SimplePopupContent.prototype,{
	initialize: function() {
		this.addChild(this._textControl);
		this.set_height(this._textControl.get_height() + 15);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.popups.SimplePopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.BusyPopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.BusyPopupContent
});
haxe.ui.toolkit.controls.popups.CalendarPopupContent = function() {
	haxe.ui.toolkit.controls.popups.PopupContent.call(this);
	this._cal = new haxe.ui.toolkit.containers.CalendarView();
	this._cal.set_percentWidth(100);
};
$hxClasses["haxe.ui.toolkit.controls.popups.CalendarPopupContent"] = haxe.ui.toolkit.controls.popups.CalendarPopupContent;
haxe.ui.toolkit.controls.popups.CalendarPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","CalendarPopupContent"];
haxe.ui.toolkit.controls.popups.CalendarPopupContent.__super__ = haxe.ui.toolkit.controls.popups.PopupContent;
haxe.ui.toolkit.controls.popups.CalendarPopupContent.prototype = $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.popups.PopupContent.prototype.initialize.call(this);
		this.addChild(this._cal);
		this.set_height(this._cal.get_height());
	}
	,get_selectedDate: function() {
		return this._cal.get_selectedDate();
	}
	,set_selectedDate: function(value) {
		this._cal.set_selectedDate(value);
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.popups.PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.CalendarPopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.CalendarPopupContent
	,__properties__: $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate"})
});
haxe.ui.toolkit.controls.popups.CustomPopupContent = function(display) {
	haxe.ui.toolkit.controls.popups.PopupContent.call(this);
	this._display = display;
};
$hxClasses["haxe.ui.toolkit.controls.popups.CustomPopupContent"] = haxe.ui.toolkit.controls.popups.CustomPopupContent;
haxe.ui.toolkit.controls.popups.CustomPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","CustomPopupContent"];
haxe.ui.toolkit.controls.popups.CustomPopupContent.__super__ = haxe.ui.toolkit.controls.popups.PopupContent;
haxe.ui.toolkit.controls.popups.CustomPopupContent.prototype = $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.popups.PopupContent.prototype.initialize.call(this);
		this.addChild(this._display);
		this.set_height(this._display.get_height());
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.popups.PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.CustomPopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.CustomPopupContent
});
haxe.ui.toolkit.controls.popups.ListPopupContent = function(dataSource,selectedIndex,fn) {
	if(selectedIndex == null) selectedIndex = -1;
	this.DELAY = 0;
	this._selectedIndex = -1;
	this._maxListSize = 4;
	haxe.ui.toolkit.controls.popups.PopupContent.call(this);
	this._selectedIndex = selectedIndex;
	this._fn = fn;
	this._list = new haxe.ui.toolkit.containers.ListView();
	this._list.set_percentWidth(100);
	this._list.set_dataSource(dataSource);
};
$hxClasses["haxe.ui.toolkit.controls.popups.ListPopupContent"] = haxe.ui.toolkit.controls.popups.ListPopupContent;
haxe.ui.toolkit.controls.popups.ListPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","ListPopupContent"];
haxe.ui.toolkit.controls.popups.ListPopupContent.__super__ = haxe.ui.toolkit.controls.popups.PopupContent;
haxe.ui.toolkit.controls.popups.ListPopupContent.prototype = $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.popups.PopupContent.prototype.initialize.call(this);
		this._list.addEventListener("haxeui_" + "change",$bind(this,this._onListChange));
		this.addChild(this._list);
		var n = this._maxListSize;
		if(n > this._list.get_listSize()) n = this._list.get_listSize();
		var listHeight = n * this._list.get_itemHeight() + (this._list.get_layout().get_padding().get_top() + this._list.get_layout().get_padding().get_bottom());
		this._list.set_height(listHeight);
		this.set_height(listHeight);
		this._list.setSelectedIndexNoEvent(this._selectedIndex);
	}
	,get_selectedIndex: function() {
		var index = this._selectedIndex;
		if(this._list.get_ready()) index = this._list.get_selectedIndex();
		return index;
	}
	,set_selectedIndex: function(value) {
		this._selectedIndex = value;
		if(this._list.get_ready()) this._list.set_selectedIndex(value);
		return value;
	}
	,get_listSize: function() {
		if(this._list.get_ready() == false) return -1;
		return this._list.get_listSize();
	}
	,_onListChange: function(event) {
		this.hideTimer = new openfl.utils.Timer(this.DELAY,1);
		this.hideTimer.addEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onTimerComplete));
		this.hideTimer.start();
	}
	,_onTimerComplete: function(event) {
		this.hideTimer.removeEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onTimerComplete));
		if(Std["is"](this.get_parent(),haxe.ui.toolkit.controls.popups.Popup)) haxe.ui.toolkit.core.PopupManager.get_instance().hidePopup(js.Boot.__cast(this.get_parent() , haxe.ui.toolkit.controls.popups.Popup));
		if(this._fn != null) {
			var item = this._list.get_selectedItems()[0];
			var index = this._list.getItemIndex(item);
			item.get_data().index = index;
			this._fn(item);
		}
	}
	,setSelectedIndexNoEvent: function(index) {
		this._selectedIndex = index;
		if(this._list.get_ready()) this._list.setSelectedIndexNoEvent(index);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.popups.PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.ListPopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.ListPopupContent
	,__properties__: $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype.__properties__,{get_listSize:"get_listSize",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
haxe.ui.toolkit.core.interfaces.IDraggable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDraggable"] = haxe.ui.toolkit.core.interfaces.IDraggable;
haxe.ui.toolkit.core.interfaces.IDraggable.__name__ = ["haxe","ui","toolkit","core","interfaces","IDraggable"];
haxe.ui.toolkit.core.interfaces.IDraggable.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDraggable
};
haxe.ui.toolkit.controls.popups.Popup = function(title,content,config,fn) {
	var _g = this;
	haxe.ui.toolkit.containers.VBox.call(this);
	this._autoSize = true;
	if(title != null) {
		this._titleBar = new haxe.ui.toolkit.containers.Box();
		this._titleBar.set_autoSize(false);
		this._titleBar.set_id("titleBar");
	}
	this._content = content;
	this._content.popup = this;
	if(title != null) {
		this._title = new haxe.ui.toolkit.controls.Text();
		this._title.set_id("title");
		this._title.set_text(title);
	}
	this._buttonBar = new haxe.ui.toolkit.containers.Box();
	this._buttonBar.set_id("buttonBar");
	this._buttonBar.set_horizontalAlign("center");
	this._config = config;
	if(this._config == null) {
		this._config = { };
		this._config.buttons = new Array();
	}
	if(this._config.id != null) this.set_id(this._config.id);
	if(this._config.styleName != null) this.set_styleName(this._config.styleName);
	if(this._config.dismiss != null && (this._config.dismiss & 65536) > 0) this.addEventListener(openfl.events.MouseEvent.CLICK,function(e) {
		haxe.ui.toolkit.core.PopupManager.get_instance().hidePopup(_g);
		_g.callClosingCallback(4096);
	});
	this._fn = fn;
};
$hxClasses["haxe.ui.toolkit.controls.popups.Popup"] = haxe.ui.toolkit.controls.popups.Popup;
haxe.ui.toolkit.controls.popups.Popup.__name__ = ["haxe","ui","toolkit","controls","popups","Popup"];
haxe.ui.toolkit.controls.popups.Popup.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDraggable];
haxe.ui.toolkit.controls.popups.Popup.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.controls.popups.Popup.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	initialize: function() {
		var _g = this;
		haxe.ui.toolkit.containers.VBox.prototype.initialize.call(this);
		if(this._titleBar != null) {
			this._titleBar.set_percentWidth(100);
			this._titleBar.addChild(this._title);
			if(this._config.closeButton == true) {
				this._exitButton = new haxe.ui.toolkit.controls.Button();
				this._exitButton.set_text("x");
				this._exitButton.set_id("close");
				this._exitButton.set_styleName("close");
				this._exitButton.addEventListener(openfl.events.MouseEvent.CLICK,function(e) {
					haxe.ui.toolkit.core.PopupManager.get_instance().hidePopup(_g);
				});
				this._titleBar.addChild(this._exitButton);
			}
			this._titleBar.get_sprite().buttonMode = true;
			this._titleBar.get_sprite().useHandCursor = true;
			this.addChild(this._titleBar);
		}
		if(this._content == null) this._content = new haxe.ui.toolkit.controls.popups.PopupContent();
		this._content.set_id("popupContent");
		this._content.set_percentWidth(100);
		this.addChild(this._content);
		if(this._config.buttons.length > 0) {
			var box = new haxe.ui.toolkit.containers.HBox();
			box.set_horizontalAlign(this._buttonBar.get_horizontalAlign());
			var buttons = this._config.buttons;
			this._buttonBar.addChild(box);
			var _g1 = 0;
			while(_g1 < buttons.length) {
				var info = [buttons[_g1]];
				++_g1;
				if((info[0].type & 16777216) != 16777216) {
					var button = this.createStandardButton(info[0].type);
					if(button != null) box.addChild(button);
				} else {
					var button1 = new haxe.ui.toolkit.controls.Button();
					button1.set_text(info[0].text);
					button1.addEventListener(openfl.events.MouseEvent.CLICK,(function(info) {
						return function(e1) {
							_g.clickButton(info[0].type);
						};
					})(info));
					box.addChild(button1);
				}
			}
			this.addChild(this._buttonBar);
		}
		if(this._config.width != null) this.set_width(this._config.width);
		haxe.ui.toolkit.core.PopupManager.get_instance().centerPopup(this);
	}
	,allowDrag: function(event) {
		return this._config.dragAnywhere || (this._titleBar == null?false:this._titleBar.hitTest(event.stageX,event.stageY));
	}
	,get_content: function() {
		return this._content;
	}
	,get_config: function() {
		return this._config;
	}
	,createStandardButton: function(v) {
		var _g = this;
		var button = null;
		if(v == 1) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("OK");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e) {
				_g.clickButton(1);
			});
		}
		if(v == 16) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("Yes");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e1) {
				_g.clickButton(16);
			});
		}
		if(v == 256) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("No");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e2) {
				_g.clickButton(256);
			});
		}
		if(v == 4096) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("Cancel");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e3) {
				_g.clickButton(4096);
			});
		}
		if(v == 65536) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("Confirm");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e4) {
				_g.clickButton(65536);
			});
		}
		if(v == 1048576) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("Close");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e5) {
				_g.clickButton(1048576);
			});
		}
		return button;
	}
	,clickButton: function(button) {
		if(this._content.onButtonClicked(button) == true) haxe.ui.toolkit.core.PopupManager.get_instance().hidePopup(this);
		if(this._fn != null) this._fn(button);
	}
	,callClosingCallback: function(button) {
		if(this._fn != null) this._fn(button);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.Popup();
	}
	,__class__: haxe.ui.toolkit.controls.popups.Popup
	,__properties__: $extend(haxe.ui.toolkit.containers.VBox.prototype.__properties__,{get_config:"get_config",get_content:"get_content"})
});
haxe.ui.toolkit.controls.selection = {};
haxe.ui.toolkit.controls.selection.DateSelector = function() {
	this.dateFormat = "%d/%m/%Y";
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_text("Select Date");
	this.set_toggle(true);
};
$hxClasses["haxe.ui.toolkit.controls.selection.DateSelector"] = haxe.ui.toolkit.controls.selection.DateSelector;
haxe.ui.toolkit.controls.selection.DateSelector.__name__ = ["haxe","ui","toolkit","controls","selection","DateSelector"];
haxe.ui.toolkit.controls.selection.DateSelector.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.selection.DateSelector.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.controls.Button.prototype.preInitialize.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null) this._method = this._baseStyle.get_selectionMethod();
		}
	}
	,initialize: function() {
		haxe.ui.toolkit.controls.Button.prototype.initialize.call(this);
		this.set_autoSize(false);
	}
	,_onMouseClick: function(event) {
		haxe.ui.toolkit.controls.Button.prototype._onMouseClick.call(this,event);
		if(this._cal == null || this._cal.get_visible() == false) this.showCalendar(); else this.hideCalendar();
	}
	,applyStyle: function() {
		haxe.ui.toolkit.controls.Button.prototype.applyStyle.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null && this._method == null) this._method = this._baseStyle.get_selectionMethod();
		}
	}
	,showCalendar: function() {
		var _g = this;
		if(this._method == "popup") haxe.ui.toolkit.core.PopupManager.get_instance().showCalendar("Select Date",function(button,date) {
			_g.set_selected(false);
			if(button == 65536) {
				var dateString = DateTools.format(date,_g.dateFormat);
				_g.set_text(dateString);
			}
		}); else {
			if(this._cal == null) {
				this._cal = new haxe.ui.toolkit.containers.CalendarView();
				this._cal.set_styleName("dropDown");
				if(this.get_id() != null) this._cal.set_id(this.get_id() + "_dropDown");
				this._cal.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDateChange));
				this._cal.addEventListener(openfl.events.Event.ADDED_TO_STAGE,function(e) {
					_g.showCalendar();
				});
				this.get_root().addChild(this._cal);
				return;
			}
			this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this._cal.set_x(this.get_stageX() - this.get_root().get_stageX());
			this._cal.set_y(this.get_stageY() + this.get_height() - this.get_root().get_stageY());
			if(this._cal.get_stageY() + this._cal.get_height() > haxe.ui.toolkit.core.Screen.get_instance().get_height()) {
				this._cal.set_y(this.get_stageY() - this._cal.get_height());
				this.set_styleName("dropUp");
			} else this.set_styleName(null);
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.selection.DateSelector);
			if(transition == "slide") {
				this._cal.set_clipHeight(0);
				this._cal.get_sprite().set_alpha(1);
				this._cal.set_visible(true);
				motion.Actuate.tween(this._cal,.1,{ clipHeight : this._cal.get_height()},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
					_g._cal.clearClip();
				});
			} else if(transition == "fade") {
				this._cal.get_sprite().set_alpha(0);
				this._cal.set_visible(true);
				motion.Actuate.tween(this._cal.get_sprite(),.2,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				});
			} else {
				this._cal.get_sprite().set_alpha(1);
				this._cal.set_visible(true);
			}
			this.set_selected(true);
		}
	}
	,hideCalendar: function() {
		var _g = this;
		if(this._cal != null) {
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.selection.DateSelector);
			if(transition == "slide") {
				this._cal.get_sprite().set_alpha(1);
				motion.Actuate.tween(this._cal,.1,{ clipHeight : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
					_g._cal.set_visible(false);
					_g._cal.clearClip();
				});
			} else if(transition == "fade") motion.Actuate.tween(this._cal.get_sprite(),.2,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				_g._cal.set_visible(false);
			}); else {
				this._cal.get_sprite().set_alpha(1);
				this._cal.set_visible(false);
			}
			this.set_selected(false);
		}
	}
	,get_method: function() {
		return this._method;
	}
	,set_method: function(value) {
		this._method = value;
		return value;
	}
	,get_date: function() {
		if(this._cal != null) return this._cal.get_selectedDate();
		return new Date();
	}
	,set_dateFormat: function(value) {
		this.dateFormat = value;
		if(this._cal != null) this.set_text(DateTools.format(this._cal.get_selectedDate(),this.dateFormat));
		return value;
	}
	,_onRootMouseDown: function(event) {
		var mouseInList = false;
		if(this._cal != null) mouseInList = this._cal.hitTest(event.stageX,event.stageY);
		var mouseIn = this.hitTest(event.stageX,event.stageY);
		if(mouseInList == false && this._cal != null && mouseIn == false) {
			this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this.hideCalendar();
		}
	}
	,onDateChange: function(event) {
		var dateString = DateTools.format(this._cal.get_selectedDate(),this.dateFormat);
		this.set_text(dateString);
		this.hideCalendar();
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.selection.DateSelector();
	}
	,__class__: haxe.ui.toolkit.controls.selection.DateSelector
	,__properties__: $extend(haxe.ui.toolkit.controls.Button.prototype.__properties__,{set_dateFormat:"set_dateFormat",get_date:"get_date",set_method:"set_method",get_method:"get_method"})
});
haxe.ui.toolkit.controls.selection.ListSelector = function() {
	this._selectedIndex = -1;
	this._maxListSize = 4;
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_toggle(true);
	this.set_allowSelection(false);
	this.dispatchChangeEvents = false;
	this.set_autoSize(false);
};
$hxClasses["haxe.ui.toolkit.controls.selection.ListSelector"] = haxe.ui.toolkit.controls.selection.ListSelector;
haxe.ui.toolkit.controls.selection.ListSelector.__name__ = ["haxe","ui","toolkit","controls","selection","ListSelector"];
haxe.ui.toolkit.controls.selection.ListSelector.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDataComponent];
haxe.ui.toolkit.controls.selection.ListSelector.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.selection.ListSelector.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.controls.Button.prototype.preInitialize.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null) this._method = this._baseStyle.get_selectionMethod();
		}
	}
	,initialize: function() {
		haxe.ui.toolkit.controls.Button.prototype.initialize.call(this);
	}
	,_onMouseClick: function(event) {
		if(this._list == null || this._list.get_visible() == false) this.showList(); else this.hideList();
	}
	,applyStyle: function() {
		haxe.ui.toolkit.controls.Button.prototype.applyStyle.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null && this._method == null) this._method = this._baseStyle.get_selectionMethod();
			if(this._baseStyle.get_listSize() != -1) this.set_listSize(this._baseStyle.get_listSize());
		}
	}
	,get_dataSource: function() {
		if(this._dataSource == null) this._dataSource = new haxe.ui.toolkit.data.ArrayDataSource();
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		this._dataSource = value;
		return value;
	}
	,showList: function() {
		var _g = this;
		if(this._method == "popup") haxe.ui.toolkit.core.PopupManager.get_instance().showList(this.get_dataSource(),this._selectedIndex,"Select Item",{ },function(item) {
			_g._selectedIndex = item.get_data().index;
			_g.set_text(item.get_data().text);
			_g._selectedItems = new Array();
			_g._selectedItems.push(item);
			_g.set_selected(false);
			var event = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change");
			_g.dispatchEvent(event);
		}); else {
			if(this._list == null) {
				this._list = new haxe.ui.toolkit.containers.ListView();
				this._list.set_styleName("dropDown");
				if(this.get_id() != null) this._list.set_id(this.get_id() + "_dropDown");
				this._list.addEventListener("haxeui_" + "change",$bind(this,this._onListChange));
				this._list.get_content().addEventListener(openfl.events.Event.ADDED_TO_STAGE,function(e) {
					_g.showList();
				});
				this.get_root().addChild(this._list);
				return;
			}
			this._list.set_dataSource(this._dataSource);
			this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this._list.set_x(this.get_stageX() - this.get_root().get_stageX());
			this._list.set_y(this.get_stageY() + this.get_height() - this.get_root().get_stageY());
			this._list.set_width(this.get_width());
			var n = this._maxListSize;
			if(n > this._list.get_listSize()) n = this._list.get_listSize();
			var listHeight = n * this._list.get_itemHeight() + (this._list.get_layout().get_padding().get_top() + this._list.get_layout().get_padding().get_bottom());
			this._list.set_height(listHeight);
			this._list.setSelectedIndexNoEvent(this._selectedIndex);
			if(this._list.get_stageY() + listHeight > haxe.ui.toolkit.core.Screen.get_instance().get_height()) {
				this._list.set_y(this.get_stageY() - this._list.get_height());
				this.set_styleName("dropUp");
			} else this.set_styleName(null);
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.selection.ListSelector);
			if(transition == "slide") {
				this._list.set_clipHeight(0);
				this._list.get_sprite().set_alpha(1);
				this._list.set_visible(true);
				motion.Actuate.tween(this._list,.1,{ clipHeight : listHeight},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
					_g._list.clearClip();
				});
			} else if(transition == "fade") {
				this._list.get_sprite().set_alpha(0);
				this._list.set_visible(true);
				motion.Actuate.tween(this._list.get_sprite(),.2,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				});
			} else {
				this._list.get_sprite().set_alpha(1);
				this._list.set_visible(true);
			}
			this.set_selected(true);
		}
	}
	,hideList: function() {
		var _g = this;
		if(this._list != null) {
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.selection.ListSelector);
			if(transition == "slide") {
				this._list.get_sprite().set_alpha(1);
				motion.Actuate.tween(this._list,.1,{ clipHeight : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
					_g._list.set_visible(false);
					_g._list.clearClip();
				});
			} else if(transition == "fade") motion.Actuate.tween(this._list.get_sprite(),.2,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				_g._list.set_visible(false);
			}); else {
				this._list.get_sprite().set_alpha(1);
				this._list.set_visible(false);
			}
			this.set_selected(false);
		}
	}
	,get_method: function() {
		return this._method;
	}
	,set_method: function(value) {
		this._method = value;
		return value;
	}
	,get_listSize: function() {
		return this._maxListSize;
	}
	,set_listSize: function(value) {
		this._maxListSize = value;
		return value;
	}
	,get_selectedItems: function() {
		return this._selectedItems;
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		this._selectedIndex = value;
		if(this._list != null) {
			this._list.set_selectedIndex(value);
			this._selectedItems = this._list.get_selectedItems();
		}
		if(this._selectedIndex > -1 && this._dataSource != null) {
			var n = 0;
			if(this.get_dataSource().moveFirst()) do {
				if(n == this._selectedIndex) {
					this.set_text(this._dataSource.get().text);
					break;
				}
				n++;
			} while(this.get_dataSource().moveNext());
		}
		return value;
	}
	,_onRootMouseDown: function(event) {
		var mouseInList = false;
		if(this._list != null) mouseInList = this._list.hitTest(event.stageX,event.stageY);
		var mouseIn = this.hitTest(event.stageX,event.stageY);
		if(mouseInList == false && this._list != null && mouseIn == false) {
			this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this.hideList();
		}
	}
	,_onListChange: function(event) {
		if(this._list.get_selectedItems() != null && this._list.get_selectedItems().length > 0) {
			this.set_text(this._list.get_selectedItems()[0].get_data().text);
			this._selectedIndex = this._list.get_selectedIndex();
			this._selectedItems = this._list.get_selectedItems();
			this.hideList();
			var event1 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change");
			this.dispatchEvent(event1);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.selection.ListSelector();
	}
	,__class__: haxe.ui.toolkit.controls.selection.ListSelector
	,__properties__: $extend(haxe.ui.toolkit.controls.Button.prototype.__properties__,{set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",get_selectedItems:"get_selectedItems",set_listSize:"set_listSize",get_listSize:"get_listSize",set_method:"set_method",get_method:"get_method",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"})
});
haxe.ui.toolkit.controls.selection.DropDownList = function() {
	haxe.ui.toolkit.containers.ListView.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.selection.DropDownList"] = haxe.ui.toolkit.controls.selection.DropDownList;
haxe.ui.toolkit.controls.selection.DropDownList.__name__ = ["haxe","ui","toolkit","controls","selection","DropDownList"];
haxe.ui.toolkit.controls.selection.DropDownList.__super__ = haxe.ui.toolkit.containers.ListView;
haxe.ui.toolkit.controls.selection.DropDownList.prototype = $extend(haxe.ui.toolkit.containers.ListView.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.ListView.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.selection.DropDownList();
	}
	,__class__: haxe.ui.toolkit.controls.selection.DropDownList
});
haxe.ui.toolkit.core.ClassManager = function() {
	this.registerDefaults();
};
$hxClasses["haxe.ui.toolkit.core.ClassManager"] = haxe.ui.toolkit.core.ClassManager;
haxe.ui.toolkit.core.ClassManager.__name__ = ["haxe","ui","toolkit","core","ClassManager"];
haxe.ui.toolkit.core.ClassManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.ClassManager._instance = null;
haxe.ui.toolkit.core.ClassManager.instance = null;
haxe.ui.toolkit.core.ClassManager.get_instance = function() {
	if(haxe.ui.toolkit.core.ClassManager._instance == null) haxe.ui.toolkit.core.ClassManager._instance = new haxe.ui.toolkit.core.ClassManager();
	return haxe.ui.toolkit.core.ClassManager._instance;
};
haxe.ui.toolkit.core.ClassManager.prototype = {
	registerDefaults: function() {
	}
	,getComponentClassName: function(simpleName) {
		if(this.componentClassMap == null) return null;
		var key = simpleName;
		var entry = this.componentClassMap.get(key);
		if(entry == null) return null;
		return entry.className;
	}
	,registerComponentClass: function(cls,simpleName) {
		var className = Type.getClassName(cls);
		this.registerComponentClassName(className,simpleName);
	}
	,registerComponentClassName: function(className,simpleName) {
		if(this.componentClassMap == null) this.componentClassMap = new haxe.ds.StringMap();
		var entry = new haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry();
		entry.simpleName = simpleName;
		entry.className = className;
		this.componentClassMap.set(simpleName,entry);
	}
	,hasDataSourceClass: function(simpleName) {
		if(this.dataSourceClassMap == null) return false;
		return this.dataSourceClassMap.exists(simpleName);
	}
	,getDataSourceClassName: function(simpleName) {
		if(this.dataSourceClassMap == null) return null;
		var entry = this.dataSourceClassMap.get(simpleName);
		if(entry == null) return null;
		return entry.className;
	}
	,registerDataSourceClass: function(cls,simpleName) {
		var className = Type.getClassName(cls);
		this.registerDataSourceClassName(className,simpleName);
	}
	,registerDataSourceClassName: function(className,simpleName) {
		if(this.dataSourceClassMap == null) this.dataSourceClassMap = new haxe.ds.StringMap();
		var entry = new haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry();
		entry.simpleName = simpleName;
		entry.className = className;
		this.dataSourceClassMap.set(simpleName,entry);
	}
	,__class__: haxe.ui.toolkit.core.ClassManager
};
haxe.ui.toolkit.core._ClassManager = {};
haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry = function() {
};
$hxClasses["haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry"] = haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry;
haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.__name__ = ["haxe","ui","toolkit","core","_ClassManager","ClassRegistryEntry"];
haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.prototype = {
	__class__: haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry
};
haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry = function() {
	haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.call(this);
};
$hxClasses["haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry"] = haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry;
haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry.__name__ = ["haxe","ui","toolkit","core","_ClassManager","ComponentRegistryEntry"];
haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry.__super__ = haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry;
haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry.prototype = $extend(haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.prototype,{
	__class__: haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry
});
haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry = function() {
	haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.call(this);
};
$hxClasses["haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry"] = haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry;
haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry.__name__ = ["haxe","ui","toolkit","core","_ClassManager","DataSourceRegistryEntry"];
haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry.__super__ = haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry;
haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry.prototype = $extend(haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.prototype,{
	__class__: haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry
});
haxe.ui.toolkit.core.Client = function() {
};
$hxClasses["haxe.ui.toolkit.core.Client"] = haxe.ui.toolkit.core.Client;
haxe.ui.toolkit.core.Client.__name__ = ["haxe","ui","toolkit","core","Client"];
haxe.ui.toolkit.core.Client.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.Client._instance = null;
haxe.ui.toolkit.core.Client.instance = null;
haxe.ui.toolkit.core.Client.get_instance = function() {
	if(haxe.ui.toolkit.core.Client._instance == null) {
		haxe.ui.toolkit.core.Client._instance = new haxe.ui.toolkit.core.Client();
		haxe.ui.toolkit.core.Client._instance.init();
	}
	return haxe.ui.toolkit.core.Client._instance;
};
haxe.ui.toolkit.core.Client.prototype = {
	init: function() {
	}
	,get_language: function() {
		return openfl.system.Capabilities.get_language();
	}
	,get_dpi: function() {
		return openfl.system.Capabilities.get_screenDPI();
	}
	,get_platform: function() {
		return "html5";
		return null;
	}
	,get_target: function() {
		return "html5";
		return null;
	}
	,get_mobile: function() {
		return false;
	}
	,get_screenWidth: function() {
		return openfl.system.Capabilities.get_screenResolutionX();
	}
	,get_screenHeight: function() {
		return openfl.system.Capabilities.get_screenResolutionY();
	}
	,get_windowWidth: function() {
		return openfl.Lib.current.stage.stageWidth;
	}
	,get_windowHeight: function() {
		return openfl.Lib.current.stage.stageHeight;
	}
	,__class__: haxe.ui.toolkit.core.Client
	,__properties__: {get_mobile:"get_mobile",get_target:"get_target",get_windowHeight:"get_windowHeight",get_windowWidth:"get_windowWidth",get_screenHeight:"get_screenHeight",get_screenWidth:"get_screenWidth",get_platform:"get_platform",get_dpi:"get_dpi",get_language:"get_language"}
};
haxe.ui.toolkit.core.Controller = function(view,options) {
	var _g = this;
	if(js.Boot.__instanceof(view,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) this._view = js.Boot.__cast(view , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer); else if(js.Boot.__instanceof(view,Class)) {
		var cls;
		cls = js.Boot.__cast(view , Class);
		this._view = Type.createInstance(cls,[]);
	} else if(view != null) options = view;
	if(this._view == null) this._view = new haxe.ui.toolkit.core.Component();
	if(options != null) {
		var _g1 = 0;
		var _g11 = Reflect.fields(options);
		while(_g1 < _g11.length) {
			var f = _g11[_g1];
			++_g1;
			if(Reflect.getProperty(this._view,"set_" + f) != null) Reflect.setProperty(this._view,f,Reflect.field(options,f));
		}
	}
	this.refereshNamedComponents();
	this._view.addEventListener("haxeui_" + "addedToStage",function(e) {
		if(_g._view.get_width() != 0 && _g._view.get_height() != 0) _g.onReady();
	});
};
$hxClasses["haxe.ui.toolkit.core.Controller"] = haxe.ui.toolkit.core.Controller;
haxe.ui.toolkit.core.Controller.__name__ = ["haxe","ui","toolkit","core","Controller"];
haxe.ui.toolkit.core.Controller.prototype = {
	onReady: function() {
	}
	,addChild: function(child,options) {
		var childObject = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IDisplayObject)) childObject = js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObject); else if(js.Boot.__instanceof(child,Class)) {
			var cls;
			cls = js.Boot.__cast(child , Class);
			childObject = Type.createInstance(cls,[]);
		} else if(child != null) options = child;
		if(childObject == null) childObject = new haxe.ui.toolkit.core.Component();
		if(options != null) {
			var _g = 0;
			var _g1 = Reflect.fields(options);
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(Reflect.getProperty(childObject,"set_" + f) != null) Reflect.setProperty(childObject,f,Reflect.field(options,f));
			}
		}
		var retVal = this._view.addChild(childObject);
		this.refereshNamedComponents();
		return retVal;
	}
	,attachView: function(newView) {
		this._view = newView;
		this.refereshNamedComponents();
	}
	,attachEvent: function(id,type,listener) {
		var c = this.getComponent(id);
		if(c != null) c.addEventListener(type,listener);
	}
	,detachEvent: function(id,type,listener) {
		var c = this.getComponent(id);
		if(c != null) c.removeEventListener(type,listener);
	}
	,detachEvents: function(id,type) {
		var c = this.getComponent(id);
		if(c != null) c.removeEventListenerType(type);
	}
	,getComponent: function(id) {
		return this.getComponentAs(id,haxe.ui.toolkit.core.Component);
	}
	,getComponentAs: function(id,type) {
		var c = this._namedComponents.get(id);
		if(c == null) return null;
		return c;
	}
	,refereshNamedComponents: function() {
		this._namedComponents = new haxe.ds.StringMap();
		this.addNamedComponentsFrom(this._view);
	}
	,addNamedComponentsFrom: function(parent) {
		if(parent == null) return;
		if(parent != null && parent.get_id() != null) this._namedComponents.set(parent.get_id(),parent);
		var _g = 0;
		var _g1 = parent.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.addNamedComponentsFrom(js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer));
		}
	}
	,get_view: function() {
		return this._view;
	}
	,get_root: function() {
		if(this._view == null) return null;
		return this._view.get_root();
	}
	,get_popup: function() {
		var popup = null;
		if(Std["is"](this.get_view().get_parent(),haxe.ui.toolkit.controls.popups.PopupContent)) popup = (js.Boot.__cast(this.get_view().get_parent() , haxe.ui.toolkit.controls.popups.PopupContent)).popup;
		return popup;
	}
	,get_namedComponents: function() {
		return this._namedComponents;
	}
	,showPopup: function(text,title,config,fn) {
		if(config == null) config = 1;
		return this.showSimplePopup(text,title,config,fn);
	}
	,showSimplePopup: function(text,title,config,fn) {
		if(config == null) config = 1;
		return haxe.ui.toolkit.core.PopupManager.get_instance().showSimple(text,title,config,fn);
	}
	,showCustomPopup: function(content,title,config,fn) {
		if(config == null) config = 1;
		var display = null;
		if(js.Boot.__instanceof(content,haxe.ui.toolkit.core.interfaces.IDisplayObject)) display = js.Boot.__cast(content , haxe.ui.toolkit.core.interfaces.IDisplayObject); else if(typeof(content) == "string") display = haxe.ui.toolkit.core.Toolkit.processXmlResource(js.Boot.__cast(content , String));
		if(display == null) return null;
		return haxe.ui.toolkit.core.PopupManager.get_instance().showCustom(display,title,config,fn);
	}
	,showListPopup: function(items,selectedIndex,title,fn) {
		if(selectedIndex == null) selectedIndex = -1;
		return haxe.ui.toolkit.core.PopupManager.get_instance().showList(items,selectedIndex,title,fn);
	}
	,showBusyPopup: function(text,delay,title,config,fn) {
		if(delay == null) delay = -1;
		this.hideBusy();
		return this._currentBusyPopup = haxe.ui.toolkit.core.PopupManager.get_instance().showBusy(text,delay,title,config,fn);
	}
	,showBusy: function(text,delay,title,config,fn) {
		if(delay == null) delay = -1;
		return this.showBusyPopup(text,delay,title,config,fn);
	}
	,hideBusy: function() {
		if(this._currentBusyPopup != null) {
			haxe.ui.toolkit.core.PopupManager.get_instance().hidePopup(this._currentBusyPopup);
			this._currentBusyPopup = null;
		}
	}
	,showCalendarPopup: function(title,fn) {
		return haxe.ui.toolkit.core.PopupManager.get_instance().showCalendar(title,fn);
	}
	,__class__: haxe.ui.toolkit.core.Controller
	,__properties__: {get_namedComponents:"get_namedComponents",get_popup:"get_popup",get_root:"get_root",get_view:"get_view"}
};
haxe.ui.toolkit.core.FocusManager = function() {
};
$hxClasses["haxe.ui.toolkit.core.FocusManager"] = haxe.ui.toolkit.core.FocusManager;
haxe.ui.toolkit.core.FocusManager.__name__ = ["haxe","ui","toolkit","core","FocusManager"];
haxe.ui.toolkit.core.FocusManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.FocusManager._instance = null;
haxe.ui.toolkit.core.FocusManager.instance = null;
haxe.ui.toolkit.core.FocusManager.get_instance = function() {
	if(haxe.ui.toolkit.core.FocusManager._instance == null) haxe.ui.toolkit.core.FocusManager._instance = new haxe.ui.toolkit.core.FocusManager();
	return haxe.ui.toolkit.core.FocusManager._instance;
};
haxe.ui.toolkit.core.FocusManager.prototype = {
	__class__: haxe.ui.toolkit.core.FocusManager
};
haxe.ui.toolkit.core.Macros = function() { };
$hxClasses["haxe.ui.toolkit.core.Macros"] = haxe.ui.toolkit.core.Macros;
haxe.ui.toolkit.core.Macros.__name__ = ["haxe","ui","toolkit","core","Macros"];
haxe.ui.toolkit.core.Macros.processNode = function(node,types,paths) {
	var nodeName = node.get_nodeName();
	var n = nodeName.indexOf(":");
	if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
	nodeName = nodeName.toLowerCase();
	if(nodeName == "import") {
	}
	var id = node.get("id");
	if(id != null && id.length > 0) {
		var cls = haxe.ui.toolkit.core.Macros.componentClasses.get(nodeName);
		if(cls != null) types.set(id,cls); else haxe.Log.trace("WARNING: '" + nodeName + "' hasnt been registered",{ fileName : "Macros.hx", lineNumber : 482, className : "haxe.ui.toolkit.core.Macros", methodName : "processNode"});
	}
	var $it0 = node.elements();
	while( $it0.hasNext() ) {
		var child = $it0.next();
		haxe.ui.toolkit.core.Macros.processNode(child,types,paths);
	}
};
haxe.ui.toolkit.core.Macros.getFunction = function(name,fields) {
	var fn = null;
	var _g = 0;
	try {
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			if(f.name == name) {
				{
					var _g1 = f.kind;
					switch(_g1[1]) {
					case 1:
						var f1 = _g1[2];
						fn = f1;
						throw "__break__";
						break;
					default:
					}
				}
				throw "__break__";
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	return fn;
};
haxe.ui.toolkit.core.Macros.addFunction = function(name,e,access,fields,pos) {
	var fn;
	{
		var _g = e.expr;
		switch(_g[1]) {
		case 11:
			var f = _g[3];
			fn = f;
			break;
		default:
			throw "false";
		}
	}
	fields.push({ name : name, doc : null, meta : [], access : access, kind : haxe.macro.FieldType.FFun(fn), pos : pos});
};
haxe.ui.toolkit.core.Macros.getFieldsWithMeta = function(meta,fields) {
	var arr = new Array();
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		if(haxe.ui.toolkit.core.Macros.hasMeta(f,meta)) arr.push(f);
	}
	return arr;
};
haxe.ui.toolkit.core.Macros.getSuperClass = function(t) {
	var superClass = null;
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		break;
	case 0:
		var t2 = t[2];
		break;
	case 7:
		var t3 = t[2];
		break;
	case 4:
		var t4 = t[2];
		break;
	case 6:
		var t5 = t[2];
		break;
	case 2:
		var t6 = t[2];
		superClass = t6.get().superClass;
		break;
	case 1:
		var t7 = t[2];
		break;
	case 3:
		var t8 = t[2];
		break;
	case 8:
		var t9 = t[2];
		break;
	}
	return superClass;
};
haxe.ui.toolkit.core.Macros.insertLine = function(fn,e,location) {
	{
		var _g = fn.expr.expr;
		switch(_g[1]) {
		case 12:
			var el = _g[2];
			fn.expr = { expr : haxe.macro.ExprDef.EBlock(haxe.ui.toolkit.core.Macros.insertExpr(el,location,e)), pos : { file : "C:/HaxeToolkit/haxe/lib/haxeui/1,7,13/haxe/ui/toolkit/core/Macros.hx", min : 18103, max : 18132}};
			break;
		default:
			fn.expr = { expr : haxe.macro.ExprDef.EBlock(haxe.ui.toolkit.core.Macros.insertExpr([fn.expr],location,e)), pos : { file : "C:/HaxeToolkit/haxe/lib/haxeui/1,7,13/haxe/ui/toolkit/core/Macros.hx", min : 18155, max : 18193}};
		}
	}
};
haxe.ui.toolkit.core.Macros.insertExpr = function(arr,pos,item) {
	if(pos == -1) arr.push(item); else arr.splice(pos,0,item);
	return arr;
};
haxe.ui.toolkit.core.Macros.getClassNameFromType = function(t) {
	var className = "";
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		className = t1.toString();
		break;
	case 0:
		var t2 = t[2];
		className = t2.toString();
		break;
	case 7:
		var t3 = t[2];
		className = "";
		break;
	case 4:
		var t4 = t[2];
		className = t4.toString();
		break;
	case 6:
		var t5 = t[2];
		className = "";
		break;
	case 2:
		var t6 = t[2];
		className = t6.toString();
		break;
	case 1:
		var t7 = t[2];
		className = t7.toString();
		break;
	case 3:
		var t8 = t[2];
		className = t8.toString();
		break;
	case 8:
		var t9 = t[2];
		className = t9.toString();
		break;
	}
	return className;
};
haxe.ui.toolkit.core.Macros.hasMeta = function(f,meta) {
	var has = false;
	var _g = 0;
	var _g1 = f.meta;
	while(_g < _g1.length) {
		var m = _g1[_g];
		++_g;
		if(m.name == meta || m.name == ":" + meta) {
			has = true;
			break;
		}
	}
	return has;
};
haxe.ui.toolkit.core.Macros.getClassName = function(t) {
	var name = null;
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		break;
	case 0:
		var t2 = t[2];
		break;
	case 7:
		var t3 = t[2];
		break;
	case 4:
		var t4 = t[2];
		break;
	case 6:
		var t5 = t[2];
		break;
	case 2:
		var t6 = t[2];
		name = t6.get().module;
		break;
	case 1:
		var t7 = t[2];
		break;
	case 3:
		var t8 = t[2];
		break;
	case 8:
		var t9 = t[2];
		break;
	}
	return name;
};
haxe.ui.toolkit.core.Macros.hasInterface = function(t,interfaceRequired) {
	var has = false;
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		break;
	case 0:
		var t2 = t[2];
		break;
	case 7:
		var t3 = t[2];
		break;
	case 4:
		var t4 = t[2];
		break;
	case 6:
		var t5 = t[2];
		break;
	case 2:
		var t6 = t[2];
		while(t6 != null) {
			var _g = 0;
			var _g1 = t6.get().interfaces;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var interfaceName = i.t.toString();
				if(interfaceName == interfaceRequired) {
					has = true;
					break;
				}
			}
			if(has == false) {
				if(t6.get().superClass != null) t6 = t6.get().superClass.t; else t6 = null;
			} else break;
		}
		break;
	case 1:
		var t7 = t[2];
		break;
	case 3:
		var t8 = t[2];
		break;
	case 8:
		var t9 = t[2];
		break;
	}
	return has;
};
haxe.ui.toolkit.core.Macros.resolveResource = function(resourcePath,paths) {
	return resourcePath;
};
haxe.ui.toolkit.core.PopupManager = function() {
	this._modalPopups = new List();
	this.defaultWidth = 300;
	this.defaultTitle = "HaxeUI";
};
$hxClasses["haxe.ui.toolkit.core.PopupManager"] = haxe.ui.toolkit.core.PopupManager;
haxe.ui.toolkit.core.PopupManager.__name__ = ["haxe","ui","toolkit","core","PopupManager"];
haxe.ui.toolkit.core.PopupManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.PopupManager._instance = null;
haxe.ui.toolkit.core.PopupManager.instance = null;
haxe.ui.toolkit.core.PopupManager.get_instance = function() {
	if(haxe.ui.toolkit.core.PopupManager._instance == null) haxe.ui.toolkit.core.PopupManager._instance = new haxe.ui.toolkit.core.PopupManager();
	return haxe.ui.toolkit.core.PopupManager._instance;
};
haxe.ui.toolkit.core.PopupManager.prototype = {
	onKeyPress: function(e) {
		if(this._modalPopups.length == 0) return;
		var p = this._modalPopups.first();
		if(p.get_config().dismiss != null) {
			if(e.keyCode == 27 && p.get_config().dismiss == 1) {
				e.stopImmediatePropagation();
				this.dismissModal(257);
			} else if(e.keyCode == 13 && p.get_config().dismiss == 16) {
				e.stopImmediatePropagation();
				this.dismissModal(272);
			} else if(p.get_config().dismiss == 256) {
				e.stopImmediatePropagation();
				this.dismissModal(256);
			}
		}
	}
	,showSimple: function(text,title,config,fn) {
		if(config == null) config = 1;
		var p = this.buildPopup(new haxe.ui.toolkit.controls.popups.SimplePopupContent(text),title,config,fn);
		this.showPopup(p);
		return p;
	}
	,showCustom: function(display,title,config,fn) {
		if(config == null) config = 1;
		var p = this.buildPopup(new haxe.ui.toolkit.controls.popups.CustomPopupContent(display),title,config,fn);
		this.showPopup(p);
		return p;
	}
	,showList: function(items,selectedIndex,title,config,fn) {
		if(selectedIndex == null) selectedIndex = -1;
		var ds = null;
		if((items instanceof Array) && items.__enum__ == null) {
			var arr;
			arr = js.Boot.__cast(items , Array);
			ds = new haxe.ui.toolkit.data.ArrayDataSource();
			var _g = 0;
			while(_g < arr.length) {
				var item = arr[_g];
				++_g;
				if(typeof(item) == "string") {
					var o = { };
					o.text = js.Boot.__cast(item , String);
					ds.add(o);
				} else ds.add(item);
			}
		} else if(js.Boot.__instanceof(items,haxe.ui.toolkit.data.IDataSource)) ds = js.Boot.__cast(items , haxe.ui.toolkit.data.IDataSource);
		var p = this.buildPopup(new haxe.ui.toolkit.controls.popups.ListPopupContent(ds,selectedIndex,fn),title,config,fn);
		this.showPopup(p);
		return p;
	}
	,showCalendar: function(title,fn) {
		var config = { modal : true, buttons : 69632};
		var content = new haxe.ui.toolkit.controls.popups.CalendarPopupContent();
		var tempFn = function(button) {
			if(fn != null) {
				if(button == 65536) fn(button,content.get_selectedDate()); else fn(button,null);
			}
		};
		var p = this.buildPopup(content,title,config,tempFn);
		this.showPopup(p);
		return p;
	}
	,showBusy: function(text,delay,title,config,fn) {
		if(delay == null) delay = -1;
		var _g = this;
		if(config == null) config = { };
		config.useDefaultTitle = false;
		var p = this.buildPopup(new haxe.ui.toolkit.controls.popups.BusyPopupContent(text),title,config,fn);
		this.showPopup(p);
		if(delay > 0) {
			var timer = new haxe.Timer(delay);
			timer.run = function() {
				timer.stop();
				_g.hidePopup(p);
			};
		}
		return p;
	}
	,showPopup: function(p) {
		var modal = true;
		if(p.get_config().modal != null) modal = p.get_config().modal;
		if(modal == true) {
			if(this._modalPopups.length == 0) openfl.Lib.current.stage.addEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyPress));
			this._modalPopups.push(p);
			p.get_root().showModalOverlay();
		}
		p.get_root().addChild(p);
		this.centerPopup(p);
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.popups.Popup);
		if(transition == "slide") {
			var ypos = p.get_y();
			p.set_y(-p.get_height());
			p.set_visible(true);
			motion.Actuate.tween(p,.2,{ y : ypos},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			});
		} else if(transition == "fade") {
			p.get_sprite().set_alpha(0);
			p.set_visible(true);
			motion.Actuate.tween(p.get_sprite(),.2,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			});
		} else p.set_visible(true);
	}
	,hidePopup: function(p,dispose) {
		if(dispose == null) dispose = true;
		this._modalPopups.remove(p);
		if(this._modalPopups.length == 0) openfl.Lib.current.stage.removeEventListener(openfl.events.KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyPress));
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.popups.Popup);
		if(transition == "slide") motion.Actuate.tween(p,.2,{ y : p.get_root().get_height()},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			p.get_root().removeChild(p,dispose);
			p.get_root().hideModalOverlay();
		}); else if(transition == "fade") motion.Actuate.tween(p.get_sprite(),.2,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			p.get_root().removeChild(p,dispose);
			p.get_root().hideModalOverlay();
		}); else {
			p.get_root().removeChild(p,dispose);
			p.get_root().hideModalOverlay();
		}
	}
	,centerPopup: function(p) {
		p.set_x(Std["int"](p.get_root().get_width() / 2 - p.get_width() / 2));
		p.set_y(Std["int"](p.get_root().get_height() / 2 - p.get_height() / 2));
	}
	,dismissModal: function(action) {
		if(this._modalPopups.length == 0) return;
		var p = this._modalPopups.first();
		if(p.get_config().dismiss != null && (p.get_config().dismiss & action) > 0) {
			this.hidePopup(p);
			p.callClosingCallback(4096);
		}
	}
	,buildPopup: function(content,title,config,fn) {
		config = this.buildConfig(config);
		if(title == null && config.useDefaultTitle == true) title = haxe.ui.toolkit.core.PopupManager.get_instance().defaultTitle;
		var p = new haxe.ui.toolkit.controls.popups.Popup(title,content,config,fn);
		p.set_root(config.root);
		p.set_visible(false);
		return p;
	}
	,buildConfig: function(config) {
		var c;
		if(((config | 0) === config) || (config instanceof Array) && config.__enum__ == null) c = { }; else c = Reflect.copy(config);
		c.id = null;
		c.styleName = null;
		c.modal = true;
		c.width = haxe.ui.toolkit.core.PopupManager.get_instance().defaultWidth;
		c.useDefaultTitle = true;
		c.root = haxe.ui.toolkit.core.RootManager.get_instance().get_currentRoot();
		if(config != null && !((config | 0) === config) && !((config instanceof Array) && config.__enum__ == null)) {
			if(config.id != null) c.id = config.id; else c.id = null;
			if(config.styleName != null) c.styleName = config.styleName; else c.styleName = null;
			if(config.modal != null) c.modal = config.modal; else c.modal = true;
			if(config.width != null) c.width = config.width; else c.width = haxe.ui.toolkit.core.PopupManager.get_instance().defaultWidth;
			if(config.useDefaultTitle != null) c.useDefaultTitle = config.useDefaultTitle; else c.useDefaultTitle = true;
			if(config.root != null) c.root = config.root; else c.root = haxe.ui.toolkit.core.RootManager.get_instance().get_currentRoot();
		}
		c.buttons = new Array();
		if(config != null) {
			if(((config | 0) === config)) c.buttons = this.buildButtonArray(config); else if((config instanceof Array) && config.__enum__ == null) c.buttons = this.buildButtonArray(config); else if(config.buttons != null) c.buttons = this.buildButtonArray(config.buttons);
		}
		return c;
	}
	,buildButtonArray: function(data) {
		var buttons = new Array();
		if(((data | 0) === data)) {
			var n;
			n = js.Boot.__cast(data , Int);
			if((n & 1) == 1) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(1));
			if((n & 16) == 16) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(16));
			if((n & 256) == 256) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(256));
			if((n & 4096) == 4096) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(4096));
			if((n & 65536) == 65536) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(65536));
			if((n & 1048576) == 1048576) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(1048576));
		} else if((data instanceof Array) && data.__enum__ == null) {
			var arr = data;
			var _g = 0;
			while(_g < arr.length) {
				var item = arr[_g];
				++_g;
				if(((item | 0) === item)) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(js.Boot.__cast(item , Int))); else {
					var type = 16777216;
					if(item.type != null) type = item.type;
					var text = item.text;
					var fn = item.fn;
					buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(type,text,fn));
				}
			}
		}
		return buttons;
	}
	,__class__: haxe.ui.toolkit.core.PopupManager
};
haxe.ui.toolkit.core.PopupButton = function() { };
$hxClasses["haxe.ui.toolkit.core.PopupButton"] = haxe.ui.toolkit.core.PopupButton;
haxe.ui.toolkit.core.PopupButton.__name__ = ["haxe","ui","toolkit","core","PopupButton"];
haxe.ui.toolkit.core.PopupButtonInfo = function(type,text,fn) {
	if(type == null) type = 1;
	this.type = -1;
	this.type = type;
	this.text = text;
	this.fn = fn;
};
$hxClasses["haxe.ui.toolkit.core.PopupButtonInfo"] = haxe.ui.toolkit.core.PopupButtonInfo;
haxe.ui.toolkit.core.PopupButtonInfo.__name__ = ["haxe","ui","toolkit","core","PopupButtonInfo"];
haxe.ui.toolkit.core.PopupButtonInfo.prototype = {
	__class__: haxe.ui.toolkit.core.PopupButtonInfo
};
haxe.ui.toolkit.core.Dismiss = function() { };
$hxClasses["haxe.ui.toolkit.core.Dismiss"] = haxe.ui.toolkit.core.Dismiss;
haxe.ui.toolkit.core.Dismiss.__name__ = ["haxe","ui","toolkit","core","Dismiss"];
haxe.ui.toolkit.core.Root = function() {
	this._modalOverlayCounter = 0;
	haxe.ui.toolkit.core.Component.call(this);
	this._layout = new haxe.ui.toolkit.layout.AbsoluteLayout();
	this._clipContent = false;
	this._mousePos = new openfl.geom.Point(0,0);
	haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.Event.RESIZE,$bind(this,this._onScreenResize));
};
$hxClasses["haxe.ui.toolkit.core.Root"] = haxe.ui.toolkit.core.Root;
haxe.ui.toolkit.core.Root.__name__ = ["haxe","ui","toolkit","core","Root"];
haxe.ui.toolkit.core.Root.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.core.Root.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	preInitialize: function() {
		var _g = this;
		haxe.ui.toolkit.core.Component.prototype.preInitialize.call(this);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,function(event) {
			_g._mousePos = new openfl.geom.Point(event.stageX,event.stageY);
		});
		this.resizeRoot();
	}
	,_onScreenResize: function(event) {
		this.resizeRoot();
	}
	,get_mousePosition: function() {
		return this._mousePos;
	}
	,add: function(item) {
		var r = null;
		if(typeof(item) == "string") r = this.addChild(haxe.ui.toolkit.core.Toolkit.processXmlResource(item)); else if(js.Boot.__instanceof(item,haxe.ui.toolkit.core.Controller)) r = this.addChild((js.Boot.__cast(item , haxe.ui.toolkit.core.Controller)).get_view()); else haxe.Log.trace(Std.string(item) + " item not supported in Root.add",{ fileName : "Root.hx", lineNumber : 67, className : "haxe.ui.toolkit.core.Root", methodName : "add"});
		return r;
	}
	,resizeRoot: function() {
		if(this.get_percentWidth() > 0) this.set_width(haxe.ui.toolkit.core.Screen.get_instance().get_width() * this.get_percentWidth() / 100);
		if(this.get_percentHeight() > 0) this.set_height(haxe.ui.toolkit.core.Screen.get_instance().get_height() * this.get_percentHeight() / 100);
	}
	,showModalOverlay: function() {
		this._modalOverlayCounter++;
		if(this._modalOverlay == null) {
			this._modalOverlay = new haxe.ui.toolkit.core.Component();
			this._modalOverlay.set_id("modalOverlay");
			this._modalOverlay.set_percentWidth(this._modalOverlay.set_percentHeight(100));
			this._modalOverlay.set_onClick(function(e) {
				haxe.ui.toolkit.core.PopupManager.get_instance().dismissModal(4096);
			});
		}
		if(this.findChild("modalOverlay") == null) this.addChild(this._modalOverlay);
		this._modalOverlay.set_visible(true);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.popups.Popup) == false && child.get_id() != "modalOverlay") {
				var c;
				c = js.Boot.__cast(child , haxe.ui.toolkit.core.Component);
			}
		}
	}
	,hideModalOverlay: function() {
		this._modalOverlayCounter--;
		if(this._modalOverlayCounter <= 0) {
			if(this._modalOverlay != null) this._modalOverlay.set_visible(false);
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.popups.Popup) == false && child.get_id() != "modalOverlay") {
					var c;
					c = js.Boot.__cast(child , haxe.ui.toolkit.core.Component);
				}
			}
			this._modalOverlayCounter = 0;
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.Root();
	}
	,__class__: haxe.ui.toolkit.core.Root
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{get_mousePosition:"get_mousePosition"})
});
haxe.ui.toolkit.core.RootManager = function() {
	this._roots = new Array();
};
$hxClasses["haxe.ui.toolkit.core.RootManager"] = haxe.ui.toolkit.core.RootManager;
haxe.ui.toolkit.core.RootManager.__name__ = ["haxe","ui","toolkit","core","RootManager"];
haxe.ui.toolkit.core.RootManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.RootManager._instance = null;
haxe.ui.toolkit.core.RootManager.instance = null;
haxe.ui.toolkit.core.RootManager.get_instance = function() {
	if(haxe.ui.toolkit.core.RootManager._instance == null) haxe.ui.toolkit.core.RootManager._instance = new haxe.ui.toolkit.core.RootManager();
	return haxe.ui.toolkit.core.RootManager._instance;
};
haxe.ui.toolkit.core.RootManager.prototype = {
	createRoot: function(options,fn) {
		if(options == null) options = { };
		if(options.parent != null) options.parent = options.parent; else options.parent = openfl.Lib.current.stage;
		var root = new haxe.ui.toolkit.core.Root();
		root.get_sprite().set_scaleX(root.get_sprite().set_scaleY(haxe.ui.toolkit.core.Toolkit.get_scaleFactor()));
		this._roots.push(root);
		root.addEventListener(openfl.events.Event.ADDED_TO_STAGE,function(e) {
			if(fn != null) {
				fn(root);
				root.invalidate(1048576);
			}
			root.removeEventListenerType(openfl.events.Event.ADDED_TO_STAGE);
		});
		root.set_root(root);
		root.set_id(options.id != null?options.id:"root");
		root.set_styleName(options.styleName != null?options.styleName:null);
		root.set_x(options.x != null?options.x:0);
		root.set_y(options.y != null?options.y:0);
		root.set_width(options.width != null?options.width:0);
		root.set_height(options.height != null?options.height:0);
		root.set_percentWidth(options.percentWidth != null?options.percentWidth:-1);
		root.set_percentHeight(options.percentHeight != null?options.percentHeight:-1);
		options.parent.addChild(root.get_sprite());
		return root;
	}
	,destroyRoot: function(root) {
		if(root.get_sprite().parent != null) root.get_sprite().parent.removeChild(root.get_sprite());
		root.dispose();
		HxOverrides.remove(this._roots,root);
	}
	,destroyAllRoots: function() {
		var _g = 0;
		var _g1 = this._roots;
		while(_g < _g1.length) {
			var root = _g1[_g];
			++_g;
			this.destroyRoot(root);
		}
	}
	,get_roots: function() {
		return this._roots;
	}
	,get_currentRoot: function() {
		if(this._roots.length == 0) return null;
		return this._roots[this._roots.length - 1];
	}
	,__class__: haxe.ui.toolkit.core.RootManager
	,__properties__: {get_currentRoot:"get_currentRoot",get_roots:"get_roots"}
};
haxe.ui.toolkit.core.Screen = function() {
	this._cursorY = -1;
	this._cursorX = -1;
	this.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
};
$hxClasses["haxe.ui.toolkit.core.Screen"] = haxe.ui.toolkit.core.Screen;
haxe.ui.toolkit.core.Screen.__name__ = ["haxe","ui","toolkit","core","Screen"];
haxe.ui.toolkit.core.Screen.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.Screen._instance = null;
haxe.ui.toolkit.core.Screen.instance = null;
haxe.ui.toolkit.core.Screen.get_instance = function() {
	if(haxe.ui.toolkit.core.Screen._instance == null) haxe.ui.toolkit.core.Screen._instance = new haxe.ui.toolkit.core.Screen();
	return haxe.ui.toolkit.core.Screen._instance;
};
haxe.ui.toolkit.core.Screen.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		var target = openfl.Lib.current.stage;
		target.addEventListener(type,listener,useCapture,priority,useWeakReference);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		var target = openfl.Lib.current.stage;
		target.removeEventListener(type,listener,useCapture);
	}
	,get_width: function() {
		return openfl.Lib.current.stage.stageWidth;
	}
	,get_height: function() {
		return openfl.Lib.current.stage.stageHeight;
	}
	,get_cursorX: function() {
		return this._cursorX;
	}
	,get_cursorY: function() {
		return this._cursorY;
	}
	,_onScreenMouseMove: function(event) {
		this._cursorX = event.stageX;
		this._cursorY = event.stageY;
	}
	,__class__: haxe.ui.toolkit.core.Screen
	,__properties__: {get_cursorY:"get_cursorY",get_cursorX:"get_cursorX",get_height:"get_height",get_width:"get_width"}
};
haxe.ui.toolkit.core._ToolTipManager = {};
haxe.ui.toolkit.core._ToolTipManager.ToolTipPosition_Impl_ = function() { };
$hxClasses["haxe.ui.toolkit.core._ToolTipManager.ToolTipPosition_Impl_"] = haxe.ui.toolkit.core._ToolTipManager.ToolTipPosition_Impl_;
haxe.ui.toolkit.core._ToolTipManager.ToolTipPosition_Impl_.__name__ = ["haxe","ui","toolkit","core","_ToolTipManager","ToolTipPosition_Impl_"];
haxe.ui.toolkit.core._ToolTipManager.ToolTipPosition_Impl_.fromString = function(s) {
	switch(s) {
	case "top":
		return "top";
	case "bottom":
		return "bottom";
	case "left":
		return "left";
	case "right":
		return "right";
	default:
		throw "Invalid value for enum ToolTipPosition: " + s;
	}
};
haxe.ui.toolkit.core._ToolTipManager.ToolTipRelativeTo_Impl_ = function() { };
$hxClasses["haxe.ui.toolkit.core._ToolTipManager.ToolTipRelativeTo_Impl_"] = haxe.ui.toolkit.core._ToolTipManager.ToolTipRelativeTo_Impl_;
haxe.ui.toolkit.core._ToolTipManager.ToolTipRelativeTo_Impl_.__name__ = ["haxe","ui","toolkit","core","_ToolTipManager","ToolTipRelativeTo_Impl_"];
haxe.ui.toolkit.core._ToolTipManager.ToolTipRelativeTo_Impl_.fromString = function(s) {
	switch(s) {
	case "cursor":
		return "cursor";
	case "target":
		return "target";
	default:
		throw "Invalid value for enum ToolTipRelativeTo: " + s;
	}
};
haxe.ui.toolkit.core.ToolTipOptionsDefaults = function() { };
$hxClasses["haxe.ui.toolkit.core.ToolTipOptionsDefaults"] = haxe.ui.toolkit.core.ToolTipOptionsDefaults;
haxe.ui.toolkit.core.ToolTipOptionsDefaults.__name__ = ["haxe","ui","toolkit","core","ToolTipOptionsDefaults"];
haxe.ui.toolkit.core.ToolTipOptionsDefaults.applyDefaults = function(to) {
	if(to.position != null) to.position = to.position; else to.position = haxe.ui.toolkit.core.ToolTipManager.get_instance().defaults.position;
	if(to.relativeTo != null) to.relativeTo = to.relativeTo; else to.relativeTo = haxe.ui.toolkit.core.ToolTipManager.get_instance().defaults.relativeTo;
	if(to.center != null) to.center = to.center; else to.center = haxe.ui.toolkit.core.ToolTipManager.get_instance().defaults.center;
	if(to.autoHide != null) to.autoHide = to.autoHide; else to.autoHide = true;
	if(to.offsetX != null) to.offsetX = to.offsetX; else to.offsetX = haxe.ui.toolkit.core.ToolTipManager.get_instance().defaults.offsetX;
	if(to.offsetY != null) to.offsetY = to.offsetY; else to.offsetY = haxe.ui.toolkit.core.ToolTipManager.get_instance().defaults.offsetY;
	if(to.delay != null) to.delay = to.delay; else to.delay = haxe.ui.toolkit.core.ToolTipManager.get_instance().defaults.delay;
	if(to.follow != null) to.follow = to.follow; else to.follow = haxe.ui.toolkit.core.ToolTipManager.get_instance().defaults.follow;
};
haxe.ui.toolkit.core.ToolTipOptionsComponentDefaults = function() { };
$hxClasses["haxe.ui.toolkit.core.ToolTipOptionsComponentDefaults"] = haxe.ui.toolkit.core.ToolTipOptionsComponentDefaults;
haxe.ui.toolkit.core.ToolTipOptionsComponentDefaults.__name__ = ["haxe","ui","toolkit","core","ToolTipOptionsComponentDefaults"];
haxe.ui.toolkit.core.ToolTipOptionsComponentDefaults.applyDefaultsFromComponent = function(to,from) {
	if(from.toolTipPosition != null) to.position = from.toolTipPosition;
	if(from.toolTipRelativeTo != null) to.relativeTo = from.toolTipRelativeTo;
	if(from.toolTipCenter != null) to.center = from.toolTipCenter;
	if(from.toolTipOffsetX != null) to.offsetX = from.toolTipOffsetX;
	if(from.toolTipOffsetY != null) to.offsetY = from.toolTipOffsetY;
	if(from.toolTipFollow != null) to.follow = from.toolTipFollow;
};
haxe.ui.toolkit.core.ToolTipManager = function() {
	this.defaults = { position : "top", relativeTo : "cursor", center : true, offsetX : 3, offsetY : 3, delay : 700, follow : false};
	haxe.ui.toolkit.core.Screen.get_instance();
};
$hxClasses["haxe.ui.toolkit.core.ToolTipManager"] = haxe.ui.toolkit.core.ToolTipManager;
haxe.ui.toolkit.core.ToolTipManager.__name__ = ["haxe","ui","toolkit","core","ToolTipManager"];
haxe.ui.toolkit.core.ToolTipManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.ToolTipManager._instance = null;
haxe.ui.toolkit.core.ToolTipManager.instance = null;
haxe.ui.toolkit.core.ToolTipManager.get_instance = function() {
	if(haxe.ui.toolkit.core.ToolTipManager._instance == null) haxe.ui.toolkit.core.ToolTipManager._instance = new haxe.ui.toolkit.core.ToolTipManager();
	return haxe.ui.toolkit.core.ToolTipManager._instance;
};
haxe.ui.toolkit.core.ToolTipManager.prototype = {
	showToolTip: function(c,options,event) {
		if(this._currentToolTip != null && this._currentToolTip.component == c) return;
		if(options == null) options = { };
		haxe.ui.toolkit.core.ToolTipOptionsComponentDefaults.applyDefaultsFromComponent(options,c);
		haxe.ui.toolkit.core.ToolTipOptionsDefaults.applyDefaults(options);
		if(event == null || event.get_component() != c) {
			options.relativeTo = "target";
			options.autoHide = false;
		}
		this.hideCurrentToolTip();
		this._currentToolTip = new haxe.ui.toolkit.controls.ToolTip();
		this._currentToolTip.set_text(c.get_toolTip());
		this._currentToolTip.component = c;
		this._currentToolTip.options = options;
		c.get_root().addChild(this._currentToolTip);
		this._currentToolTip.set_alpha(0);
		this.positionTooltip(this._currentToolTip,options);
		motion.Actuate.tween(this._currentToolTip,.3,{ alpha : 1});
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onScreenMouseMove: function(event) {
		if(this._currentToolTip != null) {
			if(this._currentToolTip.options.follow == true) this.positionTooltip(this._currentToolTip,this._currentToolTip.options);
			if(this._currentToolTip.component.hitTest(event.stageX,event.stageY) == false && this._currentToolTip.options.autoHide == true) this.hideCurrentToolTip();
		}
	}
	,positionTooltip: function(tooltip,options) {
		var c = tooltip.component;
		var xpos = c.get_stageX() - c.get_root().get_stageX();
		var ypos = c.get_stageY() - c.get_root().get_stageY();
		if(options.relativeTo == "cursor") {
			xpos = haxe.ui.toolkit.core.Screen.get_instance().get_cursorX();
			ypos = haxe.ui.toolkit.core.Screen.get_instance().get_cursorY();
		}
		var _g = options.position;
		switch(_g) {
		case "top":
			if(options.relativeTo == "cursor") {
				xpos += options.offsetX;
				if(options.center == true) xpos -= this._currentToolTip.get_width() / 2;
				ypos -= this._currentToolTip.get_height() + options.offsetY;
			} else if(options.relativeTo == "target") {
				if(options.center == true) xpos = xpos + (c.get_width() / 2 - this._currentToolTip.get_width() / 2); else xpos += options.offsetX;
				ypos -= this._currentToolTip.get_height() + options.offsetY;
			}
			break;
		case "bottom":
			if(options.relativeTo == "cursor") {
				xpos += options.offsetX;
				if(options.center == true) xpos -= this._currentToolTip.get_width() / 2;
				ypos += options.offsetY;
			} else if(options.relativeTo == "target") {
				if(options.center == true) xpos = xpos + (c.get_width() / 2 - this._currentToolTip.get_width() / 2); else xpos += options.offsetX;
				ypos += this._currentToolTip.get_height() + options.offsetY;
			}
			break;
		case "left":
			if(options.relativeTo == "cursor") {
				xpos -= this._currentToolTip.get_width() + options.offsetX;
				ypos += options.offsetY;
				if(options.center == true) ypos -= this._currentToolTip.get_height() / 2;
			} else if(options.relativeTo == "target") {
				xpos -= this._currentToolTip.get_width() + options.offsetX;
				if(options.center == true) ypos = ypos + (c.get_height() / 2 - this._currentToolTip.get_height() / 2); else ypos += options.offsetY;
			}
			break;
		case "right":
			if(options.relativeTo == "cursor") {
				xpos += options.offsetX;
				ypos += options.offsetY;
				if(options.center == true) ypos -= this._currentToolTip.get_height() / 2;
			} else if(options.relativeTo == "target") {
				xpos += c.get_width() + options.offsetX;
				if(options.center == true) ypos = ypos + (c.get_height() / 2 - this._currentToolTip.get_height() / 2); else ypos += options.offsetY;
			}
			break;
		}
		tooltip.set_x(xpos);
		tooltip.set_y(ypos);
	}
	,hideCurrentToolTip: function() {
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		if(this._currentToolTip != null) {
			var copy = this._currentToolTip;
			motion.Actuate.tween(this._currentToolTip,.3,{ alpha : 0}).onComplete(function() {
				copy.get_root().removeChild(copy);
			});
		}
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		this._currentToolTip = null;
	}
	,toolTipVisible: function(c) {
		if(this._currentToolTip == null) return false;
		return this._currentToolTip.component == c;
	}
	,__class__: haxe.ui.toolkit.core.ToolTipManager
};
haxe.ui.toolkit.core.Toolkit = function() {
	this.initInstance();
};
$hxClasses["haxe.ui.toolkit.core.Toolkit"] = haxe.ui.toolkit.core.Toolkit;
haxe.ui.toolkit.core.Toolkit.__name__ = ["haxe","ui","toolkit","core","Toolkit"];
haxe.ui.toolkit.core.Toolkit.__properties__ = {set_scaleFactor:"set_scaleFactor",get_scaleFactor:"get_scaleFactor",set_defaultTransition:"set_defaultTransition",get_defaultTransition:"get_defaultTransition",get_versionString:"get_versionString",get_versionInfo:"get_versionInfo",get_instance:"get_instance"}
haxe.ui.toolkit.core.Toolkit._instance = null;
haxe.ui.toolkit.core.Toolkit.instance = null;
haxe.ui.toolkit.core.Toolkit.get_instance = function() {
	if(haxe.ui.toolkit.core.Toolkit._instance == null) {
		openfl.Lib.current.stage.align = openfl.display.StageAlign.TOP_LEFT;
		openfl.Lib.current.stage.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
		haxe.ui.toolkit.core.Toolkit._instance = new haxe.ui.toolkit.core.Toolkit();
	}
	return haxe.ui.toolkit.core.Toolkit._instance;
};
haxe.ui.toolkit.core.Toolkit.init = function() {
	(function() {
		var value = JSON.parse("{\n  \"name\": \"swf\",\n  \"url\": \"http://github.com/openfl/swf\",\n  \"license\": \"MIT\",\n  \"tags\": [ ],\n  \"description\": \"Provides support for parsing and displaying SWF content\",\n  \"version\": \"1.8.7\",\n  \"releasenote\": \"Disable font format bold/italic for now (already in font data)\",\n  \"contributors\": [ \"singmajesty\" ]\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("swf",value);
		var value1 = JSON.parse("{\n  \"name\": \"box2d\",\n  \"url\": \"http://github.com/jgranick/box2d\",\n  \"license\": \"MIT\",\n  \"tags\": [ \"physics\", \"flash\", \"cpp\" ],\n  \"description\": \"Box2D is a tremendously popular physics engine for most platforms.\",\n  \"version\": \"1.2.3\",\n  \"releasenote\": \"Added TestBed sample, better B2ShapeType, platform fixes\",\n  \"contributors\": [ \"singmajesty\" ],\n  \"dependencies\": {}\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("box2d",value1);
		var value2 = JSON.parse("{\n\t\"name\": \"openfl\",\n\t\"url\": \"http://www.openfl.org\",\n\t\"license\": \"MIT\",\n\t\"tags\": [],\n\t\"description\": \"The \\\"Open Flash Library\\\" for fast 2D development\",\n\t\"version\": \"3.0.6\",\n\t\"releasenote\": \"Minor fix\",\n\t\"contributors\": [ \"singmajesty\" ]\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("openfl",value2);
		var value3 = JSON.parse("{\r\n  \"name\": \"yagp\",\r\n  \"url\" : \"https://github.com/yanrishatum/yagp/\",\r\n  \"license\": \"MIT\",\r\n  \"tags\": [\"cross\", \"gif\", \"decoding\", \"animated\", \"multimedia\"],\r\n  \"description\": \"Yet another implementation of gif parsing. It provides you information about GIF file, so you can make a custom player, or use shipped simple implementation.\",\r\n  \"version\": \"1.1.4\",\r\n  \"releasenote\": \"Async parsing, documentation, bugfixes. See CHANGELOG.txt\",\r\n  \"contributors\": [\"Yanrishatum\"],\r\n  \"dependencies\":\r\n  {\r\n    \"openfl\": \"\"\r\n  }\r\n}\r\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("yagp",value3);
		var value4 = JSON.parse("{\r\n  \"name\": \"actuate\",\r\n  \"url\": \"http://github.com/openfl/actuate\",\r\n  \"license\": \"MIT\",\r\n  \"tags\": [ \"flash\", \"cpp\", \"neko\", \"js\" ],\r\n  \"description\": \"Actuate is a fast and flexible tween library that uses a jQuery-style \\\"chaining\\\" syntax. It out-performs other libraries (such as TweenLite) and is easy to extend with custom actuators.\",\r\n  \"version\": \"1.8.3\",\r\n  \"releasenote\": \"Add Lime support\",\r\n  \"contributors\": [ \"singmajesty\" ],\r\n  \"dependencies\": {}\r\n}\r\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("actuate",value4);
		var value5 = JSON.parse("{\n\t\"name\": \"openfl\",\n\t\"url\": \"http://www.openfl.org\",\n\t\"license\": \"MIT\",\n\t\"tags\": [],\n\t\"description\": \"The \\\"Open Flash Library\\\" for fast 2D development\",\n\t\"version\": \"3.0.3\",\n\t\"releasenote\": \"Improvements to text, sound, bitmapData.draw\",\n\t\"contributors\": [ \"singmajesty\" ]\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("openfl",value5);
		var value6 = JSON.parse("{\r\n  \"name\": \"svg\",\r\n  \"url\": \"http://github.com/haxenme/svg\",\r\n  \"license\": \"MIT\",\r\n  \"tags\": [ \"cpp\", \"flash\" ],\r\n  \"description\": \"Provides support for parsing and rendering SVG content\",\r\n  \"version\": \"1.0.8\",\r\n  \"releasenote\": \"Compile fix\",\r\n  \"contributors\": [ \"singmajesty\", \"gamehaxe\" ],\r\n  \"dependencies\": {}\r\n}");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("svg",value6);
		var value7 = JSON.parse("{\r\n  \"name\": \"hscript\",\r\n  \"url\": \"https://github.com/HaxeFoundation/hscript\",\r\n  \"license\": \"MIT\",\r\n  \"description\": \"Haxe Script is a scripting engine for a subset of the Haxe language\",\r\n  \"version\": \"2.0.4\",\r\n  \"releasenote\": \"switch and array comprehension support\",\r\n  \"contributors\": [\"ncannasse\"]\r\n}");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("hscript",value7);
		var value8 = JSON.parse("{\n    \"name\": \"haxeui\",\n    \"license\": \"MIT\",\n    \"tags\": [\n        \"rich\",\n        \"ui\"\n    ],\n    \"description\": \"Styleable application centric rich UI\",\n    \"contributors\": [\n        \"ianharrigan\"\n    ],\n    \"releasenote\": \"padding bug fixed by player-03\",\n    \"version\": \"1.7.13\",\n    \"url\": \"https://github.com/ianharrigan/haxeui\",\n    \"dependencies\": {\n        \"yagp\": \"1.1.4\",\n        \"actuate\": \"1.8.3\",\n        \"svg\": \"1.0.8\",\n        \"openfl\": \"3.0.3\",\n        \"hscript\": \"2.0.4\"\n    }\n}");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("haxeui",value8);
		var value9 = JSON.parse("{\n\t\"name\": \"lime\",\n\t\"url\": \"https://github.com/openfl/lime\",\n\t\"license\": \"MIT\",\n\t\"tags\": [],\n\t\"description\": \"A flexible lightweight layer for Haxe cross-platform developers\",\n\t\"version\": \"2.4.1\",\n\t\"releasenote\": \"Minor fixes\",\n\t\"contributors\": [ \"singmajesty\" ]\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("lime",value9);
		var value10 = JSON.parse("{\n\t\"name\": \"openfl\",\n\t\"url\": \"http://www.openfl.org\",\n\t\"license\": \"MIT\",\n\t\"tags\": [],\n\t\"description\": \"The \\\"Open Flash Library\\\" for fast 2D development\",\n\t\"version\": \"2.2.4\",\n\t\"releasenote\": \"Added bitmapData.encode, improved HTML5 -final, other fixes\",\n\t\"contributors\": [ \"singmajesty\" ],\n\t\"dependencies\": {}\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("openfl",value10);
		var value11 = JSON.parse("{\n\t\"name\": \"away3d\",\n\t\"url\": \"http://away3d.com\",\n\t\"license\": \"MIT\",\n\t\"tags\": [ \"away3d\", \"3d\", \"engine\", \"openfl\", \"cross\", \"cpp\", \"flash\", \"game\", \"js\", \"web\", \"ios\", \"android\" ],\n\t\"description\": \"Away3D is an open source, real time 3D engine for the Flash Platform and has been ported to OpenFL 2.x/Haxe\",\n\t\"version\": \"1.1.0\",\n\t\"releasenote\": \"Reworked to utilise the migrated Stage3D in the core OpenFL library and compatibility updates. Includes minor bug fixes.\",\n\t\"contributors\": [ \"Greg209\" ],\n\t\"dependencies\": {\n\t\t\"openfl\": \"2.2.4\"\n\t}\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("away3d",value11);
		var value12 = JSON.parse("{\n  \"name\": \"actuate\",\n  \"url\": \"http://github.com/jgranick/actuate\",\n  \"license\": \"MIT\",\n  \"tags\": [ \"flash\", \"cpp\", \"neko\", \"js\" ],\n  \"description\": \"Actuate is a fast and flexible tween library that uses a jQuery-style \\\"chaining\\\" syntax. It out-performs other libraries (such as TweenLite) and is easy to extend with custom actuators.\",\n  \"version\": \"1.7.2\",\n  \"releasenote\": \"Minor improvement\",\n  \"contributors\": [ \"singmajesty\" ],\n  \"dependencies\": {}\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("actuate",value12);
	})();
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ScrollView","scrollview");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Text","text");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.TextInput","textinput");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Absolute","absolute");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ListView","listview");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.VBox","vbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Menu","menu");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ContinuousHBox","continuoushbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.renderers.ComponentItemRenderer","componentitemrenderer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.renderers.ItemRenderer","itemrenderer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.Component","component");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.HBox","hbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.HSplitter","hsplitter");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.MenuItem","menuitem");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Container","container");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.MenuSeparator","menuseparator");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Spacer","spacer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.VSplitterGripper","vsplittergripper");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.VScroll","vscroll");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.MenuBar","menubar");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Value","value");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.CheckBoxValue","checkboxvalue");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.HScroll","hscroll");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.TabView","tabview");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Progress","progress");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ExpandablePanel","expandablepanel");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Slider","slider");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.ToolTip","tooltip");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.MenuButton","menubutton");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.VSplitter","vsplitter");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.selection.DropDownList","dropdownlist");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.CalendarView","calendarview");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ExpandableButton","expandablebutton");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Link","link");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.StateComponent","statecomponent");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.VSlider","vslider");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.CalendarDay","calendarday");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.VProgress","vprogress");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ContinuousVBox","continuousvbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.TabBar","tabbar");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Image","image");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.OptionBoxValue","optionboxvalue");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.HSlider","hslider");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.TableView","tableview");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.CheckBox","checkbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.TableViewRow","tableviewrow");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.DisplayObject","displayobject");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.OptionBox","optionbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.Root","root");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.DisplayObjectContainer","displayobjectcontainer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Box","box");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.HProgress","hprogress");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.StyleableDisplayObject","styleabledisplayobject");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.AccordionButton","accordionbutton");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Grid","grid");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.HSplitterGripper","hsplittergripper");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Stack","stack");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.SpriteContainer","spritecontainer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Divider","divider");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.selection.ListSelector","listselector");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Accordion","accordion");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Button","button");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Scroll","scroll");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.renderers.BasicItemRenderer","basicitemrenderer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Calendar","calendar");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.selection.DateSelector","dateselector");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.ArrayDataSource","array");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.XMLDataSource","xml");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.JSONDataSource","json");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.FilesDataSource","files");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.MySQLDataSource","mysql");
	haxe.ui.toolkit.themes.Theme.addAsset("gradient","styles/gradient/gradient.css");
	haxe.ui.toolkit.themes.Theme.addAsset("default",haxe.ui.toolkit.style.DefaultStyles);
	haxe.ui.toolkit.themes.Theme.addAsset("gradient_mobile","styles/gradient/gradient_mobile.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/windows.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/buttons.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/tabs.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/listview.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/scrolls.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/sliders.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/accordion.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/rtf.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/calendar.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/popups.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/menus.css");
	haxe.ui.toolkit.core.Toolkit.get_instance();
	haxe.ui.toolkit.core.Toolkit.registerXMLProcessor(haxe.ui.toolkit.core.xml.UIProcessor,"ui");
	haxe.ui.toolkit.core.Toolkit.registerXMLProcessor(haxe.ui.toolkit.core.xml.UIProcessor,"selection");
	haxe.ui.toolkit.core.Toolkit.registerXMLProcessor(haxe.ui.toolkit.core.xml.StyleProcessor,"style");
	haxe.ui.toolkit.core.Toolkit.registerXMLProcessor(haxe.ui.toolkit.core.xml.DataProcessor,"data");
	if(haxe.ui.toolkit.core.Toolkit._defaultTransition != "none" && haxe.ui.toolkit.core.Toolkit._transitionRegister != null && haxe.ui.toolkit.core.Toolkit._transitionRegister.get(Type.getClassName(haxe.ui.toolkit.controls.Menu)) == null) haxe.ui.toolkit.core.Toolkit.setTransitionForClass(haxe.ui.toolkit.controls.Menu,"fade");
	var t = null;
	if(js.Boot.__instanceof(haxe.ui.toolkit.core.Toolkit.theme,haxe.ui.toolkit.themes.Theme)) t = haxe.ui.toolkit.core.Toolkit.theme; else if(typeof(haxe.ui.toolkit.core.Toolkit.theme) == "string") {
		t = new haxe.ui.toolkit.themes.Theme();
		t.name = haxe.ui.toolkit.core.Toolkit.theme;
	}
	if(t == null && haxe.ui.toolkit.core.Toolkit.useDefaultTheme == true) t = new haxe.ui.toolkit.themes.DefaultTheme();
	if(t != null) t.apply();
};
haxe.ui.toolkit.core.Toolkit.versionInfo = null;
haxe.ui.toolkit.core.Toolkit.get_versionInfo = function() {
	return haxe.ui.toolkit.core.Toolkit._versionInfo;
};
haxe.ui.toolkit.core.Toolkit.versionString = null;
haxe.ui.toolkit.core.Toolkit.get_versionString = function() {
	var s = "";
	var $it0 = haxe.ui.toolkit.core.Toolkit._versionInfo.keys();
	while( $it0.hasNext() ) {
		var lib = $it0.next();
		s += lib + " [" + Std.string(haxe.ui.toolkit.core.Toolkit._versionInfo.get(lib).version) + "]\n";
	}
	return s;
};
haxe.ui.toolkit.core.Toolkit._registeredProcessors = null;
haxe.ui.toolkit.core.Toolkit.registerXMLProcessor = function(cls,prefix) {
	if(haxe.ui.toolkit.core.Toolkit._registeredProcessors == null) haxe.ui.toolkit.core.Toolkit._registeredProcessors = new haxe.ds.StringMap();
	haxe.ui.toolkit.core.Toolkit._registeredProcessors.set(prefix,Type.getClassName(cls));
};
haxe.ui.toolkit.core.Toolkit.theme = null;
haxe.ui.toolkit.core.Toolkit.processXmlResource = function(resourceId) {
	return haxe.ui.toolkit.core.Toolkit.processXml(haxe.ui.toolkit.resources.ResourceManager.get_instance().getXML(resourceId));
};
haxe.ui.toolkit.core.Toolkit.processXml = function(xml) {
	var result = null;
	result = haxe.ui.toolkit.core.Toolkit.processXmlNode(xml.firstElement());
	haxe.ui.toolkit.core.Toolkit.postProcessXmlNode(xml.firstElement(),result);
	return result;
};
haxe.ui.toolkit.core.Toolkit.processXmlNode = function(node) {
	if(node == null) return null;
	var result = null;
	var nodeName = node.get_nodeName();
	var n = nodeName.indexOf(":");
	if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
	nodeName = nodeName.toLowerCase();
	var condition = node.get("condition");
	if(condition != null) {
		var parser = new hscript.Parser();
		var program = parser.parseString(condition);
		var interp = new hscript.Interp();
		var clientWrapper = new haxe.ui.toolkit.hscript.ClientWrapper();
		interp.variables.set("Client",clientWrapper);
		var conditionResult = interp.execute(program);
		if(conditionResult == false) return null;
	}
	if(nodeName == "import") {
		var importResource = node.get("resource");
		if(importResource != null) {
			var importData = haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(importResource);
			if(importData != null) {
				var importXml = Xml.parse(importData);
				return haxe.ui.toolkit.core.Toolkit.processXml(importXml);
			}
		}
	} else if(nodeName == "script") {
	} else if(nodeName == "style") {
		var p = new haxe.ui.toolkit.core.xml.StyleProcessor();
		result = p.process(node);
	} else if(haxe.ui.toolkit.core.ClassManager.get_instance().hasDataSourceClass(nodeName)) {
		var p1 = new haxe.ui.toolkit.core.xml.DataProcessor();
		result = p1.process(node);
	} else {
		var p2 = new haxe.ui.toolkit.core.xml.UIProcessor();
		result = p2.process(node);
		if(result == null) haxe.Log.trace("WARNING: Could not find processor for '" + nodeName + "'",{ fileName : "Toolkit.hx", lineNumber : 173, className : "haxe.ui.toolkit.core.Toolkit", methodName : "processXmlNode"});
	}
	var $it0 = node.elements();
	while( $it0.hasNext() ) {
		var child = $it0.next();
		var childResult = haxe.ui.toolkit.core.Toolkit.processXmlNode(child);
		if(js.Boot.__instanceof(childResult,haxe.ui.toolkit.data.IDataSource) && js.Boot.__instanceof(result,haxe.ui.toolkit.core.interfaces.IDataComponent)) (js.Boot.__cast(result , haxe.ui.toolkit.core.interfaces.IDataComponent)).set_dataSource(js.Boot.__cast(childResult , haxe.ui.toolkit.data.IDataSource));
		if(js.Boot.__instanceof(childResult,haxe.ui.toolkit.core.interfaces.IDisplayObject) && js.Boot.__instanceof(result,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) (js.Boot.__cast(result , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)).addChild(js.Boot.__cast(childResult , haxe.ui.toolkit.core.interfaces.IDisplayObject));
	}
	return result;
};
haxe.ui.toolkit.core.Toolkit.postProcessXmlNode = function(node,parentObject) {
	if(node == null) return null;
	var result = null;
	var nodeName = node.get_nodeName();
	var n = nodeName.indexOf(":");
	if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
	nodeName = nodeName.toLowerCase();
	var condition = node.get("condition");
	if(condition != null) {
		var parser = new hscript.Parser();
		var program = parser.parseString(condition);
		var interp = new hscript.Interp();
		var clientWrapper = new haxe.ui.toolkit.hscript.ClientWrapper();
		interp.variables.set("Client",clientWrapper);
		var conditionResult = interp.execute(program);
		if(conditionResult == false) return null;
	}
	if(nodeName == "script") {
		var scriptResource = node.get("resource");
		var scriptData = "";
		if(scriptResource != null) {
			scriptData += haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(scriptResource);
			scriptData += "\n\n";
		}
		var scriptNodeData = node.firstChild().get_nodeValue();
		if(scriptNodeData != null) {
			scriptNodeData = StringTools.trim(scriptNodeData);
			scriptData += "\n\n" + scriptNodeData;
		}
		if(parentObject != null && js.Boot.__instanceof(parentObject,haxe.ui.toolkit.core.interfaces.IComponent)) (js.Boot.__cast(parentObject , haxe.ui.toolkit.core.interfaces.IComponent)).addScriptlet(scriptData);
	}
	var $it0 = node.elements();
	while( $it0.hasNext() ) {
		var child = $it0.next();
		var childResult = haxe.ui.toolkit.core.Toolkit.postProcessXmlNode(child,parentObject);
	}
	return result;
};
haxe.ui.toolkit.core.Toolkit._transitionRegister = null;
haxe.ui.toolkit.core.Toolkit.get_defaultTransition = function() {
	return haxe.ui.toolkit.core.Toolkit._defaultTransition;
};
haxe.ui.toolkit.core.Toolkit.set_defaultTransition = function(value) {
	haxe.ui.toolkit.core.Toolkit._defaultTransition = value;
	return value;
};
haxe.ui.toolkit.core.Toolkit.getTransitionForClass = function(cls) {
	var s = haxe.ui.toolkit.core.Toolkit._defaultTransition;
	var className = Type.getClassName(cls);
	if(haxe.ui.toolkit.core.Toolkit._transitionRegister != null && haxe.ui.toolkit.core.Toolkit._transitionRegister.get(className) != null) s = haxe.ui.toolkit.core.Toolkit._transitionRegister.get(className);
	return s;
};
haxe.ui.toolkit.core.Toolkit.setTransitionForClass = function(cls,transition) {
	if(haxe.ui.toolkit.core.Toolkit._transitionRegister == null) haxe.ui.toolkit.core.Toolkit._transitionRegister = new haxe.ds.StringMap();
	var className = Type.getClassName(cls);
	haxe.ui.toolkit.core.Toolkit._transitionRegister.set(className,transition);
};
haxe.ui.toolkit.core.Toolkit.addScriptletClass = function(name,cls) {
	haxe.ui.toolkit.hscript.ScriptManager.get_instance().addClass(name,cls);
};
haxe.ui.toolkit.core.Toolkit.addStyleSheet = function(resourceId) {
	haxe.ui.toolkit.style.StyleManager.get_instance().addStyles(haxe.ui.toolkit.style.StyleParser.fromString(haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(resourceId)));
};
haxe.ui.toolkit.core.Toolkit.open = function(fn,options) {
	if(options != null) return haxe.ui.toolkit.core.Toolkit.openPopup(options,fn);
	return haxe.ui.toolkit.core.Toolkit.openFullscreen(fn);
};
haxe.ui.toolkit.core.Toolkit.openFullscreen = function(fn) {
	var root = haxe.ui.toolkit.core.RootManager.get_instance().createRoot({ x : 0, y : 0, percentWidth : 100, percentHeight : 100, styleName : "fullscreen"},fn);
	return root;
};
haxe.ui.toolkit.core.Toolkit.openPopup = function(options,fn) {
	if(options == null) options = { };
	if(options.x != null) options.x = options.x; else options.x = 20;
	if(options.y != null) options.y = options.y; else options.y = 20;
	if(options.styleName != null) options.styleName = options.styleName; else options.styleName = "popup";
	var root = haxe.ui.toolkit.core.RootManager.get_instance().createRoot(options,fn);
	return root;
};
haxe.ui.toolkit.core.Toolkit.get_scaleFactor = function() {
	if(haxe.ui.toolkit.core.Toolkit._scaleFactor == 0) {
		if(haxe.ui.toolkit.core.Toolkit.autoScale == true) {
			haxe.ui.toolkit.core.Toolkit.set_scaleFactor(openfl.system.Capabilities.get_screenDPI());
			if(haxe.ui.toolkit.core.Toolkit._scaleFactor > 120) haxe.ui.toolkit.core.Toolkit._scaleFactor /= 120; else haxe.ui.toolkit.core.Toolkit._scaleFactor = 1;
		} else haxe.ui.toolkit.core.Toolkit._scaleFactor = 1;
	}
	return haxe.ui.toolkit.core.Toolkit._scaleFactor;
};
haxe.ui.toolkit.core.Toolkit.set_scaleFactor = function(value) {
	haxe.ui.toolkit.core.Toolkit._scaleFactor = value;
	return value;
};
haxe.ui.toolkit.core.Toolkit.prototype = {
	initInstance: function() {
		haxe.ui.toolkit.core.ClassManager.get_instance();
	}
	,__class__: haxe.ui.toolkit.core.Toolkit
};
haxe.ui.toolkit.core.XMLController = function(xmlResourceId) {
	haxe.ui.toolkit.core.Controller.call(this,haxe.ui.toolkit.core.Toolkit.processXml(Xml.parse(haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(xmlResourceId))));
};
$hxClasses["haxe.ui.toolkit.core.XMLController"] = haxe.ui.toolkit.core.XMLController;
haxe.ui.toolkit.core.XMLController.__name__ = ["haxe","ui","toolkit","core","XMLController"];
haxe.ui.toolkit.core.XMLController.__super__ = haxe.ui.toolkit.core.Controller;
haxe.ui.toolkit.core.XMLController.prototype = $extend(haxe.ui.toolkit.core.Controller.prototype,{
	__class__: haxe.ui.toolkit.core.XMLController
});
haxe.ui.toolkit.core.base = {};
haxe.ui.toolkit.core.base.HorizontalAlign = function() { };
$hxClasses["haxe.ui.toolkit.core.base.HorizontalAlign"] = haxe.ui.toolkit.core.base.HorizontalAlign;
haxe.ui.toolkit.core.base.HorizontalAlign.__name__ = ["haxe","ui","toolkit","core","base","HorizontalAlign"];
haxe.ui.toolkit.core.base.State = function() { };
$hxClasses["haxe.ui.toolkit.core.base.State"] = haxe.ui.toolkit.core.base.State;
haxe.ui.toolkit.core.base.State.__name__ = ["haxe","ui","toolkit","core","base","State"];
haxe.ui.toolkit.core.base.VerticalAlign = function() { };
$hxClasses["haxe.ui.toolkit.core.base.VerticalAlign"] = haxe.ui.toolkit.core.base.VerticalAlign;
haxe.ui.toolkit.core.base.VerticalAlign.__name__ = ["haxe","ui","toolkit","core","base","VerticalAlign"];
haxe.ui.toolkit.core.interfaces.Direction = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.Direction"] = haxe.ui.toolkit.core.interfaces.Direction;
haxe.ui.toolkit.core.interfaces.Direction.__name__ = ["haxe","ui","toolkit","core","interfaces","Direction"];
haxe.ui.toolkit.core.interfaces.InvalidationFlag = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.InvalidationFlag"] = haxe.ui.toolkit.core.interfaces.InvalidationFlag;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.__name__ = ["haxe","ui","toolkit","core","interfaces","InvalidationFlag"];
haxe.ui.toolkit.core.renderers = {};
haxe.ui.toolkit.core.renderers.ItemRenderer = function() {
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this.set_state("normal");
};
$hxClasses["haxe.ui.toolkit.core.renderers.ItemRenderer"] = haxe.ui.toolkit.core.renderers.ItemRenderer;
haxe.ui.toolkit.core.renderers.ItemRenderer.__name__ = ["haxe","ui","toolkit","core","renderers","ItemRenderer"];
haxe.ui.toolkit.core.renderers.ItemRenderer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IItemRenderer];
haxe.ui.toolkit.core.renderers.ItemRenderer.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.core.renderers.ItemRenderer.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.addStatesRecursively(this);
	}
	,addStatesRecursively: function(c) {
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.StateComponent) && c != this) (js.Boot.__cast(c , haxe.ui.toolkit.core.StateComponent)).addStates(this.get_states());
		var _g = 0;
		var _g1 = c.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(this.isInteractive(c)) continue;
			if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) this.addStatesRecursively(js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer));
		}
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		this.updateComponents();
		this.attachEvents(this);
		return value;
	}
	,update: function() {
		this.updateComponents();
	}
	,allowSelection: function(stageX,stageY) {
		var allow = true;
		var c = this.findComponentUnderPoint(stageX,stageY);
		while(c != null) {
			if(this.isInteractive(c)) {
				allow = false;
				break;
			}
			if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.DisplayObjectContainer) == false) break;
			c = (js.Boot.__cast(c , haxe.ui.toolkit.core.DisplayObjectContainer)).findComponentUnderPoint(stageX,stageY);
		}
		return allow;
	}
	,attachEvents: function(c) {
		var _g = 0;
		var _g1 = c.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(this.isInteractive(child)) this.attachEvent(child); else if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) this.attachEvents(js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer));
		}
	}
	,attachEvent: function(c) {
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.controls.Slider)) {
			c.removeEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
			c.addEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
		} else if(js.Boot.__instanceof(c,haxe.ui.toolkit.controls.Button)) {
			c.removeEventListener("haxeui_" + "click",$bind(this,this._onComponentEvent));
			c.addEventListener("haxeui_" + "click",$bind(this,this._onComponentEvent));
		} else if(js.Boot.__instanceof(c,haxe.ui.toolkit.controls.TextInput)) {
			c.removeEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
			c.addEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
		}
	}
	,_onComponentEvent: function(event) {
		if(event.get_component() != null && event.get_component().get_id() != null && event.get_component().get_id().length > 0) Reflect.setField(this._data,event.get_component().get_id(),event.get_component().get_value());
		this.dispatchProxyEvent("haxeui_" + "componentEvent",event);
	}
	,dispatchProxyEvent: function(type,refEvent) {
		if(this.eventDispatcher != null) {
			var c = null;
			if(refEvent != null && refEvent.get_component() != null) c = refEvent.get_component();
			var uiEvent = new haxe.ui.toolkit.events.UIEvent(type,c);
			uiEvent.data = this._data;
			uiEvent.data.update = $bind(this,this.update);
			uiEvent.data.itemRenderer = this;
			this.eventDispatcher.dispatchEvent(uiEvent);
		}
	}
	,updateComponents: function() {
		var fields = Reflect.fields(this._data);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var componentId = f;
			var value = Reflect.field(this._data,f);
			var c = this.findChild(componentId,null,true);
			if(c != null) this.updateComponentValue(c,value);
		}
	}
	,updateComponentValue: function(c,value) {
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.Component)) (js.Boot.__cast(c , haxe.ui.toolkit.core.Component)).set_value(value);
	}
	,get_states: function() {
		return ["normal","over","selected","disabled"];
	}
	,set_state: function(value) {
		this.setStateRecursively(value,this);
		return haxe.ui.toolkit.core.StateComponent.prototype.set_state.call(this,value);
	}
	,setStateRecursively: function(value,c) {
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.StateComponent) && c != this) (js.Boot.__cast(c , haxe.ui.toolkit.core.StateComponent)).set_state(value);
		var _g = 0;
		var _g1 = c.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(this.isInteractive(c)) continue;
			if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) this.setStateRecursively(value,js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer));
		}
	}
	,isInteractive: function(c) {
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.controls.Button) || js.Boot.__instanceof(c,haxe.ui.toolkit.controls.Slider) || js.Boot.__instanceof(c,haxe.ui.toolkit.controls.TextInput)) return true;
		return false;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			c.addChild(child.clone());
		}
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.renderers.ItemRenderer();
	}
	,__class__: haxe.ui.toolkit.core.renderers.ItemRenderer
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_data:"set_data",get_data:"get_data"})
});
haxe.ui.toolkit.core.renderers.BasicItemRenderer = function() {
	haxe.ui.toolkit.core.renderers.ItemRenderer.call(this);
	this._layout = new haxe.ui.toolkit.layout.HorizontalLayout();
	this._maintext = new haxe.ui.toolkit.controls.Text();
	this._maintext.set_text("Text");
	this._maintext.set_id("text");
	this._maintext.set_verticalAlign("center");
	this._maintext.set_percentWidth(100);
	this.addChild(this._maintext);
};
$hxClasses["haxe.ui.toolkit.core.renderers.BasicItemRenderer"] = haxe.ui.toolkit.core.renderers.BasicItemRenderer;
haxe.ui.toolkit.core.renderers.BasicItemRenderer.__name__ = ["haxe","ui","toolkit","core","renderers","BasicItemRenderer"];
haxe.ui.toolkit.core.renderers.BasicItemRenderer.__super__ = haxe.ui.toolkit.core.renderers.ItemRenderer;
haxe.ui.toolkit.core.renderers.BasicItemRenderer.prototype = $extend(haxe.ui.toolkit.core.renderers.ItemRenderer.prototype,{
	set_data: function(value) {
		var n = 0;
		if(value.icon != null) {
			if(this._icon == null) {
				this._icon = new haxe.ui.toolkit.controls.Image();
				this._icon.set_id("icon");
				this._icon.set_verticalAlign("center");
				this.addChildAt(this._icon,n);
				n++;
			}
		}
		if(value.subtext != null) {
			if(this._vbox == null) {
				this._vbox = new haxe.ui.toolkit.containers.VBox();
				this._vbox.set_percentWidth(100);
				this.addChildAt(this._vbox,n);
			}
			if(this._subtext == null) {
				this._subtext = new haxe.ui.toolkit.controls.Text();
				this._subtext.set_id("subtext");
				this._subtext.set_percentWidth(100);
				this._subtext.set_multiline(true);
				this._subtext.set_wrapLines(true);
				this.removeChild(this._maintext,false);
				this._vbox.addChild(this._maintext);
				this._vbox.addChild(this._subtext);
			}
		}
		return haxe.ui.toolkit.core.renderers.ItemRenderer.prototype.set_data.call(this,value);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.renderers.ItemRenderer.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.renderers.BasicItemRenderer();
	}
	,__class__: haxe.ui.toolkit.core.renderers.BasicItemRenderer
});
haxe.ui.toolkit.core.renderers.ComponentItemRenderer = function() {
	haxe.ui.toolkit.core.renderers.BasicItemRenderer.call(this);
};
$hxClasses["haxe.ui.toolkit.core.renderers.ComponentItemRenderer"] = haxe.ui.toolkit.core.renderers.ComponentItemRenderer;
haxe.ui.toolkit.core.renderers.ComponentItemRenderer.__name__ = ["haxe","ui","toolkit","core","renderers","ComponentItemRenderer"];
haxe.ui.toolkit.core.renderers.ComponentItemRenderer.__super__ = haxe.ui.toolkit.core.renderers.BasicItemRenderer;
haxe.ui.toolkit.core.renderers.ComponentItemRenderer.prototype = $extend(haxe.ui.toolkit.core.renderers.BasicItemRenderer.prototype,{
	get_component: function() {
		return this._component;
	}
	,set_data: function(value) {
		var type = value.componentType;
		if(type != null) {
			var cls = this.getClassFromType(type);
			if(cls != null && js.Boot.__instanceof(this._component,cls) == false) {
				if(this._component != null) this.removeChild(this._component);
				this._component = Type.createInstance(cls,[]);
				this._component.set_verticalAlign("center");
				this._component.set_id("componentValue");
				this._component.set_styleName(value.componentStyleName);
				if(value.componentSize != null) {
					var cx = value.componentSize;
					this._component.set_autoSize(false);
					this._component.set_width(cx);
				}
				this.addChildAt(this._component,this.get_numChildren());
			}
		}
		return haxe.ui.toolkit.core.renderers.BasicItemRenderer.prototype.set_data.call(this,value);
	}
	,getClassFromType: function(type) {
		type = type.toLowerCase();
		if(type == "button") return haxe.ui.toolkit.controls.Button; else if(type == "slider") return haxe.ui.toolkit.controls.HSlider; else if(type == "image") return haxe.ui.toolkit.controls.Image; else if(type == "textinput") return haxe.ui.toolkit.controls.TextInput;
		return null;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.renderers.BasicItemRenderer.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.renderers.ComponentItemRenderer();
	}
	,__class__: haxe.ui.toolkit.core.renderers.ComponentItemRenderer
	,__properties__: $extend(haxe.ui.toolkit.core.renderers.BasicItemRenderer.prototype.__properties__,{get_component:"get_component"})
});
haxe.ui.toolkit.core.xml = {};
haxe.ui.toolkit.core.xml.IXMLProcessor = function() { };
$hxClasses["haxe.ui.toolkit.core.xml.IXMLProcessor"] = haxe.ui.toolkit.core.xml.IXMLProcessor;
haxe.ui.toolkit.core.xml.IXMLProcessor.__name__ = ["haxe","ui","toolkit","core","xml","IXMLProcessor"];
haxe.ui.toolkit.core.xml.IXMLProcessor.prototype = {
	__class__: haxe.ui.toolkit.core.xml.IXMLProcessor
};
haxe.ui.toolkit.core.xml.XMLProcessor = function() {
};
$hxClasses["haxe.ui.toolkit.core.xml.XMLProcessor"] = haxe.ui.toolkit.core.xml.XMLProcessor;
haxe.ui.toolkit.core.xml.XMLProcessor.__name__ = ["haxe","ui","toolkit","core","xml","XMLProcessor"];
haxe.ui.toolkit.core.xml.XMLProcessor.__interfaces__ = [haxe.ui.toolkit.core.xml.IXMLProcessor];
haxe.ui.toolkit.core.xml.XMLProcessor.prototype = {
	process: function(node) {
		return null;
	}
	,stripNamespace: function(nodeName) {
		var n = nodeName.indexOf(":");
		if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
		nodeName = nodeName.toLowerCase();
		return nodeName;
	}
	,__class__: haxe.ui.toolkit.core.xml.XMLProcessor
};
haxe.ui.toolkit.core.xml.DataProcessor = function() {
	haxe.ui.toolkit.core.xml.XMLProcessor.call(this);
};
$hxClasses["haxe.ui.toolkit.core.xml.DataProcessor"] = haxe.ui.toolkit.core.xml.DataProcessor;
haxe.ui.toolkit.core.xml.DataProcessor.__name__ = ["haxe","ui","toolkit","core","xml","DataProcessor"];
haxe.ui.toolkit.core.xml.DataProcessor.createDataSource = function(className,config) {
	var ds = Type.createInstance(Type.resolveClass(className),[]);
	if(ds != null) {
		ds.create(config);
		haxe.ui.toolkit.data.DataManager.get_instance().registerDataSource(ds);
	}
	return ds;
};
haxe.ui.toolkit.core.xml.DataProcessor.__super__ = haxe.ui.toolkit.core.xml.XMLProcessor;
haxe.ui.toolkit.core.xml.DataProcessor.prototype = $extend(haxe.ui.toolkit.core.xml.XMLProcessor.prototype,{
	process: function(node) {
		var result = null;
		var nodeName = this.stripNamespace(node.get_nodeName());
		nodeName = nodeName.toLowerCase();
		var className = haxe.ui.toolkit.core.ClassManager.get_instance().getDataSourceClassName(nodeName);
		if(className != null) result = haxe.ui.toolkit.core.xml.DataProcessor.createDataSource(className,node);
		return result;
	}
	,__class__: haxe.ui.toolkit.core.xml.DataProcessor
});
haxe.ui.toolkit.core.xml.StyleProcessor = function() {
	haxe.ui.toolkit.core.xml.XMLProcessor.call(this);
};
$hxClasses["haxe.ui.toolkit.core.xml.StyleProcessor"] = haxe.ui.toolkit.core.xml.StyleProcessor;
haxe.ui.toolkit.core.xml.StyleProcessor.__name__ = ["haxe","ui","toolkit","core","xml","StyleProcessor"];
haxe.ui.toolkit.core.xml.StyleProcessor.__super__ = haxe.ui.toolkit.core.xml.XMLProcessor;
haxe.ui.toolkit.core.xml.StyleProcessor.prototype = $extend(haxe.ui.toolkit.core.xml.XMLProcessor.prototype,{
	process: function(node) {
		var styleData = node.firstChild().get_nodeValue();
		styleData = StringTools.trim(styleData);
		var styles = haxe.ui.toolkit.style.StyleParser.fromString(styleData);
		haxe.ui.toolkit.style.StyleManager.get_instance().addStyles(styles);
		return null;
	}
	,__class__: haxe.ui.toolkit.core.xml.StyleProcessor
});
haxe.ui.toolkit.core.xml.UIProcessor = function() {
	haxe.ui.toolkit.core.xml.XMLProcessor.call(this);
};
$hxClasses["haxe.ui.toolkit.core.xml.UIProcessor"] = haxe.ui.toolkit.core.xml.UIProcessor;
haxe.ui.toolkit.core.xml.UIProcessor.__name__ = ["haxe","ui","toolkit","core","xml","UIProcessor"];
haxe.ui.toolkit.core.xml.UIProcessor.createComponent = function(className,config) {
	var c = Type.createInstance(Type.resolveClass(className),[]);
	try {
		var $it0 = config.attributes();
		while( $it0.hasNext() ) {
			var attr = $it0.next();
			if(StringTools.startsWith(attr,"xmlns:")) continue;
			var value = config.get(attr);
			if(haxe.ui.toolkit.hscript.ScriptUtils.isScript(value)) value = haxe.ui.toolkit.hscript.ScriptManager.get_instance().executeScript(value);
			if(attr == "width") {
				var width = 0;
				var percentWidth = -1;
				var widthString = value;
				if(widthString != null) {
					width = Std.parseFloat(widthString);
					if(widthString.indexOf("%") != -1) {
						width = 0;
						percentWidth = Std.parseFloat(HxOverrides.substr(widthString,0,widthString.length - 1));
					}
				}
				if(width != 0) c.set_width(width);
				if(percentWidth != -1) c.set_percentWidth(percentWidth);
			} else if(attr == "height") {
				var height = 0;
				var percentHeight = -1;
				var heightString = value;
				if(heightString != null) {
					height = Std.parseFloat(heightString);
					if(heightString.indexOf("%") != -1) {
						height = 0;
						percentHeight = Std.parseFloat(HxOverrides.substr(heightString,0,heightString.length - 1));
					}
				}
				if(height != 0) c.set_height(height);
				if(percentHeight != -1) c.set_percentHeight(percentHeight);
			} else if(attr == "style") {
				if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.StyleableDisplayObject)) {
					var inlineStyles = haxe.ui.toolkit.style.StyleParser.fromString("_temp {" + value + "}");
					if(inlineStyles != null) {
						var style = inlineStyles.getStyle("_temp");
						if(style != null) {
							(js.Boot.__cast(c , haxe.ui.toolkit.core.StyleableDisplayObject)).set_style(style);
							(js.Boot.__cast(c , haxe.ui.toolkit.core.StyleableDisplayObject)).set_styleString(value);
						}
					}
				}
			} else if(attr == "condition") {
			} else if(attr == "layout") switch(value) {
			case "absolute":
				c.set_layout(new haxe.ui.toolkit.layout.AbsoluteLayout());
				throw "__break__";
				break;
			case "box":
				c.set_layout(new haxe.ui.toolkit.layout.BoxLayout());
				throw "__break__";
				break;
			case "grid":
				c.set_layout(new haxe.ui.toolkit.layout.GridLayout());
				throw "__break__";
				break;
			case "horizontal":
				c.set_layout(new haxe.ui.toolkit.layout.HorizontalLayout());
				throw "__break__";
				break;
			case "vertical":
				c.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
				throw "__break__";
				break;
			case "continuousVertical":
				c.set_layout(new haxe.ui.toolkit.layout.VerticalContinuousLayout());
				throw "__break__";
				break;
			case "continuousHorizontal":
				c.set_layout(new haxe.ui.toolkit.layout.HorizontalContinuousLayout());
				throw "__break__";
				break;
			default:
				c.set_layout(new haxe.ui.toolkit.layout.DefaultLayout());
				throw "__break__";
			} else if(attr == "dataSource") {
				if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IDataComponent)) {
					var dataComponent;
					dataComponent = js.Boot.__cast(c , haxe.ui.toolkit.core.interfaces.IDataComponent);
					var registeredDataSource = haxe.ui.toolkit.data.DataManager.get_instance().getRegisteredDataSource(value);
					if(registeredDataSource != null) dataComponent.set_dataSource(registeredDataSource); else {
						var n = value.indexOf("://");
						if(n != -1) {
							var proto = HxOverrides.substr(value,0,n);
							value = HxOverrides.substr(value,n + 3,value.length);
							var className1 = haxe.ui.toolkit.core.ClassManager.get_instance().getDataSourceClassName(proto);
							var ds = Type.createInstance(Type.resolveClass(className1),[]);
							if(ds != null) {
								ds.createFromResource(value);
								haxe.ui.toolkit.data.DataManager.get_instance().registerDataSource(ds);
								dataComponent.set_dataSource(ds);
							}
						}
					}
				}
			} else if(attr == "text") c.set_text(value); else if(StringTools.startsWith(attr.toLowerCase(),"on")) {
				var event = HxOverrides.substr(attr,2,attr.length).toLowerCase();
				c.addScriptletEventHandler(event,value);
			} else try {
				if(Std.parseInt(value) != null) Reflect.setProperty(c,attr,Std.parseInt(value)); else if(value == "true" || value == "yes" || value == "false" || value == "no") Reflect.setProperty(c,attr,haxe.ui.toolkit.util.TypeParser.parseBool(value)); else Reflect.setProperty(c,attr,value);
			} catch( e ) {
				haxe.Log.trace("Exception setting component property: " + attr + " (" + Std.string(e) + ")",{ fileName : "UIProcessor.hx", lineNumber : 163, className : "haxe.ui.toolkit.core.xml.UIProcessor", methodName : "createComponent"});
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	return c;
};
haxe.ui.toolkit.core.xml.UIProcessor.__super__ = haxe.ui.toolkit.core.xml.XMLProcessor;
haxe.ui.toolkit.core.xml.UIProcessor.prototype = $extend(haxe.ui.toolkit.core.xml.XMLProcessor.prototype,{
	process: function(node) {
		var result = null;
		var nodeName = node.get_nodeName();
		var n = nodeName.indexOf(":");
		if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
		nodeName = nodeName.toLowerCase();
		var className = haxe.ui.toolkit.core.ClassManager.get_instance().getComponentClassName(nodeName);
		var direction = node.get("direction");
		if(direction != null) {
			var directionalPrefix = HxOverrides.substr(direction,0,1);
			var directionalName = directionalPrefix + nodeName;
			var directionalClassName = haxe.ui.toolkit.core.ClassManager.get_instance().getComponentClassName(directionalName);
			if(directionalClassName != null) className = directionalClassName;
		}
		if(className != null) result = haxe.ui.toolkit.core.xml.UIProcessor.createComponent(className,node);
		return result;
	}
	,__class__: haxe.ui.toolkit.core.xml.UIProcessor
});
haxe.ui.toolkit.data = {};
haxe.ui.toolkit.data.IDataSource = function() { };
$hxClasses["haxe.ui.toolkit.data.IDataSource"] = haxe.ui.toolkit.data.IDataSource;
haxe.ui.toolkit.data.IDataSource.__name__ = ["haxe","ui","toolkit","data","IDataSource"];
haxe.ui.toolkit.data.IDataSource.prototype = {
	__class__: haxe.ui.toolkit.data.IDataSource
};
haxe.ui.toolkit.data.DataSource = function() {
	this._hasChanged = false;
	this._allowEvents = true;
	this.allowDeletions = true;
	this.allowUpdates = true;
	this.allowAdditions = true;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["haxe.ui.toolkit.data.DataSource"] = haxe.ui.toolkit.data.DataSource;
haxe.ui.toolkit.data.DataSource.__name__ = ["haxe","ui","toolkit","data","DataSource"];
haxe.ui.toolkit.data.DataSource.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IEventDispatcher,haxe.ui.toolkit.data.IDataSource];
haxe.ui.toolkit.data.DataSource.__super__ = openfl.events.EventDispatcher;
haxe.ui.toolkit.data.DataSource.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_config: function() {
		return this._config;
	}
	,clone: function() {
		var newDS = null;
		return newDS;
	}
	,get_allowEvents: function() {
		return this._allowEvents;
	}
	,set_allowEvents: function(value) {
		this._allowEvents = value;
		if(this._allowEvents == true) {
			if(this._hasChanged == true) this.dispatchChanged();
		}
		return value;
	}
	,get_id: function() {
		return this._id;
	}
	,set_id: function(value) {
		this._id = value;
		return value;
	}
	,create: function(config) {
		this._config = config;
		if(this._config == null) return;
		this._id = config.get("id");
	}
	,open: function() {
		return this._open();
	}
	,close: function() {
		return this._close();
	}
	,moveFirst: function() {
		return this._moveFirst();
	}
	,moveNext: function() {
		return this._moveNext();
	}
	,get: function() {
		return this._get();
	}
	,add: function(o) {
		var b = false;
		if(this.allowAdditions) {
			b = this._add(o);
			if(b == true) this.dispatchChanged();
		}
		return b;
	}
	,update: function(o) {
		var b = false;
		if(this.allowUpdates) {
			b = this._update(o);
			if(b) this.dispatchChanged();
		}
		return b;
	}
	,remove: function() {
		var b = false;
		if(this.allowDeletions) {
			b = this._remove();
			if(b) this.dispatchChanged();
		}
		return b;
	}
	,removeAll: function() {
		if(this.moveFirst()) do this.remove(); while(this.moveFirst());
	}
	,hash: function() {
		var o = this.get();
		if(o == null) return null;
		return "" + this.getObjectId(o);
	}
	,size: function() {
		return -1;
	}
	,_open: function() {
		return false;
	}
	,_close: function() {
		return false;
	}
	,_moveFirst: function() {
		return false;
	}
	,_moveNext: function() {
		return false;
	}
	,_get: function() {
		return null;
	}
	,_add: function(o) {
		return false;
	}
	,_update: function(o) {
		return false;
	}
	,_remove: function() {
		return false;
	}
	,createFromString: function(data,config) {
	}
	,createFromResource: function(resourceId,config) {
		if(resourceId != null) {
			var data = haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(resourceId);
			this.createFromString(data,config);
		}
	}
	,dispatchChanged: function() {
		this._hasChanged = true;
		if(this._allowEvents == true) {
			this._hasChanged = false;
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
		}
	}
	,getObjectId: function(obj) {
		if(js.Boot.__instanceof(obj,Class)) {
			if(obj.__cls_id__ == null) obj.__cls_id__ = haxe.ui.toolkit.data.DataSource.clsId++;
			return obj.__cls_id__;
		} else {
			if(obj.__get_id__ == null) {
				var cls = Type.getClass(obj);
				if(cls == null) {
					var id = Std.random(2147483647);
					obj.__get_id__ = function() {
						return id;
					};
					return id;
				}
				var fstid = Std.random(2147483647);
				var _this = this;
				cls.prototype.__get_id__ = function() {
					if(_this.___id___ == null) return _this.___id___ = Std.random(2147483647);
					return _this.___id___;
				};
			}
			return obj.__get_id__();
		}
	}
	,__class__: haxe.ui.toolkit.data.DataSource
	,__properties__: {set_id:"set_id",get_id:"get_id",set_allowEvents:"set_allowEvents",get_allowEvents:"get_allowEvents",get_config:"get_config"}
});
haxe.ui.toolkit.data.ArrayDataSource = function() {
	this.pos = 0;
	haxe.ui.toolkit.data.DataSource.call(this);
	this.array = new Array();
};
$hxClasses["haxe.ui.toolkit.data.ArrayDataSource"] = haxe.ui.toolkit.data.ArrayDataSource;
haxe.ui.toolkit.data.ArrayDataSource.__name__ = ["haxe","ui","toolkit","data","ArrayDataSource"];
haxe.ui.toolkit.data.ArrayDataSource.__super__ = haxe.ui.toolkit.data.DataSource;
haxe.ui.toolkit.data.ArrayDataSource.prototype = $extend(haxe.ui.toolkit.data.DataSource.prototype,{
	create: function(config) {
		haxe.ui.toolkit.data.DataSource.prototype.create.call(this,config);
		if(config == null) return;
		this._id = config.get("id");
		var delimeter = config.get("delimeter");
		if(delimeter == null) delimeter = ",";
		delimeter = StringTools.replace(delimeter,"\\n","\n");
		var resource = config.get("resource");
		if(resource != null) this.createFromResource(resource,{ delimeter : delimeter});
		var nodeText = null;
		if(config.firstChild() != null) nodeText = config.firstChild().get_nodeValue();
		if(nodeText != null) this.createFromString(nodeText,{ delimeter : delimeter});
	}
	,_moveFirst: function() {
		this.pos = 0;
		if(this.array == null || this.array.length == 0) return false;
		return true;
	}
	,_moveNext: function() {
		if(this.array == null || this.array.length == 0) return false;
		var b = false;
		if(this.pos + 1 < this.array.length) {
			this.pos += 1;
			b = true;
		}
		return b;
	}
	,_get: function() {
		if(this.array == null || this.array.length == 0) return null;
		return this.array[this.pos];
	}
	,_add: function(o) {
		this.array.push(o);
		return true;
	}
	,_remove: function() {
		var x = this.get();
		return HxOverrides.remove(this.array,x);
	}
	,size: function() {
		return this.array.length;
	}
	,createFromString: function(data,config) {
		if(data != null) {
			if(config == null) config = { };
			if(config.delimeter != null) config.delimeter = config.delimeter; else config.delimeter = ",";
			var arr = data.split(config.delimeter);
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) {
					var s = arr[_g];
					++_g;
					s = StringTools.trim(s);
					if(s.length > 0) {
						var o = { text : s};
						this.add(o);
					}
				}
			}
		}
	}
	,__class__: haxe.ui.toolkit.data.ArrayDataSource
});
haxe.ui.toolkit.data.DataManager = function() {
	this._dataSourceMap = new haxe.ds.StringMap();
};
$hxClasses["haxe.ui.toolkit.data.DataManager"] = haxe.ui.toolkit.data.DataManager;
haxe.ui.toolkit.data.DataManager.__name__ = ["haxe","ui","toolkit","data","DataManager"];
haxe.ui.toolkit.data.DataManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.data.DataManager._instance = null;
haxe.ui.toolkit.data.DataManager.instance = null;
haxe.ui.toolkit.data.DataManager.get_instance = function() {
	if(haxe.ui.toolkit.data.DataManager._instance == null) haxe.ui.toolkit.data.DataManager._instance = new haxe.ui.toolkit.data.DataManager();
	return haxe.ui.toolkit.data.DataManager._instance;
};
haxe.ui.toolkit.data.DataManager.prototype = {
	registerDataSource: function(dataSource) {
		var dataSourceId = dataSource.get_id();
		if(dataSourceId == null || dataSourceId.length == 0) {
			dataSourceId = haxe.ui.toolkit.util.Identifier.guid();
			dataSource.set_id(dataSourceId);
		}
		this._dataSourceMap.set(dataSourceId,dataSource);
	}
	,getRegisteredDataSource: function(id) {
		return this._dataSourceMap.get(id);
	}
	,get_dataSources: function() {
		var arr = new Array();
		var $it0 = this._dataSourceMap.iterator();
		while( $it0.hasNext() ) {
			var ds = $it0.next();
			arr.push(ds);
		}
		return arr;
	}
	,__class__: haxe.ui.toolkit.data.DataManager
	,__properties__: {get_dataSources:"get_dataSources"}
};
haxe.ui.toolkit.data.FilesDataSource = function() {
	haxe.ui.toolkit.data.ArrayDataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.FilesDataSource"] = haxe.ui.toolkit.data.FilesDataSource;
haxe.ui.toolkit.data.FilesDataSource.__name__ = ["haxe","ui","toolkit","data","FilesDataSource"];
haxe.ui.toolkit.data.FilesDataSource.__super__ = haxe.ui.toolkit.data.ArrayDataSource;
haxe.ui.toolkit.data.FilesDataSource.prototype = $extend(haxe.ui.toolkit.data.ArrayDataSource.prototype,{
	create: function(config) {
		if(config == null) return;
		this._id = config.get("id");
		var resource = config.get("resource");
		if(resource != null) this.createFromString(resource);
	}
	,_open: function() {
		return true;
	}
	,createFromString: function(data,config) {
		if(data != null) this._dir = this.fixDir(data);
	}
	,createFromResource: function(resourceId,config) {
		this.createFromString(resourceId,config);
	}
	,isDir: function(dir) {
		var isDir = false;
		return isDir;
	}
	,isRoot: function(dir) {
		var isRoot = false;
		return isRoot;
	}
	,fixDir: function(dir) {
		if(dir == null) return "";
		var fixedDir = dir;
		fixedDir = StringTools.replace(fixedDir,"\\","/");
		if(fixedDir.lastIndexOf("/") == fixedDir.length - 1 || fixedDir.lastIndexOf("\\") == fixedDir.length - 1) fixedDir = HxOverrides.substr(fixedDir,0,fixedDir.length - 1);
		return fixedDir;
	}
	,__class__: haxe.ui.toolkit.data.FilesDataSource
});
haxe.ui.toolkit.data.JSONDataSource = function() {
	haxe.ui.toolkit.data.ArrayDataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.JSONDataSource"] = haxe.ui.toolkit.data.JSONDataSource;
haxe.ui.toolkit.data.JSONDataSource.__name__ = ["haxe","ui","toolkit","data","JSONDataSource"];
haxe.ui.toolkit.data.JSONDataSource.__super__ = haxe.ui.toolkit.data.ArrayDataSource;
haxe.ui.toolkit.data.JSONDataSource.prototype = $extend(haxe.ui.toolkit.data.ArrayDataSource.prototype,{
	create: function(config) {
		if(config == null) return;
		this._id = config.get("id");
		var resource = config.get("resource");
		if(resource != null) this.createFromResource(resource);
		var nodeText = null;
		if(config.firstChild() != null) nodeText = config.firstChild().get_nodeValue();
		if(nodeText != null) this.createFromString(nodeText);
	}
	,createFromString: function(data,config) {
		if(data != null) {
			var jsonObject = JSON.parse(data);
			var arr = null;
			if((jsonObject instanceof Array) && jsonObject.__enum__ == null) {
				arr = js.Boot.__cast(jsonObject , Array);
				var _g = 0;
				while(_g < arr.length) {
					var o = arr[_g];
					++_g;
					this.add(o);
				}
			}
		}
	}
	,__class__: haxe.ui.toolkit.data.JSONDataSource
});
haxe.ui.toolkit.data.MySQLDataSource = function() {
	haxe.ui.toolkit.data.DataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.MySQLDataSource"] = haxe.ui.toolkit.data.MySQLDataSource;
haxe.ui.toolkit.data.MySQLDataSource.__name__ = ["haxe","ui","toolkit","data","MySQLDataSource"];
haxe.ui.toolkit.data.MySQLDataSource.__super__ = haxe.ui.toolkit.data.DataSource;
haxe.ui.toolkit.data.MySQLDataSource.prototype = $extend(haxe.ui.toolkit.data.DataSource.prototype,{
	__class__: haxe.ui.toolkit.data.MySQLDataSource
});
haxe.ui.toolkit.data.XMLDataSource = function() {
	haxe.ui.toolkit.data.ArrayDataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.XMLDataSource"] = haxe.ui.toolkit.data.XMLDataSource;
haxe.ui.toolkit.data.XMLDataSource.__name__ = ["haxe","ui","toolkit","data","XMLDataSource"];
haxe.ui.toolkit.data.XMLDataSource.__super__ = haxe.ui.toolkit.data.ArrayDataSource;
haxe.ui.toolkit.data.XMLDataSource.prototype = $extend(haxe.ui.toolkit.data.ArrayDataSource.prototype,{
	create: function(config) {
		if(config == null) return;
		this._id = config.get("id");
		var resource = config.get("resource");
		if(resource != null) this.createFromResource(resource);
		var nodeText = null;
		if(config.firstChild() != null) nodeText = config.firstElement().toString();
		if(nodeText != null) this.createFromString(nodeText);
	}
	,createFromString: function(data,config) {
		if(data != null) {
			var xml = Xml.parse(data);
			if(xml != null) {
				var it = xml.firstElement().elements();
				while( it.hasNext() ) {
					var e = it.next();
					var o = { };
					var $it0 = e.attributes();
					while( $it0.hasNext() ) {
						var attrName = $it0.next();
						Reflect.setField(o,attrName,e.get(attrName));
					}
					if(Reflect.fields(o).length != 0) this.add(o);
				}
			}
		}
	}
	,__class__: haxe.ui.toolkit.data.XMLDataSource
});
haxe.ui.toolkit.events = {};
haxe.ui.toolkit.events.MenuEvent = function(type,menuItem) {
	openfl.events.Event.call(this,type);
	this.menuItem = menuItem;
};
$hxClasses["haxe.ui.toolkit.events.MenuEvent"] = haxe.ui.toolkit.events.MenuEvent;
haxe.ui.toolkit.events.MenuEvent.__name__ = ["haxe","ui","toolkit","events","MenuEvent"];
haxe.ui.toolkit.events.MenuEvent.__super__ = openfl.events.Event;
haxe.ui.toolkit.events.MenuEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: haxe.ui.toolkit.events.MenuEvent
});
haxe.ui.toolkit.events.UIEvent = function(type,c,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this._component = c;
};
$hxClasses["haxe.ui.toolkit.events.UIEvent"] = haxe.ui.toolkit.events.UIEvent;
haxe.ui.toolkit.events.UIEvent.__name__ = ["haxe","ui","toolkit","events","UIEvent"];
haxe.ui.toolkit.events.UIEvent.__super__ = openfl.events.Event;
haxe.ui.toolkit.events.UIEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		var c = new haxe.ui.toolkit.events.UIEvent(this.type,this._component,this.bubbles,this.cancelable);
		c.displayObject = this.displayObject;
		c.data = this.data;
		c.stageX = this.stageX;
		c.stageY = this.stageY;
		return c;
	}
	,get_component: function() {
		if(this._component != null) return this._component;
		if(this.displayObject == null || js.Boot.__instanceof(this.displayObject,haxe.ui.toolkit.core.Component) == false) return null;
		return js.Boot.__cast(this.displayObject , haxe.ui.toolkit.core.Component);
	}
	,getComponentAs: function(type) {
		var c = this.get_component();
		if(c == null) return null;
		return c;
	}
	,getDataAs: function(type) {
		var d = this.data;
		if(d == null) return null;
		return d;
	}
	,__class__: haxe.ui.toolkit.events.UIEvent
	,__properties__: {get_component:"get_component"}
});
haxe.ui.toolkit.hscript = {};
haxe.ui.toolkit.hscript.ClientWrapper = function() {
	this.language = haxe.ui.toolkit.core.Client.get_instance().get_language();
	this.dpi = haxe.ui.toolkit.core.Client.get_instance().get_dpi();
	this.platform = haxe.ui.toolkit.core.Client.get_instance().get_platform();
	this.target = haxe.ui.toolkit.core.Client.get_instance().get_target();
	this.mobile = haxe.ui.toolkit.core.Client.get_instance().get_mobile();
	this.screenWidth = haxe.ui.toolkit.core.Client.get_instance().get_screenWidth();
	this.screenHeight = haxe.ui.toolkit.core.Client.get_instance().get_screenHeight();
	this.windowWidth = haxe.ui.toolkit.core.Client.get_instance().get_windowWidth();
	this.windowHeight = haxe.ui.toolkit.core.Client.get_instance().get_windowHeight();
};
$hxClasses["haxe.ui.toolkit.hscript.ClientWrapper"] = haxe.ui.toolkit.hscript.ClientWrapper;
haxe.ui.toolkit.hscript.ClientWrapper.__name__ = ["haxe","ui","toolkit","hscript","ClientWrapper"];
haxe.ui.toolkit.hscript.ClientWrapper.prototype = {
	__class__: haxe.ui.toolkit.hscript.ClientWrapper
};
var hscript = {};
hscript.Interp = function() {
	this.variables = new haxe.ds.StringMap();
	this.locals = new haxe.ds.StringMap();
	this.variables.set("null",null);
	this.variables.set("true",true);
	this.variables.set("false",false);
	this.variables.set("trace",function(e) {
		haxe.Log.trace(Std.string(e),{ fileName : "hscript", lineNumber : 0});
	});
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript.Interp;
hscript.Interp.__name__ = ["hscript","Interp"];
hscript.Interp.prototype = {
	initOps: function() {
		var me = this;
		this.binops = new haxe.ds.StringMap();
		this.binops.set("+",function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		});
		this.binops.set("-",function(e11,e21) {
			return me.expr(e11) - me.expr(e21);
		});
		this.binops.set("*",function(e12,e22) {
			return me.expr(e12) * me.expr(e22);
		});
		this.binops.set("/",function(e13,e23) {
			return me.expr(e13) / me.expr(e23);
		});
		this.binops.set("%",function(e14,e24) {
			return me.expr(e14) % me.expr(e24);
		});
		this.binops.set("&",function(e15,e25) {
			return me.expr(e15) & me.expr(e25);
		});
		this.binops.set("|",function(e16,e26) {
			return me.expr(e16) | me.expr(e26);
		});
		this.binops.set("^",function(e17,e27) {
			return me.expr(e17) ^ me.expr(e27);
		});
		this.binops.set("<<",function(e18,e28) {
			return me.expr(e18) << me.expr(e28);
		});
		this.binops.set(">>",function(e19,e29) {
			return me.expr(e19) >> me.expr(e29);
		});
		this.binops.set(">>>",function(e110,e210) {
			return me.expr(e110) >>> me.expr(e210);
		});
		this.binops.set("==",function(e111,e211) {
			return me.expr(e111) == me.expr(e211);
		});
		this.binops.set("!=",function(e112,e212) {
			return me.expr(e112) != me.expr(e212);
		});
		this.binops.set(">=",function(e113,e213) {
			return me.expr(e113) >= me.expr(e213);
		});
		this.binops.set("<=",function(e114,e214) {
			return me.expr(e114) <= me.expr(e214);
		});
		this.binops.set(">",function(e115,e215) {
			return me.expr(e115) > me.expr(e215);
		});
		this.binops.set("<",function(e116,e216) {
			return me.expr(e116) < me.expr(e216);
		});
		this.binops.set("||",function(e117,e217) {
			return me.expr(e117) == true || me.expr(e217) == true;
		});
		this.binops.set("&&",function(e118,e218) {
			return me.expr(e118) == true && me.expr(e218) == true;
		});
		this.binops.set("=",$bind(this,this.assign));
		this.binops.set("...",function(e119,e219) {
			return new IntIterator(me.expr(e119),me.expr(e219));
		});
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v11,v21) {
			return v11 - v21;
		});
		this.assignOp("*=",function(v12,v22) {
			return v12 * v22;
		});
		this.assignOp("/=",function(v13,v23) {
			return v13 / v23;
		});
		this.assignOp("%=",function(v14,v24) {
			return v14 % v24;
		});
		this.assignOp("&=",function(v15,v25) {
			return v15 & v25;
		});
		this.assignOp("|=",function(v16,v26) {
			return v16 | v26;
		});
		this.assignOp("^=",function(v17,v27) {
			return v17 ^ v27;
		});
		this.assignOp("<<=",function(v18,v28) {
			return v18 << v28;
		});
		this.assignOp(">>=",function(v19,v29) {
			return v19 >> v29;
		});
		this.assignOp(">>>=",function(v110,v210) {
			return v110 >>> v210;
		});
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1[1]) {
		case 1:
			var id = e1[2];
			var l = this.locals.get(id);
			if(l == null) this.variables.set(id,v); else l.r = v;
			break;
		case 5:
			var f = e1[3];
			var e = e1[2];
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var index = e1[3];
			var e3 = e1[2];
			this.expr(e3)[this.expr(index)] = v;
			break;
		default:
			this.error(hscript.Error.EInvalidOp("="));
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		this.binops.set(op,function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		});
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1[1]) {
		case 1:
			var id = e1[2];
			var l = this.locals.get(id);
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) this.variables.set(id,v); else l.r = v;
			break;
		case 5:
			var f = e1[3];
			var e = e1[2];
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var index = e1[3];
			var e3 = e1[2];
			var arr = this.expr(e3);
			var index1 = this.expr(index);
			v = fop(arr[index1],this.expr(e2));
			arr[index1] = v;
			break;
		default:
			return this.error(hscript.Error.EInvalidOp(op));
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e[1]) {
		case 1:
			var id = e[2];
			var l = this.locals.get(id);
			var v;
			if(l == null) v = this.variables.get(id); else v = l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					var value = v;
					this.variables.set(id,value);
				} else l.r = v;
			} else if(l == null) {
				var value1 = v + delta;
				this.variables.set(id,value1);
			} else l.r = v + delta;
			return v;
		case 5:
			var f = e[3];
			var e1 = e[2];
			var obj = this.expr(e1);
			var v1 = this.get(obj,f);
			if(prefix) {
				v1 += delta;
				this.set(obj,f,v1);
			} else this.set(obj,f,v1 + delta);
			return v1;
		case 16:
			var index = e[3];
			var e2 = e[2];
			var arr = this.expr(e2);
			var index1 = this.expr(index);
			var v2 = arr[index1];
			if(prefix) {
				v2 += delta;
				arr[index1] = v2;
			} else arr[index1] = v2 + delta;
			return v2;
		default:
			return this.error(hscript.Error.EInvalidOp(delta > 0?"++":"--"));
		}
	}
	,execute: function(expr) {
		this.depth = 0;
		this.locals = new haxe.ds.StringMap();
		this.declared = new Array();
		return this.exprReturn(expr);
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( e1 ) {
			if( js.Boot.__instanceof(e1,hscript._Interp.Stop) ) {
				switch(e1[1]) {
				case 0:
					throw "Invalid break";
					break;
				case 1:
					throw "Invalid continue";
					break;
				case 2:
					var v = e1[2];
					return v;
				}
			} else throw(e1);
		}
		return null;
	}
	,duplicate: function(h) {
		var h2 = new haxe.ds.StringMap();
		var $it0 = h.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = h.get(k);
			h2.set(k,value);
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			this.locals.set(d.n,d.old);
		}
	}
	,edef: function(e) {
		return e;
	}
	,error: function(e) {
		throw e;
		return null;
	}
	,resolve: function(id) {
		var l = this.locals.get(id);
		if(l != null) return l.r;
		var v = this.variables.get(id);
		if(v == null && !this.variables.exists(id)) this.error(hscript.Error.EUnknownVariable(id));
		return v;
	}
	,expr: function(e) {
		switch(e[1]) {
		case 0:
			var c = e[2];
			switch(c[1]) {
			case 0:
				var v = c[2];
				return v;
			case 1:
				var f = c[2];
				return f;
			case 2:
				var s = c[2];
				return s;
			}
			break;
		case 1:
			var id = e[2];
			return this.resolve(id);
		case 2:
			var e1 = e[4];
			var n = e[2];
			this.declared.push({ n : n, old : this.locals.get(n)});
			var value = { r : e1 == null?null:this.expr(e1)};
			this.locals.set(n,value);
			return null;
		case 3:
			var e2 = e[2];
			return this.expr(e2);
		case 4:
			var exprs = e[2];
			var old = this.declared.length;
			var v1 = null;
			var _g = 0;
			while(_g < exprs.length) {
				var e3 = exprs[_g];
				++_g;
				v1 = this.expr(e3);
			}
			this.restore(old);
			return v1;
		case 5:
			var f1 = e[3];
			var e4 = e[2];
			return this.get(this.expr(e4),f1);
		case 6:
			var e21 = e[4];
			var e11 = e[3];
			var op = e[2];
			var fop = this.binops.get(op);
			if(fop == null) this.error(hscript.Error.EInvalidOp(op));
			return fop(e11,e21);
		case 7:
			var e5 = e[4];
			var prefix = e[3];
			var op1 = e[2];
			switch(op1) {
			case "!":
				return this.expr(e5) != true;
			case "-":
				return -this.expr(e5);
			case "++":
				return this.increment(e5,prefix,1);
			case "--":
				return this.increment(e5,prefix,-1);
			case "~":
				return ~this.expr(e5);
			default:
				this.error(hscript.Error.EInvalidOp(op1));
			}
			break;
		case 8:
			var params = e[3];
			var e6 = e[2];
			var args = new Array();
			var _g1 = 0;
			while(_g1 < params.length) {
				var p = params[_g1];
				++_g1;
				args.push(this.expr(p));
			}
			switch(e6[1]) {
			case 5:
				var f2 = e6[3];
				var e7 = e6[2];
				var obj = this.expr(e7);
				if(obj == null) this.error(hscript.Error.EInvalidAccess(f2));
				return this.fcall(obj,f2,args);
			default:
				return this.call(null,this.expr(e6),args);
			}
			break;
		case 9:
			var e22 = e[4];
			var e12 = e[3];
			var econd = e[2];
			if(this.expr(econd) == true) return this.expr(e12); else if(e22 == null) return null; else return this.expr(e22);
			break;
		case 10:
			var e8 = e[3];
			var econd1 = e[2];
			this.whileLoop(econd1,e8);
			return null;
		case 11:
			var e9 = e[4];
			var it = e[3];
			var v2 = e[2];
			this.forLoop(v2,it,e9);
			return null;
		case 12:
			throw hscript._Interp.Stop.SBreak;
			break;
		case 13:
			throw hscript._Interp.Stop.SContinue;
			break;
		case 15:
			var e10 = e[2];
			throw hscript._Interp.Stop.SReturn(e10 == null?null:this.expr(e10));
			break;
		case 14:
			var name = e[4];
			var fexpr = e[3];
			var params1 = e[2];
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var hasOpt = false;
			var minParams = 0;
			var _g2 = 0;
			while(_g2 < params1.length) {
				var p1 = params1[_g2];
				++_g2;
				if(p1.opt) hasOpt = true; else minParams++;
			}
			var f3 = function(args1) {
				if(args1.length != params1.length) {
					if(args1.length < minParams) {
						var str = "Invalid number of parameters. Got " + args1.length + ", required " + minParams;
						if(name != null) str += " for function '" + name + "'";
						throw str;
					}
					var args2 = [];
					var extraParams = args1.length - minParams;
					var pos = 0;
					var _g3 = 0;
					while(_g3 < params1.length) {
						var p2 = params1[_g3];
						++_g3;
						if(p2.opt) {
							if(extraParams > 0) {
								args2.push(args1[pos++]);
								extraParams--;
							} else args2.push(null);
						} else args2.push(args1[pos++]);
					}
					args1 = args2;
				}
				var old1 = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g11 = 0;
				var _g4 = params1.length;
				while(_g11 < _g4) {
					var i = _g11++;
					me.locals.set(params1[i].name,{ r : args1[i]});
				}
				var r = null;
				try {
					r = me.exprReturn(fexpr);
				} catch( e13 ) {
					me.locals = old1;
					me.depth = depth;
					throw e13;
				}
				me.locals = old1;
				me.depth = depth;
				return r;
			};
			var f4 = Reflect.makeVarArgs(f3);
			if(name != null) {
				if(this.depth == 0) this.variables.set(name,f4); else {
					this.declared.push({ n : name, old : this.locals.get(name)});
					var ref = { r : f4};
					this.locals.set(name,ref);
					capturedLocals.set(name,ref);
				}
			}
			return f4;
		case 17:
			var arr = e[2];
			var a = new Array();
			var _g5 = 0;
			while(_g5 < arr.length) {
				var e14 = arr[_g5];
				++_g5;
				a.push(this.expr(e14));
			}
			return a;
		case 16:
			var index = e[3];
			var e15 = e[2];
			return this.expr(e15)[this.expr(index)];
		case 18:
			var params2 = e[3];
			var cl = e[2];
			var a1 = new Array();
			var _g6 = 0;
			while(_g6 < params2.length) {
				var e16 = params2[_g6];
				++_g6;
				a1.push(this.expr(e16));
			}
			return this.cnew(cl,a1);
		case 19:
			var e17 = e[2];
			throw this.expr(e17);
			break;
		case 20:
			var ecatch = e[5];
			var n1 = e[3];
			var e18 = e[2];
			var old2 = this.declared.length;
			try {
				var v3 = this.expr(e18);
				this.restore(old2);
				return v3;
			} catch( $e0 ) {
				if( js.Boot.__instanceof($e0,hscript._Interp.Stop) ) {
					var err = $e0;
					throw err;
				} else {
				var err1 = $e0;
				this.restore(old2);
				this.declared.push({ n : n1, old : this.locals.get(n1)});
				this.locals.set(n1,{ r : err1});
				var v4 = this.expr(ecatch);
				this.restore(old2);
				return v4;
				}
			}
			break;
		case 21:
			var fl = e[2];
			var o = { };
			var _g7 = 0;
			while(_g7 < fl.length) {
				var f5 = fl[_g7];
				++_g7;
				this.set(o,f5.name,this.expr(f5.e));
			}
			return o;
		case 22:
			var e23 = e[4];
			var e19 = e[3];
			var econd2 = e[2];
			if(this.expr(econd2) == true) return this.expr(e19); else return this.expr(e23);
			break;
		case 23:
			var def = e[4];
			var cases = e[3];
			var e20 = e[2];
			var val = this.expr(e20);
			var match = false;
			var _g8 = 0;
			while(_g8 < cases.length) {
				var c1 = cases[_g8];
				++_g8;
				var _g12 = 0;
				var _g21 = c1.values;
				while(_g12 < _g21.length) {
					var v5 = _g21[_g12];
					++_g12;
					if(this.expr(v5) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c1.expr);
					break;
				}
			}
			if(!match) if(def == null) val = null; else val = this.expr(def);
			return val;
		}
		return null;
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		try {
			while(this.expr(econd) == true) try {
				this.expr(e);
			} catch( err ) {
				if( js.Boot.__instanceof(err,hscript._Interp.Stop) ) {
					switch(err[1]) {
					case 1:
						break;
					case 0:
						throw "__break__";
						break;
					case 2:
						throw err;
						break;
					}
				} else throw(err);
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $iterator(v)();
		} catch( e ) {
		}
		if(v.hasNext == null || v.next == null) this.error(hscript.Error.EInvalidIterator(v));
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		this.declared.push({ n : n, old : this.locals.get(n)});
		var it1 = this.makeIterator(this.expr(it));
		try {
			while(it1.hasNext()) {
				var value = { r : it1.next()};
				this.locals.set(n,value);
				try {
					this.expr(e);
				} catch( err ) {
					if( js.Boot.__instanceof(err,hscript._Interp.Stop) ) {
						switch(err[1]) {
						case 1:
							break;
						case 0:
							throw "__break__";
							break;
						case 2:
							throw err;
							break;
						}
					} else throw(err);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,get: function(o,f) {
		if(o == null) this.error(hscript.Error.EInvalidAccess(f));
		return Reflect.field(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) this.error(hscript.Error.EInvalidAccess(f));
		o[f] = v;
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,Reflect.field(o,f),args);
	}
	,call: function(o,f,args) {
		return f.apply(o,args);
	}
	,cnew: function(cl,args) {
		var c = Type.resolveClass(cl);
		if(c == null) c = this.resolve(cl);
		return Type.createInstance(c,args);
	}
	,__class__: hscript.Interp
};
haxe.ui.toolkit.hscript.ScriptInterp = function() {
	hscript.Interp.call(this);
	var defaultClasses = haxe.ui.toolkit.hscript.ScriptManager.get_instance().get_classes();
	var $it0 = defaultClasses.keys();
	while( $it0.hasNext() ) {
		var name = $it0.next();
		var c = defaultClasses.get(name);
		var value = c;
		this.variables.set(name,value);
	}
};
$hxClasses["haxe.ui.toolkit.hscript.ScriptInterp"] = haxe.ui.toolkit.hscript.ScriptInterp;
haxe.ui.toolkit.hscript.ScriptInterp.__name__ = ["haxe","ui","toolkit","hscript","ScriptInterp"];
haxe.ui.toolkit.hscript.ScriptInterp.__super__ = hscript.Interp;
haxe.ui.toolkit.hscript.ScriptInterp.prototype = $extend(hscript.Interp.prototype,{
	get: function(o,f) {
		if(o == null) throw this.error(hscript.Error.EInvalidAccess(f));
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) throw this.error(hscript.Error.EInvalidAccess(f));
		Reflect.setProperty(o,f,v);
		return v;
	}
	,__class__: haxe.ui.toolkit.hscript.ScriptInterp
});
haxe.ui.toolkit.hscript.ScriptManager = function() {
	this._defaultClasses = new haxe.ds.StringMap();
	this._defaultClasses.set("Std",Std);
	this._defaultClasses.set("Math",Math);
	this._defaultClasses.set("Client",haxe.ui.toolkit.hscript.ClientWrapper);
};
$hxClasses["haxe.ui.toolkit.hscript.ScriptManager"] = haxe.ui.toolkit.hscript.ScriptManager;
haxe.ui.toolkit.hscript.ScriptManager.__name__ = ["haxe","ui","toolkit","hscript","ScriptManager"];
haxe.ui.toolkit.hscript.ScriptManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.hscript.ScriptManager._instance = null;
haxe.ui.toolkit.hscript.ScriptManager.instance = null;
haxe.ui.toolkit.hscript.ScriptManager.get_instance = function() {
	if(haxe.ui.toolkit.hscript.ScriptManager._instance == null) haxe.ui.toolkit.hscript.ScriptManager._instance = new haxe.ui.toolkit.hscript.ScriptManager();
	return haxe.ui.toolkit.hscript.ScriptManager._instance;
};
haxe.ui.toolkit.hscript.ScriptManager.prototype = {
	get_classes: function() {
		return this._defaultClasses;
	}
	,addClass: function(name,cls) {
		var value = cls;
		this._defaultClasses.set(name,value);
	}
	,executeScript: function(script) {
		var fullScript = "";
		fullScript += script;
		var retVal = null;
		try {
			var parser = new hscript.Parser();
			var program = parser.parseString(fullScript);
			var interp = new haxe.ui.toolkit.hscript.ScriptInterp();
			retVal = interp.execute(program);
		} catch( e ) {
			retVal = script;
		}
		return retVal;
	}
	,__class__: haxe.ui.toolkit.hscript.ScriptManager
	,__properties__: {get_classes:"get_classes"}
};
haxe.ui.toolkit.hscript.ScriptUtils = function() { };
$hxClasses["haxe.ui.toolkit.hscript.ScriptUtils"] = haxe.ui.toolkit.hscript.ScriptUtils;
haxe.ui.toolkit.hscript.ScriptUtils.__name__ = ["haxe","ui","toolkit","hscript","ScriptUtils"];
haxe.ui.toolkit.hscript.ScriptUtils.isScript = function(data) {
	if(data.indexOf("+") != -1 || data.indexOf("-") != -1 || data.indexOf("*") != -1 || data.indexOf("/") != -1 || data.indexOf("(") != -1 || data.indexOf(")") != -1 || data.indexOf("[") != -1 || data.indexOf("]") != -1) return true;
	return false;
};
haxe.ui.toolkit.hscript.ScriptUtils.isCssException = function(name) {
	if(name == "filter" || name == "icon" || name == "backgroundImage" || name == "fontName") return true;
	return false;
};
haxe.ui.toolkit.layout.AbsoluteLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.AbsoluteLayout"] = haxe.ui.toolkit.layout.AbsoluteLayout;
haxe.ui.toolkit.layout.AbsoluteLayout.__name__ = ["haxe","ui","toolkit","layout","AbsoluteLayout"];
haxe.ui.toolkit.layout.AbsoluteLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.AbsoluteLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.AbsoluteLayout();
	}
	,__class__: haxe.ui.toolkit.layout.AbsoluteLayout
});
haxe.ui.toolkit.layout.BoxLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.BoxLayout"] = haxe.ui.toolkit.layout.BoxLayout;
haxe.ui.toolkit.layout.BoxLayout.__name__ = ["haxe","ui","toolkit","layout","BoxLayout"];
haxe.ui.toolkit.layout.BoxLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.BoxLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			if(child.get_width() > totalWidth) totalWidth = child.get_width();
			if(child.get_height() > totalHeight) totalHeight = child.get_height();
		}
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var xpos = this.get_padding().get_left();
			var ypos = this.get_padding().get_top();
			var halign = child.get_horizontalAlign();
			var valign = child.get_verticalAlign();
			switch(halign) {
			case "center":
				xpos = this.get_container().get_width() / 2 - child.get_width() / 2;
				break;
			case "right":
				xpos = this.get_container().get_width() - child.get_width() - this.get_padding().get_right();
				break;
			default:
			}
			switch(valign) {
			case "center":
				ypos = this.get_container().get_height() / 2 - child.get_height() / 2;
				break;
			case "bottom":
				ypos = this.get_container().get_height() - child.get_height() - this.get_padding().get_bottom();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(ypos);
		}
	}
	,get_usableWidth: function() {
		var ucx = haxe.ui.toolkit.layout.Layout.prototype.get_usableWidth.call(this);
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = haxe.ui.toolkit.layout.Layout.prototype.get_usableHeight.call(this);
		return ucy;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.BoxLayout();
	}
	,__class__: haxe.ui.toolkit.layout.BoxLayout
});
haxe.ui.toolkit.layout.GridLayout = function() {
	this._columns = 1;
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.GridLayout"] = haxe.ui.toolkit.layout.GridLayout;
haxe.ui.toolkit.layout.GridLayout.__name__ = ["haxe","ui","toolkit","layout","GridLayout"];
haxe.ui.toolkit.layout.GridLayout.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.layout.GridLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.GridLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	get_columns: function() {
		return this._columns;
	}
	,set_columns: function(value) {
		this._columns = value;
		return value;
	}
	,resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var columnWidths = this.calcColumnWidths();
		var rowHeights = this.calcRowHeights();
		var totalWidth = 0;
		var totalHeight = 0;
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) {
				var ucx = columnWidths[columnIndex];
				child.set_width(ucx * child.get_percentWidth() / 100);
			}
			if(child.get_percentHeight() > -1) {
				var ucy = rowHeights[rowIndex];
				child.set_height(ucy * child.get_percentHeight() / 100);
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		var _g2 = 0;
		while(_g2 < columnWidths.length) {
			var cx = columnWidths[_g2];
			++_g2;
			totalWidth += cx;
		}
		if(columnWidths.length > 1) totalWidth += this.get_spacingX() * (columnWidths.length - 1);
		var _g3 = 0;
		while(_g3 < rowHeights.length) {
			var cy = rowHeights[_g3];
			++_g3;
			totalHeight += cy;
		}
		if(rowHeights.length > 1) totalHeight += this.get_spacingY() * (rowHeights.length - 1);
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var columnWidths = this.calcColumnWidths();
		var rowHeights = this.calcRowHeights();
		var rowIndex = 0;
		var columnIndex = 0;
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var halign = child.get_horizontalAlign();
			var valign = child.get_verticalAlign();
			switch(halign) {
			case "center":
				child.set_x(xpos + (columnWidths[columnIndex] - child.get_width()) * 0.5);
				break;
			case "right":
				child.set_x(xpos + (columnWidths[columnIndex] - child.get_width()));
				break;
			default:
				child.set_x(xpos);
			}
			switch(valign) {
			case "center":
				child.set_y(ypos + (rowHeights[rowIndex] - child.get_height()) * 0.5);
				break;
			case "bottom":
				child.set_y(ypos + (rowHeights[rowIndex] - child.get_height()));
				break;
			default:
				child.set_y(ypos);
			}
			xpos += columnWidths[columnIndex] + this.get_spacingX();
			columnIndex++;
			if(columnIndex >= this._columns) {
				xpos = this.get_padding().get_left();
				ypos += rowHeights[rowIndex] + this.get_spacingY();
				columnIndex = 0;
				rowIndex++;
			}
		}
	}
	,get_usableWidth: function() {
		var ucx = haxe.ui.toolkit.layout.Layout.prototype.get_usableWidth.call(this);
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = haxe.ui.toolkit.layout.Layout.prototype.get_usableHeight.call(this);
		return ucy;
	}
	,calcColumnWidths: function() {
		var columnWidths = new Array();
		var _g1 = 0;
		var _g = this._columns;
		while(_g1 < _g) {
			var n = _g1++;
			columnWidths.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g2 = 0;
		var _g11 = this.get_container().get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() <= 0) {
				if(child.get_width() > columnWidths[columnIndex]) columnWidths[columnIndex] = child.get_width();
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		rowIndex = 0;
		columnIndex = 0;
		var _g3 = 0;
		var _g12 = this.get_container().get_children();
		while(_g3 < _g12.length) {
			var child1 = _g12[_g3];
			++_g3;
			if(child1.get_visible() == false || child1.get_includeInLayout() == false) continue;
			if(child1.get_percentWidth() > 0) {
				var ucx = this.get_usableWidth() - (this.get_columns() - 1) * this.get_spacingX();
				var _g31 = 0;
				var _g21 = columnWidths.length;
				while(_g31 < _g21) {
					var n1 = _g31++;
					if(n1 != columnIndex) ucx -= columnWidths[n1];
				}
				var cx = ucx * child1.get_percentWidth() / 100;
				if(cx > columnWidths[columnIndex]) columnWidths[columnIndex] = cx;
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		return columnWidths;
	}
	,calcRowHeights: function() {
		var visibleChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_visible()) visibleChildren++;
		}
		var rowCount = visibleChildren / this._columns | 0;
		if(visibleChildren % this._columns != 0) rowCount++;
		var rowHeights = new Array();
		var _g2 = 0;
		while(_g2 < rowCount) {
			var n = _g2++;
			rowHeights.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g3 = 0;
		var _g11 = this.get_container().get_children();
		while(_g3 < _g11.length) {
			var child = _g11[_g3];
			++_g3;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentHeight() <= 0) {
				if(child.get_height() > rowHeights[rowIndex]) rowHeights[rowIndex] = child.get_height();
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		rowIndex = 0;
		columnIndex = 0;
		var _g4 = 0;
		var _g12 = this.get_container().get_children();
		while(_g4 < _g12.length) {
			var child1 = _g12[_g4];
			++_g4;
			if(child1.get_visible() == false || child1.get_includeInLayout() == false) continue;
			if(child1.get_percentHeight() > 0) {
				var ucy = this.get_usableHeight() - (rowCount - 1) * this.get_spacingY();
				var _g31 = 0;
				var _g21 = rowHeights.length;
				while(_g31 < _g21) {
					var n1 = _g31++;
					if(n1 != rowIndex) ucy -= rowHeights[n1];
				}
				var cy = ucy * child1.get_percentHeight() / 100;
				if(cy > rowHeights[rowIndex]) rowHeights[rowIndex] = cy;
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		return rowHeights;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		c.set_columns(this.get_columns());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.GridLayout();
	}
	,__class__: haxe.ui.toolkit.layout.GridLayout
	,__properties__: $extend(haxe.ui.toolkit.layout.Layout.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
haxe.ui.toolkit.layout.HorizontalContinuousLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.HorizontalContinuousLayout"] = haxe.ui.toolkit.layout.HorizontalContinuousLayout;
haxe.ui.toolkit.layout.HorizontalContinuousLayout.__name__ = ["haxe","ui","toolkit","layout","HorizontalContinuousLayout"];
haxe.ui.toolkit.layout.HorizontalContinuousLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.HorizontalContinuousLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var usedCX = this.get_padding().get_left() + this.get_padding().get_right();
		var usedCY = this.get_padding().get_top() + this.get_padding().get_bottom();
		var rowCY = 0;
		var rowHeights = new Array();
		var rowChildren = new Array();
		rowHeights.push(0);
		var row = 0;
		var maxCX = this.get_container().get_width();
		if(this.get_container().get_autoSize() == true && this.get_container().get_parent() != null) maxCX = this.get_container().get_parent().get_layout().get_usableWidth();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			rowChildren.push(child);
			if(child.get_percentWidth() > -1) child.set_width((maxCX - this.get_spacingX()) * child.get_percentWidth() / 100);
			usedCX += child.get_width() + this.get_spacingX();
			if(usedCX - this.get_spacingX() > maxCX) {
				xpos = this.get_padding().get_left();
				rowHeights.push(0);
				ypos += rowHeights[row] + this.get_spacingY();
				row++;
				usedCX = this.get_padding().get_left() + this.get_padding().get_right() + child.get_width() + this.get_spacingX();
				rowChildren = new Array();
				rowChildren.push(child);
			}
			var reposition = false;
			if(child.get_height() > rowHeights[row]) {
				rowHeights[row] = child.get_height();
				reposition = true;
			}
			usedCY = this.get_padding().get_top() + this.get_padding().get_bottom();
			var _g2 = 0;
			while(_g2 < rowHeights.length) {
				var cy = rowHeights[_g2];
				++_g2;
				usedCY += cy + this.get_spacingY();
			}
			usedCY -= this.get_spacingY();
			if(reposition) {
				var _g21 = 0;
				while(_g21 < rowChildren.length) {
					var temp = rowChildren[_g21];
					++_g21;
					var valign = temp.get_verticalAlign();
					var tempYpos = temp.get_y();
					switch(valign) {
					case "center":
						tempYpos = usedCY - temp.get_height() - this.get_padding().get_top() - (rowHeights[row] / 2 - temp.get_height() / 2);
						break;
					case "bottom":
						tempYpos = usedCY - temp.get_height() - this.get_padding().get_top();
						break;
					default:
					}
					temp.set_y(tempYpos);
				}
			}
			if(usedCX - this.get_spacingX() > this.get_container().get_width() && this.get_container().get_autoSize()) this.get_container().set_width(usedCX - this.get_spacingX());
			if(usedCY > this.get_container().get_height() && this.get_container().get_autoSize()) this.get_container().set_height(usedCY);
			var valign1 = child.get_verticalAlign();
			var tempYPos = ypos;
			switch(valign1) {
			case "center":
				tempYPos = usedCY - child.get_height() - this.get_padding().get_top() - (rowHeights[row] / 2 - child.get_height() / 2);
				break;
			case "bottom":
				tempYPos = usedCY - child.get_height() - this.get_padding().get_top();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(tempYPos);
			xpos += child.get_width() + this.get_spacingX();
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.HorizontalContinuousLayout();
	}
	,__class__: haxe.ui.toolkit.layout.HorizontalContinuousLayout
});
haxe.ui.toolkit.layout.HorizontalLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.HorizontalLayout"] = haxe.ui.toolkit.layout.HorizontalLayout;
haxe.ui.toolkit.layout.HorizontalLayout.__name__ = ["haxe","ui","toolkit","layout","HorizontalLayout"];
haxe.ui.toolkit.layout.HorizontalLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.HorizontalLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var numChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			numChildren++;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			totalWidth += child.get_width();
			if(child.get_height() > totalHeight) totalHeight = child.get_height();
		}
		if(numChildren > 1) totalWidth += this.get_spacingX() * (numChildren - 1);
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var ypos = this.get_padding().get_top();
			var valign = child.get_verticalAlign();
			switch(valign) {
			case "center":
				ypos = this.get_container().get_height() / 2 - child.get_height() / 2;
				break;
			case "bottom":
				ypos = this.get_container().get_height() - child.get_height() - this.get_padding().get_bottom();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(ypos);
			xpos += child.get_width() + this.get_spacingX();
		}
	}
	,get_usableWidth: function() {
		var ucx = haxe.ui.toolkit.layout.Layout.prototype.get_usableWidth.call(this);
		var visibleChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_visible()) visibleChildren++;
		}
		if(visibleChildren > 1) ucx -= this.get_spacingX() * (visibleChildren - 1);
		var _g2 = 0;
		var _g11 = this.get_container().get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_width() > 0 && child.get_percentWidth() < 0) ucx -= child.get_width();
		}
		if(ucx < 0) ucx = 0;
		return ucx;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.HorizontalLayout();
	}
	,__class__: haxe.ui.toolkit.layout.HorizontalLayout
});
haxe.ui.toolkit.layout.VerticalContinuousLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.VerticalContinuousLayout"] = haxe.ui.toolkit.layout.VerticalContinuousLayout;
haxe.ui.toolkit.layout.VerticalContinuousLayout.__name__ = ["haxe","ui","toolkit","layout","VerticalContinuousLayout"];
haxe.ui.toolkit.layout.VerticalContinuousLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.VerticalContinuousLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var usedCX = this.get_padding().get_left() + this.get_padding().get_right();
		var usedCY = this.get_padding().get_top() + this.get_padding().get_bottom();
		var colCX = 0;
		var colWidths = new Array();
		var colChildren = new Array();
		colWidths.push(0);
		var col = 0;
		var maxCY = this.get_container().get_height();
		if(this.get_container().get_autoSize() == true && this.get_container().get_parent() != null) maxCY = this.get_container().get_parent().get_layout().get_usableHeight();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			colChildren.push(child);
			usedCY += child.get_height() + this.get_spacingY();
			if(usedCY - this.get_spacingY() > maxCY) {
				ypos = this.get_padding().get_top();
				colWidths.push(0);
				xpos += colWidths[col] + this.get_spacingX();
				col++;
				usedCY = this.get_padding().get_top() + this.get_padding().get_bottom() + child.get_height() + this.get_spacingY();
				colChildren = new Array();
				colChildren.push(child);
			}
			var reposition = false;
			if(child.get_width() > colWidths[col]) {
				colWidths[col] = child.get_width();
				reposition = true;
			}
			usedCX = this.get_padding().get_left() + this.get_padding().get_right();
			var _g2 = 0;
			while(_g2 < colWidths.length) {
				var cx = colWidths[_g2];
				++_g2;
				usedCX += cx + this.get_spacingX();
			}
			usedCX -= this.get_spacingX();
			if(reposition) {
				var _g21 = 0;
				while(_g21 < colChildren.length) {
					var temp = colChildren[_g21];
					++_g21;
					var halign = child.get_horizontalAlign();
					var tempXpos = temp.get_x();
					switch(halign) {
					case "center":
						tempXpos = usedCX - temp.get_width() - this.get_padding().get_left() - (colWidths[col] / 2 - temp.get_width() / 2);
						break;
					case "right":
						tempXpos = usedCX - temp.get_width() - this.get_padding().get_left();
						break;
					default:
					}
					temp.set_x(tempXpos);
				}
			}
			if(usedCY - this.get_spacingY() > this.get_container().get_height() && this.get_container().get_autoSize()) this.get_container().set_height(usedCY - this.get_spacingY());
			if(usedCX > this.get_container().get_width() && this.get_container().get_autoSize()) this.get_container().set_width(usedCX);
			var halign1 = child.get_horizontalAlign();
			var tempXPos = xpos;
			switch(halign1) {
			case "center":
				tempXPos = usedCX - child.get_width() - this.get_padding().get_left() - (colWidths[col] / 2 - child.get_width() / 2);
				break;
			case "right":
				tempXPos = usedCX - child.get_width() - this.get_padding().get_left();
				break;
			default:
			}
			child.set_x(tempXPos);
			child.set_y(ypos);
			ypos += child.get_height() + this.get_spacingY();
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.VerticalContinuousLayout();
	}
	,__class__: haxe.ui.toolkit.layout.VerticalContinuousLayout
});
haxe.ui.toolkit.layout.VerticalLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.VerticalLayout"] = haxe.ui.toolkit.layout.VerticalLayout;
haxe.ui.toolkit.layout.VerticalLayout.__name__ = ["haxe","ui","toolkit","layout","VerticalLayout"];
haxe.ui.toolkit.layout.VerticalLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.VerticalLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var numChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			numChildren++;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			totalHeight += child.get_height();
			if(child.get_width() > totalWidth) totalWidth = child.get_width();
		}
		if(numChildren > 1) totalHeight += this.get_spacingY() * (numChildren - 1);
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var ypos = this.get_padding().get_top();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var xpos = this.get_padding().get_left();
			var halign = child.get_horizontalAlign();
			switch(halign) {
			case "center":
				xpos = this.get_container().get_width() / 2 - child.get_width() / 2;
				break;
			case "right":
				xpos = this.get_container().get_width() - child.get_width() - this.get_padding().get_left();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(ypos);
			ypos += child.get_height() + this.get_spacingY();
		}
	}
	,get_usableHeight: function() {
		var ucy = haxe.ui.toolkit.layout.Layout.prototype.get_usableHeight.call(this);
		var visibleChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_visible()) visibleChildren++;
		}
		if(visibleChildren > 1) ucy -= this.get_spacingY() * (visibleChildren - 1);
		var _g2 = 0;
		var _g11 = this.get_container().get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_height() > 0 && child.get_percentHeight() < 0) ucy -= child.get_height();
		}
		if(ucy < 0) ucy = 0;
		return ucy;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.VerticalLayout();
	}
	,__class__: haxe.ui.toolkit.layout.VerticalLayout
});
haxe.ui.toolkit.resources = {};
haxe.ui.toolkit.resources.IResourceHook = function() { };
$hxClasses["haxe.ui.toolkit.resources.IResourceHook"] = haxe.ui.toolkit.resources.IResourceHook;
haxe.ui.toolkit.resources.IResourceHook.__name__ = ["haxe","ui","toolkit","resources","IResourceHook"];
haxe.ui.toolkit.resources.IResourceHook.prototype = {
	__class__: haxe.ui.toolkit.resources.IResourceHook
};
haxe.ui.toolkit.resources.ResourceManager = function() {
};
$hxClasses["haxe.ui.toolkit.resources.ResourceManager"] = haxe.ui.toolkit.resources.ResourceManager;
haxe.ui.toolkit.resources.ResourceManager.__name__ = ["haxe","ui","toolkit","resources","ResourceManager"];
haxe.ui.toolkit.resources.ResourceManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.resources.ResourceManager._instance = null;
haxe.ui.toolkit.resources.ResourceManager.instance = null;
haxe.ui.toolkit.resources.ResourceManager.get_instance = function() {
	if(haxe.ui.toolkit.resources.ResourceManager._instance == null) haxe.ui.toolkit.resources.ResourceManager._instance = new haxe.ui.toolkit.resources.ResourceManager();
	return haxe.ui.toolkit.resources.ResourceManager._instance;
};
haxe.ui.toolkit.resources.ResourceManager.prototype = {
	hasAsset: function(resouceId) {
		return openfl.Assets.exists(resouceId);
	}
	,getXML: function(resourceId,locale) {
		var text = this.getText(resourceId,locale);
		var xml = null;
		if(text != null) xml = Xml.parse(text);
		return xml;
	}
	,getText: function(resourceId,locale) {
		var str = null;
		if(this.resourceHook != null) {
			str = this.resourceHook.getText(resourceId,locale);
			if(str != null) return str;
		}
		str = haxe.Resource.getString(resourceId);
		if(str == null) str = openfl.Assets.getText(resourceId);
		return str;
	}
	,getSVG: function(resourceId,locale) {
		var text = this.getText(resourceId,locale);
		var svg = null;
		if(text != null) svg = new format.SVG(text);
		return svg;
	}
	,getBitmapData: function(resourceId,locale) {
		if(resourceId == null || resourceId.length == 0) return null;
		var bmp = null;
		if(this.resourceHook != null) {
			bmp = this.resourceHook.getBitmapData(resourceId,locale);
			if(bmp != null) return bmp;
		}
		var bytes = haxe.Resource.getBytes(resourceId);
		if(bytes != null) {
			var ba = haxe.ui.toolkit.util.ByteConverter.fromHaxeBytes(bytes);
			var loader = new openfl.display.Loader();
			loader.loadBytes(ba);
			if(loader.content != null) bmp = (js.Boot.__cast(loader.content , openfl.display.Bitmap)).bitmapData;
		} else bmp = openfl.Assets.getBitmapData(resourceId,true);
		return bmp;
	}
	,getBytes: function(resourceId,locale) {
		var ba = null;
		if(this.resourceHook != null) {
			ba = this.resourceHook.getBytes(resourceId,locale);
			if(ba != null) return ba;
		}
		ba = openfl.Assets.getBytes(resourceId);
		return ba;
	}
	,reset: function() {
	}
	,__class__: haxe.ui.toolkit.resources.ResourceManager
};
haxe.ui.toolkit.style = {};
haxe.ui.toolkit.style.Styles = function() {
	this._styles = new haxe.ds.StringMap();
	this._styleRules = new Array();
};
$hxClasses["haxe.ui.toolkit.style.Styles"] = haxe.ui.toolkit.style.Styles;
haxe.ui.toolkit.style.Styles.__name__ = ["haxe","ui","toolkit","style","Styles"];
haxe.ui.toolkit.style.Styles.prototype = {
	addStyle: function(rule,style) {
		if(rule.indexOf(",") != -1) {
			var rules = rule.split(",");
			var _g = 0;
			while(_g < rules.length) {
				var r = rules[_g];
				++_g;
				r = StringTools.trim(r);
				this.addStyle(r,style);
			}
			return null;
		}
		var currentStyle = this.getStyle(rule);
		if(currentStyle != null) {
			currentStyle.merge(style);
			style = currentStyle;
		} else this._styleRules.push(rule);
		this._styles.set(rule,style);
		return style;
	}
	,getStyle: function(rule) {
		return this._styles.get(rule);
	}
	,get_rules: function() {
		return HxOverrides.iter(this._styleRules);
	}
	,__class__: haxe.ui.toolkit.style.Styles
	,__properties__: {get_rules:"get_rules"}
};
haxe.ui.toolkit.style.DefaultStyles = function() {
	haxe.ui.toolkit.style.Styles.call(this);
	var f = openfl.Assets.getFont("fonts/Oxygen.ttf");
	var fb = openfl.Assets.getFont("fonts/Oxygen-Bold.ttf");
	this.addStyle("Root",new haxe.ui.toolkit.style.Style({ padding : 0}));
	this.addStyle("Root.popup",new haxe.ui.toolkit.style.Style({ padding : 0}));
	this.addStyle("Root.fullscreen",new haxe.ui.toolkit.style.Style({ padding : 0, backgroundColor : 8947848}));
	this.addStyle("Component",new haxe.ui.toolkit.style.Style({ padding : 0, backgroundColor : 8947848}));
	this.addStyle("#modalOverlay",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, alpha : .7}));
	this.addStyle("Text",new haxe.ui.toolkit.style.Style({ fontSize : 14, fontName : f.name, fontEmbedded : true, color : 4473924}));
	this.addStyle("Code",new haxe.ui.toolkit.style.Style({ fontSize : 14, fontName : "_sans", fontEmbedded : false, color : 4473924}));
	this.addStyle("Container",new haxe.ui.toolkit.style.Style({ spacing : 5}));
	this.addStyle("Accordion",new haxe.ui.toolkit.style.Style({ spacing : 0}));
	this.addStyle(".page",new haxe.ui.toolkit.style.Style({ padding : 5, backgroundColor : -1}));
	this.addStyle("Button",new haxe.ui.toolkit.style.Style({ fontSize : 14, fontName : f.name, fontEmbedded : true, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 2236962, padding : 10, borderColor : 4473924, borderSize : 1, cornerRadius : 2, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), spacing : 5, textAlign : "center"}));
	this.addStyle("Button:over",new haxe.ui.toolkit.style.Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle("Button:down",new haxe.ui.toolkit.style.Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle("Button:disabled",new haxe.ui.toolkit.style.Style({ backgroundColor : 9211020, backgroundColorGradientEnd : 7105644, color : 13421772, borderColor : 6710886}));
	this.addStyle("Button.expandable",new haxe.ui.toolkit.style.Style({ icon : "styles/default/expand.png", textAlign : "left"}));
	this.addStyle("Button.expandable:down",new haxe.ui.toolkit.style.Style({ icon : "styles/default/collapse.png"}));
	this.addStyle("CheckBox, OptionBox",new haxe.ui.toolkit.style.Style({ spacingX : 2, fontSize : 14, fontName : f.name, fontEmbedded : true, color : 4473924}));
	this.addStyle("CheckBoxValue, OptionBoxValue",new haxe.ui.toolkit.style.Style({ width : 32, height : 32}));
	this.addStyle("CheckBoxValue #unselected",new haxe.ui.toolkit.style.Style({ iconPosition : "center"}));
	this.addStyle("CheckBoxValue #unselected:disabled",new haxe.ui.toolkit.style.Style({ }));
	this.addStyle("CheckBoxValue #selected",new haxe.ui.toolkit.style.Style({ icon : "styles/default/cross.png", iconPosition : "center"}));
	this.addStyle("CheckBoxValue #selected:disabled",new haxe.ui.toolkit.style.Style({ }));
	this.addStyle("OptionBoxValue #unselected",new haxe.ui.toolkit.style.Style({ iconPosition : "center"}));
	this.addStyle("OptionBoxValue #unselected:disabled",new haxe.ui.toolkit.style.Style({ }));
	this.addStyle("OptionBoxValue #selected",new haxe.ui.toolkit.style.Style({ icon : "styles/default/circle.png", iconPosition : "center"}));
	this.addStyle("OptionBoxValue #selected:disabled",new haxe.ui.toolkit.style.Style({ }));
	this.addStyle("TextInput",new haxe.ui.toolkit.style.Style({ backgroundColor : 16777215, color : 2236962, width : 150, height : 42, borderColor : 2236962, borderSize : 1, padding : 2, cornerRadius : 2, filter : new openfl.filters.DropShadowFilter(2,45,12566463,1,2,2,1,3,true), fontSize : 14, fontName : f.name, fontEmbedded : true}));
	this.addStyle("TextInput #placeholder",new haxe.ui.toolkit.style.Style({ color : 11184810}));
	this.addStyle("ListSelector, DateSelector",new haxe.ui.toolkit.style.Style({ icon : "styles/default/up_down.png", iconPosition : "right", selectionMethod : "popup", textAlign : "left"}));
	this.addStyle("CalendarView, Calendar",new haxe.ui.toolkit.style.Style({ width : 310, height : 310, spacing : 3, padding : 2}));
	this.addStyle("CalendarView",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, filter : new openfl.filters.DropShadowFilter(1,45,2236962,1,2,2,1,3), borderColor : 4473924, borderSize : 1, cornerRadius : 2, padding : 5, spacing : 5}));
	this.addStyle("CalendarView Calendar",new haxe.ui.toolkit.style.Style({ borderSize : 0}));
	this.addStyle("CalendarPopupContent",new haxe.ui.toolkit.style.Style({ padding : 50}));
	this.addStyle("CalendarDay",new haxe.ui.toolkit.style.Style({ padding : 0, backgroundColor : 13421772}));
	this.addStyle("CalendarView #currentMonthYear",new haxe.ui.toolkit.style.Style({ textAlign : "center"}));
	this.addStyle("Calendar #selectedDay",new haxe.ui.toolkit.style.Style({ fontSize : 14, fontName : f.name, fontEmbedded : true, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 2236962, padding : 10, borderColor : 4473924, borderSize : 1, cornerRadius : 2, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), spacing : 5}));
	this.addStyle("CalendarDay:over, Calendar #selectedDay:over",new haxe.ui.toolkit.style.Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle("CalendarDay:down, Calendar #selectedDay:down",new haxe.ui.toolkit.style.Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle("TabView",new haxe.ui.toolkit.style.Style({ backgroundColor : 13421772, borderColor : -1, filter : null, spacing : 0}));
	this.addStyle("TabView Container",new haxe.ui.toolkit.style.Style({ backgroundColor : 13421772}));
	this.addStyle("TabBar",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, height : 41, paddingTop : 0, paddingLeft : 0, paddingRight : 0, paddingBottom : 0, cornerRadius : 0, filter : null, borderColor : -1, borderSize : 0, spacing : 0}));
	this.addStyle("TabBar #content",new haxe.ui.toolkit.style.Style({ spacing : 1, borderColor : -1, backgroundColor : 8947848}));
	this.addStyle("TabBar #container",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848}));
	this.addStyle("TabBar Button",new haxe.ui.toolkit.style.Style({ height : 42, iconPosition : "left", cornerRadius : 0, autoSize : true, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 2236962, borderSize : 0, borderColor : -1, paddingLeft : 20, paddingRight : 20}));
	this.addStyle("TabBar Button:down",new haxe.ui.toolkit.style.Style({ backgroundColor : 15658734, backgroundColorGradientEnd : 13421772, color : 4473924}));
	this.addStyle("HProgress",new haxe.ui.toolkit.style.Style({ width : 150, height : 30, backgroundColor : 6710886, borderColor : -1, padding : 2, cornerRadius : 2, borderSize : 0, filter : new openfl.filters.DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("HProgress #background",new haxe.ui.toolkit.style.Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("HProgress #value",new haxe.ui.toolkit.style.Style({ percentHeight : 100, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2}));
	this.addStyle("VProgress",new haxe.ui.toolkit.style.Style({ width : 30, height : 150, backgroundColor : 6710886, borderColor : -1, padding : 2, cornerRadius : 2, borderSize : 0, filter : new openfl.filters.DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("VProgress #background",new haxe.ui.toolkit.style.Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("VProgress #value",new haxe.ui.toolkit.style.Style({ percentWidth : 100, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2, gradientType : "horizontal"}));
	this.addStyle("HSlider",new haxe.ui.toolkit.style.Style({ width : 150, height : 30, backgroundColor : 6710886, borderColor : -1, padding : 2, paddingLeft : 2, paddingRight : 2, cornerRadius : 2, borderSize : 0, filter : new openfl.filters.DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("HSlider #background",new haxe.ui.toolkit.style.Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("HSlider #value",new haxe.ui.toolkit.style.Style({ percentHeight : 0, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2}));
	this.addStyle("HSlider Button",new haxe.ui.toolkit.style.Style({ width : 26, height : 26, gradientType : "vertical", filter : new openfl.filters.DropShadowFilter(2,45,6710886,1,2,2,1,3,false)}));
	this.addStyle("VSlider",new haxe.ui.toolkit.style.Style({ width : 30, height : 150, backgroundColor : 6710886, borderColor : -1, padding : 2, paddingLeft : 2, paddingRight : 2, cornerRadius : 2, borderSize : 0, filter : new openfl.filters.DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("VSlider #background",new haxe.ui.toolkit.style.Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("VSlider #value",new haxe.ui.toolkit.style.Style({ percentWidth : 0, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2}));
	this.addStyle("VSlider Button",new haxe.ui.toolkit.style.Style({ width : 26, height : 26, gradientType : "horizontal", filter : new openfl.filters.DropShadowFilter(2,45,6710886,1,2,2,1,3,false)}));
	this.addStyle("ScrollView",new haxe.ui.toolkit.style.Style({ backgroundColor : 4473924, borderColor : -1, padding : 1, cornerRadius : 2, borderSize : 0, filter : new openfl.filters.DropShadowFilter(1,45,4473924,1,2,2,1,3,true), inlineScrolls : true, autoHideScrolls : true, spacing : 0}));
	this.addStyle("ListView",new haxe.ui.toolkit.style.Style({ }));
	this.addStyle("ListView #content",new haxe.ui.toolkit.style.Style({ backgroundColor : 4473924, borderColor : -1, padding : 0, spacing : 1}));
	this.addStyle(".even, .odd",new haxe.ui.toolkit.style.Style({ padding : 10, backgroundColor : 6710886}));
	this.addStyle(".even:over, .odd:over",new haxe.ui.toolkit.style.Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle(".even:selected, .odd:selected",new haxe.ui.toolkit.style.Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle(".even #text, .odd #text",new haxe.ui.toolkit.style.Style({ color : 16754764}));
	this.addStyle(".even #text:over, .odd #text:over",new haxe.ui.toolkit.style.Style({ color : 2236962}));
	this.addStyle(".even #text:selected, .odd #text:selected",new haxe.ui.toolkit.style.Style({ color : 4473924}));
	this.addStyle("VScroll",new haxe.ui.toolkit.style.Style({ width : 10, height : 100, hasButtons : false}));
	this.addStyle("VScroll Button",new haxe.ui.toolkit.style.Style({ cornerRadius : 2, gradientType : "horizontal", filter : null}));
	this.addStyle("HScroll",new haxe.ui.toolkit.style.Style({ width : 100, height : 10, hasButtons : false}));
	this.addStyle("HScroll Button",new haxe.ui.toolkit.style.Style({ cornerRadius : 2, gradientType : "vertical", filter : null}));
	this.addStyle("MenuBar",new haxe.ui.toolkit.style.Style({ backgroundColor : 14671325, percentWidth : 100, height : 10, padding : 5, borderColor : -1, cornerRadius : 0, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), autoSize : true}));
	this.addStyle("MenuBar Container",new haxe.ui.toolkit.style.Style({ backgroundColor : 14671325}));
	this.addStyle("Popup",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), borderColor : 8947848, borderSize : 1, cornerRadius : 2, padding : 1, spacing : 1, width : 400}));
	this.addStyle("Popup Container",new haxe.ui.toolkit.style.Style({ backgroundColor : 13421772}));
	this.addStyle("Popup #titleBar",new haxe.ui.toolkit.style.Style({ backgroundColor : 13421772, height : 45, paddingTop : 5, paddingBottom : 5, paddingLeft : 5, paddingRight : 5}));
	this.addStyle("Popup #titleBar Button.close",new haxe.ui.toolkit.style.Style({ autoSize : false, width : 23, height : 24, horizontalAlignment : "left", verticalAlignment : "center", filter : null, backgroundImage : "styles/default/cross.png", backgroundColor : 13421772, borderColor : 13421772}));
	this.addStyle("Popup #popupContent",new haxe.ui.toolkit.style.Style({ padding : 5, backgroundColor : 13421772}));
	this.addStyle("Popup #buttonBar",new haxe.ui.toolkit.style.Style({ paddingTop : 5, paddingBottom : 5, height : 55, backgroundColor : 13421772, percentWidth : 100}));
	this.addStyle("Popup #titleBar #title",new haxe.ui.toolkit.style.Style({ fontName : fb.name, fontEmbedded : true, fontSize : 24, color : 8947848, horizontalAlignment : "right"}));
	this.addStyle("ListPopupContent ListView, ListPopupContent #popupContent",new haxe.ui.toolkit.style.Style({ padding : 2, borderSize : 0}));
	this.addStyle("Menu",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), borderColor : 4473924, borderSize : 1, cornerRadius : 1, padding : 1, width : 175, spacing : 1}));
	this.addStyle("MenuButton",new haxe.ui.toolkit.style.Style({ backgroundColor : 14671325, backgroundColorGradientEnd : 14671325, color : 2236962, padding : 10, borderColor : -1, borderSize : 0, cornerRadius : 2, filter : null}));
	this.addStyle("MenuButton:over",new haxe.ui.toolkit.style.Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), borderSize : 1}));
	this.addStyle("MenuButton:down",new haxe.ui.toolkit.style.Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), borderSize : 1}));
	this.addStyle("MenuItem",new haxe.ui.toolkit.style.Style({ percentWidth : 100, iconPosition : "right", filter : null, borderSize : 0, cornerRadius : 0, backgroundColor : 13421772, color : 2236962, textAlign : "left"}));
	this.addStyle("MenuItem:over",new haxe.ui.toolkit.style.Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle("MenuItem:down",new haxe.ui.toolkit.style.Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle("MenuItem.expandable",new haxe.ui.toolkit.style.Style({ icon : "styles/default/expand.png"}));
	this.addStyle("MenuSeparator",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, percentWidth : 100, paddingTop : 2, paddingLeft : 5, paddingBottom : 3, paddingRight : 5}));
	this.addStyle("MenuSeparator #line",new haxe.ui.toolkit.style.Style({ height : 0, backgroundColor : 8947848}));
	this.addStyle("Divider",new haxe.ui.toolkit.style.Style({ paddingTop : 5, percentWidth : 100}));
	this.addStyle("Divider #text",new haxe.ui.toolkit.style.Style({ fontSize : 16, fontBold : true, color : 6710886}));
	this.addStyle("Divider #line",new haxe.ui.toolkit.style.Style({ height : 2, backgroundColor : 6710886}));
};
$hxClasses["haxe.ui.toolkit.style.DefaultStyles"] = haxe.ui.toolkit.style.DefaultStyles;
haxe.ui.toolkit.style.DefaultStyles.__name__ = ["haxe","ui","toolkit","style","DefaultStyles"];
haxe.ui.toolkit.style.DefaultStyles.__super__ = haxe.ui.toolkit.style.Styles;
haxe.ui.toolkit.style.DefaultStyles.prototype = $extend(haxe.ui.toolkit.style.Styles.prototype,{
	__class__: haxe.ui.toolkit.style.DefaultStyles
});
haxe.ui.toolkit.style.Style = function(defaults) {
	this._listSize = -1;
	this._inlineScrolls = -1;
	this._autoHideScrolls = -1;
	this._hasButtons = -1;
	this._fontUnderline = -1;
	this._fontItalic = -1;
	this._fontBold = -1;
	this._fontEmbedded = -1;
	this._fontScale = -1;
	this._fontSize = -1;
	this._alpha = -1;
	this._filterSet = false;
	this._cornerRadiusBottomRight = -1;
	this._cornerRadiusBottomLeft = -1;
	this._cornerRadiusTopRight = -1;
	this._cornerRadiusTopLeft = -1;
	this._rotationZ = -1;
	this._rotationY = -1;
	this._rotationX = -1;
	this._spacingY = -1;
	this._spacingX = -1;
	this._paddingBottom = -1;
	this._paddingTop = -1;
	this._paddingRight = -1;
	this._paddingLeft = -1;
	this._color = -1;
	this._borderAlpha = -1;
	this._borderSize = -1;
	this._borderColor = -1;
	this._backgroundAlpha = -1;
	this._backgroundColorGradientEnd = -1;
	this._backgroundColor = -1;
	this._autoSize = -1;
	this._percentHeight = -1;
	this._percentWidth = -1;
	this._height = -1;
	this._width = -1;
	this._visible = -1;
	this._autoApply = true;
	var _g = 0;
	var _g1 = Reflect.fields(defaults);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(Reflect.getProperty(this,"set_" + field) != null) Reflect.setProperty(this,field,Reflect.field(defaults,field));
	}
};
$hxClasses["haxe.ui.toolkit.style.Style"] = haxe.ui.toolkit.style.Style;
haxe.ui.toolkit.style.Style.__name__ = ["haxe","ui","toolkit","style","Style"];
haxe.ui.toolkit.style.Style.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.style.Style.prototype = {
	get_target: function() {
		return this._target;
	}
	,set_target: function(value) {
		this._target = value;
		this.apply();
		return value;
	}
	,get_autoApply: function() {
		return this._autoApply;
	}
	,set_autoApply: function(value) {
		this._autoApply = value;
		return value;
	}
	,get_visible: function() {
		if(this.hasDynamicValue("visible")) return this.getDynamicValue("visible");
		if(this._visible == -1) return false;
		return this._visible == 1;
	}
	,set_visible: function(value) {
		if(value) this._visible = 1; else this._visible = 0;
		this.apply();
		return value;
	}
	,get_visibleSet: function() {
		if(this.hasDynamicValue("visible")) return true;
		if(this._visible != -1) return true;
		return false;
	}
	,get_width: function() {
		if(this.hasDynamicValue("width")) return this.getDynamicValue("width");
		return this._width;
	}
	,set_width: function(value) {
		if(value != this._width) {
			this._width = value;
			this.apply();
		}
		return value;
	}
	,get_height: function() {
		if(this.hasDynamicValue("height")) return this.getDynamicValue("height");
		return this._height;
	}
	,set_height: function(value) {
		if(value != this._height) {
			this._height = value;
			this.apply();
		}
		return value;
	}
	,get_percentWidth: function() {
		if(this.hasDynamicValue("percentWidth")) return this.getDynamicValue("percentWidth");
		return this._percentWidth;
	}
	,set_percentWidth: function(value) {
		if(value != this._percentWidth) {
			this._percentWidth = value;
			this.apply();
		}
		return value;
	}
	,get_percentHeight: function() {
		if(this.hasDynamicValue("percentHeight")) return this.getDynamicValue("percentHeight");
		return this._percentHeight;
	}
	,set_percentHeight: function(value) {
		if(value != this._percentHeight) {
			this._percentHeight = value;
			this.apply();
		}
		return value;
	}
	,get_autoSize: function() {
		if(this.hasDynamicValue("autoSize")) return this.getDynamicValue("autoSize");
		if(this._autoSize == -1) return true;
		return this._autoSize == 1;
	}
	,set_autoSize: function(value) {
		if(value) this._autoSize = 1; else this._autoSize = 0;
		this.apply();
		return value;
	}
	,get_autoSizeSet: function() {
		if(this.hasDynamicValue("autoSize")) return true;
		if(this._autoSize != -1) return true;
		return false;
	}
	,get_backgroundImage: function() {
		if(this.hasDynamicValue("backgroundImage")) return this.getDynamicValue("backgroundImage");
		return this._backgroundImage;
	}
	,set_backgroundImage: function(value) {
		if(value != this._backgroundImage) {
			this._backgroundImage = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundImageScale9: function() {
		if(this.hasDynamicValue("backgroundImageScale9")) return this.getDynamicValue("backgroundImageScale9");
		return this._backgroundImageScale9;
	}
	,set_backgroundImageScale9: function(value) {
		if(value != this._backgroundImageScale9) {
			this._backgroundImageScale9 = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundImageRect: function() {
		if(this.hasDynamicValue("backgroundImageRect")) return this.getDynamicValue("backgroundImageRect");
		return this._backgroundImageRect;
	}
	,set_backgroundImageRect: function(value) {
		if(value != this._backgroundImageRect) {
			this._backgroundImageRect = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundColor: function() {
		if(this.hasDynamicValue("backgroundColor")) return this.getDynamicValue("backgroundColor");
		return this._backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this._backgroundColor) {
			this._backgroundColor = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundColorGradientEnd: function() {
		if(this.hasDynamicValue("backgroundColorGradientEnd")) return this.getDynamicValue("backgroundColorGradientEnd");
		return this._backgroundColorGradientEnd;
	}
	,set_backgroundColorGradientEnd: function(value) {
		if(value != this._backgroundColorGradientEnd) {
			this._backgroundColorGradientEnd = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundAlpha: function() {
		if(this.hasDynamicValue("backgroundAlpha")) return this.getDynamicValue("backgroundAlpha");
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		if(value != this._backgroundAlpha) {
			this._backgroundAlpha = value;
			this.apply();
		}
		return value;
	}
	,get_borderColor: function() {
		if(this.hasDynamicValue("borderColor")) return this.getDynamicValue("borderColor");
		return this._borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this._borderColor) {
			this._borderColor = value;
			this.apply();
		}
		return value;
	}
	,get_borderSize: function() {
		if(this.hasDynamicValue("borderSize")) return this.getDynamicValue("borderSize");
		return this._borderSize;
	}
	,set_borderSize: function(value) {
		if(value != this._borderSize) {
			this._borderSize = value;
			this.apply();
		}
		return value;
	}
	,get_borderAlpha: function() {
		if(this.hasDynamicValue("borderAlpha")) return this.getDynamicValue("borderAlpha");
		return this._borderAlpha;
	}
	,set_borderAlpha: function(value) {
		if(value != this._borderAlpha) {
			this._borderAlpha = value;
			this.apply();
		}
		return value;
	}
	,get_color: function() {
		if(this.hasDynamicValue("color")) return this.getDynamicValue("color");
		return this._color;
	}
	,set_color: function(value) {
		if(value != this._color) {
			this._color = value;
			this.apply();
		}
		return value;
	}
	,get_paddingLeft: function() {
		if(this.hasDynamicValue("paddingLeft")) return this.getDynamicValue("paddingLeft");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(value != this._paddingLeft) {
			this._paddingLeft = value;
			this.apply();
		}
		return value;
	}
	,get_paddingRight: function() {
		if(this.hasDynamicValue("paddingRight")) return this.getDynamicValue("paddingRight");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingRight;
	}
	,set_paddingRight: function(value) {
		if(value != this._paddingRight) {
			this._paddingRight = value;
			this.apply();
		}
		return value;
	}
	,get_paddingTop: function() {
		if(this.hasDynamicValue("paddingTop")) return this.getDynamicValue("paddingTop");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingTop;
	}
	,set_paddingTop: function(value) {
		if(value != this._paddingTop) {
			this._paddingTop = value;
			this.apply();
		}
		return value;
	}
	,get_paddingBottom: function() {
		if(this.hasDynamicValue("paddingBottom")) return this.getDynamicValue("paddingBottom");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(value != this._paddingBottom) {
			this._paddingBottom = value;
			this.apply();
		}
		return value;
	}
	,get_padding: function() {
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return js.Boot.__cast(this._paddingLeft | this._paddingRight | this._paddingTop | this._paddingBottom , Int);
	}
	,set_padding: function(value) {
		if(value != this._paddingLeft || value != this._paddingRight || value != this._paddingTop || value != this._paddingBottom) {
			this._paddingLeft = value;
			this._paddingRight = value;
			this._paddingTop = value;
			this._paddingBottom = value;
			this.apply();
		}
		return value;
	}
	,get_spacingX: function() {
		if(this.hasDynamicValue("spacingX")) return this.getDynamicValue("spacingX");
		if(this.hasDynamicValue("spacing")) return this.getDynamicValue("spacing");
		return this._spacingX;
	}
	,set_spacingX: function(value) {
		if(value != this._spacingX) {
			this._spacingX = value;
			this.apply();
		}
		return value;
	}
	,get_spacingY: function() {
		if(this.hasDynamicValue("spacingY")) return this.getDynamicValue("spacingY");
		if(this.hasDynamicValue("spacing")) return this.getDynamicValue("spacing");
		return this._spacingY;
	}
	,set_spacingY: function(value) {
		if(value != this._spacingY) {
			this._spacingY = value;
			this.apply();
		}
		return value;
	}
	,get_spacing: function() {
		if(this.hasDynamicValue("spacing")) return this.getDynamicValue("spacing");
		return this._spacingX | this._spacingY;
	}
	,set_spacing: function(value) {
		if(value != this._spacingX || value != this._spacingY) {
			this._spacingX = value;
			this._spacingY = value;
			this.apply();
		}
		return value;
	}
	,get_rotationX: function() {
		if(this.hasDynamicValue("rotationX")) return this.getDynamicValue("rotationX");
		return this._rotationX;
	}
	,set_rotationX: function(value) {
		if(value != this._rotationX) {
			this._rotationX = value;
			this.apply();
		}
		return value;
	}
	,get_rotationY: function() {
		if(this.hasDynamicValue("rotationY")) return this.getDynamicValue("rotationY");
		return this._rotationY;
	}
	,set_rotationY: function(value) {
		if(value != this._rotationY) {
			this._rotationY = value;
			this.apply();
		}
		return value;
	}
	,get_rotationZ: function() {
		if(this.hasDynamicValue("rotationZ")) return this.getDynamicValue("rotationZ");
		return this._rotationY;
	}
	,set_rotationZ: function(value) {
		if(value != this._rotationZ) {
			this._rotationZ = value;
			this.apply();
		}
		return value;
	}
	,get_horizontalAlignment: function() {
		if(this.hasDynamicValue("horizontalAlignment")) return this.getDynamicValue("horizontalAlignment");
		return this._horizontalAlignment;
	}
	,set_horizontalAlignment: function(value) {
		if(value != this._horizontalAlignment) {
			this._horizontalAlignment = value;
			this.apply();
		}
		return value;
	}
	,get_verticalAlignment: function() {
		if(this.hasDynamicValue("verticalAlignment")) return this.getDynamicValue("verticalAlignment");
		return this._verticalAlignment;
	}
	,set_verticalAlignment: function(value) {
		if(value != this._verticalAlignment) {
			this._verticalAlignment = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusTopLeft: function() {
		if(this.hasDynamicValue("cornerRadiusTopLeft")) return this.getDynamicValue("cornerRadiusTopLeft");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusTopLeft;
	}
	,set_cornerRadiusTopLeft: function(value) {
		if(value != this._cornerRadiusTopLeft) {
			this._cornerRadiusTopLeft = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusTopRight: function() {
		if(this.hasDynamicValue("cornerRadiusTopRight")) return this.getDynamicValue("cornerRadiusTopRight");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusTopRight;
	}
	,set_cornerRadiusTopRight: function(value) {
		if(value != this._cornerRadiusTopRight) {
			this._cornerRadiusTopRight = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusBottomLeft: function() {
		if(this.hasDynamicValue("cornerRadiusBottomLeft")) return this.getDynamicValue("cornerRadiusBottomLeft");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusBottomLeft;
	}
	,set_cornerRadiusBottomLeft: function(value) {
		if(value != this._cornerRadiusBottomLeft) {
			this._cornerRadiusBottomLeft = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusBottomRight: function() {
		if(this.hasDynamicValue("cornerRadiusBottomRight")) return this.getDynamicValue("cornerRadiusBottomRight");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusBottomRight;
	}
	,set_cornerRadiusBottomRight: function(value) {
		if(value != this._cornerRadiusBottomRight) {
			this._cornerRadiusBottomRight = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadius: function() {
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusTopLeft | this._cornerRadiusTopRight | this._cornerRadiusBottomLeft | this._cornerRadiusBottomRight;
	}
	,set_cornerRadius: function(value) {
		if(value != this._cornerRadiusTopLeft || value != this._cornerRadiusTopRight || value != this._cornerRadiusBottomLeft || value != this._cornerRadiusBottomRight) {
			this._cornerRadiusTopLeft = value;
			this._cornerRadiusTopRight = value;
			this._cornerRadiusBottomLeft = value;
			this._cornerRadiusBottomRight = value;
			this.apply();
		}
		return value;
	}
	,get_filter: function() {
		var filter = null;
		if(this.hasDynamicValue("filter")) filter = this.getDynamicValue("filter"); else filter = this._filter;
		var overrideQuality = -1;
		if(overrideQuality != -1) filter = haxe.ui.toolkit.util.FilterParser.changeFilterQuality(filter,overrideQuality);
		return filter;
	}
	,set_filter: function(value) {
		this._filterSet = true;
		this._filter = value;
		this.apply();
		return this._filter;
	}
	,get_alpha: function() {
		if(this.hasDynamicValue("alpha")) return this.getDynamicValue("alpha");
		return this._alpha;
	}
	,set_alpha: function(value) {
		if(value != this._alpha) {
			this._alpha = value;
			this.apply();
		}
		return value;
	}
	,get_fontName: function() {
		if(this.hasDynamicValue("fontName")) return this.getDynamicValue("fontName");
		return this._fontName;
	}
	,set_fontName: function(value) {
		if(value != this._fontName) {
			this._fontName = value;
			this.apply();
		}
		return value;
	}
	,get_fontSize: function() {
		if(this.hasDynamicValue("fontSize")) return this.getDynamicValue("fontSize");
		var size = this._fontSize;
		if(this._fontScale > 0) size = this._fontSize * this._fontScale;
		return size;
	}
	,set_fontSize: function(value) {
		if(value != this._fontSize) {
			this._fontSize = value;
			this.apply();
		}
		return value;
	}
	,get_fontScale: function() {
		if(this.hasDynamicValue("fontScale")) return this.getDynamicValue("fontScale");
		return this._fontScale;
	}
	,set_fontScale: function(value) {
		if(value != this._fontScale) {
			this._fontScale = value;
			this.apply();
		}
		return value;
	}
	,get_fontEmbedded: function() {
		if(this.hasDynamicValue("fontEmbedded")) return this.getDynamicValue("fontEmbedded");
		if(this._fontEmbedded == -1) return false;
		return this._fontEmbedded == 1;
	}
	,set_fontEmbedded: function(value) {
		if(value) this._fontEmbedded = 1; else this._fontEmbedded = 0;
		this.apply();
		return value;
	}
	,get_fontBold: function() {
		if(this.hasDynamicValue("fontBold")) return this.getDynamicValue("fontBold");
		if(this._fontBold == -1) return false;
		return this._fontBold == 1;
	}
	,set_fontBold: function(value) {
		if(value) this._fontBold = 1; else this._fontBold = 0;
		this.apply();
		return value;
	}
	,get_fontItalic: function() {
		if(this.hasDynamicValue("fontItalic")) return this.getDynamicValue("fontItalic");
		if(this._fontItalic == -1) return false;
		return this._fontItalic == 1;
	}
	,set_fontItalic: function(value) {
		if(value) this._fontItalic = 1; else this._fontItalic = 0;
		this.apply();
		return value;
	}
	,get_fontUnderline: function() {
		if(this.hasDynamicValue("fontUnderline")) return this.getDynamicValue("fontUnderline");
		if(this._fontUnderline == -1) return false;
		return this._fontUnderline == 1;
	}
	,set_fontUnderline: function(value) {
		if(value) this._fontUnderline = 1; else this._fontUnderline = 0;
		this.apply();
		return value;
	}
	,get_textAlign: function() {
		if(this.hasDynamicValue("textAlign")) return this.getDynamicValue("textAlign");
		return this._textAlign;
	}
	,set_textAlign: function(value) {
		if(value != this._textAlign) {
			this._textAlign = value;
			this.apply();
		}
		return value;
	}
	,get_iconPosition: function() {
		if(this.hasDynamicValue("iconPosition")) return this.getDynamicValue("iconPosition");
		return this._iconPosition;
	}
	,set_iconPosition: function(value) {
		if(value != this._iconPosition) {
			this._iconPosition = value;
			this.apply();
		}
		return value;
	}
	,get_icon: function() {
		if(this.hasDynamicValue("icon")) return this.getDynamicValue("icon");
		return this._icon;
	}
	,set_icon: function(value) {
		if(value != this._icon) {
			this._icon = value;
			this.apply();
		}
		return value;
	}
	,get_hasButtons: function() {
		if(this.hasDynamicValue("hasButtons")) return this.getDynamicValue("hasButtons");
		if(this._hasButtons == -1) return true;
		return this._hasButtons == 1;
	}
	,set_hasButtons: function(value) {
		if(value) this._hasButtons = 1; else this._hasButtons = 0;
		this.apply();
		return value;
	}
	,get_gradientType: function() {
		if(this.hasDynamicValue("gradientType")) return this.getDynamicValue("gradientType");
		return this._gradientType;
	}
	,set_gradientType: function(value) {
		if(value != this._gradientType) {
			this._gradientType = value;
			this.apply();
		}
		return value;
	}
	,get_selectionMethod: function() {
		if(this.hasDynamicValue("selectionMethod")) return this.getDynamicValue("selectionMethod");
		return this._selectionMethod;
	}
	,set_selectionMethod: function(value) {
		if(value != this._selectionMethod) {
			this._selectionMethod = value;
			this.apply();
		}
		return value;
	}
	,get_autoHideScrolls: function() {
		if(this.hasDynamicValue("autoHideScrolls")) return this.getDynamicValue("autoHideScrolls");
		if(this._autoHideScrolls == -1) return false;
		return this._autoHideScrolls == 1;
	}
	,set_autoHideScrolls: function(value) {
		if(value) this._autoHideScrolls = 1; else this._autoHideScrolls = 0;
		this.apply();
		return value;
	}
	,get_inlineScrolls: function() {
		if(this.hasDynamicValue("inlineScrolls")) return this.getDynamicValue("inlineScrolls");
		if(this._inlineScrolls == -1) return false;
		return this._inlineScrolls == 1;
	}
	,set_inlineScrolls: function(value) {
		if(value) this._inlineScrolls = 1; else this._inlineScrolls = 0;
		this.apply();
		return value;
	}
	,get_listSize: function() {
		if(this.hasDynamicValue("listSize")) return this.getDynamicValue("listSize");
		return this._listSize;
	}
	,set_listSize: function(value) {
		this._listSize = value;
		this.apply();
		return value;
	}
	,apply: function() {
		if(this._target != null && this._autoApply == true) {
			if(js.Boot.__instanceof(this._target,haxe.ui.toolkit.core.StyleableDisplayObject)) (js.Boot.__cast(this._target , haxe.ui.toolkit.core.StyleableDisplayObject)).applyStyle();
		}
	}
	,addDynamicValue: function(property,script) {
		if(this._dynamicValues == null) this._dynamicValues = new haxe.ds.StringMap();
		this._dynamicValues.set(property,script);
	}
	,hasDynamicValue: function(property) {
		if(this._dynamicValues == null) return false;
		return this._dynamicValues.get(property) != null;
	}
	,getDynamicValue: function(property) {
		var script = this._dynamicValues.get(property);
		var retVal = haxe.ui.toolkit.hscript.ScriptManager.get_instance().executeScript(script);
		return retVal;
	}
	,merge: function($with) {
		if($with == null) return;
		if($with._visible != -1) this._visible = $with._visible;
		if($with._width != -1) this._width = $with._width;
		if($with._height != -1) this._height = $with._height;
		if($with._percentWidth != -1) this._percentWidth = $with._percentWidth;
		if($with._percentHeight != -1) this._percentHeight = $with._percentHeight;
		if($with._autoSize != -1) this._autoSize = $with._autoSize;
		if($with._backgroundImage != null) {
			this._backgroundImage = $with._backgroundImage;
			this._backgroundImageScale9 = null;
			this._backgroundImageRect = null;
		}
		if($with._backgroundImageScale9 != null) this._backgroundImageScale9 = $with._backgroundImageScale9;
		if($with._backgroundImageRect != null) this._backgroundImageRect = $with._backgroundImageRect;
		if($with._backgroundColor != -1) this._backgroundColor = $with._backgroundColor;
		if($with._backgroundColor != -1) this._backgroundColorGradientEnd = $with._backgroundColor;
		if($with._backgroundColorGradientEnd != -1) this._backgroundColorGradientEnd = $with._backgroundColorGradientEnd;
		if($with._backgroundAlpha != -1) this._backgroundAlpha = $with._backgroundAlpha;
		if($with._borderColor != -1) this._borderColor = $with._borderColor;
		if($with._borderSize != -1) this._borderSize = $with._borderSize;
		if($with._borderAlpha != -1) this._borderAlpha = $with._borderAlpha;
		if($with._color != -1) this._color = $with._color;
		if($with._paddingLeft != -1) this._paddingLeft = $with._paddingLeft;
		if($with._paddingRight != -1) this._paddingRight = $with._paddingRight;
		if($with._paddingTop != -1) this._paddingTop = $with._paddingTop;
		if($with._paddingBottom != -1) this._paddingBottom = $with._paddingBottom;
		if($with._spacingX != -1) this._spacingX = $with._spacingX;
		if($with._spacingY != -1) this._spacingY = $with._spacingY;
		if($with._horizontalAlignment != null) this._horizontalAlignment = $with._horizontalAlignment;
		if($with._verticalAlignment != null) this._verticalAlignment = $with._verticalAlignment;
		if($with._cornerRadiusTopLeft != -1) this._cornerRadiusTopLeft = $with._cornerRadiusTopLeft;
		if($with._cornerRadiusTopRight != -1) this._cornerRadiusTopRight = $with._cornerRadiusTopRight;
		if($with._cornerRadiusBottomLeft != -1) this._cornerRadiusBottomLeft = $with._cornerRadiusBottomLeft;
		if($with._cornerRadiusBottomRight != -1) this._cornerRadiusBottomRight = $with._cornerRadiusBottomRight;
		if($with._filterSet == true) {
			this._filter = $with._filter;
			this._filterSet = $with._filterSet;
		}
		if($with._alpha != -1) this._alpha = $with._alpha;
		if($with._fontName != null) this._fontName = $with._fontName;
		if($with._fontSize != -1) this._fontSize = $with._fontSize;
		if($with._fontScale != -1) this._fontScale = $with._fontScale;
		if($with._fontEmbedded != -1) this._fontEmbedded = $with._fontEmbedded;
		if($with._fontBold != -1) this._fontBold = $with._fontBold;
		if($with._fontItalic != -1) this._fontItalic = $with._fontItalic;
		if($with._fontUnderline != -1) this._fontUnderline = $with._fontUnderline;
		if($with._textAlign != null) this._textAlign = $with._textAlign;
		if($with._iconPosition != null) this._iconPosition = $with._iconPosition;
		if($with._icon != null) this._icon = $with._icon;
		if($with._hasButtons != -1) this._hasButtons = $with._hasButtons;
		if($with._gradientType != null) this._gradientType = $with._gradientType;
		if($with._selectionMethod != null) this._selectionMethod = $with._selectionMethod;
		if($with._autoHideScrolls != -1) this._autoHideScrolls = $with._autoHideScrolls;
		if($with._inlineScrolls != -1) this._inlineScrolls = $with._inlineScrolls;
		if($with._listSize != -1) this._listSize = $with._listSize;
		if($with._dynamicValues != null) {
			if(this._dynamicValues == null) this._dynamicValues = new haxe.ds.StringMap();
			var $it0 = $with._dynamicValues.keys();
			while( $it0.hasNext() ) {
				var property = $it0.next();
				var script = $with._dynamicValues.get(property);
				this._dynamicValues.set(property,script);
			}
		}
	}
	,toString: function() {
		var s = "";
		if(this._width != -1 || this.hasDynamicValue("width")) s += "width: " + (this._width != -1?Std.string(this._width):this._dynamicValues.get("width")) + ";\n";
		if(this._height != -1 || this.hasDynamicValue("height")) s += "height: " + (this._height != -1?Std.string(this._height):this._dynamicValues.get("height")) + ";\n";
		if(this._percentWidth != -1 || this.hasDynamicValue("percentWidth")) s += "width: " + (this._percentWidth != -1?Std.string(this._percentWidth):this._dynamicValues.get("percentWidth")) + "%;\n";
		if(this._percentHeight != -1 || this.hasDynamicValue("percentHeight")) s += "height: " + (this._percentHeight != -1?Std.string(this._percentHeight):this._dynamicValues.get("percentHeight")) + "%;\n";
		if(this._backgroundImage != null || this.hasDynamicValue("backgroundImage")) s += "backgroundImage: \"" + (this._backgroundImage != null?Std.string(this._backgroundImage):this._dynamicValues.get("backgroundImage")) + "\";\n";
		if(this._backgroundColor != -1 || this.hasDynamicValue("backgroundColor")) s += "backgroundColor: #" + (this._backgroundColor != -1?StringTools.hex(this._backgroundColor,6):this._dynamicValues.get("backgroundColor")) + ";\n";
		if(this._backgroundColorGradientEnd != -1 || this.hasDynamicValue("backgroundColorGradientEnd")) s += "backgroundColorGradientEnd: #" + (this._backgroundColorGradientEnd != -1?StringTools.hex(this._backgroundColorGradientEnd,6):this._dynamicValues.get("backgroundColorGradientEnd")) + ";\n";
		return s;
	}
	,addRawProperty: function(prop) {
		if(this._rawProperties == null) this._rawProperties = new Array();
		this._rawProperties.push(prop);
	}
	,get_rawProperties: function() {
		return this._rawProperties;
	}
	,self: function() {
		return new haxe.ui.toolkit.style.Style();
	}
	,clone: function() {
		var c = this.self();
		c.merge(this);
		return c;
	}
	,__class__: haxe.ui.toolkit.style.Style
	,__properties__: {get_rawProperties:"get_rawProperties",set_listSize:"set_listSize",get_listSize:"get_listSize",set_autoApply:"set_autoApply",get_autoApply:"get_autoApply",set_target:"set_target",get_target:"get_target",set_inlineScrolls:"set_inlineScrolls",get_inlineScrolls:"get_inlineScrolls",set_autoHideScrolls:"set_autoHideScrolls",get_autoHideScrolls:"get_autoHideScrolls",set_selectionMethod:"set_selectionMethod",get_selectionMethod:"get_selectionMethod",set_gradientType:"set_gradientType",get_gradientType:"get_gradientType",set_hasButtons:"set_hasButtons",get_hasButtons:"get_hasButtons",set_icon:"set_icon",get_icon:"get_icon",set_iconPosition:"set_iconPosition",get_iconPosition:"get_iconPosition",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_fontUnderline:"set_fontUnderline",get_fontUnderline:"get_fontUnderline",set_fontItalic:"set_fontItalic",get_fontItalic:"get_fontItalic",set_fontBold:"set_fontBold",get_fontBold:"get_fontBold",set_fontEmbedded:"set_fontEmbedded",get_fontEmbedded:"get_fontEmbedded",set_fontScale:"set_fontScale",get_fontScale:"get_fontScale",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontName:"set_fontName",get_fontName:"get_fontName",set_alpha:"set_alpha",get_alpha:"get_alpha",set_filter:"set_filter",get_filter:"get_filter",set_cornerRadius:"set_cornerRadius",get_cornerRadius:"get_cornerRadius",set_cornerRadiusBottomRight:"set_cornerRadiusBottomRight",get_cornerRadiusBottomRight:"get_cornerRadiusBottomRight",set_cornerRadiusBottomLeft:"set_cornerRadiusBottomLeft",get_cornerRadiusBottomLeft:"get_cornerRadiusBottomLeft",set_cornerRadiusTopRight:"set_cornerRadiusTopRight",get_cornerRadiusTopRight:"get_cornerRadiusTopRight",set_cornerRadiusTopLeft:"set_cornerRadiusTopLeft",get_cornerRadiusTopLeft:"get_cornerRadiusTopLeft",set_horizontalAlignment:"set_horizontalAlignment",get_horizontalAlignment:"get_horizontalAlignment",set_verticalAlignment:"set_verticalAlignment",get_verticalAlignment:"get_verticalAlignment",set_spacing:"set_spacing",get_spacing:"get_spacing",set_spacingY:"set_spacingY",get_spacingY:"get_spacingY",set_spacingX:"set_spacingX",get_spacingX:"get_spacingX",set_padding:"set_padding",get_padding:"get_padding",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_color:"set_color",get_color:"get_color",set_borderAlpha:"set_borderAlpha",get_borderAlpha:"get_borderAlpha",set_borderSize:"set_borderSize",get_borderSize:"get_borderSize",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_backgroundAlpha:"set_backgroundAlpha",get_backgroundAlpha:"get_backgroundAlpha",set_backgroundColorGradientEnd:"set_backgroundColorGradientEnd",get_backgroundColorGradientEnd:"get_backgroundColorGradientEnd",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_backgroundImageRect:"set_backgroundImageRect",get_backgroundImageRect:"get_backgroundImageRect",set_backgroundImageScale9:"set_backgroundImageScale9",get_backgroundImageScale9:"get_backgroundImageScale9",set_backgroundImage:"set_backgroundImage",get_backgroundImage:"get_backgroundImage",get_autoSizeSet:"get_autoSizeSet",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_percentHeight:"set_percentHeight",get_percentHeight:"get_percentHeight",set_percentWidth:"set_percentWidth",get_percentWidth:"get_percentWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",get_visibleSet:"get_visibleSet",set_visible:"set_visible",get_visible:"get_visible"}
};
haxe.ui.toolkit.style.StyleHelper = function() { };
$hxClasses["haxe.ui.toolkit.style.StyleHelper"] = haxe.ui.toolkit.style.StyleHelper;
haxe.ui.toolkit.style.StyleHelper.__name__ = ["haxe","ui","toolkit","style","StyleHelper"];
haxe.ui.toolkit.style.StyleHelper.sectionCache = null;
haxe.ui.toolkit.style.StyleHelper.clearCache = function() {
	haxe.ui.toolkit.style.StyleHelper.sectionCache = new haxe.ds.StringMap();
};
haxe.ui.toolkit.style.StyleHelper.paintStyle = function(g,style,rc) {
	g.clear();
	if(style == null || rc.width == 0 || rc.height == 0) return;
	if(style.get_backgroundColor() != -1 || style.get_borderColor() != -1) {
		if(style.get_borderColor() != -1) {
			var borderSize = 1;
			if(style.get_borderSize() != -1) borderSize = style.get_borderSize();
			if(borderSize > 0) {
				var borderAlpha = 1;
				if(style.get_borderAlpha() != -1) borderAlpha = style.get_borderAlpha();
				g.lineStyle(borderSize,style.get_borderColor(),borderAlpha);
				rc.inflate(-(borderSize / 2),-(borderSize / 2));
			}
		}
		if(style.get_backgroundColor() != -1) {
			var backgroundAlpha = 1;
			if(style.get_backgroundAlpha() != -1) backgroundAlpha = style.get_backgroundAlpha();
			if(style.get_backgroundColorGradientEnd() != -1) {
				var w = rc.width | 0;
				var h = rc.height | 0;
				var colors_0 = style.get_backgroundColor();
				var colors_1 = style.get_backgroundColorGradientEnd();
				var alphas_0 = backgroundAlpha;
				var alphas_1 = backgroundAlpha;
				var ratios_0 = 0;
				var ratios_1 = 255;
				var matrix = new openfl.geom.Matrix();
				var gradientType = "vertical";
				if(style.get_gradientType() != null) gradientType = style.get_gradientType();
				if(gradientType == "vertical") matrix.createGradientBox(w - 2,h - 2,Math.PI / 2,0,0); else if(gradientType == "horizontal") matrix.createGradientBox(w - 2,h - 2,0,0,0);
				g.beginFill(style.get_backgroundColor(),backgroundAlpha);
			} else g.beginFill(style.get_backgroundColor(),backgroundAlpha);
		}
		if(style.get_cornerRadiusTopLeft() != -1 || style.get_cornerRadiusTopRight() != -1 || style.get_cornerRadiusBottomLeft() != -1 || style.get_cornerRadiusBottomRight() != -1) {
			var radiusTopLeft = style.get_cornerRadiusTopLeft();
			var radiusTopRight = style.get_cornerRadiusTopRight();
			var radiusBottomLeft = style.get_cornerRadiusBottomLeft();
			var radiusBottomRight = style.get_cornerRadiusBottomRight();
			if(((radiusTopLeft | 0) & (radiusTopRight | 0) & (radiusBottomLeft | 0) & (radiusBottomRight | 0)) == radiusTopLeft) {
				radiusTopLeft -= 2;
				g.drawRoundRect(rc.get_left(),rc.get_top(),rc.width,rc.height,radiusTopLeft + 2,radiusTopLeft + 2);
			} else g.drawRect(rc.get_left(),rc.get_top(),rc.width,rc.height);
		} else g.drawRect(rc.get_left(),rc.get_top(),rc.width,rc.height);
		g.endFill();
	}
	if(style.get_backgroundImage() != null) {
		var backgroundImageRect = null;
		if(style.get_backgroundImageRect() != null) backgroundImageRect = style.get_backgroundImageRect();
		if(((function($this) {
			var $r;
			var _this = style.get_backgroundImage();
			$r = HxOverrides.substr(_this,-3,null);
			return $r;
		}(this))).toLowerCase() != "svg") {
			if(style.get_backgroundImageScale9() != null) haxe.ui.toolkit.style.StyleHelper.paintScale9(g,style.get_backgroundImage(),backgroundImageRect,style.get_backgroundImageScale9(),rc); else {
				var rects = new haxe.ds.StringMap();
				var bitmapData = haxe.ui.toolkit.style.StyleHelper.getBitmapSection(style.get_backgroundImage(),backgroundImageRect);
				if(bitmapData != null) {
					rects.set("middle",new openfl.geom.Rectangle(0,0,bitmapData.width,bitmapData.height));
					haxe.ui.toolkit.style.StyleHelper.paintCompoundBitmap(g,style.get_backgroundImage(),backgroundImageRect,rects,rc);
				}
			}
		} else {
			var svg = haxe.ui.toolkit.resources.ResourceManager.get_instance().getSVG(style.get_backgroundImage());
			svg.render(g,rc.get_left(),rc.get_top(),rc.width,rc.height);
		}
	}
};
haxe.ui.toolkit.style.StyleHelper.paintScale9 = function(g,resourceId,resourceRect,scale9,rc) {
	if(scale9 != null) {
		var resource = haxe.ui.toolkit.style.StyleHelper.getBitmapSection(resourceId,resourceRect);
		if(resource == null) return;
		var w = resource.width;
		var h = resource.height;
		var x1 = Std["int"](scale9.get_left());
		var y1 = Std["int"](scale9.get_top());
		var x2 = Std["int"](scale9.get_right());
		var y2 = Std["int"](scale9.get_bottom());
		var rects = new haxe.ds.StringMap();
		rects.set("top.left",new openfl.geom.Rectangle(0,0,x1,y1));
		rects.set("top",new openfl.geom.Rectangle(x1,0,x2 - x1,y1));
		rects.set("top.right",new openfl.geom.Rectangle(x2,0,w - x2,y1));
		rects.set("left",new openfl.geom.Rectangle(0,y1,x1,y2 - y1));
		rects.set("middle",new openfl.geom.Rectangle(x1,y1,x2 - x1,y2 - y1));
		rects.set("right",new openfl.geom.Rectangle(x2,y1,w - x2,y2 - y1));
		rects.set("bottom.left",new openfl.geom.Rectangle(0,y2,x1,h - y2));
		rects.set("bottom",new openfl.geom.Rectangle(x1,y2,x2 - x1,h - y2));
		rects.set("bottom.right",new openfl.geom.Rectangle(x2,y2,w - x2,h - y2));
		haxe.ui.toolkit.style.StyleHelper.paintCompoundBitmap(g,resourceId,resourceRect,rects,rc);
	}
};
haxe.ui.toolkit.style.StyleHelper.paintCompoundBitmap = function(g,resourceId,resourceRect,sourceRects,targetRect) {
	targetRect.set_left(Std["int"](targetRect.get_left()));
	targetRect.set_top(Std["int"](targetRect.get_top()));
	targetRect.set_right(Std["int"](targetRect.get_right()));
	targetRect.set_bottom(Std["int"](targetRect.get_bottom()));
	var tl = sourceRects.get("top.left");
	if(tl != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,tl,new openfl.geom.Rectangle(0,0,tl.width,tl.height)); else tl = new openfl.geom.Rectangle();
	var tr = sourceRects.get("top.right");
	if(tr != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,tr,new openfl.geom.Rectangle(targetRect.width - tr.width,0,tr.width,tr.height)); else tr = new openfl.geom.Rectangle();
	var t = sourceRects.get("top");
	if(t != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,t,new openfl.geom.Rectangle(tl.width,0,targetRect.width - tl.width - tr.width,t.height)); else t = new openfl.geom.Rectangle();
	var bl = sourceRects.get("bottom.left");
	if(bl != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,bl,new openfl.geom.Rectangle(0,targetRect.height - bl.height,bl.width,bl.height)); else bl = new openfl.geom.Rectangle();
	var br = sourceRects.get("bottom.right");
	if(br != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,br,new openfl.geom.Rectangle(targetRect.width - br.width,targetRect.height - br.height,br.width,br.height)); else br = new openfl.geom.Rectangle();
	var b = sourceRects.get("bottom");
	if(b != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,b,new openfl.geom.Rectangle(bl.width,targetRect.height - b.height,targetRect.width - bl.width - br.width,b.height)); else b = new openfl.geom.Rectangle();
	var l = sourceRects.get("left");
	if(l != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,l,new openfl.geom.Rectangle(0,tl.height,l.width,targetRect.height - tl.height - bl.height)); else l = new openfl.geom.Rectangle();
	var r = sourceRects.get("right");
	if(r != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,r,new openfl.geom.Rectangle(targetRect.width - r.width,tr.height,r.width,targetRect.height - tl.height - bl.height)); else r = new openfl.geom.Rectangle();
	var m = sourceRects.get("middle");
	if(m != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,m,new openfl.geom.Rectangle(l.width,t.height,targetRect.width - l.width - r.width,targetRect.height - t.height - b.height)); else m = new openfl.geom.Rectangle();
};
haxe.ui.toolkit.style.StyleHelper.paintBitmapSection = function(g,resourceId,resourceRect,src,dst) {
	var srcData = haxe.ui.toolkit.style.StyleHelper.getBitmapSection(resourceId,resourceRect);
	if(srcData == null) return;
	if(src.width <= 0 || src.height <= 0 || dst.width <= 0 || dst.height <= 0) return;
	if(resourceRect == null) resourceRect = new openfl.geom.Rectangle(0,0,srcData.width,srcData.height);
	var cacheId = resourceId + "_" + resourceRect.get_left() + "_" + resourceRect.get_top() + "_" + resourceRect.width + "_" + resourceRect.height + "___" + src.get_left() + "_" + src.get_top() + "_" + src.width + "_" + src.height;
	var section = haxe.ui.toolkit.style.StyleHelper.sectionCache.get(cacheId);
	if(section == null) {
		var fillcolor = 16777215;
		section = new openfl.display.BitmapData(src.width | 0,src.height | 0,true,fillcolor);
		section.copyPixels(srcData,src,new openfl.geom.Point(0,0));
		haxe.ui.toolkit.style.StyleHelper.sectionCache.set(cacheId,section);
	}
	src.set_left(Std["int"](src.get_left()));
	src.set_top(Std["int"](src.get_top()));
	src.set_bottom(Std["int"](src.get_bottom()));
	src.set_right(Std["int"](src.get_right()));
	dst.set_left(Std["int"](dst.get_left()));
	dst.set_top(Std["int"](dst.get_top()));
	dst.set_bottom(Std["int"](dst.get_bottom()));
	dst.set_right(Std["int"](dst.get_right()));
	var mat = new openfl.geom.Matrix();
	mat.scale(dst.width / section.width,dst.height / section.height);
	mat.translate(dst.get_left(),dst.get_top());
	g.lineStyle(0,0,0);
	g.beginBitmapFill(section,mat,false,false);
	g.drawRect(dst.x,dst.y,dst.width,dst.height);
	g.endFill();
};
haxe.ui.toolkit.style.StyleHelper.getBitmapSection = function(resourceId,rc) {
	if(resourceId == null || resourceId.length == 0) return null;
	if(haxe.ui.toolkit.style.StyleHelper.sectionCache == null) haxe.ui.toolkit.style.StyleHelper.sectionCache = new haxe.ds.StringMap();
	if(rc == null) {
		var resource = haxe.ui.toolkit.resources.ResourceManager.get_instance().getBitmapData(resourceId);
		if(resource != null) rc = new openfl.geom.Rectangle(0,0,resource.width,resource.height);
	}
	var cacheId = resourceId + "_" + rc.get_left() + "_" + rc.get_top() + "_" + rc.width + "_" + rc.height;
	var section = haxe.ui.toolkit.style.StyleHelper.sectionCache.get(cacheId);
	if(section == null) {
		var resource1 = haxe.ui.toolkit.resources.ResourceManager.get_instance().getBitmapData(resourceId);
		if(resource1 != null) {
			var fillcolor = 16777215;
			section = new openfl.display.BitmapData(rc.width | 0,rc.height | 0,true,fillcolor);
			section.copyPixels(resource1,rc,new openfl.geom.Point(0,0));
			haxe.ui.toolkit.style.StyleHelper.sectionCache.set(cacheId,section);
		}
	}
	return section;
};
haxe.ui.toolkit.style.StyleManager = function() {
	this._cacheStyles = true;
	this.stylesBuilt = 0;
	this._styles = new haxe.ds.StringMap();
	this._rules = new Array();
	this.stylesBuiltFor = new haxe.ds.StringMap();
};
$hxClasses["haxe.ui.toolkit.style.StyleManager"] = haxe.ui.toolkit.style.StyleManager;
haxe.ui.toolkit.style.StyleManager.__name__ = ["haxe","ui","toolkit","style","StyleManager"];
haxe.ui.toolkit.style.StyleManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.style.StyleManager._instance = null;
haxe.ui.toolkit.style.StyleManager.instance = null;
haxe.ui.toolkit.style.StyleManager.get_instance = function() {
	if(haxe.ui.toolkit.style.StyleManager._instance == null) haxe.ui.toolkit.style.StyleManager._instance = new haxe.ui.toolkit.style.StyleManager();
	return haxe.ui.toolkit.style.StyleManager._instance;
};
haxe.ui.toolkit.style.StyleManager.prototype = {
	getRules: function() {
		return this._rules;
	}
	,removeStyle: function(rule) {
		this._styles.remove(rule);
		HxOverrides.remove(this._rules,rule);
	}
	,addStyle: function(rule,style) {
		this._cachedStyles = null;
		var arr = rule.split(",");
		var _g = 0;
		while(_g < arr.length) {
			var a = arr[_g];
			++_g;
			a = StringTools.trim(a);
			var existingStyleRule = this._styles.get(a);
			var existingStyle = null;
			if(existingStyleRule != null) {
				var existingStyle1 = existingStyleRule.style;
				existingStyle1.merge(style);
				var styleRule = new haxe.ui.toolkit.style._StyleManager.StyleRule(a,existingStyle1);
				this._styles.set(a,styleRule);
			} else {
				var styleRule1 = new haxe.ui.toolkit.style._StyleManager.StyleRule(a,style);
				this._styles.set(a,styleRule1);
				this._rules.push(a);
			}
		}
	}
	,addStyles: function(styles) {
		var $it0 = styles.get_rules();
		while( $it0.hasNext() ) {
			var rule = $it0.next();
			this.addStyle(rule,styles.getStyle(rule));
		}
	}
	,findStyle: function(rule) {
		var existingStyleRule = this._styles.get(rule);
		if(existingStyleRule != null) return existingStyleRule.style;
		return null;
	}
	,clear: function() {
		this._styles = new haxe.ds.StringMap();
		this._rules = new Array();
		haxe.ui.toolkit.style.StyleHelper.clearCache();
	}
	,get_useCache: function() {
		return this._cacheStyles;
	}
	,set_useCache: function(value) {
		this._cacheStyles = false;
		return value;
	}
	,clearCache: function() {
		this._cachedStyles = new haxe.ds.StringMap();
	}
	,findAncestor: function(c,rulePart) {
		var a = null;
		var t = c;
		while(a == null) if(this.rulePartMatch(t,rulePart,null) == true) a = t; else {
			t = t.get_parent();
			if(t == null) break;
		}
		return a;
	}
	,rulePartMatch: function(c,rulePart,state,overriddenClassName) {
		var match = false;
		if(state == "normal") state = null;
		var className = Type.getClassName(Type.getClass(c));
		var n = className.lastIndexOf(".");
		className = HxOverrides.substr(className,n + 1,className.length);
		if(overriddenClassName != null) className = overriddenClassName;
		var id = c.get_id();
		var styleName = null;
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)) styleName = (js.Boot.__cast(c , haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)).get_styleName();
		var rulePartId = rulePart.id;
		var rulePartClassName = rulePart.className;
		var rulePartState = rulePart.state;
		var rulePartStyleName = rulePart.styleName;
		if(rulePartStyleName != null && rulePartStyleName.length == 0) rulePartStyleName = null;
		var s = new haxe.ui.toolkit.style.Style();
		if(rulePartId != null) {
			match = rulePartId == id;
			if(rulePartStyleName != null && match == true) match = rulePartStyleName == styleName;
		} else if(rulePartClassName != null) {
			match = rulePartClassName == className;
			if(rulePartStyleName != null && match == true) match = rulePartStyleName == styleName;
		} else if(rulePartStyleName != null) match = rulePartStyleName == styleName;
		if(rulePartState != null && match == true) match = rulePartState == state;
		return match;
	}
	,ruleMatch: function(c,rule,state,overriddenClassName) {
		var match = true;
		if(state == "normal") state = null;
		var className = Type.getClassName(Type.getClass(c));
		var n = className.lastIndexOf(".");
		className = HxOverrides.substr(className,n + 1,className.length);
		if(overriddenClassName != null) className = overriddenClassName;
		var id = c.get_id();
		var styleName = null;
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)) styleName = (js.Boot.__cast(c , haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)).get_styleName();
		var styleRule = this._styles.get(rule);
		var skipRule = true;
		if(styleRule.isRelevant(id,className,state,styleName) == true) skipRule = false;
		if(styleName != null && rule.indexOf("." + styleName) != -1) skipRule = false;
		if(skipRule == true) return false;
		var t = c;
		var _g = 0;
		var _g1 = styleRule.ruleParts;
		while(_g < _g1.length) {
			var rulePart = _g1[_g];
			++_g;
			var partMatch = this.rulePartMatch(t,rulePart,state,overriddenClassName);
			if(partMatch == false) {
				t = this.findAncestor(t,rulePart);
				if(t == null) {
					match = false;
					break;
				} else state = null;
			}
		}
		return match;
	}
	,buildStyleFor: function(c,state) {
		if(state == "normal") state = null;
		var cacheKey = null;
		if(this._cacheStyles == true) {
			cacheKey = this.buildFullCacheKey(c,state);
			if(this._cachedStyles == null) this._cachedStyles = new haxe.ds.StringMap();
			if(this._cachedStyles.get(cacheKey) != null) return this._cachedStyles.get(cacheKey).clone();
		}
		var style = new haxe.ui.toolkit.style.Style();
		style.set_autoApply(false);
		var superClass = Type.getSuperClass(Type.getClass(c));
		while(superClass != haxe.ui.toolkit.core.Component && superClass != haxe.ui.toolkit.core.StateComponent && superClass != haxe.ui.toolkit.core.StyleableDisplayObject && superClass != haxe.ui.toolkit.core.DisplayObjectContainer && superClass != haxe.ui.toolkit.core.DisplayObject && superClass != null) {
			var superClassName = Type.getClassName(superClass);
			var n = superClassName.lastIndexOf(".");
			superClassName = HxOverrides.substr(superClassName,n + 1,superClassName.length);
			var _g = 0;
			var _g1 = this._rules;
			while(_g < _g1.length) {
				var rule = _g1[_g];
				++_g;
				if(this.ruleMatch(c,rule,state,superClassName) == true) {
					var matchedStyle = this._styles.get(rule).style;
					style.merge(matchedStyle);
				}
			}
			superClass = Type.getSuperClass(superClass);
		}
		var _g2 = 0;
		var _g11 = this._rules;
		while(_g2 < _g11.length) {
			var rule1 = _g11[_g2];
			++_g2;
			if(this.ruleMatch(c,rule1,state) == true) {
				var matchedStyle1 = this._styles.get(rule1).style;
				style.merge(matchedStyle1);
			}
		}
		this.stylesBuilt++;
		var className = Type.getClassName(Type.getClass(c));
		if(this.stylesBuiltFor.get(className) == null) this.stylesBuiltFor.set(className,0);
		var n1 = this.stylesBuiltFor.get(className);
		n1++;
		this.stylesBuiltFor.set(className,n1);
		if(this._cacheStyles == true && cacheKey != null) this._cachedStyles.set(cacheKey,style);
		style.set_target(c);
		style.set_autoApply(true);
		return style.clone();
	}
	,buildCacheKey: function(c,state) {
		if(state == "normal") state = null;
		var className = Type.getClassName(Type.getClass(c));
		var n = className.lastIndexOf(".");
		className = HxOverrides.substr(className,n + 1,className.length);
		var id = c.get_id();
		var styleName = null;
		var styleString = null;
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)) {
			styleName = (js.Boot.__cast(c , haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)).get_styleName();
			styleString = (js.Boot.__cast(c , haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)).get_styleString();
		}
		var s = className;
		if(id != null) s += "#" + id;
		if(styleName != null) s += "." + styleName;
		if(state != null) s += ":" + state;
		if(styleString != null) s += "{" + styleString + "}";
		return s;
	}
	,buildFullCacheKey: function(c,state) {
		if(state == "normal") state = null;
		var key = this.buildCacheKey(c,state);
		var p = c.get_parent();
		while(p != null) {
			key += ">" + this.buildCacheKey(p,null);
			p = p.get_parent();
		}
		return key;
	}
	,dump: function() {
		var $it0 = this.stylesBuiltFor.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			haxe.Log.trace("> " + key + " = " + this.stylesBuiltFor.get(key),{ fileName : "StyleManager.hx", lineNumber : 343, className : "haxe.ui.toolkit.style.StyleManager", methodName : "dump"});
		}
		haxe.Log.trace(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",{ fileName : "StyleManager.hx", lineNumber : 345, className : "haxe.ui.toolkit.style.StyleManager", methodName : "dump"});
	}
	,get_hasStyles: function() {
		if(this._styles == null) return false;
		return this._styles.keys().hasNext();
	}
	,__class__: haxe.ui.toolkit.style.StyleManager
	,__properties__: {set_useCache:"set_useCache",get_useCache:"get_useCache",get_hasStyles:"get_hasStyles"}
};
haxe.ui.toolkit.style._StyleManager = {};
haxe.ui.toolkit.style._StyleManager.StyleRule = function(rule,style) {
	this.style = style;
	this.ruleParts = new Array();
	var ruleArr = rule.split(" ");
	ruleArr.reverse();
	var _g = 0;
	while(_g < ruleArr.length) {
		var rulePart = ruleArr[_g];
		++_g;
		this.ruleParts.push(new haxe.ui.toolkit.style._StyleManager.StyleRulePart(rulePart));
	}
};
$hxClasses["haxe.ui.toolkit.style._StyleManager.StyleRule"] = haxe.ui.toolkit.style._StyleManager.StyleRule;
haxe.ui.toolkit.style._StyleManager.StyleRule.__name__ = ["haxe","ui","toolkit","style","_StyleManager","StyleRule"];
haxe.ui.toolkit.style._StyleManager.StyleRule.prototype = {
	containsClassName: function(className) {
		var found = false;
		var _g = 0;
		var _g1 = this.ruleParts;
		while(_g < _g1.length) {
			var rulePart = _g1[_g];
			++_g;
			if(rulePart.className != null && rulePart.className == className) {
				found = true;
				break;
			}
		}
		return found;
	}
	,isRelevant: function(id,className,state,styleName) {
		var relevant = false;
		var _g = 0;
		var _g1 = this.ruleParts;
		while(_g < _g1.length) {
			var rulePart = _g1[_g];
			++_g;
			if(rulePart.id != null && rulePart.id == id) {
				relevant = true;
				break;
			}
			if(rulePart.className != null && rulePart.className == className) {
				relevant = true;
				break;
			}
			if(rulePart.state != null && rulePart.state == state) {
				relevant = true;
				break;
			}
			if(rulePart.styleName != null && rulePart.styleName == styleName) {
				relevant = true;
				break;
			}
		}
		return relevant;
	}
	,__class__: haxe.ui.toolkit.style._StyleManager.StyleRule
};
haxe.ui.toolkit.style._StyleManager.StyleRulePart = function(rulePart) {
	var n = rulePart.indexOf(":");
	if(n != -1) {
		this.state = HxOverrides.substr(rulePart,n + 1,rulePart.length);
		rulePart = HxOverrides.substr(rulePart,0,n);
	}
	if(StringTools.startsWith(rulePart,"#")) {
		this.id = HxOverrides.substr(rulePart,1,rulePart.length);
		n = this.id.indexOf(".");
		if(n != -1) {
			this.styleName = HxOverrides.substr(this.id,n + 1,this.id.length);
			this.id = HxOverrides.substr(this.id,0,n);
		}
	} else {
		this.className = rulePart;
		n = this.className.indexOf(".");
		if(n != -1) {
			this.styleName = HxOverrides.substr(this.className,n + 1,this.className.length);
			this.className = HxOverrides.substr(this.className,0,n);
			if(this.className.length == 0) this.className = null;
		}
	}
	if(this.styleName != null && this.styleName.length == 0) this.styleName = null;
};
$hxClasses["haxe.ui.toolkit.style._StyleManager.StyleRulePart"] = haxe.ui.toolkit.style._StyleManager.StyleRulePart;
haxe.ui.toolkit.style._StyleManager.StyleRulePart.__name__ = ["haxe","ui","toolkit","style","_StyleManager","StyleRulePart"];
haxe.ui.toolkit.style._StyleManager.StyleRulePart.prototype = {
	__class__: haxe.ui.toolkit.style._StyleManager.StyleRulePart
};
haxe.ui.toolkit.style.StyleParser = function() { };
$hxClasses["haxe.ui.toolkit.style.StyleParser"] = haxe.ui.toolkit.style.StyleParser;
haxe.ui.toolkit.style.StyleParser.__name__ = ["haxe","ui","toolkit","style","StyleParser"];
haxe.ui.toolkit.style.StyleParser.fromString = function(styleString,storeRaw) {
	if(storeRaw == null) storeRaw = false;
	if(styleString == null || styleString.length == 0) return new haxe.ui.toolkit.style.Styles();
	var n1 = styleString.indexOf("/*");
	while(n1 != -1) {
		var n2 = styleString.indexOf("*/",n1);
		if(n2 == -1) break;
		var before = styleString.substring(0,n1);
		var after = styleString.substring(n2 + 2,styleString.length);
		styleString = before + after;
		n1 = styleString.indexOf("/*");
	}
	var styles = new haxe.ui.toolkit.style.Styles();
	var n11 = -1;
	var n21 = styleString.indexOf("{",0);
	while(n21 > -1) {
		var n3 = styleString.indexOf("}",n21);
		var styleName = StringTools.trim(HxOverrides.substr(styleString,n11 + 1,n21 - n11 - 1));
		var styleData = HxOverrides.substr(styleString,n21 + 1,n3 - n21 - 1);
		var style = new haxe.ui.toolkit.style.Style();
		var props = styleData.split(";");
		var _g = 0;
		while(_g < props.length) {
			var prop = props[_g];
			++_g;
			prop = StringTools.trim(prop);
			if(prop.length == 0 || StringTools.startsWith(prop,"//")) continue;
			if(storeRaw == true) style.addRawProperty(prop);
			if(prop != null && prop.length > 0) {
				var temp = prop.split(":");
				var propName = StringTools.trim(temp[0]);
				propName = haxe.ui.toolkit.util.StringUtil.capitalizeHyphens(propName);
				if(Reflect.field(style,"set_" + propName) == null) {
					haxe.Log.trace("Warning: " + propName + " not found",{ fileName : "StyleParser.hx", lineNumber : 53, className : "haxe.ui.toolkit.style.StyleParser", methodName : "fromString"});
					continue;
				}
				var propValue = StringTools.trim(temp[1]);
				if(temp.length == 3) propValue += ":" + StringTools.trim(temp[2]);
				propValue = StringTools.replace(propValue,"\"","");
				propValue = StringTools.replace(propValue,"'","");
				if(haxe.ui.toolkit.hscript.ScriptUtils.isScript(propValue) && !haxe.ui.toolkit.hscript.ScriptUtils.isCssException(propName)) {
					style.addDynamicValue(propName,propValue);
					continue;
				}
				if(propName == "width" && propValue.indexOf("%") != -1) {
					propName = "percentWidth";
					propValue = HxOverrides.substr(propValue,0,propValue.length - 1);
				} else if(propName == "height" && propValue.indexOf("%") != -1) {
					propName = "percentHeight";
					propValue = HxOverrides.substr(propValue,0,propValue.length - 1);
				} else if(propName == "filter") {
					style.set_filter(haxe.ui.toolkit.util.FilterParser.parseFilter(propValue));
					continue;
				} else if(propName == "backgroundImageScale9") {
					var coords = propValue.split(",");
					var x1 = Std.parseInt(coords[0]);
					var y1 = Std.parseInt(coords[1]);
					var x2 = Std.parseInt(coords[2]);
					var y2 = Std.parseInt(coords[3]);
					var scale9 = new openfl.geom.Rectangle();
					scale9.set_left(x1);
					scale9.set_top(y1);
					scale9.set_right(x2);
					scale9.set_bottom(y2);
					style.set_backgroundImageScale9(scale9);
					continue;
				} else if(propName == "backgroundImageRect") {
					var arr = propValue.split(",");
					style.set_backgroundImageRect(new openfl.geom.Rectangle(Std.parseInt(arr[0]),Std.parseInt(arr[1]),Std.parseInt(arr[2]),Std.parseInt(arr[3])));
					continue;
				}
				if(propValue.indexOf(",") != -1 || !StringTools.startsWith(propValue,"#") && Std.string(Std.parseFloat(propValue)) == Std.string(Math.NaN)) {
					if(propValue == "true" || propValue == "false") Reflect.setProperty(style,propName,propValue == "true"); else Reflect.setProperty(style,propName,propValue);
				} else {
					if(StringTools.startsWith(propValue,"#")) propValue = "0x" + HxOverrides.substr(propValue,1,propValue.length - 1);
					if(StringTools.startsWith(propValue,"0x")) Reflect.setProperty(style,propName,Std.parseInt(propValue)); else Reflect.setProperty(style,propName,Std.parseFloat(propValue));
				}
			}
		}
		if(styleName.indexOf(",") == -1) styles.addStyle(styleName,style); else {
			var arr1 = styleName.split(",");
			var _g1 = 0;
			while(_g1 < arr1.length) {
				var s = arr1[_g1];
				++_g1;
				s = StringTools.trim(s);
				styles.addStyle(s,style);
			}
		}
		n11 = n3;
		n21 = styleString.indexOf("{",n11);
	}
	return styles;
};
haxe.ui.toolkit.text = {};
haxe.ui.toolkit.text.ITextDisplay = function() { };
$hxClasses["haxe.ui.toolkit.text.ITextDisplay"] = haxe.ui.toolkit.text.ITextDisplay;
haxe.ui.toolkit.text.ITextDisplay.__name__ = ["haxe","ui","toolkit","text","ITextDisplay"];
haxe.ui.toolkit.text.ITextDisplay.prototype = {
	__class__: haxe.ui.toolkit.text.ITextDisplay
};
haxe.ui.toolkit.text.TextDisplay = function() {
	this._autoSize = true;
	this._tf = new openfl.text.TextField();
	this._tf.set_type(openfl.text.TextFieldType.DYNAMIC);
	this._tf.set_selectable(false);
	this._tf.multiline = false;
	this._tf.mouseEnabled = false;
	this._tf.set_wordWrap(false);
	this._tf.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
	this._tf.set_text("");
};
$hxClasses["haxe.ui.toolkit.text.TextDisplay"] = haxe.ui.toolkit.text.TextDisplay;
haxe.ui.toolkit.text.TextDisplay.__name__ = ["haxe","ui","toolkit","text","TextDisplay"];
haxe.ui.toolkit.text.TextDisplay.__interfaces__ = [haxe.ui.toolkit.text.ITextDisplay];
haxe.ui.toolkit.text.TextDisplay.prototype = {
	get_text: function() {
		return this._tf.get_text();
	}
	,set_text: function(value) {
		if(value != null) {
			if(this._tf.multiline == false) this._tf.set_text(StringTools.replace(value,"\\n","\n")); else this._tf.set_text(StringTools.replace(value,"\\n","\n"));
		}
		this.set_style(this._style);
		if(this._tf.get_height() - 2 != this._tf.get_textHeight()) this._tf.set_height(this._tf.get_textHeight() - 2);
		return value;
	}
	,get_style: function() {
		return this._style;
	}
	,set_style: function(value) {
		if(value == null) return value;
		this._style = value;
		var format = this._tf.getTextFormat();
		var fontName = this._style.get_fontName();
		if(fontName != null) {
			if(fontName == "_sans") fontName = "Tahoma";
			this._tf.embedFonts = this._style.get_fontEmbedded();
			format.font = fontName;
		}
		if(this._style.get_fontSize() != -1) format.size = this._style.get_fontSize();
		if(this._style.get_color() != -1) format.color = this._style.get_color();
		format.bold = this._style.get_fontBold();
		format.italic = this._style.get_fontItalic();
		format.underline = this._style.get_fontUnderline();
		this._tf.set_defaultTextFormat(format);
		this._tf.setTextFormat(format);
		if(this._style.get_textAlign() != null) this.set_textAlign(this._style.get_textAlign());
		return value;
	}
	,get_display: function() {
		return this._tf;
	}
	,get_interactive: function() {
		return this._tf.type == openfl.text.TextFieldType.INPUT;
	}
	,set_interactive: function(value) {
		if(value == true) {
			this._tf.set_type(openfl.text.TextFieldType.INPUT);
			this._tf.set_selectable(true);
			this._tf.mouseEnabled = true;
		} else {
			this._tf.set_type(openfl.text.TextFieldType.DYNAMIC);
			this._tf.set_selectable(false);
			this._tf.mouseEnabled = false;
		}
		return value;
	}
	,get_multiline: function() {
		return this._tf.multiline;
	}
	,set_multiline: function(value) {
		this._tf.multiline = value;
		return value;
	}
	,get_wrapLines: function() {
		return this._tf.get_wordWrap();
	}
	,set_wrapLines: function(value) {
		this._tf.set_wordWrap(value);
		return value;
	}
	,get_displayAsPassword: function() {
		return this._tf.displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		this._tf.displayAsPassword = value;
		return value;
	}
	,get_visible: function() {
		return this._tf.get_visible();
	}
	,set_visible: function(value) {
		this._tf.set_visible(value);
		return value;
	}
	,get_selectable: function() {
		return this._tf.selectable;
	}
	,set_selectable: function(value) {
		this._tf.mouseEnabled = value;
		return this._tf.set_selectable(value);
	}
	,get_autoSize: function() {
		return this._tf.autoSize != openfl.text.TextFieldAutoSize.NONE;
	}
	,set_autoSize: function(value) {
		if(value == true) this._tf.set_autoSize(openfl.text.TextFieldAutoSize.LEFT); else this._tf.set_autoSize(openfl.text.TextFieldAutoSize.NONE);
		return value;
	}
	,get_textAlign: function() {
		var format = this._tf.getTextFormat();
		var align = "left";
		var _g = format.align;
		switch(_g[1]) {
		case 0:
			align = "left";
			break;
		case 3:
			align = "center";
			break;
		case 1:
			align = "right";
			break;
		default:
			align = "left";
		}
		return align;
	}
	,set_textAlign: function(value) {
		var format = this._tf.getTextFormat();
		switch(value) {
		case "left":
			format.align = openfl.text.TextFormatAlign.LEFT;
			break;
		case "center":
			format.align = openfl.text.TextFormatAlign.CENTER;
			break;
		case "right":
			format.align = openfl.text.TextFormatAlign.RIGHT;
			break;
		default:
			format.align = openfl.text.TextFormatAlign.LEFT;
		}
		this._tf.set_defaultTextFormat(format);
		this._tf.setTextFormat(format);
		return value;
	}
	,get_maxChars: function() {
		return this._tf.maxChars;
	}
	,set_maxChars: function(value) {
		return this._tf.maxChars = value;
	}
	,get_restrictChars: function() {
		return null;
	}
	,set_restrictChars: function(value) {
		return value;
	}
	,__class__: haxe.ui.toolkit.text.TextDisplay
	,__properties__: {set_restrictChars:"set_restrictChars",get_restrictChars:"get_restrictChars",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_selectable:"set_selectable",get_selectable:"get_selectable",set_visible:"set_visible",get_visible:"get_visible",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_interactive:"set_interactive",get_interactive:"get_interactive",get_display:"get_display",set_style:"set_style",get_style:"get_style",set_text:"set_text",get_text:"get_text"}
};
haxe.ui.toolkit.themes = {};
haxe.ui.toolkit.themes.Theme = function() {
};
$hxClasses["haxe.ui.toolkit.themes.Theme"] = haxe.ui.toolkit.themes.Theme;
haxe.ui.toolkit.themes.Theme.__name__ = ["haxe","ui","toolkit","themes","Theme"];
haxe.ui.toolkit.themes.Theme.addPublicAsset = function(asset) {
	haxe.ui.toolkit.themes.Theme.addAsset("__PUBLIC__",asset);
};
haxe.ui.toolkit.themes.Theme.addAsset = function(t,asset) {
	var list = haxe.ui.toolkit.themes.Theme.assets.get(t);
	if(list == null) {
		list = new Array();
		haxe.ui.toolkit.themes.Theme.assets.set(t,list);
	}
	list.push(asset);
};
haxe.ui.toolkit.themes.Theme.prototype = {
	apply: function() {
		this.applyAssetList(this.name);
		this.applyAssetList("__PUBLIC__");
	}
	,applyAssetList: function(n) {
		var list = haxe.ui.toolkit.themes.Theme.assets.get(n);
		if(list == null) return;
		var _g = 0;
		while(_g < list.length) {
			var asset = list[_g];
			++_g;
			this.applyAsset(asset);
		}
	}
	,applyAsset: function(asset) {
		if(typeof(asset) == "string") {
			if(StringTools.endsWith(asset,".css")) haxe.ui.toolkit.style.StyleManager.get_instance().addStyles(haxe.ui.toolkit.style.StyleParser.fromString(haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(asset)));
		} else if(js.Boot.__instanceof(asset,Class)) {
			var styles = Type.createInstance(asset,[]);
			if(styles != null) haxe.ui.toolkit.style.StyleManager.get_instance().addStyles(styles);
		}
	}
	,__class__: haxe.ui.toolkit.themes.Theme
};
haxe.ui.toolkit.themes.DefaultTheme = function() {
	haxe.ui.toolkit.themes.Theme.call(this);
	this.name = "default";
};
$hxClasses["haxe.ui.toolkit.themes.DefaultTheme"] = haxe.ui.toolkit.themes.DefaultTheme;
haxe.ui.toolkit.themes.DefaultTheme.__name__ = ["haxe","ui","toolkit","themes","DefaultTheme"];
haxe.ui.toolkit.themes.DefaultTheme.__super__ = haxe.ui.toolkit.themes.Theme;
haxe.ui.toolkit.themes.DefaultTheme.prototype = $extend(haxe.ui.toolkit.themes.Theme.prototype,{
	__class__: haxe.ui.toolkit.themes.DefaultTheme
});
haxe.ui.toolkit.util = {};
haxe.ui.toolkit.util.ByteConverter = function() { };
$hxClasses["haxe.ui.toolkit.util.ByteConverter"] = haxe.ui.toolkit.util.ByteConverter;
haxe.ui.toolkit.util.ByteConverter.__name__ = ["haxe","ui","toolkit","util","ByteConverter"];
haxe.ui.toolkit.util.ByteConverter.fromHaxeBytes = function(bytes) {
	var ba = new lime.utils.ByteArray();
	var _g1 = 0;
	var _g = bytes.length;
	while(_g1 < _g) {
		var a = _g1++;
		ba.writeByte(bytes.b[a]);
	}
	return ba;
};
haxe.ui.toolkit.util.ByteConverter.toHaxeBytes = function(ba) {
	var bytes = haxe.io.Bytes.alloc(ba.length);
	var _g1 = 0;
	var _g = ba.length;
	while(_g1 < _g) {
		var a = _g1++;
		bytes.set(a,ba.readByte());
	}
	return bytes;
};
haxe.ui.toolkit.util.CallStackHelper = function() { };
$hxClasses["haxe.ui.toolkit.util.CallStackHelper"] = haxe.ui.toolkit.util.CallStackHelper;
haxe.ui.toolkit.util.CallStackHelper.__name__ = ["haxe","ui","toolkit","util","CallStackHelper"];
haxe.ui.toolkit.util.CallStackHelper.traceCallStack = function() {
	var arr = haxe.CallStack.callStack();
	if(arr == null) {
		haxe.Log.trace("Callstack is null!",{ fileName : "CallStackHelper.hx", lineNumber : 9, className : "haxe.ui.toolkit.util.CallStackHelper", methodName : "traceCallStack"});
		return;
	}
	haxe.Log.trace(haxe.CallStack.toString(arr),{ fileName : "CallStackHelper.hx", lineNumber : 12, className : "haxe.ui.toolkit.util.CallStackHelper", methodName : "traceCallStack"});
	haxe.Log.trace(">>>>>>>>>>>>>>>>>>>>>>>>>>>> END >>>>>>>>>>>>>>>>>>>>>>>>>>>>",{ fileName : "CallStackHelper.hx", lineNumber : 13, className : "haxe.ui.toolkit.util.CallStackHelper", methodName : "traceCallStack"});
};
haxe.ui.toolkit.util.FilterParser = function() { };
$hxClasses["haxe.ui.toolkit.util.FilterParser"] = haxe.ui.toolkit.util.FilterParser;
haxe.ui.toolkit.util.FilterParser.__name__ = ["haxe","ui","toolkit","util","FilterParser"];
haxe.ui.toolkit.util.FilterParser.parseFilter = function(filterString) {
	return null;
	var filter = null;
	var filterName = null;
	var filterParams = null;
	var n1 = filterString.indexOf("(");
	var n2 = filterString.indexOf(")");
	if(n1 != -1 && n2 != -1) {
		filterName = HxOverrides.substr(filterString,0,n1);
		filterParams = HxOverrides.substr(filterString,n1 + 1,n2 - n1 - 1);
	} else filterName = filterString;
	if(filterName != null) {
		filterName = StringTools.trim(filterName);
		filter = haxe.ui.toolkit.util.FilterParser.createFilter(filterName,filterParams);
	}
	return filter;
};
haxe.ui.toolkit.util.FilterParser.createFilter = function(filterName,filterParams) {
	var filter = null;
	var params = null;
	if(filterParams != null) params = filterParams.split(",");
	params = haxe.ui.toolkit.util.FilterParser.copyFilterDefaults(filterName,params);
	if(filterName == "blur") filter = haxe.ui.toolkit.util.FilterParser.createBlurFilter(params); else if(filterName == "dropShadow") filter = haxe.ui.toolkit.util.FilterParser.createDropShadowFilter(params); else if(filterName == "glow") filter = haxe.ui.toolkit.util.FilterParser.createGlowFilter(params);
	return filter;
};
haxe.ui.toolkit.util.FilterParser.createBlurFilter = function(params) {
	var filter = new openfl.filters.BlurFilter(haxe.ui.toolkit.util.TypeParser.parseFloat(params[0]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[1]),haxe.ui.toolkit.util.TypeParser.parseInt(params[2]));
	return filter;
};
haxe.ui.toolkit.util.FilterParser.createDropShadowFilter = function(params) {
	var filter = new openfl.filters.DropShadowFilter(haxe.ui.toolkit.util.TypeParser.parseFloat(params[0]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[1]),haxe.ui.toolkit.util.TypeParser.parseInt(params[2]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[3]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[4]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[5]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[6]),haxe.ui.toolkit.util.TypeParser.parseInt(params[7]),haxe.ui.toolkit.util.TypeParser.parseBool(params[8]),haxe.ui.toolkit.util.TypeParser.parseBool(params[9]),haxe.ui.toolkit.util.TypeParser.parseBool(params[10]));
	return filter;
};
haxe.ui.toolkit.util.FilterParser.createGlowFilter = function(params) {
	var filter = new openfl.filters.GlowFilter(haxe.ui.toolkit.util.TypeParser.parseInt(params[0]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[1]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[2]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[3]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[4]),haxe.ui.toolkit.util.TypeParser.parseInt(params[5]),haxe.ui.toolkit.util.TypeParser.parseBool(params[6]),haxe.ui.toolkit.util.TypeParser.parseBool(params[7]));
	return filter;
};
haxe.ui.toolkit.util.FilterParser.copyFilterDefaults = function(filterName,params) {
	var copy = new Array();
	var defaultParams = Reflect.field(haxe.ui.toolkit.util.FilterParser.filterParamDefaults,filterName);
	if(defaultParams != null) {
		var _g = 0;
		while(_g < defaultParams.length) {
			var p = defaultParams[_g];
			++_g;
			copy.push(p);
		}
	}
	if(params != null) {
		var n = 0;
		var _g1 = 0;
		while(_g1 < params.length) {
			var p1 = params[_g1];
			++_g1;
			copy[n] = p1;
			n++;
		}
	}
	return copy;
};
haxe.ui.toolkit.util.FilterParser.changeFilterQuality = function(filter,quality) {
	if(filter == null) return null;
	if(js.Boot.__instanceof(filter,openfl.filters.BlurFilter)) (js.Boot.__cast(filter , openfl.filters.BlurFilter)).quality = quality; else if(js.Boot.__instanceof(filter,openfl.filters.DropShadowFilter)) (js.Boot.__cast(filter , openfl.filters.DropShadowFilter)).quality = quality; else if(js.Boot.__instanceof(filter,openfl.filters.GlowFilter)) (js.Boot.__cast(filter , openfl.filters.GlowFilter)).quality = quality;
	return filter;
};
haxe.ui.toolkit.util.Identifier = function() { };
$hxClasses["haxe.ui.toolkit.util.Identifier"] = haxe.ui.toolkit.util.Identifier;
haxe.ui.toolkit.util.Identifier.__name__ = ["haxe","ui","toolkit","util","Identifier"];
haxe.ui.toolkit.util.Identifier.createObjectId = function(instance) {
	return haxe.ui.toolkit.util.Identifier.createClassId(Type.getClass(instance));
};
haxe.ui.toolkit.util.Identifier.createClassId = function(type) {
	var className = Type.getClassName(type);
	var c = haxe.ui.toolkit.util.Identifier._objectCount.get(className);
	if(haxe.ui.toolkit.util.Identifier._objectCount.exists(className) == false) {
		haxe.ui.toolkit.util.Identifier._objectCount.set(className,-1);
		c = -1;
	}
	c++;
	haxe.ui.toolkit.util.Identifier._objectCount.set(className,c);
	var id = className + c;
	return id;
};
haxe.ui.toolkit.util.Identifier.guid = function() {
	return haxe.ui.toolkit.util.Identifier.S4() + haxe.ui.toolkit.util.Identifier.S4() + "-" + haxe.ui.toolkit.util.Identifier.S4() + "-" + haxe.ui.toolkit.util.Identifier.S4() + "-" + haxe.ui.toolkit.util.Identifier.S4() + "-" + haxe.ui.toolkit.util.Identifier.S4() + haxe.ui.toolkit.util.Identifier.S4() + haxe.ui.toolkit.util.Identifier.S4();
};
haxe.ui.toolkit.util.Identifier.S4 = function() {
	var n = (1 + Std.random(65536)) * 65536 | 0;
	var _this = StringTools.hex(n,4);
	return HxOverrides.substr(_this,0,4);
};
haxe.ui.toolkit.util.StringUtil = function() { };
$hxClasses["haxe.ui.toolkit.util.StringUtil"] = haxe.ui.toolkit.util.StringUtil;
haxe.ui.toolkit.util.StringUtil.__name__ = ["haxe","ui","toolkit","util","StringUtil"];
haxe.ui.toolkit.util.StringUtil.capitalizeFirstLetter = function(s) {
	s = HxOverrides.substr(s,0,1).toUpperCase() + HxOverrides.substr(s,1,s.length);
	return s;
};
haxe.ui.toolkit.util.StringUtil.capitalizeHyphens = function(s) {
	var r = s;
	var n = r.indexOf("-");
	while(n != -1) {
		var before = HxOverrides.substr(r,0,n);
		var after = HxOverrides.substr(r,n + 1,r.length);
		r = before + haxe.ui.toolkit.util.StringUtil.capitalizeFirstLetter(after);
		n = r.indexOf("-",n + 1);
	}
	return r;
};
haxe.ui.toolkit.util.TypeParser = function() { };
$hxClasses["haxe.ui.toolkit.util.TypeParser"] = haxe.ui.toolkit.util.TypeParser;
haxe.ui.toolkit.util.TypeParser.__name__ = ["haxe","ui","toolkit","util","TypeParser"];
haxe.ui.toolkit.util.TypeParser.parseInt = function(s) {
	var i = 0;
	if(s != null) {
		s = StringTools.trim(s);
		i = Std.parseInt(s);
	}
	return i;
};
haxe.ui.toolkit.util.TypeParser.parseFloat = function(s) {
	var f = 0;
	if(s != null) {
		s = StringTools.trim(s);
		f = Std.parseFloat(s);
	}
	return f;
};
haxe.ui.toolkit.util.TypeParser.parseBool = function(s) {
	var b = false;
	if(s != null) {
		s = StringTools.trim(s);
		s = s.toLowerCase();
		if(s == "true" || s == "yes" || s == "1") b = true;
	}
	return b;
};
haxe.ui.toolkit.util.TypeParser.parseColor = function(s) {
	var c = 0;
	if(s != null) {
		s = StringTools.trim(s);
		if(StringTools.startsWith(s,"#")) s = "0x" + HxOverrides.substr(s,1,s.length - 1);
		c = Std.parseInt(s);
	}
	return c;
};
haxe.ui.toolkit.util.XmlUtil = function() { };
$hxClasses["haxe.ui.toolkit.util.XmlUtil"] = haxe.ui.toolkit.util.XmlUtil;
haxe.ui.toolkit.util.XmlUtil.__name__ = ["haxe","ui","toolkit","util","XmlUtil"];
haxe.ui.toolkit.util.XmlUtil.getPathValues = function(xml,path) {
	var values = new Array();
	var parts = path.split("/");
	var _g = 0;
	while(_g < parts.length) {
		var p = parts[_g];
		++_g;
		if(p.length == 0) HxOverrides.remove(parts,p);
	}
	var matchToFind = parts[0];
	HxOverrides.remove(parts,matchToFind);
	if(xml.get_nodeName() == matchToFind) {
		if(parts.length > 1) {
			var $it0 = xml.elements();
			while( $it0.hasNext() ) {
				var child = $it0.next();
				values = values.concat(haxe.ui.toolkit.util.XmlUtil.getPathValues(child,parts.join("/")));
			}
		} else {
			matchToFind = parts.pop();
			if(StringTools.startsWith(matchToFind,"@")) {
				var attrName = HxOverrides.substr(matchToFind,1,matchToFind.length);
				var attrValue = xml.get(attrName);
				if(attrValue != null) values.push(attrValue);
			} else if(matchToFind == "text()") {
				var nodeValue = xml.firstChild().get_nodeValue();
				if(nodeValue != null) values.push(nodeValue);
			}
		}
	}
	return values;
};
haxe.xml = {};
haxe.xml.Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe.xml.Parser;
haxe.xml.Parser.__name__ = ["haxe","xml","Parser"];
haxe.xml.Parser.parse = function(str) {
	var doc = Xml.createDocument();
	haxe.xml.Parser.doParse(str,0,doc);
	return doc;
};
haxe.xml.Parser.doParse = function(str,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				var child = Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start));
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				next = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw "Expected <![CDATA[";
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw "Expected <!DOCTYPE";
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw "Expected <!--"; else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw "Expected node name";
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw "Expected node name";
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				nsubs++;
				break;
			case 62:
				state = 9;
				nsubs++;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw "Expected attribute name";
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw "Duplicate attribute";
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw "Expected =";
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				state = 8;
				start = p;
				break;
			default:
				throw "Expected \"";
			}
			break;
		case 8:
			if(c == str.charCodeAt(start)) {
				var val = HxOverrides.substr(str,start + 1,p - start - 1);
				xml.set(aname,val);
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = haxe.xml.Parser.doParse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw "Expected >";
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw "Expected >";
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw "Expected node name";
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.get_nodeName()) throw "Expected </" + parent.get_nodeName() + ">";
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var i;
					if(s.charCodeAt(1) == 120) i = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else i = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.add(String.fromCharCode(i));
				} else if(!haxe.xml.Parser.escapes.exists(s)) buf.b += Std.string("&" + s + ";"); else buf.add(haxe.xml.Parser.escapes.get(s));
				start = p + 1;
				state = next;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) parent.addChild(Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start)));
		return p;
	}
	throw "Unexpected end";
};
hscript.Const = $hxClasses["hscript.Const"] = { __ename__ : ["hscript","Const"], __constructs__ : ["CInt","CFloat","CString"] };
hscript.Const.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = hscript.Const; $x.toString = $estr; return $x; };
hscript.Const.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = hscript.Const; $x.toString = $estr; return $x; };
hscript.Const.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = hscript.Const; $x.toString = $estr; return $x; };
hscript.Expr = $hxClasses["hscript.Expr"] = { __ename__ : ["hscript","Expr"], __constructs__ : ["EConst","EIdent","EVar","EParent","EBlock","EField","EBinop","EUnop","ECall","EIf","EWhile","EFor","EBreak","EContinue","EFunction","EReturn","EArray","EArrayDecl","ENew","EThrow","ETry","EObject","ETernary","ESwitch"] };
hscript.Expr.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EIdent = function(v) { var $x = ["EIdent",1,v]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EVar = function(n,t,e) { var $x = ["EVar",2,n,t,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EParent = function(e) { var $x = ["EParent",3,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EBlock = function(e) { var $x = ["EBlock",4,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EField = function(e,f) { var $x = ["EField",5,e,f]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EBinop = function(op,e1,e2) { var $x = ["EBinop",6,op,e1,e2]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EUnop = function(op,prefix,e) { var $x = ["EUnop",7,op,prefix,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.ECall = function(e,params) { var $x = ["ECall",8,e,params]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EIf = function(cond,e1,e2) { var $x = ["EIf",9,cond,e1,e2]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EWhile = function(cond,e) { var $x = ["EWhile",10,cond,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EFor = function(v,it,e) { var $x = ["EFor",11,v,it,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EBreak = ["EBreak",12];
hscript.Expr.EBreak.toString = $estr;
hscript.Expr.EBreak.__enum__ = hscript.Expr;
hscript.Expr.EContinue = ["EContinue",13];
hscript.Expr.EContinue.toString = $estr;
hscript.Expr.EContinue.__enum__ = hscript.Expr;
hscript.Expr.EFunction = function(args,e,name,ret) { var $x = ["EFunction",14,args,e,name,ret]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EReturn = function(e) { var $x = ["EReturn",15,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EArray = function(e,index) { var $x = ["EArray",16,e,index]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EArrayDecl = function(e) { var $x = ["EArrayDecl",17,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.ENew = function(cl,params) { var $x = ["ENew",18,cl,params]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EThrow = function(e) { var $x = ["EThrow",19,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.ETry = function(e,v,t,ecatch) { var $x = ["ETry",20,e,v,t,ecatch]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EObject = function(fl) { var $x = ["EObject",21,fl]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.ETernary = function(cond,e1,e2) { var $x = ["ETernary",22,cond,e1,e2]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.ESwitch = function(e,cases,defaultExpr) { var $x = ["ESwitch",23,e,cases,defaultExpr]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.CType = $hxClasses["hscript.CType"] = { __ename__ : ["hscript","CType"], __constructs__ : ["CTPath","CTFun","CTAnon","CTParent"] };
hscript.CType.CTPath = function(path,params) { var $x = ["CTPath",0,path,params]; $x.__enum__ = hscript.CType; $x.toString = $estr; return $x; };
hscript.CType.CTFun = function(args,ret) { var $x = ["CTFun",1,args,ret]; $x.__enum__ = hscript.CType; $x.toString = $estr; return $x; };
hscript.CType.CTAnon = function(fields) { var $x = ["CTAnon",2,fields]; $x.__enum__ = hscript.CType; $x.toString = $estr; return $x; };
hscript.CType.CTParent = function(t) { var $x = ["CTParent",3,t]; $x.__enum__ = hscript.CType; $x.toString = $estr; return $x; };
hscript.Error = $hxClasses["hscript.Error"] = { __ename__ : ["hscript","Error"], __constructs__ : ["EInvalidChar","EUnexpected","EUnterminatedString","EUnterminatedComment","EUnknownVariable","EInvalidIterator","EInvalidOp","EInvalidAccess"] };
hscript.Error.EInvalidChar = function(c) { var $x = ["EInvalidChar",0,c]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript.Error.EUnexpected = function(s) { var $x = ["EUnexpected",1,s]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript.Error.EUnterminatedString = ["EUnterminatedString",2];
hscript.Error.EUnterminatedString.toString = $estr;
hscript.Error.EUnterminatedString.__enum__ = hscript.Error;
hscript.Error.EUnterminatedComment = ["EUnterminatedComment",3];
hscript.Error.EUnterminatedComment.toString = $estr;
hscript.Error.EUnterminatedComment.__enum__ = hscript.Error;
hscript.Error.EUnknownVariable = function(v) { var $x = ["EUnknownVariable",4,v]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript.Error.EInvalidIterator = function(v) { var $x = ["EInvalidIterator",5,v]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript.Error.EInvalidOp = function(op) { var $x = ["EInvalidOp",6,op]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript.Error.EInvalidAccess = function(f) { var $x = ["EInvalidAccess",7,f]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript._Interp = {};
hscript._Interp.Stop = $hxClasses["hscript._Interp.Stop"] = { __ename__ : ["hscript","_Interp","Stop"], __constructs__ : ["SBreak","SContinue","SReturn"] };
hscript._Interp.Stop.SBreak = ["SBreak",0];
hscript._Interp.Stop.SBreak.toString = $estr;
hscript._Interp.Stop.SBreak.__enum__ = hscript._Interp.Stop;
hscript._Interp.Stop.SContinue = ["SContinue",1];
hscript._Interp.Stop.SContinue.toString = $estr;
hscript._Interp.Stop.SContinue.__enum__ = hscript._Interp.Stop;
hscript._Interp.Stop.SReturn = function(v) { var $x = ["SReturn",2,v]; $x.__enum__ = hscript._Interp.Stop; $x.toString = $estr; return $x; };
hscript.Token = $hxClasses["hscript.Token"] = { __ename__ : ["hscript","Token"], __constructs__ : ["TEof","TConst","TId","TOp","TPOpen","TPClose","TBrOpen","TBrClose","TDot","TComma","TSemicolon","TBkOpen","TBkClose","TQuestion","TDoubleDot"] };
hscript.Token.TEof = ["TEof",0];
hscript.Token.TEof.toString = $estr;
hscript.Token.TEof.__enum__ = hscript.Token;
hscript.Token.TConst = function(c) { var $x = ["TConst",1,c]; $x.__enum__ = hscript.Token; $x.toString = $estr; return $x; };
hscript.Token.TId = function(s) { var $x = ["TId",2,s]; $x.__enum__ = hscript.Token; $x.toString = $estr; return $x; };
hscript.Token.TOp = function(s) { var $x = ["TOp",3,s]; $x.__enum__ = hscript.Token; $x.toString = $estr; return $x; };
hscript.Token.TPOpen = ["TPOpen",4];
hscript.Token.TPOpen.toString = $estr;
hscript.Token.TPOpen.__enum__ = hscript.Token;
hscript.Token.TPClose = ["TPClose",5];
hscript.Token.TPClose.toString = $estr;
hscript.Token.TPClose.__enum__ = hscript.Token;
hscript.Token.TBrOpen = ["TBrOpen",6];
hscript.Token.TBrOpen.toString = $estr;
hscript.Token.TBrOpen.__enum__ = hscript.Token;
hscript.Token.TBrClose = ["TBrClose",7];
hscript.Token.TBrClose.toString = $estr;
hscript.Token.TBrClose.__enum__ = hscript.Token;
hscript.Token.TDot = ["TDot",8];
hscript.Token.TDot.toString = $estr;
hscript.Token.TDot.__enum__ = hscript.Token;
hscript.Token.TComma = ["TComma",9];
hscript.Token.TComma.toString = $estr;
hscript.Token.TComma.__enum__ = hscript.Token;
hscript.Token.TSemicolon = ["TSemicolon",10];
hscript.Token.TSemicolon.toString = $estr;
hscript.Token.TSemicolon.__enum__ = hscript.Token;
hscript.Token.TBkOpen = ["TBkOpen",11];
hscript.Token.TBkOpen.toString = $estr;
hscript.Token.TBkOpen.__enum__ = hscript.Token;
hscript.Token.TBkClose = ["TBkClose",12];
hscript.Token.TBkClose.toString = $estr;
hscript.Token.TBkClose.__enum__ = hscript.Token;
hscript.Token.TQuestion = ["TQuestion",13];
hscript.Token.TQuestion.toString = $estr;
hscript.Token.TQuestion.__enum__ = hscript.Token;
hscript.Token.TDoubleDot = ["TDoubleDot",14];
hscript.Token.TDoubleDot.toString = $estr;
hscript.Token.TDoubleDot.__enum__ = hscript.Token;
hscript.Parser = function() {
	this.uid = 0;
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^="]];
	this.opPriority = new haxe.ds.StringMap();
	this.opRightAssoc = new haxe.ds.StringMap();
	this.unops = new haxe.ds.StringMap();
	var _g1 = 0;
	var _g = priorities.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g2 = 0;
		var _g3 = priorities[i];
		while(_g2 < _g3.length) {
			var x = _g3[_g2];
			++_g2;
			this.opPriority.set(x,i);
			if(i == 9) this.opRightAssoc.set(x,true);
		}
	}
	var _g4 = 0;
	var _g11 = ["!","++","--","-","~"];
	while(_g4 < _g11.length) {
		var x1 = _g11[_g4];
		++_g4;
		this.unops.set(x1,x1 == "++" || x1 == "--");
	}
};
$hxClasses["hscript.Parser"] = hscript.Parser;
hscript.Parser.__name__ = ["hscript","Parser"];
hscript.Parser.prototype = {
	error: function(err,pmin,pmax) {
		throw err;
	}
	,invalidChar: function(c) {
		this.error(hscript.Error.EInvalidChar(c),0,0);
	}
	,parseString: function(s) {
		this.line = 1;
		this.uid = 0;
		return this.parse(new haxe.io.StringInput(s));
	}
	,parse: function(s) {
		this.tokens = new haxe.ds.GenericStack();
		this["char"] = -1;
		this.input = s;
		this.ops = new Array();
		this.idents = new Array();
		var _g1 = 0;
		var _g = this.opChars.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g11 = 0;
		var _g2 = this.identChars.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.idents[HxOverrides.cca(this.identChars,i1)] = true;
		}
		var a = new Array();
		while(true) {
			var tk = this.token();
			if(tk == hscript.Token.TEof) break;
			this.tokens.add(tk);
			a.push(this.parseFullExpr());
		}
		if(a.length == 1) return a[0]; else return this.mk(hscript.Expr.EBlock(a),0,null);
	}
	,unexpected: function(tk) {
		this.error(hscript.Error.EUnexpected(this.tokenString(tk)),0,0);
		return null;
	}
	,push: function(tk) {
		this.tokens.add(tk);
	}
	,ensure: function(tk) {
		var t = this.token();
		if(t != tk) this.unexpected(t);
	}
	,expr: function(e) {
		return e;
	}
	,pmin: function(e) {
		return 0;
	}
	,pmax: function(e) {
		return 0;
	}
	,mk: function(e,pmin,pmax) {
		return e;
	}
	,isBlock: function(e) {
		switch(e[1]) {
		case 4:case 21:case 23:
			return true;
		case 14:
			var e1 = e[3];
			return this.isBlock(e1);
		case 2:
			var e2 = e[4];
			return e2 != null && this.isBlock(e2);
		case 9:
			var e21 = e[4];
			var e11 = e[3];
			if(e21 != null) return this.isBlock(e21); else return this.isBlock(e11);
			break;
		case 6:
			var e3 = e[4];
			return this.isBlock(e3);
		case 7:
			var e4 = e[4];
			var prefix = e[3];
			return !prefix && this.isBlock(e4);
		case 10:
			var e5 = e[3];
			return this.isBlock(e5);
		case 11:
			var e6 = e[4];
			return this.isBlock(e6);
		case 15:
			var e7 = e[2];
			return e7 != null && this.isBlock(e7);
		default:
			return false;
		}
	}
	,parseFullExpr: function() {
		var e = this.parseExpr();
		var tk = this.token();
		if(tk != hscript.Token.TSemicolon && tk != hscript.Token.TEof) {
			if(this.isBlock(e)) this.tokens.add(tk); else this.unexpected(tk);
		}
		return e;
	}
	,parseObject: function(p1) {
		var fl = new Array();
		try {
			while(true) {
				var tk = this.token();
				var id = null;
				switch(tk[1]) {
				case 2:
					var i = tk[2];
					id = i;
					break;
				case 1:
					var c = tk[2];
					if(!this.allowJSON) this.unexpected(tk);
					switch(c[1]) {
					case 2:
						var s = c[2];
						id = s;
						break;
					default:
						this.unexpected(tk);
					}
					break;
				case 7:
					throw "__break__";
					break;
				default:
					this.unexpected(tk);
				}
				this.ensure(hscript.Token.TDoubleDot);
				fl.push({ name : id, e : this.parseExpr()});
				tk = this.token();
				switch(tk[1]) {
				case 7:
					throw "__break__";
					break;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return this.parseExprNext(this.mk(hscript.Expr.EObject(fl),p1,null));
	}
	,parseExpr: function() {
		var tk = this.token();
		switch(tk[1]) {
		case 2:
			var id = tk[2];
			var e = this.parseStructure(id);
			if(e == null) e = this.mk(hscript.Expr.EIdent(id),null,null);
			return this.parseExprNext(e);
		case 1:
			var c = tk[2];
			return this.parseExprNext(this.mk(hscript.Expr.EConst(c),null,null));
		case 4:
			var e1 = this.parseExpr();
			this.ensure(hscript.Token.TPClose);
			return this.parseExprNext(this.mk(hscript.Expr.EParent(e1),0,0));
		case 6:
			tk = this.token();
			switch(tk[1]) {
			case 7:
				return this.parseExprNext(this.mk(hscript.Expr.EObject([]),0,null));
			case 2:
				var tk2 = this.token();
				this.tokens.add(tk2);
				this.tokens.add(tk);
				switch(tk2[1]) {
				case 14:
					return this.parseExprNext(this.parseObject(0));
				default:
				}
				break;
			case 1:
				var c1 = tk[2];
				if(this.allowJSON) switch(c1[1]) {
				case 2:
					var tk21 = this.token();
					this.tokens.add(tk21);
					this.tokens.add(tk);
					switch(tk21[1]) {
					case 14:
						return this.parseExprNext(this.parseObject(0));
					default:
					}
					break;
				default:
					this.tokens.add(tk);
				} else this.tokens.add(tk);
				break;
			default:
				this.tokens.add(tk);
			}
			var a = new Array();
			while(true) {
				a.push(this.parseFullExpr());
				tk = this.token();
				if(tk == hscript.Token.TBrClose) break;
				this.tokens.add(tk);
			}
			return this.mk(hscript.Expr.EBlock(a),0,null);
		case 3:
			var op = tk[2];
			if(this.unops.exists(op)) return this.makeUnop(op,this.parseExpr());
			return this.unexpected(tk);
		case 11:
			var a1 = new Array();
			tk = this.token();
			while(tk != hscript.Token.TBkClose) {
				this.tokens.add(tk);
				a1.push(this.parseExpr());
				tk = this.token();
				if(tk == hscript.Token.TComma) tk = this.token();
			}
			if(a1.length == 1) {
				var _g = a1[0];
				switch(_g[1]) {
				case 11:case 10:
					var tmp = "__a_" + this.uid++;
					var e2 = this.mk(hscript.Expr.EBlock([this.mk(hscript.Expr.EVar(tmp,null,this.mk(hscript.Expr.EArrayDecl([]),0,null)),0,null),this.mapCompr(tmp,a1[0]),this.mk(hscript.Expr.EIdent(tmp),0,null)]),0,null);
					return this.parseExprNext(e2);
				default:
				}
			}
			return this.parseExprNext(this.mk(hscript.Expr.EArrayDecl(a1),0,null));
		default:
			return this.unexpected(tk);
		}
	}
	,mapCompr: function(tmp,e) {
		var edef;
		switch(e[1]) {
		case 11:
			var e2 = e[4];
			var it = e[3];
			var v = e[2];
			edef = hscript.Expr.EFor(v,it,this.mapCompr(tmp,e2));
			break;
		case 10:
			var e21 = e[3];
			var cond = e[2];
			edef = hscript.Expr.EWhile(cond,this.mapCompr(tmp,e21));
			break;
		case 9:
			var e22 = e[4];
			var e1 = e[3];
			var cond1 = e[2];
			if(e22 == null) edef = hscript.Expr.EIf(cond1,this.mapCompr(tmp,e1),null); else edef = hscript.Expr.ECall(this.mk(hscript.Expr.EField(this.mk(hscript.Expr.EIdent(tmp),0,0),"push"),0,0),[e]);
			break;
		case 4:
			switch(e[2].length) {
			case 1:
				var e3 = e[2][0];
				edef = hscript.Expr.EBlock([this.mapCompr(tmp,e3)]);
				break;
			default:
				edef = hscript.Expr.ECall(this.mk(hscript.Expr.EField(this.mk(hscript.Expr.EIdent(tmp),0,0),"push"),0,0),[e]);
			}
			break;
		case 3:
			var e23 = e[2];
			edef = hscript.Expr.EParent(this.mapCompr(tmp,e23));
			break;
		default:
			edef = hscript.Expr.ECall(this.mk(hscript.Expr.EField(this.mk(hscript.Expr.EIdent(tmp),0,0),"push"),0,0),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		switch(e[1]) {
		case 6:
			var e2 = e[4];
			var e1 = e[3];
			var bop = e[2];
			return this.mk(hscript.Expr.EBinop(bop,this.makeUnop(op,e1),e2),0,0);
		case 22:
			var e3 = e[4];
			var e21 = e[3];
			var e11 = e[2];
			return this.mk(hscript.Expr.ETernary(this.makeUnop(op,e11),e21,e3),0,0);
		default:
			return this.mk(hscript.Expr.EUnop(op,true,e),0,0);
		}
	}
	,makeBinop: function(op,e1,e) {
		switch(e[1]) {
		case 6:
			var e3 = e[4];
			var e2 = e[3];
			var op2 = e[2];
			if(this.opPriority.get(op) <= this.opPriority.get(op2) && !this.opRightAssoc.exists(op)) return this.mk(hscript.Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3),0,0); else return this.mk(hscript.Expr.EBinop(op,e1,e),0,0);
			break;
		case 22:
			var e4 = e[4];
			var e31 = e[3];
			var e21 = e[2];
			if(this.opRightAssoc.exists(op)) return this.mk(hscript.Expr.EBinop(op,e1,e),0,0); else return this.mk(hscript.Expr.ETernary(this.makeBinop(op,e1,e21),e31,e4),0,0);
			break;
		default:
			return this.mk(hscript.Expr.EBinop(op,e1,e),0,0);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "if":
			var cond = this.parseExpr();
			var e1 = this.parseExpr();
			var e2 = null;
			var semic = false;
			var tk = this.token();
			if(tk == hscript.Token.TSemicolon) {
				semic = true;
				tk = this.token();
			}
			if(Type.enumEq(tk,hscript.Token.TId("else"))) e2 = this.parseExpr(); else {
				this.tokens.add(tk);
				if(semic) this.tokens.add(hscript.Token.TSemicolon);
			}
			return this.mk(hscript.Expr.EIf(cond,e1,e2),0,e2 == null?0:0);
		case "var":
			var tk1 = this.token();
			var ident = null;
			switch(tk1[1]) {
			case 2:
				var id1 = tk1[2];
				ident = id1;
				break;
			default:
				this.unexpected(tk1);
			}
			tk1 = this.token();
			var t = null;
			if(tk1 == hscript.Token.TDoubleDot && this.allowTypes) {
				t = this.parseType();
				tk1 = this.token();
			}
			var e = null;
			if(Type.enumEq(tk1,hscript.Token.TOp("="))) e = this.parseExpr(); else this.tokens.add(tk1);
			return this.mk(hscript.Expr.EVar(ident,t,e),0,e == null?0:0);
		case "while":
			var econd = this.parseExpr();
			var e3 = this.parseExpr();
			return this.mk(hscript.Expr.EWhile(econd,e3),0,0);
		case "for":
			this.ensure(hscript.Token.TPOpen);
			var tk2 = this.token();
			var vname = null;
			switch(tk2[1]) {
			case 2:
				var id2 = tk2[2];
				vname = id2;
				break;
			default:
				this.unexpected(tk2);
			}
			tk2 = this.token();
			if(!Type.enumEq(tk2,hscript.Token.TId("in"))) this.unexpected(tk2);
			var eiter = this.parseExpr();
			this.ensure(hscript.Token.TPClose);
			var e4 = this.parseExpr();
			return this.mk(hscript.Expr.EFor(vname,eiter,e4),0,0);
		case "break":
			return hscript.Expr.EBreak;
		case "continue":
			return hscript.Expr.EContinue;
		case "else":
			return this.unexpected(hscript.Token.TId(id));
		case "function":
			var tk3 = this.token();
			var name = null;
			switch(tk3[1]) {
			case 2:
				var id3 = tk3[2];
				name = id3;
				break;
			default:
				this.tokens.add(tk3);
			}
			this.ensure(hscript.Token.TPOpen);
			var args = new Array();
			tk3 = this.token();
			if(tk3 != hscript.Token.TPClose) {
				var done = false;
				while(!done) {
					var name1 = null;
					var opt = false;
					switch(tk3[1]) {
					case 13:
						opt = true;
						tk3 = this.token();
						break;
					default:
					}
					switch(tk3[1]) {
					case 2:
						var id4 = tk3[2];
						name1 = id4;
						break;
					default:
						this.unexpected(tk3);
					}
					tk3 = this.token();
					var arg = { name : name1};
					args.push(arg);
					if(opt) arg.opt = true;
					if(tk3 == hscript.Token.TDoubleDot && this.allowTypes) {
						arg.t = this.parseType();
						tk3 = this.token();
					}
					switch(tk3[1]) {
					case 9:
						tk3 = this.token();
						break;
					case 5:
						done = true;
						break;
					default:
						this.unexpected(tk3);
					}
				}
			}
			var ret = null;
			if(this.allowTypes) {
				tk3 = this.token();
				if(tk3 != hscript.Token.TDoubleDot) this.tokens.add(tk3); else ret = this.parseType();
			}
			var body = this.parseExpr();
			return this.mk(hscript.Expr.EFunction(args,body,name,ret),0,0);
		case "return":
			var tk4 = this.token();
			this.tokens.add(tk4);
			var e5;
			if(tk4 == hscript.Token.TSemicolon) e5 = null; else e5 = this.parseExpr();
			return this.mk(hscript.Expr.EReturn(e5),0,e5 == null?0:0);
		case "new":
			var a = new Array();
			var tk5 = this.token();
			switch(tk5[1]) {
			case 2:
				var id5 = tk5[2];
				a.push(id5);
				break;
			default:
				this.unexpected(tk5);
			}
			var next = true;
			while(next) {
				tk5 = this.token();
				switch(tk5[1]) {
				case 8:
					tk5 = this.token();
					switch(tk5[1]) {
					case 2:
						var id6 = tk5[2];
						a.push(id6);
						break;
					default:
						this.unexpected(tk5);
					}
					break;
				case 4:
					next = false;
					break;
				default:
					this.unexpected(tk5);
				}
			}
			var args1 = this.parseExprList(hscript.Token.TPClose);
			return this.mk(hscript.Expr.ENew(a.join("."),args1),0,null);
		case "throw":
			var e6 = this.parseExpr();
			return this.mk(hscript.Expr.EThrow(e6),0,0);
		case "try":
			var e7 = this.parseExpr();
			var tk6 = this.token();
			if(!Type.enumEq(tk6,hscript.Token.TId("catch"))) this.unexpected(tk6);
			this.ensure(hscript.Token.TPOpen);
			tk6 = this.token();
			var vname1;
			switch(tk6[1]) {
			case 2:
				var id7 = tk6[2];
				vname1 = id7;
				break;
			default:
				vname1 = this.unexpected(tk6);
			}
			this.ensure(hscript.Token.TDoubleDot);
			var t1 = null;
			if(this.allowTypes) t1 = this.parseType(); else {
				tk6 = this.token();
				if(!Type.enumEq(tk6,hscript.Token.TId("Dynamic"))) this.unexpected(tk6);
			}
			this.ensure(hscript.Token.TPClose);
			var ec = this.parseExpr();
			return this.mk(hscript.Expr.ETry(e7,vname1,t1,ec),0,0);
		case "switch":
			var e8 = this.parseExpr();
			var def = null;
			var cases = [];
			this.ensure(hscript.Token.TBrOpen);
			try {
				while(true) {
					var tk7 = this.token();
					switch(tk7[1]) {
					case 2:
						switch(tk7[2]) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							try {
								while(true) {
									var e9 = this.parseExpr();
									c.values.push(e9);
									tk7 = this.token();
									switch(tk7[1]) {
									case 9:
										break;
									case 14:
										throw "__break__";
										break;
									default:
										this.unexpected(tk7);
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							var exprs = [];
							try {
								while(true) {
									tk7 = this.token();
									this.tokens.add(tk7);
									switch(tk7[1]) {
									case 2:
										switch(tk7[2]) {
										case "case":case "default":
											throw "__break__";
											break;
										default:
											exprs.push(this.parseFullExpr());
										}
										break;
									case 7:
										throw "__break__";
										break;
									default:
										exprs.push(this.parseFullExpr());
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							if(exprs.length == 1) c.expr = exprs[0]; else if(exprs.length == 0) c.expr = this.mk(hscript.Expr.EBlock([]),0,0); else c.expr = this.mk(hscript.Expr.EBlock(exprs),0,0);
							break;
						case "default":
							if(def != null) this.unexpected(tk7);
							this.ensure(hscript.Token.TDoubleDot);
							var exprs1 = [];
							try {
								while(true) {
									tk7 = this.token();
									this.tokens.add(tk7);
									switch(tk7[1]) {
									case 2:
										switch(tk7[2]) {
										case "case":case "default":
											throw "__break__";
											break;
										default:
											exprs1.push(this.parseFullExpr());
										}
										break;
									case 7:
										throw "__break__";
										break;
									default:
										exprs1.push(this.parseFullExpr());
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							if(exprs1.length == 1) def = exprs1[0]; else if(exprs1.length == 0) def = this.mk(hscript.Expr.EBlock([]),0,0); else def = this.mk(hscript.Expr.EBlock(exprs1),0,0);
							break;
						default:
							this.unexpected(tk7);
						}
						break;
					case 7:
						throw "__break__";
						break;
					default:
						this.unexpected(tk7);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			return this.mk(hscript.Expr.ESwitch(e8,cases,def),0,0);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		switch(tk[1]) {
		case 3:
			var op = tk[2];
			if(this.unops.get(op)) {
				if(this.isBlock(e1) || (function($this) {
					var $r;
					switch(e1[1]) {
					case 3:
						$r = true;
						break;
					default:
						$r = false;
					}
					return $r;
				}(this))) {
					this.tokens.add(tk);
					return e1;
				}
				return this.parseExprNext(this.mk(hscript.Expr.EUnop(op,false,e1),0,null));
			}
			return this.makeBinop(op,e1,this.parseExpr());
		case 8:
			tk = this.token();
			var field = null;
			switch(tk[1]) {
			case 2:
				var id = tk[2];
				field = id;
				break;
			default:
				this.unexpected(tk);
			}
			return this.parseExprNext(this.mk(hscript.Expr.EField(e1,field),0,null));
		case 4:
			return this.parseExprNext(this.mk(hscript.Expr.ECall(e1,this.parseExprList(hscript.Token.TPClose)),0,null));
		case 11:
			var e2 = this.parseExpr();
			this.ensure(hscript.Token.TBkClose);
			return this.parseExprNext(this.mk(hscript.Expr.EArray(e1,e2),0,null));
		case 13:
			var e21 = this.parseExpr();
			this.ensure(hscript.Token.TDoubleDot);
			var e3 = this.parseExpr();
			return this.mk(hscript.Expr.ETernary(e1,e21,e3),0,0);
		default:
			this.tokens.add(tk);
			return e1;
		}
	}
	,parseType: function() {
		var t = this.token();
		switch(t[1]) {
		case 2:
			var v = t[2];
			var path = [v];
			while(true) {
				t = this.token();
				if(t != hscript.Token.TDot) break;
				t = this.token();
				switch(t[1]) {
				case 2:
					var v1 = t[2];
					path.push(v1);
					break;
				default:
					this.unexpected(t);
				}
			}
			var params = null;
			switch(t[1]) {
			case 3:
				var op = t[2];
				if(op == "<") {
					params = [];
					try {
						while(true) {
							params.push(this.parseType());
							t = this.token();
							switch(t[1]) {
							case 9:
								continue;
								break;
							case 3:
								var op1 = t[2];
								if(op1 == ">") throw "__break__";
								break;
							default:
							}
							this.unexpected(t);
						}
					} catch( e ) { if( e != "__break__" ) throw e; }
				}
				break;
			default:
				this.tokens.add(t);
			}
			return this.parseTypeNext(hscript.CType.CTPath(path,params));
		case 4:
			var t1 = this.parseType();
			this.ensure(hscript.Token.TPClose);
			return this.parseTypeNext(hscript.CType.CTParent(t1));
		case 6:
			var fields = [];
			try {
				while(true) {
					t = this.token();
					switch(t[1]) {
					case 7:
						throw "__break__";
						break;
					case 2:
						var name = t[2];
						this.ensure(hscript.Token.TDoubleDot);
						fields.push({ name : name, t : this.parseType()});
						t = this.token();
						switch(t[1]) {
						case 9:
							break;
						case 7:
							throw "__break__";
							break;
						default:
							this.unexpected(t);
						}
						break;
					default:
						this.unexpected(t);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			return this.parseTypeNext(hscript.CType.CTAnon(fields));
		default:
			return this.unexpected(t);
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		switch(tk[1]) {
		case 3:
			var op = tk[2];
			if(op != "->") {
				this.tokens.add(tk);
				return t;
			}
			break;
		default:
			this.tokens.add(tk);
			return t;
		}
		var t2 = this.parseType();
		switch(t2[1]) {
		case 1:
			var args = t2[2];
			args.unshift(t);
			return t2;
		default:
			return hscript.CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = new Array();
		var tk = this.token();
		if(tk == etk) return args;
		this.tokens.add(tk);
		try {
			while(true) {
				args.push(this.parseExpr());
				tk = this.token();
				switch(tk[1]) {
				case 9:
					break;
				default:
					if(tk == etk) throw "__break__";
					this.unexpected(tk);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return args;
	}
	,incPos: function() {
	}
	,readChar: function() {
		try {
			return this.input.readByte();
		} catch( e ) {
			return 0;
		}
	}
	,readString: function(until) {
		var c = 0;
		var b = new haxe.io.BytesOutput();
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			try {
				c = s.readByte();
			} catch( e ) {
				this.line = old;
				throw hscript.Error.EUnterminatedString;
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 110:
					b.writeByte(10);
					break;
				case 114:
					b.writeByte(13);
					break;
				case 116:
					b.writeByte(9);
					break;
				case 39:case 34:case 92:
					b.writeByte(c);
					break;
				case 47:
					if(this.allowJSON) b.writeByte(c); else this.invalidChar(c);
					break;
				case 117:
					if(!this.allowJSON) throw this.invalidChar(c);
					var code = null;
					try {
						code = s.readString(4);
					} catch( e1 ) {
						this.line = old;
						throw hscript.Error.EUnterminatedString;
					}
					var k = 0;
					var _g = 0;
					while(_g < 4) {
						var i = _g++;
						k <<= 4;
						var $char = HxOverrides.cca(code,i);
						switch($char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += $char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += $char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += $char - 87;
							break;
						default:
							this.invalidChar($char);
						}
					}
					if(k <= 127) b.writeByte(k); else if(k <= 2047) {
						b.writeByte(192 | k >> 6);
						b.writeByte(128 | k & 63);
					} else {
						b.writeByte(224 | k >> 12);
						b.writeByte(128 | k >> 6 & 63);
						b.writeByte(128 | k & 63);
					}
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) esc = true; else if(c == until) break; else {
				if(c == 10) this.line++;
				b.writeByte(c);
			}
		}
		return b.getBytes().toString();
	}
	,token: function() {
		if(!(this.tokens.head == null)) return this.tokens.pop();
		var $char;
		if(this["char"] < 0) $char = this.readChar(); else {
			$char = this["char"];
			this["char"] = -1;
		}
		while(true) {
			switch($char) {
			case 0:
				return hscript.Token.TEof;
			case 32:case 9:case 13:
				break;
			case 10:
				this.line++;
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n = ($char - 48) * 1.0;
				var exp = 0.;
				while(true) {
					$char = this.readChar();
					exp *= 10;
					switch($char) {
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n = n * 10 + ($char - 48);
						break;
					case 46:
						if(exp > 0) {
							if(exp == 10 && this.readChar() == 46) {
								this.push(hscript.Token.TOp("..."));
								var i = n | 0;
								return hscript.Token.TConst(i == n?hscript.Const.CInt(i):hscript.Const.CFloat(n));
							}
							this.invalidChar($char);
						}
						exp = 1.;
						break;
					case 120:
						if(n > 0 || exp > 0) this.invalidChar($char);
						var n1 = 0;
						while(true) {
							$char = this.readChar();
							switch($char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n1 = (n1 << 4) + $char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n1 = (n1 << 4) + ($char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n1 = (n1 << 4) + ($char - 87);
								break;
							default:
								this["char"] = $char;
								return hscript.Token.TConst(hscript.Const.CInt(n1));
							}
						}
						break;
					default:
						this["char"] = $char;
						var i1 = n | 0;
						return hscript.Token.TConst(exp > 0?hscript.Const.CFloat(n * 10 / exp):i1 == n?hscript.Const.CInt(i1):hscript.Const.CFloat(n));
					}
				}
				break;
			case 59:
				return hscript.Token.TSemicolon;
			case 40:
				return hscript.Token.TPOpen;
			case 41:
				return hscript.Token.TPClose;
			case 44:
				return hscript.Token.TComma;
			case 46:
				$char = this.readChar();
				switch($char) {
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n2 = $char - 48;
					var exp1 = 1;
					while(true) {
						$char = this.readChar();
						exp1 *= 10;
						switch($char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n2 = n2 * 10 + ($char - 48);
							break;
						default:
							this["char"] = $char;
							return hscript.Token.TConst(hscript.Const.CFloat(n2 / exp1));
						}
					}
					break;
				case 46:
					$char = this.readChar();
					if($char != 46) this.invalidChar($char);
					return hscript.Token.TOp("...");
				default:
					this["char"] = $char;
					return hscript.Token.TDot;
				}
				break;
			case 123:
				return hscript.Token.TBrOpen;
			case 125:
				return hscript.Token.TBrClose;
			case 91:
				return hscript.Token.TBkOpen;
			case 93:
				return hscript.Token.TBkClose;
			case 39:
				return hscript.Token.TConst(hscript.Const.CString(this.readString(39)));
			case 34:
				return hscript.Token.TConst(hscript.Const.CString(this.readString(34)));
			case 63:
				return hscript.Token.TQuestion;
			case 58:
				return hscript.Token.TDoubleDot;
			default:
				if(this.ops[$char]) {
					var op = String.fromCharCode($char);
					while(true) {
						$char = this.readChar();
						if(!this.ops[$char]) {
							if(HxOverrides.cca(op,0) == 47) return this.tokenComment(op,$char);
							this["char"] = $char;
							return hscript.Token.TOp(op);
						}
						op += String.fromCharCode($char);
					}
				}
				if(this.idents[$char]) {
					var id = String.fromCharCode($char);
					while(true) {
						$char = this.readChar();
						if(!this.idents[$char]) {
							this["char"] = $char;
							return hscript.Token.TId(id);
						}
						id += String.fromCharCode($char);
					}
				}
				this.invalidChar($char);
			}
			$char = this.readChar();
		}
		return null;
	}
	,tokenComment: function(op,$char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			try {
				while($char != 10 && $char != 13) $char = s.readByte();
				this["char"] = $char;
			} catch( e ) {
			}
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			try {
				while(true) {
					while($char != 42) {
						if($char == 10) this.line++;
						$char = s.readByte();
					}
					$char = s.readByte();
					if($char == 47) break;
				}
			} catch( e1 ) {
				this.line = old;
				throw hscript.Error.EUnterminatedComment;
			}
			return this.token();
		}
		this["char"] = $char;
		return hscript.Token.TOp(op);
	}
	,constString: function(c) {
		switch(c[1]) {
		case 0:
			var v = c[2];
			if(v == null) return "null"; else return "" + v;
			break;
		case 1:
			var f = c[2];
			if(f == null) return "null"; else return "" + f;
			break;
		case 2:
			var s = c[2];
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t[1]) {
		case 0:
			return "<eof>";
		case 1:
			var c = t[2];
			return this.constString(c);
		case 2:
			var s = t[2];
			return s;
		case 3:
			var s1 = t[2];
			return s1;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		}
	}
	,__class__: hscript.Parser
};
var js = {};
js._Boot = {};
js._Boot.HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Object.prototype.hasOwnProperty.call(val,"name")) this.name = Reflect.field(val,"name"); else this.name = "Error";
	if(Object.prototype.hasOwnProperty.call(val,"message")) this.message = Reflect.field(val,"message"); else this.message = Std.string(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js._Boot.HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js._Boot.HaxeError;
js._Boot.HaxeError.__name__ = ["js","_Boot","HaxeError"];
js._Boot.HaxeError.__super__ = Error;
js._Boot.HaxeError.prototype = $extend(Error.prototype,{
	__class__: js._Boot.HaxeError
});
js.Boot = function() { };
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = ["js","Boot"];
js.Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js.Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js.Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js.Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js.Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js.Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js.Boot.isClass = function(o) {
	return o.__name__;
};
js.Boot.isEnum = function(e) {
	return e.__ename__;
};
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js.Boot.__nativeClassName(o);
		if(name != null) return js.Boot.__resolveNativeClass(name);
		return null;
	}
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
js.Boot.__nativeClassName = function(o) {
	var name = js.Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js.Boot.__isNativeObj = function(o) {
	return js.Boot.__nativeClassName(o) != null;
};
js.Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
lime.AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.image = new haxe.ds.StringMap();
};
$hxClasses["lime.AssetCache"] = lime.AssetCache;
lime.AssetCache.__name__ = ["lime","AssetCache"];
lime.AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.image = new haxe.ds.StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime.AssetCache
};
lime.Assets = function() { };
$hxClasses["lime.Assets"] = lime.Assets;
lime.Assets.__name__ = ["lime","Assets"];
lime.Assets.exists = function(id,type) {
	lime.Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime.Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.audio.exists(id)) {
		var audio = lime.Assets.cache.audio.get(id);
		if(lime.Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe.Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 115, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe.Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 121, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 127, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime.Assets.getBytes = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe.Log.trace("[Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 164, className : "lime.Assets", methodName : "getBytes"});
		} else haxe.Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 170, className : "lime.Assets", methodName : "getBytes"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 176, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.font.exists(id)) return lime.Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.font.set(id,font);
				return font;
			} else haxe.Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 227, className : "lime.Assets", methodName : "getFont"});
		} else haxe.Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "lime.Assets", methodName : "getFont"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 239, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime.Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.image.exists(id)) {
		var image = lime.Assets.cache.image.get(id);
		if(lime.Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.image.set(id,image1);
				return image1;
			} else haxe.Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 297, className : "lime.Assets", methodName : "getImage"});
		} else haxe.Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 303, className : "lime.Assets", methodName : "getImage"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 309, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime.Assets.libraries.get(name);
};
lime.Assets.getPath = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe.Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 426, className : "lime.Assets", methodName : "getPath"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 432, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime.Assets.getText = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe.Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 469, className : "lime.Assets", methodName : "getText"});
		} else haxe.Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 475, className : "lime.Assets", methodName : "getText"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 481, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime.Assets.initialize = function() {
	if(!lime.Assets.initialized) {
		lime.Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime.Assets.initialized = true;
	}
};
lime.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime.Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime.Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime.Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime.Assets.isValidAudio = function(buffer) {
	return buffer != null;
	return true;
};
lime.Assets.isValidImage = function(buffer) {
	return true;
};
lime.Assets.list = function(type) {
	lime.Assets.initialize();
	var items = [];
	var $it0 = lime.Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime.Assets.loadAudioBuffer = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.audio.exists(id)) {
		var audio = lime.Assets.cache.audio.get(id);
		if(lime.Assets.isValidAudio(audio)) {
			handler(audio);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(useCache && lime.Assets.cache.enabled) library.loadAudioBuffer(symbolName,function(audio1) {
				var value = audio1;
				lime.Assets.cache.audio.set(id,value);
				handler(audio1);
			}); else library.loadAudioBuffer(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 666, className : "lime.Assets", methodName : "loadAudioBuffer"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 672, className : "lime.Assets", methodName : "loadAudioBuffer"});
	handler(null);
};
lime.Assets.loadBytes = function(id,handler) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 702, className : "lime.Assets", methodName : "loadBytes"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 708, className : "lime.Assets", methodName : "loadBytes"});
	handler(null);
};
lime.Assets.loadImage = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.image.exists(id)) {
		var image = lime.Assets.cache.image.get(id);
		if(lime.Assets.isValidImage(image)) {
			handler(image);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(useCache && lime.Assets.cache.enabled) library.loadImage(symbolName,function(image1) {
				lime.Assets.cache.image.set(id,image1);
				handler(image1);
			}); else library.loadImage(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 765, className : "lime.Assets", methodName : "loadImage"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 771, className : "lime.Assets", methodName : "loadImage"});
	handler(null);
};
lime.Assets.loadLibrary = function(name,handler) {
	lime.Assets.initialize();
	var data = lime.Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime.Assets.libraries.set(name,library);
		library.eventCallback = lime.Assets.library_onEvent;
		library.load(handler);
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + name + "\"",{ fileName : "Assets.hx", lineNumber : 800, className : "lime.Assets", methodName : "loadLibrary"});
};
lime.Assets.loadText = function(id,handler) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			library.loadText(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 891, className : "lime.Assets", methodName : "loadText"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 897, className : "lime.Assets", methodName : "loadText"});
	handler(null);
};
lime.Assets.registerLibrary = function(name,library) {
	if(lime.Assets.libraries.exists(name)) lime.Assets.unloadLibrary(name);
	if(library != null) library.eventCallback = lime.Assets.library_onEvent;
	lime.Assets.libraries.set(name,library);
};
lime.Assets.unloadLibrary = function(name) {
	lime.Assets.initialize();
	var library = lime.Assets.libraries.get(name);
	if(library != null) {
		lime.Assets.cache.clear(name + ":");
		library.eventCallback = null;
	}
	lime.Assets.libraries.remove(name);
};
lime.Assets.library_onEvent = function(library,type) {
	if(type == "change") lime.Assets.cache.clear();
};
lime._Assets = {};
lime._Assets.AssetType_Impl_ = function() { };
$hxClasses["lime._Assets.AssetType_Impl_"] = lime._Assets.AssetType_Impl_;
lime._Assets.AssetType_Impl_.__name__ = ["lime","_Assets","AssetType_Impl_"];
lime._backend = {};
lime._backend.html5 = {};
lime._backend.html5.HTML5Application = function(parent) {
	this.parent = parent;
	lime.audio.AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime._backend.html5.HTML5Application;
lime._backend.html5.HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime._backend.html5.HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		}
		return keyCode;
	}
	,create: function(config) {
		this.parent.config = config;
		if(config != null) {
			var $window = new lime.ui.Window(config);
			var renderer = new lime.graphics.Renderer($window);
			this.parent.addWindow($window);
			this.parent.addRenderer(renderer);
			this.parent.init(renderer.context);
		}
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
										   || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.cacheTime = new Date().getTime();
		this.handleUpdateEvent();
		return 0;
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				var listeners = this.parent.windows[0].onKeyDown.listeners;
				var repeat = this.parent.windows[0].onKeyDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](keyCode,modifier);
					if(!repeat[i]) {
						this.parent.windows[0].onKeyDown.remove(listeners[i]);
						length--;
					} else i++;
				}
				if(this.parent.windows[0].backend.getEnableTextEvents()) {
					var listeners1 = this.parent.windows[0].onTextInput.listeners;
					var repeat1 = this.parent.windows[0].onTextInput.repeat;
					var length1 = listeners1.length;
					var i1 = 0;
					while(i1 < length1) {
						listeners1[i1](String.fromCharCode(event.keyCode));
						if(!repeat1[i1]) {
							this.parent.windows[0].onTextInput.remove(listeners1[i1]);
							length1--;
						} else i1++;
					}
				}
			} else {
				var listeners2 = this.parent.windows[0].onKeyUp.listeners;
				var repeat2 = this.parent.windows[0].onKeyUp.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](keyCode,modifier);
					if(!repeat2[i2]) {
						this.parent.windows[0].onKeyUp.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
			}
		}
	}
	,handleUpdateEvent: function(__) {
		var currentTime = new Date().getTime();
		var deltaTime = currentTime - this.cacheTime;
		this.cacheTime = currentTime;
		var listeners = this.parent.onUpdate.listeners;
		var repeat = this.parent.onUpdate.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](deltaTime | 0);
			if(!repeat[i]) {
				this.parent.onUpdate.remove(listeners[i]);
				length--;
			} else i++;
		}
		if(this.parent.renderers[0] != null) {
			var listeners1 = this.parent.renderers[0].onRender.listeners;
			var repeat1 = this.parent.renderers[0].onRender.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.renderers[0].context);
				if(!repeat1[i1]) {
					this.parent.renderers[0].onRender.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			this.parent.renderers[0].flip();
		}
		window.requestAnimationFrame($bind(this,this.handleUpdateEvent));
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				var listeners = this.parent.windows[0].onWindowFocusIn.listeners;
				var repeat = this.parent.windows[0].onWindowFocusIn.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i]();
					if(!repeat[i]) {
						this.parent.windows[0].onWindowFocusIn.remove(listeners[i]);
						length--;
					} else i++;
				}
				var listeners1 = this.parent.windows[0].onWindowActivate.listeners;
				var repeat1 = this.parent.windows[0].onWindowActivate.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1]();
					if(!repeat1[i1]) {
						this.parent.windows[0].onWindowActivate.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "blur":
				var listeners2 = this.parent.windows[0].onWindowFocusOut.listeners;
				var repeat2 = this.parent.windows[0].onWindowFocusOut.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2]();
					if(!repeat2[i2]) {
						this.parent.windows[0].onWindowFocusOut.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				var listeners3 = this.parent.windows[0].onWindowDeactivate.listeners;
				var repeat3 = this.parent.windows[0].onWindowDeactivate.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3]();
					if(!repeat3[i3]) {
						this.parent.windows[0].onWindowDeactivate.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) {
					var listeners4 = this.parent.windows[0].onWindowResize.listeners;
					var repeat4 = this.parent.windows[0].onWindowResize.repeat;
					var length4 = listeners4.length;
					var i4 = 0;
					while(i4 < length4) {
						listeners4[i4](this.parent.windows[0].__width,this.parent.windows[0].__height);
						if(!repeat4[i4]) {
							this.parent.windows[0].onWindowResize.remove(listeners4[i4]);
							length4--;
						} else i4++;
					}
				}
				break;
			case "beforeunload":
				var listeners5 = this.parent.windows[0].onWindowClose.listeners;
				var repeat5 = this.parent.windows[0].onWindowClose.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5]();
					if(!repeat5[i5]) {
						this.parent.windows[0].onWindowClose.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
				break;
			}
		}
	}
	,__class__: lime._backend.html5.HTML5Application
};
lime._backend.html5.HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime._backend.html5.HTML5Mouse;
lime._backend.html5.HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime._backend.html5.HTML5Mouse.__cursor = null;
lime._backend.html5.HTML5Mouse.__hidden = null;
lime._backend.html5.HTML5Mouse.hide = function() {
	if(!lime._backend.html5.HTML5Mouse.__hidden) {
		lime._backend.html5.HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime.app.Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime._backend.html5.HTML5Mouse.show = function() {
	if(lime._backend.html5.HTML5Mouse.__hidden) {
		lime._backend.html5.HTML5Mouse.__hidden = false;
		var cacheValue = lime._backend.html5.HTML5Mouse.__cursor;
		lime._backend.html5.HTML5Mouse.__cursor = null;
		lime._backend.html5.HTML5Mouse.set_cursor(cacheValue);
	}
};
lime._backend.html5.HTML5Mouse.warp = function(x,y,window) {
};
lime._backend.html5.HTML5Mouse.get_cursor = function() {
	if(lime._backend.html5.HTML5Mouse.__cursor == null) return lime.ui.MouseCursor.DEFAULT;
	return lime._backend.html5.HTML5Mouse.__cursor;
};
lime._backend.html5.HTML5Mouse.set_cursor = function(value) {
	if(lime._backend.html5.HTML5Mouse.__cursor != value) {
		if(!lime._backend.html5.HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime.app.Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime._backend.html5.HTML5Mouse.__cursor = value;
	}
	return lime._backend.html5.HTML5Mouse.__cursor;
};
lime._backend.html5.HTML5Mouse.get_lock = function() {
	return false;
};
lime._backend.html5.HTML5Mouse.set_lock = function(value) {
	return value;
};
lime._backend.html5.HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime._backend.html5.HTML5Renderer;
lime._backend.html5.HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime._backend.html5.HTML5Renderer.prototype = {
	create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) this.parent.context = lime.graphics.RenderContext.DOM(this.parent.window.backend.div); else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) this.parent.context = lime.graphics.RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d")); else {
				lime.graphics.opengl.GL.context = webgl;
				this.parent.context = lime.graphics.RenderContext.OPENGL(lime.graphics.opengl.GL.context);
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			var listeners = this.parent.onRenderContextLost.listeners;
			var repeat = this.parent.onRenderContextLost.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i]();
				if(!repeat[i]) {
					this.parent.onRenderContextLost.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "webglcontextrestored":
			this.createContext();
			var listeners1 = this.parent.onRenderContextRestored.listeners;
			var repeat1 = this.parent.onRenderContextRestored.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.context);
				if(!repeat1[i1]) {
					this.parent.onRenderContextRestored.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime._backend.html5.HTML5Renderer
};
lime._backend.html5.HTML5Window = function(parent) {
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime._backend.html5.HTML5Window;
lime._backend.html5.HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime._backend.html5.HTML5Window.prototype = {
	close: function() {
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		if(js.Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				var listeners = this.parent.onMouseDown.listeners;
				var repeat = this.parent.onMouseDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](x,y,event.button);
					if(!repeat[i]) {
						this.parent.onMouseDown.remove(listeners[i]);
						length--;
					} else i++;
				}
				break;
			case "mouseenter":
				var listeners1 = this.parent.onWindowEnter.listeners;
				var repeat1 = this.parent.onWindowEnter.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1]();
					if(!repeat1[i1]) {
						this.parent.onWindowEnter.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "mouseleave":
				var listeners2 = this.parent.onWindowLeave.listeners;
				var repeat2 = this.parent.onWindowLeave.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2]();
					if(!repeat2[i2]) {
						this.parent.onWindowLeave.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				break;
			case "mouseup":
				var listeners3 = this.parent.onMouseUp.listeners;
				var repeat3 = this.parent.onMouseUp.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3](x,y,event.button);
					if(!repeat3[i3]) {
						this.parent.onMouseUp.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
				break;
			case "mousemove":
				var listeners4 = this.parent.onMouseMove.listeners;
				var repeat4 = this.parent.onMouseMove.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](x,y);
					if(!repeat4[i4]) {
						this.parent.onMouseMove.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
				break;
			default:
			}
		} else {
			var listeners5 = this.parent.onMouseWheel.listeners;
			var repeat5 = this.parent.onMouseWheel.repeat;
			var length5 = listeners5.length;
			var i5 = 0;
			while(i5 < length5) {
				listeners5[i5](event.deltaX,-event.deltaY);
				if(!repeat5[i5]) {
					this.parent.onMouseWheel.remove(listeners5[i5]);
					length5--;
				} else i5++;
			}
		}
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var touch = event.changedTouches[0];
		var id = touch.identifier;
		var x = 0.0;
		var y = 0.0;
		if(this.element != null) {
			if(this.canvas != null) {
				var rect = this.canvas.getBoundingClientRect();
				x = (touch.clientX - rect.left) * (this.parent.__width / rect.width);
				y = (touch.clientY - rect.top) * (this.parent.__height / rect.height);
			} else if(this.div != null) {
				var rect1 = this.div.getBoundingClientRect();
				x = touch.clientX - rect1.left;
				y = touch.clientY - rect1.top;
			} else {
				var rect2 = this.element.getBoundingClientRect();
				x = (touch.clientX - rect2.left) * (this.parent.__width / rect2.width);
				y = (touch.clientY - rect2.top) * (this.parent.__height / rect2.height);
			}
		} else {
			x = touch.clientX;
			y = touch.clientY;
		}
		var _g = event.type;
		switch(_g) {
		case "touchstart":
			var listeners = this.parent.onTouchStart.listeners;
			var repeat = this.parent.onTouchStart.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](x,y,id);
				if(!repeat[i]) {
					this.parent.onTouchStart.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "touchmove":
			var listeners1 = this.parent.onTouchMove.listeners;
			var repeat1 = this.parent.onTouchMove.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](x,y,id);
				if(!repeat1[i1]) {
					this.parent.onTouchMove.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		case "touchend":
			var listeners2 = this.parent.onTouchEnd.listeners;
			var repeat2 = this.parent.onTouchEnd.repeat;
			var length2 = listeners2.length;
			var i2 = 0;
			while(i2 < length2) {
				listeners2[i2](x,y,id);
				if(!repeat2[i2]) {
					this.parent.onTouchEnd.remove(listeners2[i2]);
					length2--;
				} else i2++;
			}
			break;
		default:
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setEnableTextEvents: function(value) {
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,__class__: lime._backend.html5.HTML5Window
};
lime.app = {};
lime.app.IModule = function() { };
$hxClasses["lime.app.IModule"] = lime.app.IModule;
lime.app.IModule.__name__ = ["lime","app","IModule"];
lime.app.IModule.prototype = {
	__class__: lime.app.IModule
};
lime.app.Module = function() {
};
$hxClasses["lime.app.Module"] = lime.app.Module;
lime.app.Module.__name__ = ["lime","app","Module"];
lime.app.Module.__interfaces__ = [lime.app.IModule];
lime.app.Module.prototype = {
	init: function(context) {
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchEnd: function(x,y,id) {
	}
	,onTouchMove: function(x,y,id) {
	}
	,onTouchStart: function(x,y,id) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowEnter: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime.app.Module
};
lime.app.Application = function() {
	this.onUpdate = new lime.app.Event();
	lime.app.Module.call(this);
	if(lime.app.Application.current == null) lime.app.Application.current = this;
	this.modules = new Array();
	this.renderers = new Array();
	this.windows = new Array();
	this.backend = new lime._backend.html5.HTML5Application(this);
	this.onUpdate.add($bind(this,this.update));
};
$hxClasses["lime.app.Application"] = lime.app.Application;
lime.app.Application.__name__ = ["lime","app","Application"];
lime.app.Application.current = null;
lime.app.Application.__super__ = lime.app.Module;
lime.app.Application.prototype = $extend(lime.app.Module.prototype,{
	addModule: function(module) {
		this.modules.push(module);
		if(this.initialized && this.renderers[0] != null) module.init(this.renderers[0].context);
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add($bind(this,this.render));
		renderer.onRenderContextLost.add($bind(this,this.onRenderContextLost));
		renderer.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
		this.renderers.push(renderer);
	}
	,addWindow: function(window) {
		this.windows.push(window);
		window.onGamepadAxisMove.add($bind(this,this.onGamepadAxisMove));
		window.onGamepadButtonDown.add($bind(this,this.onGamepadButtonDown));
		window.onGamepadButtonUp.add($bind(this,this.onGamepadButtonUp));
		window.onGamepadConnect.add($bind(this,this.onGamepadConnect));
		window.onGamepadDisconnect.add($bind(this,this.onGamepadDisconnect));
		window.onKeyDown.add($bind(this,this.onKeyDown));
		window.onKeyUp.add($bind(this,this.onKeyUp));
		window.onMouseDown.add($bind(this,this.onMouseDown));
		window.onMouseMove.add($bind(this,this.onMouseMove));
		window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
		window.onMouseUp.add($bind(this,this.onMouseUp));
		window.onMouseWheel.add($bind(this,this.onMouseWheel));
		window.onTextEdit.add($bind(this,this.onTextEdit));
		window.onTextInput.add($bind(this,this.onTextInput));
		window.onTouchStart.add($bind(this,this.onTouchStart));
		window.onTouchMove.add($bind(this,this.onTouchMove));
		window.onTouchEnd.add($bind(this,this.onTouchEnd));
		window.onWindowActivate.add($bind(this,this.onWindowActivate));
		window.onWindowClose.add($bind(this,this.onWindowClose));
		window.onWindowDeactivate.add($bind(this,this.onWindowDeactivate));
		window.onWindowEnter.add($bind(this,this.onWindowEnter));
		window.onWindowFocusIn.add($bind(this,this.onWindowFocusIn));
		window.onWindowFocusOut.add($bind(this,this.onWindowFocusOut));
		window.onWindowFullscreen.add($bind(this,this.onWindowFullscreen));
		window.onWindowLeave.add($bind(this,this.onWindowLeave));
		window.onWindowMinimize.add($bind(this,this.onWindowMinimize));
		window.onWindowMove.add($bind(this,this.onWindowMove));
		window.onWindowResize.add($bind(this,this.onWindowResize));
		window.onWindowRestore.add($bind(this,this.onWindowRestore));
		window.create(this);
	}
	,create: function(config) {
		this.backend.create(config);
	}
	,exec: function() {
		lime.app.Application.current = this;
		return this.backend.exec();
	}
	,init: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.init(context);
		}
		this.initialized = true;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(keyCode,modifier);
		}
	}
	,onKeyUp: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(keyCode,modifier);
		}
	}
	,onMouseDown: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(x,y,button);
		}
	}
	,onMouseMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(x,y);
		}
	}
	,onMouseMoveRelative: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(x,y);
		}
	}
	,onMouseUp: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(x,y,button);
		}
	}
	,onMouseWheel: function(deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(deltaX,deltaY);
		}
	}
	,onRenderContextLost: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost();
		}
	}
	,onRenderContextRestored: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(context);
		}
	}
	,onTextEdit: function(text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(text,start,length);
		}
	}
	,onTextInput: function(text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(text);
		}
	}
	,onTouchEnd: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(x,y,id);
		}
	}
	,onTouchMove: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(x,y,id);
		}
	}
	,onTouchStart: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(x,y,id);
		}
	}
	,onWindowActivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate();
		}
	}
	,onWindowClose: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose();
		}
	}
	,onWindowDeactivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate();
		}
	}
	,onWindowEnter: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter();
		}
	}
	,onWindowFocusIn: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn();
		}
	}
	,onWindowFocusOut: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut();
		}
	}
	,onWindowFullscreen: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen();
		}
	}
	,onWindowLeave: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave();
		}
	}
	,onWindowMinimize: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize();
		}
	}
	,onWindowMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(x,y);
		}
	}
	,onWindowResize: function(width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(width,height);
		}
	}
	,onWindowRestore: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore();
		}
	}
	,removeModule: function(module) {
		HxOverrides.remove(this.modules,module);
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && HxOverrides.indexOf(this.windows,window,0) > -1) {
			window.close();
			HxOverrides.remove(this.windows,window);
		}
	}
	,render: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(context);
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime.app.Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer"}
});
lime.app.Event = function() {
	this.listeners = new Array();
	this.priorities = new Array();
	this.repeat = new Array();
};
$hxClasses["lime.app.Event"] = lime.app.Event;
lime.app.Event.__name__ = ["lime","app","Event"];
lime.app.Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,remove: function(listener) {
		var index = HxOverrides.indexOf(this.listeners,listener,0);
		if(index > -1) {
			this.listeners.splice(index,1);
			this.priorities.splice(index,1);
			this.repeat.splice(index,1);
		}
	}
	,__class__: lime.app.Event
};
lime.app.Preloader = function() {
	this.total = 0;
	this.loaded = 0;
};
$hxClasses["lime.app.Preloader"] = lime.app.Preloader;
lime.app.Preloader.__name__ = ["lime","app","Preloader"];
lime.app.Preloader.prototype = {
	create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				var image = new Image();
				lime.app.Preloader.images.set(url,image);
				image.onload = $bind(this,this.image_onLoad);
				image.src = url;
				this.total++;
				break;
			case "BINARY":
				var loader = new lime.net.URLLoader();
				loader.set_dataFormat(lime.net.URLLoaderDataFormat.BINARY);
				lime.app.Preloader.loaders.set(url,loader);
				this.total++;
				break;
			case "TEXT":
				var loader1 = new lime.net.URLLoader();
				lime.app.Preloader.loaders.set(url,loader1);
				this.total++;
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime.app.Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime.app.Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime.net.URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && window.document.fonts.load) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.update(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.update(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		if(this.onComplete != null) this.onComplete();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime.app.Preloader
};
lime.audio = {};
lime.audio.ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime.audio.ALAudioContext;
lime.audio.ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime.audio.ALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime.audio.openal.AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime.audio.openal.AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime.audio.openal.AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime.audio.openal.AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime.audio.openal.AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime.audio.openal.AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime.audio.openal.AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime.audio.openal.AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime.audio.openal.AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime.audio.openal.AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime.audio.openal.AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime.audio.openal.AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime.audio.openal.AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime.audio.openal.AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime.audio.openal.AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime.audio.openal.AL.enable(capability);
	}
	,genSource: function() {
		return lime.audio.openal.AL.genSource();
	}
	,genSources: function(n) {
		return lime.audio.openal.AL.genSources(n);
	}
	,genBuffer: function() {
		return lime.audio.openal.AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime.audio.openal.AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime.audio.openal.AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime.audio.openal.AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime.audio.openal.AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime.audio.openal.AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime.audio.openal.AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime.audio.openal.AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime.audio.openal.AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime.audio.openal.AL.getError();
	}
	,getErrorString: function() {
		return lime.audio.openal.AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime.audio.openal.AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime.audio.openal.AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime.audio.openal.AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime.audio.openal.AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime.audio.openal.AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime.audio.openal.AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime.audio.openal.AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime.audio.openal.AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime.audio.openal.AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime.audio.openal.AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param) {
		return lime.audio.openal.AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime.audio.openal.AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime.audio.openal.AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime.audio.openal.AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime.audio.openal.AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime.audio.openal.AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime.audio.openal.AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime.audio.openal.AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime.audio.openal.AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime.audio.openal.AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime.audio.openal.AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime.audio.openal.AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime.audio.openal.AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime.audio.openal.AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime.audio.openal.AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime.audio.openal.AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime.audio.openal.AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime.audio.openal.AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime.audio.openal.AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime.audio.openal.AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime.audio.openal.AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime.audio.openal.AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime.audio.openal.AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime.audio.openal.AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime.audio.openal.AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime.audio.openal.AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime.audio.openal.AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime.audio.openal.AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime.audio.openal.AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime.audio.openal.AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime.audio.openal.AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime.audio.openal.AL.speedOfSound(value);
	}
	,__class__: lime.audio.ALAudioContext
};
lime.audio.ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime.audio.ALCAudioContext;
lime.audio.ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime.audio.ALCAudioContext.prototype = {
	closeDevice: function(device) {
		return lime.audio.openal.ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime.audio.openal.ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime.audio.openal.ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime.audio.openal.ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime.audio.openal.ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime.audio.openal.ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime.audio.openal.ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime.audio.openal.ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime.audio.openal.ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime.audio.openal.ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime.audio.openal.ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime.audio.openal.ALC.suspendContext(context);
	}
	,__class__: lime.audio.ALCAudioContext
};
lime.audio.AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime.audio.AudioBuffer;
lime.audio.AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime.audio.AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime.audio.AudioBuffer.fromFile = function(path) {
	return null;
};
lime.audio.AudioBuffer.fromURL = function(url,handler) {
};
lime.audio.AudioBuffer.prototype = {
	dispose: function() {
	}
	,__class__: lime.audio.AudioBuffer
};
lime.audio.AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime.audio.AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime.audio.AudioManager;
lime.audio.AudioManager.__name__ = ["lime","audio","AudioManager"];
lime.audio.AudioManager.context = null;
lime.audio.AudioManager.init = function(context) {
	if(lime.audio.AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime.audio.AudioManager.context = lime.audio.AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			lime.audio.AudioManager.context = lime.audio.AudioContext.HTML5(new lime.audio.HTML5AudioContext());
		} else lime.audio.AudioManager.context = context;
	}
};
lime.audio.AudioManager.resume = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime.audio.AudioManager.shutdown = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime.audio.AudioManager.suspend = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime.audio.AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime.app.Event();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) this.set_length(length);
	this.loops = loops;
	this.id = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime.audio.AudioSource;
lime.audio.AudioSource.__name__ = ["lime","audio","AudioSource"];
lime.audio.AudioSource.prototype = {
	dispose: function() {
		{
			var _g = lime.audio.AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if((function($this) {
					var $r;
					var $int = $this.id;
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) != 0) al.deleteSource(this.id);
				break;
			default:
			}
		}
	}
	,init: function() {
		{
			var _g = lime.audio.AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if((function($this) {
					var $r;
					var $int = $this.buffer.id;
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_length: function() {
		if(this.__length != null) return this.__length;
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,__class__: lime.audio.AudioSource
	,__properties__: {set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
lime.audio.FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime.audio.FlashAudioContext;
lime.audio.FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime.audio.FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime.audio.FlashAudioContext
};
lime.audio.HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime.audio.HTML5AudioContext;
lime.audio.HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime.audio.HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime.audio.AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAudioDecodedByteCount: function(buffer) {
		if(buffer.src != null) return buffer.src.audioDecodedByteCount;
		return 0;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getController: function(buffer) {
		if(buffer.src != null) return buffer.src.controller;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getInitialTime: function(buffer) {
		if(buffer.src != null) return buffer.src.initialTime;
		return 0;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMediaGroup: function(buffer) {
		if(buffer.src != null) return buffer.src.mediaGroup;
		return null;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setController: function(buffer,value) {
		if(buffer.src != null) buffer.src.controller = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMediaGroup: function(buffer,value) {
		if(buffer.src != null) buffer.src.mediaGroup = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime.audio.HTML5AudioContext
};
lime.audio.openal = {};
lime.audio.openal.AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime.audio.openal.AL;
lime.audio.openal.AL.__name__ = ["lime","audio","openal","AL"];
lime.audio.openal.AL.bufferData = function(buffer,format,data,size,freq) {
};
lime.audio.openal.AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime.audio.openal.AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime.audio.openal.AL.bufferf = function(buffer,param,value) {
};
lime.audio.openal.AL.bufferfv = function(buffer,param,values) {
};
lime.audio.openal.AL.bufferi = function(buffer,param,value) {
};
lime.audio.openal.AL.bufferiv = function(buffer,param,values) {
};
lime.audio.openal.AL.deleteBuffer = function(buffer) {
};
lime.audio.openal.AL.deleteBuffers = function(buffers) {
};
lime.audio.openal.AL.deleteSource = function(source) {
};
lime.audio.openal.AL.deleteSources = function(sources) {
};
lime.audio.openal.AL.disable = function(capability) {
};
lime.audio.openal.AL.distanceModel = function(distanceModel) {
};
lime.audio.openal.AL.dopplerFactor = function(value) {
};
lime.audio.openal.AL.dopplerVelocity = function(value) {
};
lime.audio.openal.AL.enable = function(capability) {
};
lime.audio.openal.AL.genSource = function() {
	return 0;
};
lime.audio.openal.AL.genSources = function(n) {
	return null;
};
lime.audio.openal.AL.genBuffer = function() {
	return 0;
};
lime.audio.openal.AL.genBuffers = function(n) {
	return null;
};
lime.audio.openal.AL.getBoolean = function(param) {
	return false;
};
lime.audio.openal.AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime.audio.openal.AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime.audio.openal.AL.getBufferf = function(buffer,param) {
	return 0;
};
lime.audio.openal.AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getBufferi = function(buffer,param) {
	return 0;
};
lime.audio.openal.AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getDouble = function(param) {
	return 0;
};
lime.audio.openal.AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getEnumValue = function(ename) {
	return 0;
};
lime.audio.openal.AL.getError = function() {
	return 0;
};
lime.audio.openal.AL.getErrorString = function() {
	var _g = lime.audio.openal.AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime.audio.openal.AL.getFloat = function(param) {
	return 0;
};
lime.audio.openal.AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getInteger = function(param) {
	return 0;
};
lime.audio.openal.AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getListener3f = function(param) {
	return null;
};
lime.audio.openal.AL.getListener3i = function(param) {
	return null;
};
lime.audio.openal.AL.getListenerf = function(param) {
	return 0;
};
lime.audio.openal.AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getListeneri = function(param) {
	return 0;
};
lime.audio.openal.AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getProcAddress = function(fname) {
	return null;
};
lime.audio.openal.AL.getSource3f = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcef = function(source,param) {
	return 0;
};
lime.audio.openal.AL.getSource3i = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcefv = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcei = function(source,param) {
	return 0;
};
lime.audio.openal.AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getString = function(param) {
	return null;
};
lime.audio.openal.AL.isBuffer = function(buffer) {
	return false;
};
lime.audio.openal.AL.isEnabled = function(capability) {
	return false;
};
lime.audio.openal.AL.isExtensionPresent = function(extname) {
	return false;
};
lime.audio.openal.AL.isSource = function(source) {
	return false;
};
lime.audio.openal.AL.listener3f = function(param,value1,value2,value3) {
};
lime.audio.openal.AL.listener3i = function(param,value1,value2,value3) {
};
lime.audio.openal.AL.listenerf = function(param,value) {
};
lime.audio.openal.AL.listenerfv = function(param,values) {
};
lime.audio.openal.AL.listeneri = function(param,value) {
};
lime.audio.openal.AL.listeneriv = function(param,values) {
};
lime.audio.openal.AL.source3f = function(source,param,value1,value2,value3) {
};
lime.audio.openal.AL.source3i = function(source,param,value1,value2,value3) {
};
lime.audio.openal.AL.sourcef = function(source,param,value) {
};
lime.audio.openal.AL.sourcefv = function(source,param,values) {
};
lime.audio.openal.AL.sourcei = function(source,param,value) {
};
lime.audio.openal.AL.sourceiv = function(source,param,values) {
};
lime.audio.openal.AL.sourcePlay = function(source) {
};
lime.audio.openal.AL.sourcePlayv = function(sources) {
};
lime.audio.openal.AL.sourceStop = function(source) {
};
lime.audio.openal.AL.sourceStopv = function(sources) {
};
lime.audio.openal.AL.sourceRewind = function(source) {
};
lime.audio.openal.AL.sourceRewindv = function(sources) {
};
lime.audio.openal.AL.sourcePause = function(source) {
};
lime.audio.openal.AL.sourcePausev = function(sources) {
};
lime.audio.openal.AL.sourceQueueBuffer = function(source,buffer) {
};
lime.audio.openal.AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime.audio.openal.AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime.audio.openal.AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime.audio.openal.AL.speedOfSound = function(value) {
};
lime.audio.openal.ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime.audio.openal.ALC;
lime.audio.openal.ALC.__name__ = ["lime","audio","openal","ALC"];
lime.audio.openal.ALC.closeDevice = function(device) {
	return false;
};
lime.audio.openal.ALC.createContext = function(device,attrlist) {
	return null;
};
lime.audio.openal.ALC.destroyContext = function(context) {
};
lime.audio.openal.ALC.getContextsDevice = function(context) {
	return null;
};
lime.audio.openal.ALC.getCurrentContext = function() {
	return null;
};
lime.audio.openal.ALC.getError = function(device) {
	return 0;
};
lime.audio.openal.ALC.getErrorString = function(device) {
	var _g = lime.audio.openal.ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime.audio.openal.ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime.audio.openal.ALC.getString = function(device,param) {
	return null;
};
lime.audio.openal.ALC.makeContextCurrent = function(context) {
	return false;
};
lime.audio.openal.ALC.openDevice = function(deviceName) {
	return null;
};
lime.audio.openal.ALC.processContext = function(context) {
};
lime.audio.openal.ALC.suspendContext = function(context) {
};
lime.audio.openal._ALContext = {};
lime.audio.openal._ALContext.ALContext_Impl_ = function() { };
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime.audio.openal._ALContext.ALContext_Impl_;
lime.audio.openal._ALContext.ALContext_Impl_.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime.audio.openal._ALContext.ALContext_Impl_._new = function(handle) {
	return handle;
};
lime.audio.openal._ALDevice = {};
lime.audio.openal._ALDevice.ALDevice_Impl_ = function() { };
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime.audio.openal._ALDevice.ALDevice_Impl_;
lime.audio.openal._ALDevice.ALDevice_Impl_.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime.audio.openal._ALDevice.ALDevice_Impl_._new = function(handle) {
	return handle;
};
lime.graphics = {};
lime.graphics.ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime.graphics.ConsoleRenderContext;
lime.graphics.ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime.graphics.ConsoleRenderContext.prototype = {
	clear: function() {
	}
	,clearColor: function(r,g,b,a) {
	}
	,clearDepth: function(depth) {
	}
	,clearStencil: function(stencil) {
	}
	,__class__: lime.graphics.ConsoleRenderContext
};
lime.graphics.FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime.graphics.FlashRenderContext;
lime.graphics.FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime.graphics.FlashRenderContext.prototype = {
	addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime.graphics.FlashRenderContext
};
lime.graphics.Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime.app.Application.current != null && lime.app.Application.current.renderers[0] != null) {
			var _g = lime.app.Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime.graphics.ImageType.CANVAS;
				break;
			case 3:
				this.type = lime.graphics.ImageType.FLASH;
				break;
			default:
				this.type = lime.graphics.ImageType.DATA;
			}
		} else this.type = lime.graphics.ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime.graphics.ImageBuffer(null,width,height);
				lime.graphics.utils.ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime.math.Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime.graphics.ImageBuffer(new Uint8Array(width * height * 4),width,height);
				if(color != null) this.fillRect(new lime.math.Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime.graphics.Image;
lime.graphics.Image.__name__ = ["lime","graphics","Image"];
lime.graphics.Image.__base64Encoder = null;
lime.graphics.Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime.graphics.Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime.graphics.Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	var buffer = new lime.graphics.ImageBuffer(null,bitmapData.width,bitmapData.height);
	buffer.__srcBitmapData = bitmapData;
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime.graphics.Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime.graphics.Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime.graphics.ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.fromFile = function(path,onload,onerror) {
	var image = new lime.graphics.Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime.graphics.Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime.graphics.Image.__base64Encoder == null) lime.graphics.Image.__base64Encoder = new haxe.crypto.BaseCode(haxe.io.Bytes.ofString(lime.graphics.Image.__base64Chars));
	return lime.graphics.Image.__base64Encoder.encodeBytes(haxe.io.Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime.graphics.Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime.graphics.Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime.graphics.Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime.graphics.Image.prototype = {
	clone: function() {
		var image = new lime.graphics.Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		return image;
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime.graphics.ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
			lime.graphics.utils.ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),color);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime.graphics.utils.ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime.math.Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null || format == 0) return (color & 255) << 24 | color >> 8; else return color;
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null || format == 0) return (color & 255) << 24 | color >> 8; else return color;
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixels(this,rect,format);
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var byteArray = this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
			if(format == null || format == 0) {
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = byteArray.readUnsignedInt();
					byteArray.position -= 4;
					byteArray.writeUnsignedInt((color & 255) << 24 | color >> 8);
				}
				byteArray.position = 0;
			}
			return byteArray;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
			lime.graphics.utils.ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime.graphics.utils.ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,color);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,setPixels: function(rect,byteArray,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixels(this,rect,byteArray,format);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixels(this,rect,byteArray,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format == null || format == 0) {
				var srcData = byteArray;
				byteArray = new lime.utils.ByteArray();
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = srcData.readUnsignedInt();
					byteArray.writeUnsignedInt((color & 255) << 24 | color >> 8);
				}
				srcData.position = 0;
				byteArray.position = 0;
			}
			this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(),byteArray);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime.graphics.Image.__isPNG(bytes)) type = "image/png"; else if(lime.graphics.Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime.graphics.Image.__isGIF(bytes)) type = "image/gif"; else throw "Image tried to read a PNG/JPG ByteArray, but found an invalid header.";
		this.__fromBase64(lime.graphics.Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.sync(this);
			lime.graphics.utils.ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime.graphics.utils.ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime.graphics.utils.ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime.graphics.utils.ImageCanvasUtil.convertToData(this);
				lime.graphics.utils.ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime.graphics.utils.ImageCanvasUtil.convertToData(this);
				lime.graphics.utils.ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime.math.Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime.graphics.Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
lime.graphics.ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 4;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime.graphics.ImageBuffer;
lime.graphics.ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime.graphics.ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime.graphics.ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			buffer.data = new Uint8Array(this.data.byteLength);
			var copy = new Uint8Array(this.data);
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js.Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js.Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime.graphics.ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
lime.graphics.ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime.graphics.ImageChannel.RED = ["RED",0];
lime.graphics.ImageChannel.RED.toString = $estr;
lime.graphics.ImageChannel.RED.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.GREEN = ["GREEN",1];
lime.graphics.ImageChannel.GREEN.toString = $estr;
lime.graphics.ImageChannel.GREEN.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.BLUE = ["BLUE",2];
lime.graphics.ImageChannel.BLUE.toString = $estr;
lime.graphics.ImageChannel.BLUE.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.ALPHA = ["ALPHA",3];
lime.graphics.ImageChannel.ALPHA.toString = $estr;
lime.graphics.ImageChannel.ALPHA.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime.graphics.ImageType.CANVAS = ["CANVAS",0];
lime.graphics.ImageType.CANVAS.toString = $estr;
lime.graphics.ImageType.CANVAS.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.DATA = ["DATA",1];
lime.graphics.ImageType.DATA.toString = $estr;
lime.graphics.ImageType.DATA.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.FLASH = ["FLASH",2];
lime.graphics.ImageType.FLASH.toString = $estr;
lime.graphics.ImageType.FLASH.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.CUSTOM = ["CUSTOM",3];
lime.graphics.ImageType.CUSTOM.toString = $estr;
lime.graphics.ImageType.CUSTOM.__enum__ = lime.graphics.ImageType;
lime.graphics._PixelFormat = {};
lime.graphics._PixelFormat.PixelFormat_Impl_ = function() { };
$hxClasses["lime.graphics._PixelFormat.PixelFormat_Impl_"] = lime.graphics._PixelFormat.PixelFormat_Impl_;
lime.graphics._PixelFormat.PixelFormat_Impl_.__name__ = ["lime","graphics","_PixelFormat","PixelFormat_Impl_"];
lime.graphics.RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime.graphics.RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.NONE = ["NONE",7];
lime.graphics.RenderContext.NONE.toString = $estr;
lime.graphics.RenderContext.NONE.__enum__ = lime.graphics.RenderContext;
lime.graphics.Renderer = function(window) {
	this.onRender = new lime.app.Event();
	this.onRenderContextRestored = new lime.app.Event();
	this.onRenderContextLost = new lime.app.Event();
	this.window = window;
	this.backend = new lime._backend.html5.HTML5Renderer(this);
	this.window.currentRenderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime.graphics.Renderer;
lime.graphics.Renderer.__name__ = ["lime","graphics","Renderer"];
lime.graphics.Renderer.prototype = {
	create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime.graphics.Renderer
};
lime.graphics.cairo = {};
lime.graphics.cairo.Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime.graphics.cairo.Cairo;
lime.graphics.cairo.Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime.graphics.cairo.Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime.graphics.cairo.Cairo.version = null;
lime.graphics.cairo.Cairo.versionString = null;
lime.graphics.cairo.Cairo.get_version = function() {
	return 0;
};
lime.graphics.cairo.Cairo.get_versionString = function() {
	return "";
};
lime.graphics.cairo.Cairo.prototype = {
	arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,destroy: function() {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,reference: function() {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_referenceCount: function() {
		return 0;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime.graphics.cairo.Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",get_referenceCount:"get_referenceCount",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
lime.graphics.cairo._CairoAntialias = {};
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_"] = lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.__name__ = ["lime","graphics","cairo","_CairoAntialias","CairoAntialias_Impl_"];
lime.graphics.cairo._CairoContent = {};
lime.graphics.cairo._CairoContent.CairoContent_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoContent.CairoContent_Impl_"] = lime.graphics.cairo._CairoContent.CairoContent_Impl_;
lime.graphics.cairo._CairoContent.CairoContent_Impl_.__name__ = ["lime","graphics","cairo","_CairoContent","CairoContent_Impl_"];
lime.graphics.cairo._CairoExtend = {};
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoExtend.CairoExtend_Impl_"] = lime.graphics.cairo._CairoExtend.CairoExtend_Impl_;
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_.__name__ = ["lime","graphics","cairo","_CairoExtend","CairoExtend_Impl_"];
lime.graphics.cairo._CairoFillRule = {};
lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_"] = lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_;
lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_.__name__ = ["lime","graphics","cairo","_CairoFillRule","CairoFillRule_Impl_"];
lime.graphics.cairo._CairoFilter = {};
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoFilter.CairoFilter_Impl_"] = lime.graphics.cairo._CairoFilter.CairoFilter_Impl_;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.__name__ = ["lime","graphics","cairo","_CairoFilter","CairoFilter_Impl_"];
lime.graphics.cairo._CairoFormat = {};
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoFormat.CairoFormat_Impl_"] = lime.graphics.cairo._CairoFormat.CairoFormat_Impl_;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.__name__ = ["lime","graphics","cairo","_CairoFormat","CairoFormat_Impl_"];
lime.graphics.cairo._CairoLineCap = {};
lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_"] = lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_;
lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_.__name__ = ["lime","graphics","cairo","_CairoLineCap","CairoLineCap_Impl_"];
lime.graphics.cairo._CairoLineJoin = {};
lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_"] = lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_;
lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_.__name__ = ["lime","graphics","cairo","_CairoLineJoin","CairoLineJoin_Impl_"];
lime.graphics.cairo._CairoOperator = {};
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoOperator.CairoOperator_Impl_"] = lime.graphics.cairo._CairoOperator.CairoOperator_Impl_;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.__name__ = ["lime","graphics","cairo","_CairoOperator","CairoOperator_Impl_"];
lime.graphics.cairo._CairoPattern = {};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime.graphics.cairo._CairoPattern.CairoPattern_Impl_;
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_._new = function(handle) {
	return handle;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createForSurface = function(surface) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createRGB = function(r,g,b) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createRGBA = function(r,g,b,a) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.destroy = function(this1) {
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.get_colorStopCount = function(this1) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.get_extend = function(this1) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.set_extend = function(this1,value) {
	return value;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.get_filter = function(this1) {
	return 0;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.set_filter = function(this1,value) {
	return value;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.get_matrix = function(this1) {
	return null;
};
lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.set_matrix = function(this1,value) {
	return value;
};
lime.graphics.cairo._CairoStatus = {};
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoStatus.CairoStatus_Impl_"] = lime.graphics.cairo._CairoStatus.CairoStatus_Impl_;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.__name__ = ["lime","graphics","cairo","_CairoStatus","CairoStatus_Impl_"];
lime.graphics.cairo._CairoSurface = {};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_ = function() { };
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime.graphics.cairo._CairoSurface.CairoSurface_Impl_;
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.__properties__ = {get_width:"get_width",get_height:"get_height"}
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_._new = function(format,width,height) {
	return 0;
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.createForData = function(data,format,width,height,stride) {
	return 0;
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.destroy = function(this1) {
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.flush = function(this1) {
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.fromImage = function(image) {
	return null;
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_height = function(this1) {
	return 0;
};
lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_width = function(this1) {
	return 0;
};
lime.graphics.format = {};
lime.graphics.format.BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime.graphics.format.BMP;
lime.graphics.format.BMP.__name__ = ["lime","graphics","format","BMP"];
lime.graphics.format.BMP.encode = function(image,type) {
	if(type == null) type = lime.graphics.format.BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	}
	var data = new lime.utils.ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	if(fileHeaderLength > 0) {
		data.writeByte(66);
		data.writeByte(77);
		data.writeInt(data.length);
		data.writeShort(0);
		data.writeShort(0);
		data.writeInt(fileHeaderLength + infoHeaderLength);
	}
	data.writeInt(infoHeaderLength);
	data.writeInt(image.width);
	data.writeInt(type == lime.graphics.format.BMPType.ICO?image.height * 2:image.height);
	data.writeShort(1);
	data.writeShort(type == lime.graphics.format.BMPType.RGB?24:32);
	data.writeInt(type == lime.graphics.format.BMPType.BITFIELD?3:0);
	data.writeInt(pixelValuesLength);
	data.writeInt(11824);
	data.writeInt(11824);
	data.writeInt(0);
	data.writeInt(0);
	if(type == lime.graphics.format.BMPType.BITFIELD) {
		data.writeInt(16711680);
		data.writeInt(65280);
		data.writeInt(255);
		data.writeInt(-16777216);
		data.writeByte(32);
		data.writeByte(110);
		data.writeByte(105);
		data.writeByte(87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.writeByte(0);
		}
	}
	var pixels = image.getPixels(new lime.math.Rectangle(0,0,image.width,image.height),1);
	var a;
	var r;
	var g;
	var b;
	switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			pixels.position = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
			}
		}
		break;
	case 2:
		var andMask = new lime.utils.ByteArray(image.width * image.height);
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			pixels.position = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
				andMask.writeByte(0);
			}
		}
		data.writeBytes(andMask);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			pixels.position = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.writeByte(0);
			}
		}
		break;
	}
	return data;
};
lime.graphics.format.BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime.graphics.format.BMPType.RGB = ["RGB",0];
lime.graphics.format.BMPType.RGB.toString = $estr;
lime.graphics.format.BMPType.RGB.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.BITFIELD = ["BITFIELD",1];
lime.graphics.format.BMPType.BITFIELD.toString = $estr;
lime.graphics.format.BMPType.BITFIELD.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.ICO = ["ICO",2];
lime.graphics.format.BMPType.ICO.toString = $estr;
lime.graphics.format.BMPType.ICO.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime.graphics.format.JPEG;
lime.graphics.format.JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime.graphics.format.JPEG.encode = function(image,quality) {
	return null;
};
lime.graphics.format.PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime.graphics.format.PNG;
lime.graphics.format.PNG.__name__ = ["lime","graphics","format","PNG"];
lime.graphics.format.PNG.encode = function(image) {
	return null;
};
lime.graphics.opengl = {};
lime.graphics.opengl.GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime.graphics.opengl.GL;
lime.graphics.opengl.GL.__name__ = ["lime","graphics","opengl","GL"];
lime.graphics.opengl.GL.__properties__ = {get_version:"get_version"}
lime.graphics.opengl.GL.version = null;
lime.graphics.opengl.GL.context = null;
lime.graphics.opengl.GL.activeTexture = function(texture) {
	lime.graphics.opengl.GL.context.activeTexture(texture);
};
lime.graphics.opengl.GL.attachShader = function(program,shader) {
	lime.graphics.opengl.GL.context.attachShader(program,shader);
};
lime.graphics.opengl.GL.bindAttribLocation = function(program,index,name) {
	lime.graphics.opengl.GL.context.bindAttribLocation(program,index,name);
};
lime.graphics.opengl.GL.bindBuffer = function(target,buffer) {
	lime.graphics.opengl.GL.context.bindBuffer(target,buffer);
};
lime.graphics.opengl.GL.bindFramebuffer = function(target,framebuffer) {
	lime.graphics.opengl.GL.context.bindFramebuffer(target,framebuffer);
};
lime.graphics.opengl.GL.bindRenderbuffer = function(target,renderbuffer) {
	lime.graphics.opengl.GL.context.bindRenderbuffer(target,renderbuffer);
};
lime.graphics.opengl.GL.bindTexture = function(target,texture) {
	lime.graphics.opengl.GL.context.bindTexture(target,texture);
};
lime.graphics.opengl.GL.blendColor = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.blendColor(red,green,blue,alpha);
};
lime.graphics.opengl.GL.blendEquation = function(mode) {
	lime.graphics.opengl.GL.context.blendEquation(mode);
};
lime.graphics.opengl.GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime.graphics.opengl.GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime.graphics.opengl.GL.blendFunc = function(sfactor,dfactor) {
	lime.graphics.opengl.GL.context.blendFunc(sfactor,dfactor);
};
lime.graphics.opengl.GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime.graphics.opengl.GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime.graphics.opengl.GL.bufferData = function(target,data,usage) {
	lime.graphics.opengl.GL.context.bufferData(target,data,usage);
};
lime.graphics.opengl.GL.bufferSubData = function(target,offset,data) {
	lime.graphics.opengl.GL.context.bufferSubData(target,offset,data);
};
lime.graphics.opengl.GL.checkFramebufferStatus = function(target) {
	return lime.graphics.opengl.GL.context.checkFramebufferStatus(target);
};
lime.graphics.opengl.GL.clear = function(mask) {
	lime.graphics.opengl.GL.context.clear(mask);
};
lime.graphics.opengl.GL.clearColor = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.clearColor(red,green,blue,alpha);
};
lime.graphics.opengl.GL.clearDepth = function(depth) {
	lime.graphics.opengl.GL.context.clearDepth(depth);
};
lime.graphics.opengl.GL.clearStencil = function(s) {
	lime.graphics.opengl.GL.context.clearStencil(s);
};
lime.graphics.opengl.GL.colorMask = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.colorMask(red,green,blue,alpha);
};
lime.graphics.opengl.GL.compileShader = function(shader) {
	lime.graphics.opengl.GL.context.compileShader(shader);
};
lime.graphics.opengl.GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime.graphics.opengl.GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime.graphics.opengl.GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime.graphics.opengl.GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime.graphics.opengl.GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime.graphics.opengl.GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime.graphics.opengl.GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime.graphics.opengl.GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime.graphics.opengl.GL.createBuffer = function() {
	return lime.graphics.opengl.GL.context.createBuffer();
};
lime.graphics.opengl.GL.createFramebuffer = function() {
	return lime.graphics.opengl.GL.context.createFramebuffer();
};
lime.graphics.opengl.GL.createProgram = function() {
	return lime.graphics.opengl.GL.context.createProgram();
};
lime.graphics.opengl.GL.createRenderbuffer = function() {
	return lime.graphics.opengl.GL.context.createRenderbuffer();
};
lime.graphics.opengl.GL.createShader = function(type) {
	return lime.graphics.opengl.GL.context.createShader(type);
};
lime.graphics.opengl.GL.createTexture = function() {
	return lime.graphics.opengl.GL.context.createTexture();
};
lime.graphics.opengl.GL.cullFace = function(mode) {
	lime.graphics.opengl.GL.context.cullFace(mode);
};
lime.graphics.opengl.GL.deleteBuffer = function(buffer) {
	lime.graphics.opengl.GL.context.deleteBuffer(buffer);
};
lime.graphics.opengl.GL.deleteFramebuffer = function(framebuffer) {
	lime.graphics.opengl.GL.context.deleteFramebuffer(framebuffer);
};
lime.graphics.opengl.GL.deleteProgram = function(program) {
	lime.graphics.opengl.GL.context.deleteProgram(program);
};
lime.graphics.opengl.GL.deleteRenderbuffer = function(renderbuffer) {
	lime.graphics.opengl.GL.context.deleteRenderbuffer(renderbuffer);
};
lime.graphics.opengl.GL.deleteShader = function(shader) {
	lime.graphics.opengl.GL.context.deleteShader(shader);
};
lime.graphics.opengl.GL.deleteTexture = function(texture) {
	lime.graphics.opengl.GL.context.deleteTexture(texture);
};
lime.graphics.opengl.GL.depthFunc = function(func) {
	lime.graphics.opengl.GL.context.depthFunc(func);
};
lime.graphics.opengl.GL.depthMask = function(flag) {
	lime.graphics.opengl.GL.context.depthMask(flag);
};
lime.graphics.opengl.GL.depthRange = function(zNear,zFar) {
	lime.graphics.opengl.GL.context.depthRange(zNear,zFar);
};
lime.graphics.opengl.GL.detachShader = function(program,shader) {
	lime.graphics.opengl.GL.context.detachShader(program,shader);
};
lime.graphics.opengl.GL.disable = function(cap) {
	lime.graphics.opengl.GL.context.disable(cap);
};
lime.graphics.opengl.GL.disableVertexAttribArray = function(index) {
	lime.graphics.opengl.GL.context.disableVertexAttribArray(index);
};
lime.graphics.opengl.GL.drawArrays = function(mode,first,count) {
	lime.graphics.opengl.GL.context.drawArrays(mode,first,count);
};
lime.graphics.opengl.GL.drawElements = function(mode,count,type,offset) {
	lime.graphics.opengl.GL.context.drawElements(mode,count,type,offset);
};
lime.graphics.opengl.GL.enable = function(cap) {
	lime.graphics.opengl.GL.context.enable(cap);
};
lime.graphics.opengl.GL.enableVertexAttribArray = function(index) {
	lime.graphics.opengl.GL.context.enableVertexAttribArray(index);
};
lime.graphics.opengl.GL.finish = function() {
	lime.graphics.opengl.GL.context.finish();
};
lime.graphics.opengl.GL.flush = function() {
	lime.graphics.opengl.GL.context.flush();
};
lime.graphics.opengl.GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime.graphics.opengl.GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime.graphics.opengl.GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime.graphics.opengl.GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime.graphics.opengl.GL.frontFace = function(mode) {
	lime.graphics.opengl.GL.context.frontFace(mode);
};
lime.graphics.opengl.GL.generateMipmap = function(target) {
	lime.graphics.opengl.GL.context.generateMipmap(target);
};
lime.graphics.opengl.GL.getActiveAttrib = function(program,index) {
	return lime.graphics.opengl.GL.context.getActiveAttrib(program,index);
};
lime.graphics.opengl.GL.getActiveUniform = function(program,index) {
	return lime.graphics.opengl.GL.context.getActiveUniform(program,index);
};
lime.graphics.opengl.GL.getAttachedShaders = function(program) {
	return lime.graphics.opengl.GL.context.getAttachedShaders(program);
};
lime.graphics.opengl.GL.getAttribLocation = function(program,name) {
	return lime.graphics.opengl.GL.context.getAttribLocation(program,name);
};
lime.graphics.opengl.GL.getBufferParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getBufferParameter(target,pname);
};
lime.graphics.opengl.GL.getContextAttributes = function() {
	return lime.graphics.opengl.GL.context.getContextAttributes();
};
lime.graphics.opengl.GL.getError = function() {
	return lime.graphics.opengl.GL.context.getError();
};
lime.graphics.opengl.GL.getExtension = function(name) {
	return lime.graphics.opengl.GL.context.getExtension(name);
};
lime.graphics.opengl.GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime.graphics.opengl.GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime.graphics.opengl.GL.getParameter = function(pname) {
	return lime.graphics.opengl.GL.context.getParameter(pname);
};
lime.graphics.opengl.GL.getProgramInfoLog = function(program) {
	return lime.graphics.opengl.GL.context.getProgramInfoLog(program);
};
lime.graphics.opengl.GL.getProgramParameter = function(program,pname) {
	return lime.graphics.opengl.GL.context.getProgramParameter(program,pname);
};
lime.graphics.opengl.GL.getRenderbufferParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getRenderbufferParameter(target,pname);
};
lime.graphics.opengl.GL.getShaderInfoLog = function(shader) {
	return lime.graphics.opengl.GL.context.getShaderInfoLog(shader);
};
lime.graphics.opengl.GL.getShaderParameter = function(shader,pname) {
	return lime.graphics.opengl.GL.context.getShaderParameter(shader,pname);
};
lime.graphics.opengl.GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime.graphics.opengl.GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime.graphics.opengl.GL.getShaderSource = function(shader) {
	return lime.graphics.opengl.GL.context.getShaderSource(shader);
};
lime.graphics.opengl.GL.getSupportedExtensions = function() {
	return lime.graphics.opengl.GL.context.getSupportedExtensions();
};
lime.graphics.opengl.GL.getTexParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getTexParameter(target,pname);
};
lime.graphics.opengl.GL.getUniform = function(program,location) {
	return lime.graphics.opengl.GL.context.getUniform(program,location);
};
lime.graphics.opengl.GL.getUniformLocation = function(program,name) {
	return lime.graphics.opengl.GL.context.getUniformLocation(program,name);
};
lime.graphics.opengl.GL.getVertexAttrib = function(index,pname) {
	return lime.graphics.opengl.GL.context.getVertexAttrib(index,pname);
};
lime.graphics.opengl.GL.getVertexAttribOffset = function(index,pname) {
	return lime.graphics.opengl.GL.context.getVertexAttribOffset(index,pname);
};
lime.graphics.opengl.GL.hint = function(target,mode) {
	lime.graphics.opengl.GL.context.hint(target,mode);
};
lime.graphics.opengl.GL.isBuffer = function(buffer) {
	return lime.graphics.opengl.GL.context.isBuffer(buffer);
};
lime.graphics.opengl.GL.isContextLost = function() {
	return lime.graphics.opengl.GL.context.isContextLost();
};
lime.graphics.opengl.GL.isEnabled = function(cap) {
	return lime.graphics.opengl.GL.context.isEnabled(cap);
};
lime.graphics.opengl.GL.isFramebuffer = function(framebuffer) {
	return lime.graphics.opengl.GL.context.isFramebuffer(framebuffer);
};
lime.graphics.opengl.GL.isProgram = function(program) {
	return lime.graphics.opengl.GL.context.isProgram(program);
};
lime.graphics.opengl.GL.isRenderbuffer = function(renderbuffer) {
	return lime.graphics.opengl.GL.context.isRenderbuffer(renderbuffer);
};
lime.graphics.opengl.GL.isShader = function(shader) {
	return lime.graphics.opengl.GL.context.isShader(shader);
};
lime.graphics.opengl.GL.isTexture = function(texture) {
	return lime.graphics.opengl.GL.context.isTexture(texture);
};
lime.graphics.opengl.GL.lineWidth = function(width) {
	lime.graphics.opengl.GL.context.lineWidth(width);
};
lime.graphics.opengl.GL.linkProgram = function(program) {
	lime.graphics.opengl.GL.context.linkProgram(program);
};
lime.graphics.opengl.GL.pixelStorei = function(pname,param) {
	lime.graphics.opengl.GL.context.pixelStorei(pname,param);
};
lime.graphics.opengl.GL.polygonOffset = function(factor,units) {
	lime.graphics.opengl.GL.context.polygonOffset(factor,units);
};
lime.graphics.opengl.GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime.graphics.opengl.GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime.graphics.opengl.GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime.graphics.opengl.GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime.graphics.opengl.GL.sampleCoverage = function(value,invert) {
	lime.graphics.opengl.GL.context.sampleCoverage(value,invert);
};
lime.graphics.opengl.GL.scissor = function(x,y,width,height) {
	lime.graphics.opengl.GL.context.scissor(x,y,width,height);
};
lime.graphics.opengl.GL.shaderSource = function(shader,source) {
	lime.graphics.opengl.GL.context.shaderSource(shader,source);
};
lime.graphics.opengl.GL.stencilFunc = function(func,ref,mask) {
	lime.graphics.opengl.GL.context.stencilFunc(func,ref,mask);
};
lime.graphics.opengl.GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime.graphics.opengl.GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime.graphics.opengl.GL.stencilMask = function(mask) {
	lime.graphics.opengl.GL.context.stencilMask(mask);
};
lime.graphics.opengl.GL.stencilMaskSeparate = function(face,mask) {
	lime.graphics.opengl.GL.context.stencilMaskSeparate(face,mask);
};
lime.graphics.opengl.GL.stencilOp = function(fail,zfail,zpass) {
	lime.graphics.opengl.GL.context.stencilOp(fail,zfail,zpass);
};
lime.graphics.opengl.GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime.graphics.opengl.GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime.graphics.opengl.GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime.graphics.opengl.GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime.graphics.opengl.GL.texParameterf = function(target,pname,param) {
	lime.graphics.opengl.GL.context.texParameterf(target,pname,param);
};
lime.graphics.opengl.GL.texParameteri = function(target,pname,param) {
	lime.graphics.opengl.GL.context.texParameteri(target,pname,param);
};
lime.graphics.opengl.GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime.graphics.opengl.GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime.graphics.opengl.GL.uniform1f = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1f(location,x);
};
lime.graphics.opengl.GL.uniform1fv = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1fv(location,x);
};
lime.graphics.opengl.GL.uniform1i = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1i(location,x);
};
lime.graphics.opengl.GL.uniform1iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform1iv(location,v);
};
lime.graphics.opengl.GL.uniform2f = function(location,x,y) {
	lime.graphics.opengl.GL.context.uniform2f(location,x,y);
};
lime.graphics.opengl.GL.uniform2fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform2fv(location,v);
};
lime.graphics.opengl.GL.uniform2i = function(location,x,y) {
	lime.graphics.opengl.GL.context.uniform2i(location,x,y);
};
lime.graphics.opengl.GL.uniform2iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform2iv(location,v);
};
lime.graphics.opengl.GL.uniform3f = function(location,x,y,z) {
	lime.graphics.opengl.GL.context.uniform3f(location,x,y,z);
};
lime.graphics.opengl.GL.uniform3fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform3fv(location,v);
};
lime.graphics.opengl.GL.uniform3i = function(location,x,y,z) {
	lime.graphics.opengl.GL.context.uniform3i(location,x,y,z);
};
lime.graphics.opengl.GL.uniform3iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform3iv(location,v);
};
lime.graphics.opengl.GL.uniform4f = function(location,x,y,z,w) {
	lime.graphics.opengl.GL.context.uniform4f(location,x,y,z,w);
};
lime.graphics.opengl.GL.uniform4fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform4fv(location,v);
};
lime.graphics.opengl.GL.uniform4i = function(location,x,y,z,w) {
	lime.graphics.opengl.GL.context.uniform4i(location,x,y,z,w);
};
lime.graphics.opengl.GL.uniform4iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform4iv(location,v);
};
lime.graphics.opengl.GL.uniformMatrix2fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix2fv(location,transpose,v);
};
lime.graphics.opengl.GL.uniformMatrix3fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix3fv(location,transpose,v);
};
lime.graphics.opengl.GL.uniformMatrix4fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix4fv(location,transpose,v);
};
lime.graphics.opengl.GL.useProgram = function(program) {
	lime.graphics.opengl.GL.context.useProgram(program);
};
lime.graphics.opengl.GL.validateProgram = function(program) {
	lime.graphics.opengl.GL.context.validateProgram(program);
};
lime.graphics.opengl.GL.vertexAttrib1f = function(indx,x) {
	lime.graphics.opengl.GL.context.vertexAttrib1f(indx,x);
};
lime.graphics.opengl.GL.vertexAttrib1fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib1fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib2f = function(indx,x,y) {
	lime.graphics.opengl.GL.context.vertexAttrib2f(indx,x,y);
};
lime.graphics.opengl.GL.vertexAttrib2fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib2fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib3f = function(indx,x,y,z) {
	lime.graphics.opengl.GL.context.vertexAttrib3f(indx,x,y,z);
};
lime.graphics.opengl.GL.vertexAttrib3fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib3fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime.graphics.opengl.GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime.graphics.opengl.GL.vertexAttrib4fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib4fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime.graphics.opengl.GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime.graphics.opengl.GL.viewport = function(x,y,width,height) {
	lime.graphics.opengl.GL.context.viewport(x,y,width,height);
};
lime.graphics.opengl.GL.get_version = function() {
	return 2;
};
lime.graphics.utils = {};
lime.graphics.utils.ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime.graphics.utils.ImageCanvasUtil;
lime.graphics.utils.ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime.graphics.utils.ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime.graphics.utils.ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime.graphics.utils.ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	}
};
lime.graphics.utils.ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
		lime.graphics.utils.ImageCanvasUtil.sync(image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime.graphics.utils.ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.createImageData(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime.graphics.utils.ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime.math.Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime.math.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime.math.Vector2(sourceRect.x,sourceRect.y),lime.graphics.ImageChannel.ALPHA,lime.graphics.ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime.graphics.utils.ImageCanvasUtil.sync(image);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime.graphics.utils.ImageCanvasUtil.sync(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime.graphics.utils.ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.webkitImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime.graphics.utils.ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.data == null) {
		buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		buffer.data = new Uint8Array(buffer.__srcImageData.data.buffer);
	}
};
lime.graphics.utils.ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.sync(image);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime.graphics.utils.ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.floodFill(image,x,y,color,format);
};
lime.graphics.utils.ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixel(image,x,y,format);
};
lime.graphics.utils.ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixel32(image,x,y,format);
};
lime.graphics.utils.ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixels(image,rect,format);
};
lime.graphics.utils.ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.createImageData(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime.graphics.utils.ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime.graphics.utils.ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime.graphics.utils.ImageCanvasUtil.sync(image);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime.graphics.utils.ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime.graphics.utils.ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixel(image,x,y,color,format);
};
lime.graphics.utils.ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime.graphics.utils.ImageCanvasUtil.setPixels = function(image,rect,byteArray,format) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixels(image,rect,byteArray,format);
};
lime.graphics.utils.ImageCanvasUtil.sync = function(image) {
	if(image.dirty && image.type != lime.graphics.ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
};
lime.graphics.utils.ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime.graphics.utils.ImageDataUtil;
lime.graphics.utils.ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime.graphics.utils.ImageDataUtil.__alpha16 = null;
lime.graphics.utils.ImageDataUtil.__clamp = null;
lime.graphics.utils.ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var stride = image.buffer.width * 4;
	var offset;
	var rowStart = Std["int"](rect.get_top() + image.offsetY);
	var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
	var columnStart = Std["int"](rect.get_left() + image.offsetX);
	var columnEnd = Std["int"](rect.get_right() + image.offsetX);
	var r;
	var g;
	var b;
	var a;
	var ex = 0;
	var _g = rowStart;
	while(_g < rowEnd) {
		var row = _g++;
		var _g1 = columnStart;
		while(_g1 < columnEnd) {
			var column = _g1++;
			offset = row * stride + column * 4;
			a = data[offset + 3] * colorMatrix[18] + colorMatrix[19] * 255 | 0;
			if(a > 255) ex = a - 255; else ex = 0;
			b = data[offset + 2] * colorMatrix[12] + colorMatrix[14] * 255 + ex | 0;
			if(b > 255) ex = b - 255; else ex = 0;
			g = data[offset + 1] * colorMatrix[6] + colorMatrix[9] * 255 + ex | 0;
			if(g > 255) ex = g - 255; else ex = 0;
			r = data[offset] * colorMatrix[0] + colorMatrix[4] * 255 + ex | 0;
			if(r > 255) data[offset] = 255; else data[offset] = r;
			if(g > 255) data[offset + 1] = 255; else data[offset + 1] = g;
			if(b > 255) data[offset + 2] = 255; else data[offset + 2] = b;
			if(a > 255) data[offset + 3] = 255; else data[offset + 3] = a;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcStride = sourceImage.buffer.width * 4 | 0;
	var srcPosition = (sourceRect.x + sourceImage.offsetX) * 4 + srcStride * (sourceRect.y + sourceImage.offsetY) + srcIdx | 0;
	var srcRowOffset = srcStride - (4 * (sourceRect.width + sourceImage.offsetX) | 0);
	var srcRowEnd = 4 * (sourceRect.x + sourceImage.offsetX + sourceRect.width) | 0;
	var srcData1 = sourceImage.buffer.data;
	var destStride = image.buffer.width * 4 | 0;
	var destPosition = (destPoint.x + image.offsetX) * 4 + destStride * (destPoint.y + image.offsetY) + destIdx | 0;
	var destRowOffset = destStride - (4 * (sourceRect.width + image.offsetX) | 0);
	var destRowEnd = 4 * (destPoint.x + image.offsetX + sourceRect.width) | 0;
	var destData1 = image.buffer.data;
	var length = sourceRect.width * sourceRect.height | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		destData1[destPosition] = srcData1[srcPosition];
		srcPosition += 4;
		destPosition += 4;
		if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		if(destPosition % destStride > destRowEnd) destPosition += destRowOffset;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime.math.Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime.math.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime.math.Vector2(sourceRect.x,sourceRect.y),lime.graphics.ImageChannel.ALPHA,lime.graphics.ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
				data[offset] = sourceData[sourceOffset];
				data[offset + 1] = sourceData[sourceOffset + 1];
				data[offset + 2] = sourceData[sourceOffset + 2];
				data[offset + 3] = sourceData[sourceOffset + 3];
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var outA;
		var oneMinusSourceAlpha;
		var _g11 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g4 = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g11 < _g4) {
			var row1 = _g11++;
			var _g31 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g21 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g31 < _g21) {
				var column1 = _g31++;
				sourceOffset = row1 * sourceStride + column1 * 4;
				offset = (row1 + rowOffset) * stride + (column1 + columnOffset) * 4;
				sourceAlpha = sourceData[sourceOffset + 3] / 255.0;
				destAlpha = data[offset + 3] / 255.0;
				oneMinusSourceAlpha = 1 - sourceAlpha;
				outA = sourceAlpha + destAlpha * oneMinusSourceAlpha;
				var index = Math.round((sourceData[sourceOffset] * sourceAlpha + data[offset] * destAlpha * oneMinusSourceAlpha) / outA);
				data[offset] = lime.graphics.utils.ImageDataUtil.__clamp[index];
				var index1 = Math.round((sourceData[sourceOffset + 1] * sourceAlpha + data[offset + 1] * destAlpha * oneMinusSourceAlpha) / outA);
				data[offset + 1] = lime.graphics.utils.ImageDataUtil.__clamp[index1];
				var index2 = Math.round((sourceData[sourceOffset + 2] * sourceAlpha + data[offset + 2] * destAlpha * oneMinusSourceAlpha) / outA);
				data[offset + 2] = lime.graphics.utils.ImageDataUtil.__clamp[index2];
				var index3 = Math.round(outA * 255.0);
				data[offset + 3] = lime.graphics.utils.ImageDataUtil.__clamp[index3];
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.fillRect = function(image,rect,color,format) {
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	var rgba = r | g << 8 | b << 16 | a << 24;
	var data = image.buffer.data;
	if(data == null) return;
	if(rect.width == image.buffer.width && rect.height == image.buffer.height && rect.x == 0 && rect.y == 0 && image.offsetX == 0 && image.offsetY == 0) {
		var length = image.buffer.width * image.buffer.height;
		var j = 0;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			j = i * 4;
			data[j] = r;
			data[j + 1] = g;
			data[j + 2] = b;
			data[j + 3] = a;
		}
	} else {
		var stride = image.buffer.width * 4;
		var offset;
		var rowStart = rect.y + image.offsetY | 0;
		var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
		var columnStart = rect.x + image.offsetX | 0;
		var columnEnd = Std["int"](rect.get_right() + image.offsetX);
		var _g1 = rowStart;
		while(_g1 < rowEnd) {
			var row = _g1++;
			var _g11 = columnStart;
			while(_g11 < columnEnd) {
				var column = _g11++;
				offset = row * stride + column * 4;
				data[offset] = r;
				data[offset + 1] = g;
				data[offset + 2] = b;
				data[offset + 3] = a;
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var hitColorR = data[offset];
	var hitColorG = data[offset + 1];
	var hitColorB = data[offset + 2];
	var hitColorA;
	if(image.get_transparent()) hitColorA = data[offset + 3]; else hitColorA = 255;
	var r = color >> 24 & 255;
	var g = color >> 16 & 255;
	var b = color >> 8 & 255;
	var a;
	if(image.get_transparent()) a = color & 255; else a = 255;
	if(hitColorR == r && hitColorG == g && hitColorB == b && hitColorA == a) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = new Array();
	queue.push(x);
	queue.push(y);
	while(queue.length > 0) {
		var curPointY = queue.pop();
		var curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var nextPointX = curPointX + dx[i];
			var nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			var nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			if(data[nextPointOffset] == hitColorR && data[nextPointOffset + 1] == hitColorG && data[nextPointOffset + 2] == hitColorB && data[nextPointOffset + 3] == hitColorA) {
				data[nextPointOffset] = r;
				data[nextPointOffset + 1] = g;
				data[nextPointOffset + 2] = b;
				data[nextPointOffset + 3] = a;
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var r;
	var g;
	var b;
	var a;
	var mr;
	var mg;
	var mb;
	var ma;
	if(format == 1) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) ma = mask >> 24 & 255; else ma = 255;
		mr = mask >> 16 & 255;
		mg = mask >> 8 & 255;
		mb = mask & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
		mr = mask >> 24 & 255;
		mg = mask >> 16 & 255;
		mb = mask >> 8 & 255;
		if(image.get_transparent()) ma = mask & 255; else ma = 255;
	}
	color = r | g << 8 | b << 16 | a << 24;
	mask = mr | mg << 8 | mb << 16 | mask << 24;
	var pix;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var ix = _g1++;
		var hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var iy = _g3++;
			pix = image.getPixel32(ix,iy);
			if(findColor) hit = (pix & mask) == color; else hit = (pix & mask) != color;
			if(hit) {
				if(ix < left) left = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var _ix = _g11++;
		var ix1 = image.width - 1 - _ix;
		var hit1 = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var iy1 = _g31++;
			pix = image.getPixel32(ix1,iy1);
			if(findColor) hit1 = (pix & mask) == color; else hit1 = (pix & mask) != color;
			if(hit1) {
				if(ix1 > right) right = ix1;
				break;
			}
		}
		if(hit1) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var iy2 = _g12++;
		var hit2 = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var ix2 = _g32++;
			pix = image.getPixel32(ix2,iy2);
			if(findColor) hit2 = (pix & mask) == color; else hit2 = (pix & mask) != color;
			if(hit2) {
				if(iy2 < top) top = iy2;
				break;
			}
		}
		if(hit2) break;
	}
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var _iy = _g13++;
		var iy3 = image.height - 1 - _iy;
		var hit3 = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var ix3 = _g33++;
			pix = image.getPixel32(ix3,iy3);
			if(findColor) hit3 = (pix & mask) == color; else hit3 = (pix & mask) != color;
			if(hit3) {
				if(iy3 > bottom) bottom = iy3;
				break;
			}
		}
		if(hit3) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime.math.Rectangle(left,top,w,h);
};
lime.graphics.utils.ImageDataUtil.getPixel = function(image,x,y,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var pixel;
	if(image.get_premultiplied()) {
		var unmultiply = 255.0 / data[offset + 3];
		pixel = lime.graphics.utils.ImageDataUtil.__clamp[data[offset] * unmultiply | 0] << 24 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 1] * unmultiply | 0] << 16 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 2] * unmultiply | 0] << 8;
	} else pixel = data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8;
	if(format == 1) return pixel >> 8 & 16777215; else return pixel;
};
lime.graphics.utils.ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	if(image.get_transparent()) a = data[offset + 3]; else a = 255;
	var r;
	var g;
	var b;
	if(image.get_premultiplied() && a != 0) {
		var unmultiply = 255.0 / a;
		var index = Math.round(data[offset] * unmultiply);
		r = lime.graphics.utils.ImageDataUtil.__clamp[index];
		var index1 = Math.round(data[offset + 1] * unmultiply);
		g = lime.graphics.utils.ImageDataUtil.__clamp[index1];
		var index2 = Math.round(data[offset + 2] * unmultiply);
		b = lime.graphics.utils.ImageDataUtil.__clamp[index2];
	} else {
		r = data[offset];
		g = data[offset + 1];
		b = data[offset + 2];
	}
	if(format == 1) return a << 24 | r << 16 | g << 8 | b; else return r << 24 | g << 16 | b << 8 | a;
};
lime.graphics.utils.ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var byteArray = new lime.utils.ByteArray(length * 4);
	byteArray.position = 0;
	var srcData = image.buffer.data;
	var srcStride = image.buffer.width * 4 | 0;
	var srcPosition = rect.x * 4 + srcStride * rect.y | 0;
	var srcRowOffset = srcStride - (4 * rect.width | 0);
	var srcRowEnd = 4 * (rect.x + rect.width) | 0;
	byteArray.set_length(length * 4);
	if(format == 1) {
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			byteArray.__set(i * 4 + 1,srcData[srcPosition++]);
			byteArray.__set(i * 4 + 2,srcData[srcPosition++]);
			byteArray.__set(i * 4 + 3,srcData[srcPosition++]);
			byteArray.__set(i * 4,srcData[srcPosition++]);
			if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		}
	} else {
		var _g1 = 0;
		while(_g1 < length) {
			var i1 = _g1++;
			byteArray.__set(i1 * 4,srcData[srcPosition++]);
			byteArray.__set(i1 * 4 + 1,srcData[srcPosition++]);
			byteArray.__set(i1 * 4 + 2,srcData[srcPosition++]);
			byteArray.__set(i1 * 4 + 3,srcData[srcPosition++]);
			if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		}
	}
	byteArray.position = 0;
	return byteArray;
};
lime.graphics.utils.ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
	var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
		var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
		while(_g3 < _g2) {
			var column = _g3++;
			sourceOffset = row * sourceStride + column * 4;
			offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
			data[offset] = (sourceData[offset] * redMultiplier + data[offset] * (256 - redMultiplier)) / 256 | 0;
			data[offset + 1] = (sourceData[offset + 1] * greenMultiplier + data[offset + 1] * (256 - greenMultiplier)) / 256 | 0;
			data[offset + 2] = (sourceData[offset + 2] * blueMultiplier + data[offset + 2] * (256 - blueMultiplier)) / 256 | 0;
			data[offset + 3] = (sourceData[offset + 3] * alphaMultiplier + data[offset + 3] * (256 - alphaMultiplier)) / 256 | 0;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a16 = lime.graphics.utils.ImageDataUtil.__alpha16[data[index + 3]];
		data[index] = data[index] * a16 >> 16;
		data[index + 1] = data[index + 1] * a16 >> 16;
		data[index + 2] = data[index + 2] * a16 >> 16;
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime.graphics.ImageBuffer(new Uint8Array(newWidth * newHeight * 4),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (data[sourceIndex] * uOpposite + data[sourceIndexX] * uRatio) * vOpposite + (data[sourceIndexY] * uOpposite + data[sourceIndexXY] * uRatio) * vRatio | 0;
			newData[index + 1] = (data[sourceIndex + 1] * uOpposite + data[sourceIndexX + 1] * uRatio) * vOpposite + (data[sourceIndexY + 1] * uOpposite + data[sourceIndexXY + 1] * uRatio) * vRatio | 0;
			newData[index + 2] = (data[sourceIndex + 2] * uOpposite + data[sourceIndexX + 2] * uRatio) * vOpposite + (data[sourceIndexY + 2] * uOpposite + data[sourceIndexXY + 2] * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime.graphics.utils.ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData = new Uint8Array(newWidth * newHeight * 4);
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime.graphics.utils.ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(format == 0) color = color >> 8;
	data[offset] = (color & 16711680) >>> 16;
	data[offset + 1] = (color & 65280) >>> 8;
	data[offset + 2] = color & 255;
	if(image.get_transparent()) data[offset + 3] = 255;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	var r;
	var g;
	var b;
	if(format == 1) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	if(image.get_transparent() && image.get_premultiplied()) {
		var a16 = lime.graphics.utils.ImageDataUtil.__alpha16[a];
		data[offset] = r * a16 >> 16;
		data[offset + 1] = g * a16 >> 16;
		data[offset + 2] = b * a16 >> 16;
		data[offset + 3] = a;
	} else {
		data[offset] = r;
		data[offset + 1] = g;
		data[offset + 2] = b;
		data[offset + 3] = a;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixels = function(image,rect,byteArray,format) {
	if(image.buffer.data == null) return;
	var len = Math.round(rect.width * rect.height);
	var data = image.buffer.data;
	var offset = Math.round(image.buffer.width * (rect.y + image.offsetX) + (rect.x + image.offsetY));
	var pos = offset * 4;
	var boundR = Math.round(rect.x + rect.width + image.offsetX);
	var width = image.buffer.width;
	var color;
	if(format == 1) {
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			if(pos % (width * 4) >= boundR * 4) pos += (width - boundR) * 4;
			color = byteArray.readUnsignedInt();
			data[pos++] = (color & 16711680) >>> 16;
			data[pos++] = (color & 65280) >>> 8;
			data[pos++] = color & 255;
			data[pos++] = (color & -16777216) >>> 24;
		}
	} else {
		var _g1 = 0;
		while(_g1 < len) {
			var i1 = _g1++;
			if(pos % (width * 4) >= boundR * 4) pos += (width - boundR) * 4;
			color = byteArray.readUnsignedInt();
			data[pos++] = (color & -16777216) >>> 24;
			data[pos++] = (color & 16711680) >>> 16;
			data[pos++] = (color & 65280) >>> 8;
			data[pos++] = color & 255;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a;
	var unmultiply;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a = data[index + 3];
		if(a != 0) {
			unmultiply = 255.0 / a;
			data[index] = lime.graphics.utils.ImageDataUtil.__clamp[data[index] * unmultiply | 0];
			data[index + 1] = lime.graphics.utils.ImageDataUtil.__clamp[data[index + 1] * unmultiply | 0];
			data[index + 2] = lime.graphics.utils.ImageDataUtil.__clamp[data[index + 2] * unmultiply | 0];
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
lime.math = {};
lime.math._ColorMatrix = {};
lime.math._ColorMatrix.ColorMatrix_Impl_ = function() { };
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime.math._ColorMatrix.ColorMatrix_Impl_;
lime.math._ColorMatrix.ColorMatrix_Impl_.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime.math._ColorMatrix.ColorMatrix_Impl_.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime.math._ColorMatrix.ColorMatrix_Impl_._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else this1 = new Float32Array(lime.math._ColorMatrix.ColorMatrix_Impl_.__identity);
	return this1;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.clone = function(this1) {
	return lime.math._ColorMatrix.ColorMatrix_Impl_._new(new Float32Array(this1));
};
lime.math._ColorMatrix.ColorMatrix_Impl_.concat = function(this1,second) {
	var _g = this1;
	var value = _g[0] + second[0];
	_g[0] = value;
	value;
	var _g1 = this1;
	var value1 = _g1[6] + second[6];
	_g1[6] = value1;
	value1;
	var _g2 = this1;
	var value2 = _g2[12] + second[12];
	_g2[12] = value2;
	value2;
	var _g3 = this1;
	var value3 = _g3[18] + second[18];
	_g3[18] = value3;
	value3;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.copyFrom = function(this1,other) {
	this1.set(other);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform = function(this1) {
	return null;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaMultiplier = function(this1,value) {
	this1[18] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaOffset = function(this1,value) {
	this1[19] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueMultiplier = function(this1,value) {
	this1[12] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueOffset = function(this1,value) {
	this1[14] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_color = function(this1,value) {
	var value1 = value >> 16 & 255;
	this1[4] = value1 / 255;
	value1;
	var value2 = value >> 8 & 255;
	this1[9] = value2 / 255;
	value2;
	var value3 = value & 255;
	this1[14] = value3 / 255;
	value3;
	this1[0] = 0;
	0;
	this1[6] = 0;
	0;
	this1[12] = 0;
	0;
	return lime.math._ColorMatrix.ColorMatrix_Impl_.get_color(this1);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenMultiplier = function(this1,value) {
	this1[6] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenOffset = function(this1,value) {
	this1[9] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_redMultiplier = function(this1) {
	return this1[0];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_redMultiplier = function(this1,value) {
	this1[0] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_redOffset = function(this1,value) {
	this1[4] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get = function(this1,index) {
	return this1[index];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
lime.math.Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime.math.Matrix3;
lime.math.Matrix3.__name__ = ["lime","math","Matrix3"];
lime.math.Matrix3.prototype = {
	clone: function() {
		return new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime.math.Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime.math.Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime.math.Matrix3
};
lime.math._Matrix4 = {};
lime.math._Matrix4.Matrix4_Impl_ = function() { };
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime.math._Matrix4.Matrix4_Impl_;
lime.math._Matrix4.Matrix4_Impl_.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime.math._Matrix4.Matrix4_Impl_.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime.math._Matrix4.Matrix4_Impl_._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else this1 = new Float32Array(lime.math._Matrix4.Matrix4_Impl_.__identity);
	return this1;
};
lime.math._Matrix4.Matrix4_Impl_.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,0);
	var m221 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,4);
	var m231 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,8);
	var m241 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,12);
	var m212 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,1);
	var m222 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,5);
	var m232 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,9);
	var m242 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,13);
	var m213 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,2);
	var m223 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,6);
	var m233 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,10);
	var m243 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,14);
	var m214 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,3);
	var m224 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,7);
	var m234 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,11);
	var m244 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime.math._Matrix4.Matrix4_Impl_.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime.math._Matrix4.Matrix4_Impl_.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime.math._Matrix4.Matrix4_Impl_.appendTranslation(m,p.x,p.y,p.z);
	}
	lime.math._Matrix4.Matrix4_Impl_.append(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.appendScale = function(this1,xScale,yScale,zScale) {
	lime.math._Matrix4.Matrix4_Impl_.append(this1,lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime.math._Matrix4.Matrix4_Impl_.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime.math._Matrix4.Matrix4_Impl_.clone = function(this1) {
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array(this1));
};
lime.math._Matrix4.Matrix4_Impl_.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw "Error, Column " + column + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw "Error, Column " + column + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyFrom = function(this1,other) {
	this1.set(other);
};
lime.math._Matrix4.Matrix4_Impl_.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
};
lime.math._Matrix4.Matrix4_Impl_.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
};
lime.math._Matrix4.Matrix4_Impl_.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw "Error, Row " + Std.string((function($this) {
			var $r;
			var $int = row;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this))) + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1]));
};
lime.math._Matrix4.Matrix4_Impl_.createABCD = function(a,b,c,d,tx,ty) {
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1]));
};
lime.math._Matrix4.Matrix4_Impl_.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1]));
};
lime.math._Matrix4.Matrix4_Impl_.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw "Error, Row " + row + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyToMatrix4 = function(this1,other) {
	(js.Boot.__cast(other , Float32Array)).set(this1);
};
lime.math._Matrix4.Matrix4_Impl_.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime.math._Matrix4.Matrix4_Impl_.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime.math._Matrix4.Matrix4_Impl_.interpolate = function(thisMat,toMat,percent) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime.math._Matrix4.Matrix4_Impl_.set(m,i,lime.math._Matrix4.Matrix4_Impl_.get(thisMat,i) + (lime.math._Matrix4.Matrix4_Impl_.get(toMat,i) - lime.math._Matrix4.Matrix4_Impl_.get(thisMat,i)) * percent);
	}
	return m;
};
lime.math._Matrix4.Matrix4_Impl_.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] = this1[i] + (lime.math._Matrix4.Matrix4_Impl_.get(toMat,i) - this1[i]) * percent;
	}
};
lime.math._Matrix4.Matrix4_Impl_.invert = function(this1) {
	var d = lime.math._Matrix4.Matrix4_Impl_.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime.math._Matrix4.Matrix4_Impl_.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime.math.Vector4(0,0,-1);
	if(up == null) up = new lime.math.Vector4(0,-1,0);
	var dir = new lime.math.Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime.math.Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime.math.Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime.math.Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime.math.Vector4(-dir.y,dir.x,0); else vup = new lime.math.Vector4(1,0,0);
	right = new lime.math.Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime.math._Matrix4.Matrix4_Impl_.prepend = function(this1,rhs) {
	var m111 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,0);
	var m121 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,4);
	var m131 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,8);
	var m141 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,12);
	var m112 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,1);
	var m122 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,5);
	var m132 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,9);
	var m142 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,13);
	var m113 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,2);
	var m123 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,6);
	var m133 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,10);
	var m143 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,14);
	var m114 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,3);
	var m124 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,7);
	var m134 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,11);
	var m144 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime.math._Matrix4.Matrix4_Impl_.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime.math._Matrix4.Matrix4_Impl_.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime.math._Matrix4.Matrix4_Impl_.appendTranslation(m,p.x,p.y,p.z);
	}
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.prependScale = function(this1,xScale,yScale,zScale) {
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime.math._Matrix4.Matrix4_Impl_.prependTranslation = function(this1,x,y,z) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	lime.math._Matrix4.Matrix4_Impl_.set_position(m,new lime.math.Vector4(x,y,z));
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime.math._Matrix4.Matrix4_Impl_.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime.math._Matrix4.Matrix4_Impl_.transpose = function(this1) {
	var othis = new Float32Array(this1);
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime.math._Matrix4.Matrix4_Impl_.getAxisRotation = function(x,y,z,degrees) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	var a1 = new lime.math.Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime.math._Matrix4.Matrix4_Impl_.set(m,0,c + a1.x * a1.x * t);
	lime.math._Matrix4.Matrix4_Impl_.set(m,5,c + a1.y * a1.y * t);
	lime.math._Matrix4.Matrix4_Impl_.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,4,tmp1 + tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,8,tmp1 - tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,9,tmp1 + tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,6,tmp1 - tmp2);
	return m;
};
lime.math._Matrix4.Matrix4_Impl_.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime.math._Matrix4.Matrix4_Impl_.get_position = function(this1) {
	return new lime.math.Vector4(this1[12],this1[13],this1[14]);
};
lime.math._Matrix4.Matrix4_Impl_.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime.math._Matrix4.Matrix4_Impl_.get = function(this1,index) {
	return this1[index];
};
lime.math._Matrix4.Matrix4_Impl_.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
lime.math.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime.math.Rectangle;
lime.math.Rectangle.__name__ = ["lime","math","Rectangle"];
lime.math.Rectangle.prototype = {
	clone: function() {
		return new lime.math.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime.math.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime.math.Rectangle();
		return new lime.math.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime.math.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime.math.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime.math.Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime.math.Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime.math.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
lime.math.Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime.math.Vector2;
lime.math.Vector2.__name__ = ["lime","math","Vector2"];
lime.math.Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime.math.Vector2.interpolate = function(pt1,pt2,f) {
	return new lime.math.Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime.math.Vector2.polar = function(len,angle) {
	return new lime.math.Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime.math.Vector2.prototype = {
	add: function(v) {
		return new lime.math.Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime.math.Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime.math.Vector2
	,__properties__: {get_length:"get_length"}
};
lime.math.Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime.math.Vector4;
lime.math.Vector4.__name__ = ["lime","math","Vector4"];
lime.math.Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime.math.Vector4.X_AXIS = null;
lime.math.Vector4.Y_AXIS = null;
lime.math.Vector4.Z_AXIS = null;
lime.math.Vector4.angleBetween = function(a,b) {
	var a0 = new lime.math.Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime.math.Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime.math.Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime.math.Vector4.get_X_AXIS = function() {
	return new lime.math.Vector4(1,0,0);
};
lime.math.Vector4.get_Y_AXIS = function() {
	return new lime.math.Vector4(0,1,0);
};
lime.math.Vector4.get_Z_AXIS = function() {
	return new lime.math.Vector4(0,0,1);
};
lime.math.Vector4.prototype = {
	add: function(a) {
		return new lime.math.Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime.math.Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime.math.Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime.math.Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime.math.Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
lime.net = {};
lime.net.URLLoader = function(request) {
	this.onSecurityError = new lime.app.Event();
	this.onProgress = new lime.app.Event();
	this.onOpen = new lime.app.Event();
	this.onIOError = new lime.app.Event();
	this.onHTTPStatus = new lime.app.Event();
	this.onComplete = new lime.app.Event();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime.net.URLLoader;
lime.net.URLLoader.__name__ = ["lime","net","URLLoader"];
lime.net.URLLoader.prototype = {
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) {
				var listeners = self.onHTTPStatus.listeners;
				var repeat = self.onHTTPStatus.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](_g,s);
					if(!repeat[i]) {
						self.onHTTPStatus.remove(listeners[i]);
						length--;
					} else i++;
				}
			}
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) {
				var listeners1 = self.onIOError.listeners;
				var repeat1 = self.onIOError.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](_g,"Failed to connect or resolve host");
					if(!repeat1[i1]) {
						self.onIOError.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
			} else if(s == 12029) {
				var listeners2 = self.onIOError.listeners;
				var repeat2 = self.onIOError.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](_g,"Failed to connect to host");
					if(!repeat2[i2]) {
						self.onIOError.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
			} else if(s == 12007) {
				var listeners3 = self.onIOError.listeners;
				var repeat3 = self.onIOError.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3](_g,"Unknown host");
					if(!repeat3[i3]) {
						self.onIOError.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
			} else if(s == 0) {
				var listeners4 = self.onIOError.listeners;
				var repeat4 = self.onIOError.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat4[i4]) {
						self.onIOError.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
				var listeners5 = self.onSecurityError.listeners;
				var repeat5 = self.onSecurityError.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat5[i5]) {
						self.onSecurityError.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
			} else {
				var listeners6 = self.onIOError.listeners;
				var repeat6 = self.onIOError.repeat;
				var length6 = listeners6.length;
				var i6 = 0;
				while(i6 < length6) {
					listeners6[i6](_g,"Http Error #" + subject.status);
					if(!repeat6[i6]) {
						self.onIOError.remove(listeners6[i6]);
						length6--;
					} else i6++;
				}
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,lime.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,lime.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js.Boot.__cast(method , String),url,true);
		} catch( e ) {
			var listeners = this.onIOError.listeners;
			var repeat = this.onIOError.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](this,e.toString());
				if(!repeat[i]) {
					this.onIOError.remove(listeners[i]);
					length--;
				} else i++;
			}
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		var listeners1 = this.onOpen.listeners;
		var repeat1 = this.onOpen.repeat;
		var length1 = listeners1.length;
		var i1 = 0;
		while(i1 < length1) {
			listeners1[i1](this);
			if(!repeat1[i1]) {
				this.onOpen.remove(listeners1[i1]);
				length1--;
			} else i1++;
		}
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this);
			if(!repeat[i]) {
				this.onComplete.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this,this.bytesLoaded,this.bytesTotal);
			if(!repeat[i]) {
				this.onProgress.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
};
lime.net.URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : ["lime","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
lime.net.URLLoaderDataFormat.BINARY.toString = $estr;
lime.net.URLLoaderDataFormat.BINARY.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
lime.net.URLLoaderDataFormat.TEXT.toString = $estr;
lime.net.URLLoaderDataFormat.TEXT.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
lime.net.URLLoaderDataFormat.VARIABLES.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime.net.URLRequest;
lime.net.URLRequest.__name__ = ["lime","net","URLRequest"];
lime.net.URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,lime.utils.ByteArray)) {
			res = res.slice();
			res.push(new lime.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime.net.URLRequest
};
lime.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime.net.URLRequestHeader;
lime.net.URLRequestHeader.__name__ = ["lime","net","URLRequestHeader"];
lime.net.URLRequestHeader.prototype = {
	__class__: lime.net.URLRequestHeader
};
lime.net._URLRequestMethod = {};
lime.net._URLRequestMethod.URLRequestMethod_Impl_ = function() { };
$hxClasses["lime.net._URLRequestMethod.URLRequestMethod_Impl_"] = lime.net._URLRequestMethod.URLRequestMethod_Impl_;
lime.net._URLRequestMethod.URLRequestMethod_Impl_.__name__ = ["lime","net","_URLRequestMethod","URLRequestMethod_Impl_"];
lime.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["lime.net.URLVariables"] = lime.net.URLVariables;
lime.net.URLVariables.__name__ = ["lime","net","URLVariables"];
lime.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: lime.net.URLVariables
};
lime.system._System = {};
lime.system._System.SystemDirectory_Impl_ = function() { };
$hxClasses["lime.system._System.SystemDirectory_Impl_"] = lime.system._System.SystemDirectory_Impl_;
lime.system._System.SystemDirectory_Impl_.__name__ = ["lime","system","_System","SystemDirectory_Impl_"];
lime.text._Glyph = {};
lime.text._Glyph.Glyph_Impl_ = function() { };
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime.text._Glyph.Glyph_Impl_;
lime.text._Glyph.Glyph_Impl_.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime.text._Glyph.Glyph_Impl_._new = function(i) {
	return i;
};
lime.text.GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime.text.GlyphMetrics;
lime.text.GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime.text.GlyphMetrics.prototype = {
	__class__: lime.text.GlyphMetrics
};
lime.text.GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime.math.Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime.text.GlyphPosition;
lime.text.GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime.text.GlyphPosition.prototype = {
	__class__: lime.text.GlyphPosition
};
lime.text._TextDirection = {};
lime.text._TextDirection.TextDirection_Impl_ = function() { };
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime.text._TextDirection.TextDirection_Impl_;
lime.text._TextDirection.TextDirection_Impl_.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime.text._TextDirection.TextDirection_Impl_.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime.text._TextDirection.TextDirection_Impl_.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime.text._TextDirection.TextDirection_Impl_.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime.text._TextDirection.TextDirection_Impl_.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime.text._TextDirection.TextDirection_Impl_.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime.text._TextDirection.TextDirection_Impl_.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime.text._TextDirection.TextDirection_Impl_.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
lime.text.TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.__position();
};
$hxClasses["lime.text.TextLayout"] = lime.text.TextLayout;
lime.text.TextLayout.__name__ = ["lime","text","TextLayout"];
lime.text.TextLayout.prototype = {
	__position: function() {
		this.positions = [];
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__position();
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__position();
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.positions;
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__position();
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__position();
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__position();
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__position();
		return value;
	}
	,__class__: lime.text.TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
lime.text._TextScript = {};
lime.text._TextScript.TextScript_Impl_ = function() { };
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime.text._TextScript.TextScript_Impl_;
lime.text._TextScript.TextScript_Impl_.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime.text._TextScript.TextScript_Impl_.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime.text._TextScript.TextScript_Impl_.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
lime.ui = {};
lime.ui.Gamepad = function(id) {
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime.ui.Gamepad;
lime.ui.Gamepad.__name__ = ["lime","ui","Gamepad"];
lime.ui.Gamepad.prototype = {
	get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,__class__: lime.ui.Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
lime.ui._GamepadAxis = {};
lime.ui._GamepadAxis.GamepadAxis_Impl_ = function() { };
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime.ui._GamepadAxis.GamepadAxis_Impl_;
lime.ui._GamepadAxis.GamepadAxis_Impl_.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime.ui._GamepadAxis.GamepadAxis_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
lime.ui._GamepadButton = {};
lime.ui._GamepadButton.GamepadButton_Impl_ = function() { };
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime.ui._GamepadButton.GamepadButton_Impl_;
lime.ui._GamepadButton.GamepadButton_Impl_.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime.ui._GamepadButton.GamepadButton_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
lime.ui._KeyCode = {};
lime.ui._KeyCode.KeyCode_Impl_ = function() { };
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime.ui._KeyCode.KeyCode_Impl_;
lime.ui._KeyCode.KeyCode_Impl_.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime.ui._KeyModifier = {};
lime.ui._KeyModifier.KeyModifier_Impl_ = function() { };
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime.ui._KeyModifier.KeyModifier_Impl_;
lime.ui._KeyModifier.KeyModifier_Impl_.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime.ui._KeyModifier.KeyModifier_Impl_.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime.ui._KeyModifier.KeyModifier_Impl_.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
lime.ui.Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime.ui.Mouse;
lime.ui.Mouse.__name__ = ["lime","ui","Mouse"];
lime.ui.Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime.ui.Mouse.hide = function() {
	lime._backend.html5.HTML5Mouse.hide();
};
lime.ui.Mouse.show = function() {
	lime._backend.html5.HTML5Mouse.show();
};
lime.ui.Mouse.warp = function(x,y,window) {
	lime._backend.html5.HTML5Mouse.warp(x,y,window);
};
lime.ui.Mouse.get_cursor = function() {
	return lime._backend.html5.HTML5Mouse.get_cursor();
};
lime.ui.Mouse.set_cursor = function(value) {
	return lime._backend.html5.HTML5Mouse.set_cursor(value);
};
lime.ui.Mouse.get_lock = function() {
	return lime._backend.html5.HTML5Mouse.get_lock();
};
lime.ui.Mouse.set_lock = function(value) {
	return lime._backend.html5.HTML5Mouse.set_lock(value);
};
lime.ui.MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime.ui.MouseCursor.ARROW = ["ARROW",0];
lime.ui.MouseCursor.ARROW.toString = $estr;
lime.ui.MouseCursor.ARROW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime.ui.MouseCursor.CROSSHAIR.toString = $estr;
lime.ui.MouseCursor.CROSSHAIR.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.DEFAULT = ["DEFAULT",2];
lime.ui.MouseCursor.DEFAULT.toString = $estr;
lime.ui.MouseCursor.DEFAULT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.MOVE = ["MOVE",3];
lime.ui.MouseCursor.MOVE.toString = $estr;
lime.ui.MouseCursor.MOVE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.POINTER = ["POINTER",4];
lime.ui.MouseCursor.POINTER.toString = $estr;
lime.ui.MouseCursor.POINTER.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime.ui.MouseCursor.RESIZE_NESW.toString = $estr;
lime.ui.MouseCursor.RESIZE_NESW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime.ui.MouseCursor.RESIZE_NS.toString = $estr;
lime.ui.MouseCursor.RESIZE_NS.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime.ui.MouseCursor.RESIZE_NWSE.toString = $estr;
lime.ui.MouseCursor.RESIZE_NWSE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime.ui.MouseCursor.RESIZE_WE.toString = $estr;
lime.ui.MouseCursor.RESIZE_WE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.TEXT = ["TEXT",9];
lime.ui.MouseCursor.TEXT.toString = $estr;
lime.ui.MouseCursor.TEXT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.WAIT = ["WAIT",10];
lime.ui.MouseCursor.WAIT.toString = $estr;
lime.ui.MouseCursor.WAIT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime.ui.MouseCursor.WAIT_ARROW.toString = $estr;
lime.ui.MouseCursor.WAIT_ARROW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.CUSTOM = ["CUSTOM",12];
lime.ui.MouseCursor.CUSTOM.toString = $estr;
lime.ui.MouseCursor.CUSTOM.__enum__ = lime.ui.MouseCursor;
lime.ui.Window = function(config) {
	this.onWindowRestore = new lime.app.Event();
	this.onWindowResize = new lime.app.Event();
	this.onWindowMove = new lime.app.Event();
	this.onWindowMinimize = new lime.app.Event();
	this.onWindowLeave = new lime.app.Event();
	this.onWindowFullscreen = new lime.app.Event();
	this.onWindowFocusOut = new lime.app.Event();
	this.onWindowFocusIn = new lime.app.Event();
	this.onWindowEnter = new lime.app.Event();
	this.onWindowDeactivate = new lime.app.Event();
	this.onWindowClose = new lime.app.Event();
	this.onWindowActivate = new lime.app.Event();
	this.onTouchStart = new lime.app.Event();
	this.onTouchMove = new lime.app.Event();
	this.onTouchEnd = new lime.app.Event();
	this.onTextInput = new lime.app.Event();
	this.onTextEdit = new lime.app.Event();
	this.onMouseWheel = new lime.app.Event();
	this.onMouseUp = new lime.app.Event();
	this.onMouseMoveRelative = new lime.app.Event();
	this.onMouseMove = new lime.app.Event();
	this.onMouseDown = new lime.app.Event();
	this.onKeyUp = new lime.app.Event();
	this.onKeyDown = new lime.app.Event();
	this.onGamepadDisconnect = new lime.app.Event();
	this.onGamepadConnect = new lime.app.Event();
	this.onGamepadButtonUp = new lime.app.Event();
	this.onGamepadButtonDown = new lime.app.Event();
	this.onGamepadAxisMove = new lime.app.Event();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__x = 0;
	this.__y = 0;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
	}
	this.backend = new lime._backend.html5.HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime.ui.Window;
lime.ui.Window.__name__ = ["lime","ui","Window"];
lime.ui.Window.prototype = {
	close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.backend.create(application);
		if(this.currentRenderer != null) this.currentRenderer.create();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime.ui.Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents"}
};
lime.utils = {};
lime.utils.ByteArray = function(size) {
	if(size == null) size = 0;
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime.utils.ByteArray;
lime.utils.ByteArray.__name__ = ["lime","utils","ByteArray"];
lime.utils.ByteArray.fromBytes = function(bytes) {
	var result = new lime.utils.ByteArray();
	result.byteView = new Uint8Array(bytes.b);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
lime.utils.ByteArray.readFile = function(path) {
	return null;
};
lime.utils.ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime.utils.ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime.utils.ByteArray.prototype = {
	clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,compress: function(algorithm) {
	}
	,deflate: function() {
		this.compress(lime.utils.CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(lime.utils.CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw "Read error - Out of bounds";
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure * 2) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function(algorithm) {
		haxe.Log.trace("Warning: ByteArray.uncompress on JS target requires the 'format' haxelib",{ fileName : "ByteArray.hx", lineNumber : 667, className : "lime.utils.ByteArray", methodName : "uncompress"});
	}
	,write_uncheck: function($byte) {
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(bytes.length == 0) return;
		if((function($this) {
			var $r;
			var aNeg = 0 < 0;
			var bNeg = offset < 0;
			$r = aNeg != bNeg?aNeg:0 > offset;
			return $r;
		}(this)) || (function($this) {
			var $r;
			var aNeg1 = 0 < 0;
			var bNeg1 = length < 0;
			$r = aNeg1 != bNeg1?aNeg1:0 > length;
			return $r;
		}(this))) throw "Write error - Out of bounds";
		if((function($this) {
			var $r;
			var $int = length;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position = this.position + length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFile: function(path) {
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this.__getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(bytes) {
		this.byteView = new Uint8Array(bytes.b);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime.utils.ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
lime.utils.CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : ["lime","utils","CompressionAlgorithm"], __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
lime.utils.CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime.utils.CompressionAlgorithm.DEFLATE.toString = $estr;
lime.utils.CompressionAlgorithm.DEFLATE.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.ZLIB = ["ZLIB",1];
lime.utils.CompressionAlgorithm.ZLIB.toString = $estr;
lime.utils.CompressionAlgorithm.ZLIB.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.LZMA = ["LZMA",2];
lime.utils.CompressionAlgorithm.LZMA.toString = $estr;
lime.utils.CompressionAlgorithm.LZMA.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.GZIP = ["GZIP",3];
lime.utils.CompressionAlgorithm.GZIP.toString = $estr;
lime.utils.CompressionAlgorithm.GZIP.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime.utils.GLUtils;
lime.utils.GLUtils.__name__ = ["lime","utils","GLUtils"];
lime.utils.GLUtils.compileShader = function(source,type) {
	var shader = lime.graphics.opengl.GL.context.createShader(type);
	lime.graphics.opengl.GL.context.shaderSource(shader,source);
	lime.graphics.opengl.GL.context.compileShader(shader);
	if(lime.graphics.opengl.GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw "Error compiling vertex shader";
		break;
	case 35632:
		throw "Error compiling fragment shader";
		break;
	default:
		throw "Error compiling unknown shader type";
	}
	return shader;
};
lime.utils.GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime.utils.GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime.utils.GLUtils.compileShader(fragmentSource,35632);
	var program = lime.graphics.opengl.GL.context.createProgram();
	lime.graphics.opengl.GL.context.attachShader(program,vertexShader);
	lime.graphics.opengl.GL.context.attachShader(program,fragmentShader);
	lime.graphics.opengl.GL.context.linkProgram(program);
	if(lime.graphics.opengl.GL.context.getProgramParameter(program,35714) == 0) throw "Unable to initialize the shader program.";
	return program;
};
lime.utils.IDataInput = function() { };
$hxClasses["lime.utils.IDataInput"] = lime.utils.IDataInput;
lime.utils.IDataInput.__name__ = ["lime","utils","IDataInput"];
lime.utils.IDataInput.prototype = {
	__class__: lime.utils.IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
lime.utils.IMemoryRange = function() { };
$hxClasses["lime.utils.IMemoryRange"] = lime.utils.IMemoryRange;
lime.utils.IMemoryRange.__name__ = ["lime","utils","IMemoryRange"];
lime.utils.IMemoryRange.prototype = {
	__class__: lime.utils.IMemoryRange
};
var motion = {};
motion.actuators = {};
motion.actuators.IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion.actuators.IGenericActuator;
motion.actuators.IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion.actuators.IGenericActuator.prototype = {
	__class__: motion.actuators.IGenericActuator
};
motion.actuators.GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion.Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion.actuators.GenericActuator;
motion.actuators.GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion.actuators.GenericActuator.__interfaces__ = [motion.actuators.IGenericActuator];
motion.actuators.GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) Reflect.setField(this.target,i,Reflect.field(this.properties,i)); else Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
		}
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) params = [];
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) this.callMethod(this._onUpdate,this._onUpdateParams);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) this.callMethod(this._onComplete,this._onCompleteParams);
		}
		motion.Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) this._onCompleteParams = []; else this._onCompleteParams = parameters;
		if(this.duration == 0) this.complete();
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) this._onRepeatParams = []; else this._onRepeatParams = parameters;
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) this._onPauseParams = []; else this._onPauseParams = parameters;
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) this._onResumeParams = []; else this._onResumeParams = parameters;
		return this;
	}
	,pause: function() {
		if(this._onPause != null) this.callMethod(this._onPause,this._onPauseParams);
	}
	,reflect: function(value) {
		if(value == null) value = true;
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) times = -1;
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) this.callMethod(this._onResume,this._onResumeParams);
	}
	,reverse: function(value) {
		if(value == null) value = true;
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) value = true;
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) value = true;
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion.actuators.GenericActuator
};
motion.actuators.SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = new Array();
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl.Lib.getTimer() / 1000;
	motion.actuators.GenericActuator.call(this,target,duration,properties);
	if(!motion.actuators.SimpleActuator.addedEvent) {
		motion.actuators.SimpleActuator.addedEvent = true;
		openfl.Lib.current.stage.addEventListener(openfl.events.Event.ENTER_FRAME,motion.actuators.SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion.actuators.SimpleActuator;
motion.actuators.SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion.actuators.SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl.Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion.actuators.SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion.actuators.SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) actuator.update(currentTime);
			j++;
		} else {
			motion.actuators.SimpleActuator.actuators.splice(j,1);
			--motion.actuators.SimpleActuator.actuatorsLength;
		}
	}
};
motion.actuators.SimpleActuator.__super__ = motion.actuators.GenericActuator;
motion.actuators.SimpleActuator.prototype = $extend(motion.actuators.GenericActuator.prototype,{
	setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",this.cacheVisible);
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) value = Reflect.field(target,propertyName); else value = Reflect.getProperty(target,propertyName);
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) start = Reflect.field(this.target,i); else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				details = new motion.actuators.PropertyDetails(this.target,i,start,this.getField(this.properties,i) - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js.Boot.__instanceof(this.target,openfl.display.DisplayObject);
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",true);
		}
		this.timeOffset = this.startTime;
		motion.actuators.SimpleActuator.actuators.push(this);
		++motion.actuators.SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion.actuators.GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl.Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl.Lib.getTimer() - this.pauseTime) / 1000;
			motion.actuators.GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) details.target[details.propertyName] = value; else Reflect.setProperty(details.target,details.propertyName,value);
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) this.apply();
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) this.apply();
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) rotation -= 360; else if(rotation < -180) rotation += 360;
						endValue = details.start + rotation * easing;
					} else endValue = details.start + details.change * easing;
					if(!this._snapping) {
						if(details.isField) details.target[details.propertyName] = endValue; else Reflect.setProperty(details.target,details.propertyName,endValue);
					} else this.setProperty(details,Math.round(endValue));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion.actuators.SimpleActuator
});
motion.easing = {};
motion.easing.Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion.easing.Expo;
motion.easing.Expo.__name__ = ["motion","easing","Expo"];
motion.easing.Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Expo.get_easeIn = function() {
	return new motion.easing.ExpoEaseIn();
};
motion.easing.Expo.get_easeInOut = function() {
	return new motion.easing.ExpoEaseInOut();
};
motion.easing.Expo.get_easeOut = function() {
	return new motion.easing.ExpoEaseOut();
};
motion.easing.IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion.easing.IEasing;
motion.easing.IEasing.__name__ = ["motion","easing","IEasing"];
motion.easing.IEasing.prototype = {
	__class__: motion.easing.IEasing
};
motion.easing.ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion.easing.ExpoEaseOut;
motion.easing.ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion.easing.ExpoEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) return 1; else return 1 - Math.pow(2,-10 * k);
	}
	,ease: function(t,b,c,d) {
		if(t == d) return b + c; else return c * (1 - Math.pow(2,-10 * t / d)) + b;
	}
	,__class__: motion.easing.ExpoEaseOut
};
motion.Actuate = function() { };
$hxClasses["motion.Actuate"] = motion.Actuate;
motion.Actuate.__name__ = ["motion","Actuate"];
motion.Actuate.apply = function(target,properties,customActuator) {
	motion.Actuate.stop(target,properties);
	if(customActuator == null) customActuator = motion.Actuate.defaultActuator;
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion.Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	return new motion._Actuate.EffectsOptions(target,duration,overwrite);
};
motion.Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) allowCreation = true;
	if(!(motion.Actuate.targetLibraries.h.__keys__[target.__id__] != null) && allowCreation) motion.Actuate.targetLibraries.set(target,new Array());
	return motion.Actuate.targetLibraries.h[target.__id__];
};
motion.Actuate.isActive = function() {
	var result = false;
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		result = true;
		break;
	}
	return result;
};
motion.Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) overwrite = true;
	return motion.Actuate.tween(target,duration,properties,overwrite,motion.actuators.MotionPathActuator);
};
motion.Actuate.pause = function(target) {
	if(js.Boot.__instanceof(target,motion.actuators.IGenericActuator)) {
		var actuator = target;
		actuator.pause();
	} else {
		var library = motion.Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.pause();
			}
		}
	}
};
motion.Actuate.pauseAll = function() {
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion.Actuate.reset = function() {
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var i = library.length - 1;
		while(i >= 0) {
			library[i].stop(null,false,false);
			i--;
		}
	}
	motion.Actuate.targetLibraries = new haxe.ds.ObjectMap();
};
motion.Actuate.resume = function(target) {
	if(js.Boot.__instanceof(target,motion.actuators.IGenericActuator)) {
		var actuator = target;
		actuator.resume();
	} else {
		var library = motion.Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.resume();
			}
		}
	}
};
motion.Actuate.resumeAll = function() {
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion.Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) sendEvent = true;
	if(complete == null) complete = false;
	if(target != null) {
		if(js.Boot.__instanceof(target,motion.actuators.IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion.Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1;
					_g1 = js.Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					i--;
				}
			}
		}
	}
};
motion.Actuate.timer = function(duration,customActuator) {
	return motion.Actuate.tween(new motion._Actuate.TweenTimer(0),duration,new motion._Actuate.TweenTimer(1),false,customActuator);
};
motion.Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	if(duration == null) duration = 0;
	return new motion._Actuate.TransformOptions(target,duration,overwrite);
};
motion.Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) overwrite = true;
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) customActuator = motion.Actuate.defaultActuator;
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion.Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					i--;
				}
				library = motion.Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else return motion.Actuate.apply(target,properties,customActuator);
	}
	return null;
};
motion.Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion.Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion.Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion.Actuate.targetLibraries.h[target.__id__].length == 0) motion.Actuate.targetLibraries.remove(target);
	}
};
motion.Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) overwrite = true;
	var properties = { start : start, end : end};
	return motion.Actuate.tween(target,duration,properties,overwrite,motion.actuators.MethodActuator);
};
motion._Actuate = {};
motion._Actuate.EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion._Actuate.EffectsOptions;
motion._Actuate.EffectsOptions.__name__ = ["motion","_Actuate","EffectsOptions"];
motion._Actuate.EffectsOptions.prototype = {
	filter: function(reference,properties) {
		properties.filter = reference;
		return motion.Actuate.tween(this.target,this.duration,properties,this.overwrite,motion.actuators.FilterActuator);
	}
	,__class__: motion._Actuate.EffectsOptions
};
motion._Actuate.TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion._Actuate.TransformOptions;
motion._Actuate.TransformOptions.__name__ = ["motion","_Actuate","TransformOptions"];
motion._Actuate.TransformOptions.prototype = {
	color: function(value,strength,alpha) {
		if(strength == null) strength = 1;
		if(value == null) value = 0;
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) properties.colorAlpha = alpha;
		return motion.Actuate.tween(this.target,this.duration,properties,this.overwrite,motion.actuators.TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) properties.soundVolume = volume;
		if(pan != null) properties.soundPan = pan;
		return motion.Actuate.tween(this.target,this.duration,properties,this.overwrite,motion.actuators.TransformActuator);
	}
	,__class__: motion._Actuate.TransformOptions
};
motion._Actuate.TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion._Actuate.TweenTimer;
motion._Actuate.TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion._Actuate.TweenTimer.prototype = {
	__class__: motion._Actuate.TweenTimer
};
motion.MotionPath = function() {
	this._x = new motion.ComponentPath();
	this._y = new motion.ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion.MotionPath;
motion.MotionPath.__name__ = ["motion","MotionPath"];
motion.MotionPath.prototype = {
	bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion.BezierPath(x,controlX,strength));
		this._y.addPath(new motion.BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion.LinearPath(x,strength));
		this._y.addPath(new motion.LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) this._rotation = new motion.RotationPath(this._x,this._y);
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion.MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
motion.IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion.IComponentPath;
motion.IComponentPath.__name__ = ["motion","IComponentPath"];
motion.IComponentPath.prototype = {
	__class__: motion.IComponentPath
};
motion.ComponentPath = function() {
	this.paths = new Array();
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion.ComponentPath;
motion.ComponentPath.__name__ = ["motion","ComponentPath"];
motion.ComponentPath.__interfaces__ = [motion.IComponentPath];
motion.ComponentPath.prototype = {
	addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) return this.paths[0].calculate(this.start,k); else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else return path.calculate(lastEnd,ratio / path.strength);
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.end;
		} else return this.start;
	}
	,__class__: motion.ComponentPath
	,__properties__: {get_end:"get_end"}
};
motion.BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion.BezierPath;
motion.BezierPath.__name__ = ["motion","BezierPath"];
motion.BezierPath.prototype = {
	calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion.BezierPath
};
motion.LinearPath = function(end,strength) {
	motion.BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion.LinearPath;
motion.LinearPath.__name__ = ["motion","LinearPath"];
motion.LinearPath.__super__ = motion.BezierPath;
motion.LinearPath.prototype = $extend(motion.BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion.LinearPath
});
motion.RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
$hxClasses["motion.RotationPath"] = motion.RotationPath;
motion.RotationPath.__name__ = ["motion","RotationPath"];
motion.RotationPath.__interfaces__ = [motion.IComponentPath];
motion.RotationPath.prototype = {
	calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion.RotationPath
	,__properties__: {get_end:"get_end"}
};
motion.actuators.FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
	if(js.Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) target.set_filters([Type.createInstance(this.filterClass,[])]);
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(filter,this.filterClass)) this.filter = filter;
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion.actuators.FilterActuator;
motion.actuators.FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion.actuators.FilterActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.FilterActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") Reflect.setField(this.filter,propertyName,Reflect.field(this.properties,propertyName));
		}
		var filters = this.getField(this.target,"filters");
		Reflect.setField(filters,this.properties.filter,this.filter);
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				start = this.getField(this.filter,propertyName);
				details = new motion.actuators.PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion.actuators.SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) Reflect.setField(filters,this.properties.filter,this.filter); else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js.Boot.__instanceof(filters[i],this.filterClass)) filters[i] = this.filter;
			}
		}
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,__class__: motion.actuators.FilterActuator
});
motion.actuators.MethodActuator = function(target,duration,properties) {
	this.currentParameters = new Array();
	this.tweenProperties = { };
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) this.properties.start = new Array();
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) this.properties.end = this.properties.start;
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion.actuators.MethodActuator;
motion.actuators.MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion.actuators.MethodActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.MethodActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || ((start | 0) === start)) {
				details = new motion.actuators.PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion.actuators.SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: motion.actuators.MethodActuator
});
motion.actuators.MotionPathActuator = function(target,duration,properties) {
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion.actuators.MotionPathActuator;
motion.actuators.MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion.actuators.MotionPathActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.MotionPathActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) Reflect.setField(this.target,propertyName,(js.Boot.__cast(Reflect.field(this.properties,propertyName) , motion.IComponentPath)).get_end()); else Reflect.setProperty(this.target,propertyName,(js.Boot.__cast(Reflect.field(this.properties,propertyName) , motion.IComponentPath)).get_end());
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js.Boot.__cast(Reflect.field(this.properties,propertyName) , motion.IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) path.start = Reflect.field(this.target,propertyName); else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion.actuators.PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) Reflect.setField(details1.target,details1.propertyName,(js.Boot.__cast(details1 , motion.actuators.PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details1.target,details1.propertyName,(js.Boot.__cast(details1 , motion.actuators.PropertyPathDetails)).path.calculate(easing));
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) Reflect.setField(details2.target,details2.propertyName,(js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details2.target,details2.propertyName,(js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing));
					} else if(details2.isField) Reflect.setField(details2.target,details2.propertyName,Math.round((js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing))); else Reflect.setProperty(details2.target,details2.propertyName,Math.round((js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing)));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_MotionPathActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion.actuators.MotionPathActuator
});
motion.actuators.PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) isField = true;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion.actuators.PropertyDetails;
motion.actuators.PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion.actuators.PropertyDetails.prototype = {
	__class__: motion.actuators.PropertyDetails
};
motion.actuators.PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) isField = true;
	motion.actuators.PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion.actuators.PropertyPathDetails;
motion.actuators.PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion.actuators.PropertyPathDetails.__super__ = motion.actuators.PropertyDetails;
motion.actuators.PropertyPathDetails.prototype = $extend(motion.actuators.PropertyDetails.prototype,{
	__class__: motion.actuators.PropertyPathDetails
});
motion.actuators.TransformActuator = function(target,duration,properties) {
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion.actuators.TransformActuator;
motion.actuators.TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion.actuators.TransformActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.TransformActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.endColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.endSoundTransform);
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js.Boot.__instanceof(this.target,openfl.display.DisplayObject)) this.initializeColor();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) this.initializeSound();
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl.geom.ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else this.endColorTransform.alphaMultiplier = this.getField(this.target,"alpha");
		var transform = this.getField(this.target,"transform");
		var begin = this.getField(transform,"colorTransform");
		this.tweenColorTransform = new openfl.geom.ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			start = this.getField(begin,propertyName);
			details = new motion.actuators.PropertyDetails(this.tweenColorTransform,propertyName,start,this.getField(this.endColorTransform,propertyName) - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		if(this.getField(this.target,"soundTransform") == null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",new openfl.media.SoundTransform());
		var start = this.getField(this.target,"soundTransform");
		this.endSoundTransform = this.getField(this.target,"soundTransform");
		this.tweenSoundTransform = new openfl.media.SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion.actuators.PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion.actuators.PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion.actuators.SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.tweenColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.tweenSoundTransform);
	}
	,__class__: motion.actuators.TransformActuator
});
motion.easing.Back = function() { };
$hxClasses["motion.easing.Back"] = motion.easing.Back;
motion.easing.Back.__name__ = ["motion","easing","Back"];
motion.easing.Back.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Back.get_easeIn = function() {
	return new motion.easing.BackEaseIn(1.70158);
};
motion.easing.Back.get_easeInOut = function() {
	return new motion.easing.BackEaseInOut(1.70158);
};
motion.easing.Back.get_easeOut = function() {
	return new motion.easing.BackEaseOut(1.70158);
};
motion.easing.BackEaseIn = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseIn"] = motion.easing.BackEaseIn;
motion.easing.BackEaseIn.__name__ = ["motion","easing","BackEaseIn"];
motion.easing.BackEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.BackEaseIn.prototype = {
	calculate: function(k) {
		return k * k * ((this.s + 1) * k - this.s);
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * ((this.s + 1) * t - this.s) + b;
	}
	,__class__: motion.easing.BackEaseIn
};
motion.easing.BackEaseInOut = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseInOut"] = motion.easing.BackEaseInOut;
motion.easing.BackEaseInOut.__name__ = ["motion","easing","BackEaseInOut"];
motion.easing.BackEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.BackEaseInOut.prototype = {
	calculate: function(k) {
		if((k /= 0.5) < 1) return 0.5 * (k * k * (((this.s *= 1.525) + 1) * k - this.s));
		return 0.5 * ((k -= 2) * k * (((this.s *= 1.525) + 1) * k + this.s) + 2);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * (t * t * (((this.s *= 1.525) + 1) * t - this.s)) + b;
		return c / 2 * ((t -= 2) * t * (((this.s *= 1.525) + 1) * t + this.s) + 2) + b;
	}
	,__class__: motion.easing.BackEaseInOut
};
motion.easing.BackEaseOut = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseOut"] = motion.easing.BackEaseOut;
motion.easing.BackEaseOut.__name__ = ["motion","easing","BackEaseOut"];
motion.easing.BackEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.BackEaseOut.prototype = {
	calculate: function(k) {
		return (k = k - 1) * k * ((this.s + 1) * k + this.s) + 1;
	}
	,ease: function(t,b,c,d) {
		return c * ((t = t / d - 1) * t * ((this.s + 1) * t + this.s) + 1) + b;
	}
	,__class__: motion.easing.BackEaseOut
};
motion.easing.Bounce = function() { };
$hxClasses["motion.easing.Bounce"] = motion.easing.Bounce;
motion.easing.Bounce.__name__ = ["motion","easing","Bounce"];
motion.easing.Bounce.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Bounce.get_easeIn = function() {
	return new motion.easing.BounceEaseIn();
};
motion.easing.Bounce.get_easeInOut = function() {
	return new motion.easing.BounceEaseInOut();
};
motion.easing.Bounce.get_easeOut = function() {
	return new motion.easing.BounceEaseOut();
};
motion.easing.BounceEaseIn = function() {
};
$hxClasses["motion.easing.BounceEaseIn"] = motion.easing.BounceEaseIn;
motion.easing.BounceEaseIn.__name__ = ["motion","easing","BounceEaseIn"];
motion.easing.BounceEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.BounceEaseIn._ease = function(t,b,c,d) {
	return c - motion.easing.BounceEaseOut._ease(d - t,0,c,d) + b;
};
motion.easing.BounceEaseIn.prototype = {
	calculate: function(k) {
		return 1 - motion.easing.BounceEaseOut._ease(1 - k,0,1,1);
	}
	,ease: function(t,b,c,d) {
		return c - motion.easing.BounceEaseOut._ease(d - t,0,c,d) + b;
	}
	,__class__: motion.easing.BounceEaseIn
};
motion.easing.BounceEaseInOut = function() {
};
$hxClasses["motion.easing.BounceEaseInOut"] = motion.easing.BounceEaseInOut;
motion.easing.BounceEaseInOut.__name__ = ["motion","easing","BounceEaseInOut"];
motion.easing.BounceEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.BounceEaseInOut.prototype = {
	calculate: function(k) {
		if(k < .5) return (1 - motion.easing.BounceEaseOut._ease(1 - k * 2,0,1,1)) * .5; else return motion.easing.BounceEaseOut._ease(k * 2 - 1,0,1,1) * .5 + .5;
	}
	,ease: function(t,b,c,d) {
		if(t < d / 2) return (c - motion.easing.BounceEaseOut._ease(d - t * 2,0,c,d)) * .5 + b; else return motion.easing.BounceEaseOut._ease(t * 2 - d,0,c,d) * .5 + c * .5 + b;
	}
	,__class__: motion.easing.BounceEaseInOut
};
motion.easing.BounceEaseOut = function() {
};
$hxClasses["motion.easing.BounceEaseOut"] = motion.easing.BounceEaseOut;
motion.easing.BounceEaseOut.__name__ = ["motion","easing","BounceEaseOut"];
motion.easing.BounceEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.BounceEaseOut._ease = function(t,b,c,d) {
	if((t /= d) < 0.36363636363636365) return c * (7.5625 * t * t) + b; else if(t < 0.72727272727272729) return c * (7.5625 * (t -= 0.54545454545454541) * t + .75) + b; else if(t < 0.90909090909090906) return c * (7.5625 * (t -= 0.81818181818181823) * t + .9375) + b; else return c * (7.5625 * (t -= 0.95454545454545459) * t + .984375) + b;
};
motion.easing.BounceEaseOut.prototype = {
	calculate: function(k) {
		return motion.easing.BounceEaseOut._ease(k,0,1,1);
	}
	,ease: function(t,b,c,d) {
		return motion.easing.BounceEaseOut._ease(t,b,c,d);
	}
	,__class__: motion.easing.BounceEaseOut
};
motion.easing.Cubic = function() { };
$hxClasses["motion.easing.Cubic"] = motion.easing.Cubic;
motion.easing.Cubic.__name__ = ["motion","easing","Cubic"];
motion.easing.Cubic.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Cubic.get_easeIn = function() {
	return new motion.easing.CubicEaseIn();
};
motion.easing.Cubic.get_easeInOut = function() {
	return new motion.easing.CubicEaseInOut();
};
motion.easing.Cubic.get_easeOut = function() {
	return new motion.easing.CubicEaseOut();
};
motion.easing.CubicEaseIn = function() {
};
$hxClasses["motion.easing.CubicEaseIn"] = motion.easing.CubicEaseIn;
motion.easing.CubicEaseIn.__name__ = ["motion","easing","CubicEaseIn"];
motion.easing.CubicEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.CubicEaseIn.prototype = {
	calculate: function(k) {
		return k * k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * t + b;
	}
	,__class__: motion.easing.CubicEaseIn
};
motion.easing.CubicEaseInOut = function() {
};
$hxClasses["motion.easing.CubicEaseInOut"] = motion.easing.CubicEaseInOut;
motion.easing.CubicEaseInOut.__name__ = ["motion","easing","CubicEaseInOut"];
motion.easing.CubicEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.CubicEaseInOut.prototype = {
	calculate: function(k) {
		if((k /= 0.5) < 1) return 0.5 * k * k * k; else return 0.5 * ((k -= 2) * k * k + 2);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * t * t * t + b; else return c / 2 * ((t -= 2) * t * t + 2) + b;
	}
	,__class__: motion.easing.CubicEaseInOut
};
motion.easing.CubicEaseOut = function() {
};
$hxClasses["motion.easing.CubicEaseOut"] = motion.easing.CubicEaseOut;
motion.easing.CubicEaseOut.__name__ = ["motion","easing","CubicEaseOut"];
motion.easing.CubicEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.CubicEaseOut.prototype = {
	calculate: function(k) {
		return --k * k * k + 1;
	}
	,ease: function(t,b,c,d) {
		return c * ((t = t / d - 1) * t * t + 1) + b;
	}
	,__class__: motion.easing.CubicEaseOut
};
motion.easing.Elastic = function() { };
$hxClasses["motion.easing.Elastic"] = motion.easing.Elastic;
motion.easing.Elastic.__name__ = ["motion","easing","Elastic"];
motion.easing.Elastic.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Elastic.get_easeIn = function() {
	return new motion.easing.ElasticEaseIn(0.1,0.4);
};
motion.easing.Elastic.get_easeInOut = function() {
	return new motion.easing.ElasticEaseInOut(0.1,0.4);
};
motion.easing.Elastic.get_easeOut = function() {
	return new motion.easing.ElasticEaseOut(0.1,0.4);
};
motion.easing.ElasticEaseIn = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseIn"] = motion.easing.ElasticEaseIn;
motion.easing.ElasticEaseIn.__name__ = ["motion","easing","ElasticEaseIn"];
motion.easing.ElasticEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.ElasticEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		var s;
		if(this.a < 1) {
			this.a = 1;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(1 / this.a);
		return -(this.a * Math.pow(2,10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / this.p));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if((t /= d) == 1) return b + c;
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		return -(this.a * Math.pow(2,10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / this.p)) + b;
	}
	,__class__: motion.easing.ElasticEaseIn
};
motion.easing.ElasticEaseInOut = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseInOut"] = motion.easing.ElasticEaseInOut;
motion.easing.ElasticEaseInOut.__name__ = ["motion","easing","ElasticEaseInOut"];
motion.easing.ElasticEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.ElasticEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if((k /= 0.5) == 2) return 1;
		var p = 0.44999999999999996;
		var a = 1;
		var s = p / 4;
		if(k < 1) return -0.5 * (Math.pow(2,10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
		return Math.pow(2,-10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if((t /= d / 2) == 2) return b + c;
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		if(t < 1) return -0.5 * (this.a * Math.pow(2,10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / this.p)) + b;
		return this.a * Math.pow(2,-10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / this.p) * 0.5 + c + b;
	}
	,__class__: motion.easing.ElasticEaseInOut
};
motion.easing.ElasticEaseOut = function(a,p) {
	this.a = a;
	this.p = p;
};
$hxClasses["motion.easing.ElasticEaseOut"] = motion.easing.ElasticEaseOut;
motion.easing.ElasticEaseOut.__name__ = ["motion","easing","ElasticEaseOut"];
motion.easing.ElasticEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.ElasticEaseOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		var s;
		if(this.a < 1) {
			this.a = 1;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(1 / this.a);
		return this.a * Math.pow(2,-10 * k) * Math.sin((k - s) * (2 * Math.PI) / this.p) + 1;
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if((t /= d) == 1) return b + c;
		var s;
		if(this.a < Math.abs(c)) {
			this.a = c;
			s = this.p / 4;
		} else s = this.p / (2 * Math.PI) * Math.asin(c / this.a);
		return this.a * Math.pow(2,-10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / this.p) + c + b;
	}
	,__class__: motion.easing.ElasticEaseOut
};
motion.easing.ExpoEaseIn = function() {
};
$hxClasses["motion.easing.ExpoEaseIn"] = motion.easing.ExpoEaseIn;
motion.easing.ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion.easing.ExpoEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) return 0; else return Math.pow(2,10 * (k - 1));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b; else return c * Math.pow(2,10 * (t / d - 1)) + b;
	}
	,__class__: motion.easing.ExpoEaseIn
};
motion.easing.ExpoEaseInOut = function() {
};
$hxClasses["motion.easing.ExpoEaseInOut"] = motion.easing.ExpoEaseInOut;
motion.easing.ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion.easing.ExpoEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		if((k /= 0.5) < 1.0) return 0.5 * Math.pow(2,10 * (k - 1));
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if(t == d) return b + c;
		if((t /= d / 2.0) < 1.0) return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion.easing.ExpoEaseInOut
};
motion.easing.Linear = function() { };
$hxClasses["motion.easing.Linear"] = motion.easing.Linear;
motion.easing.Linear.__name__ = ["motion","easing","Linear"];
motion.easing.Linear.__properties__ = {get_easeNone:"get_easeNone"}
motion.easing.Linear.get_easeNone = function() {
	return new motion.easing.LinearEaseNone();
};
motion.easing.LinearEaseNone = function() {
};
$hxClasses["motion.easing.LinearEaseNone"] = motion.easing.LinearEaseNone;
motion.easing.LinearEaseNone.__name__ = ["motion","easing","LinearEaseNone"];
motion.easing.LinearEaseNone.__interfaces__ = [motion.easing.IEasing];
motion.easing.LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,ease: function(t,b,c,d) {
		return c * t / d + b;
	}
	,__class__: motion.easing.LinearEaseNone
};
motion.easing.Quad = function() { };
$hxClasses["motion.easing.Quad"] = motion.easing.Quad;
motion.easing.Quad.__name__ = ["motion","easing","Quad"];
motion.easing.Quad.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Quad.get_easeIn = function() {
	return new motion.easing.QuadEaseIn();
};
motion.easing.Quad.get_easeInOut = function() {
	return new motion.easing.QuadEaseInOut();
};
motion.easing.Quad.get_easeOut = function() {
	return new motion.easing.QuadEaseOut();
};
motion.easing.QuadEaseIn = function() {
};
$hxClasses["motion.easing.QuadEaseIn"] = motion.easing.QuadEaseIn;
motion.easing.QuadEaseIn.__name__ = ["motion","easing","QuadEaseIn"];
motion.easing.QuadEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuadEaseIn.prototype = {
	calculate: function(k) {
		return k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t + b;
	}
	,__class__: motion.easing.QuadEaseIn
};
motion.easing.QuadEaseInOut = function() {
};
$hxClasses["motion.easing.QuadEaseInOut"] = motion.easing.QuadEaseInOut;
motion.easing.QuadEaseInOut.__name__ = ["motion","easing","QuadEaseInOut"];
motion.easing.QuadEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuadEaseInOut.prototype = {
	calculate: function(k) {
		if((k *= 2) < 1) return 0.5 * k * k;
		return -0.5 * ((k - 1) * (k - 3) - 1);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * t * t + b;
		return -c / 2 * ((t - 1) * (t - 3) - 1) + b;
	}
	,__class__: motion.easing.QuadEaseInOut
};
motion.easing.QuadEaseOut = function() {
};
$hxClasses["motion.easing.QuadEaseOut"] = motion.easing.QuadEaseOut;
motion.easing.QuadEaseOut.__name__ = ["motion","easing","QuadEaseOut"];
motion.easing.QuadEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuadEaseOut.prototype = {
	calculate: function(k) {
		return -k * (k - 2);
	}
	,ease: function(t,b,c,d) {
		return -c * (t /= d) * (t - 2) + b;
	}
	,__class__: motion.easing.QuadEaseOut
};
motion.easing.Quart = function() { };
$hxClasses["motion.easing.Quart"] = motion.easing.Quart;
motion.easing.Quart.__name__ = ["motion","easing","Quart"];
motion.easing.Quart.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Quart.get_easeIn = function() {
	return new motion.easing.QuartEaseIn();
};
motion.easing.Quart.get_easeInOut = function() {
	return new motion.easing.QuartEaseInOut();
};
motion.easing.Quart.get_easeOut = function() {
	return new motion.easing.QuartEaseOut();
};
motion.easing.QuartEaseIn = function() {
};
$hxClasses["motion.easing.QuartEaseIn"] = motion.easing.QuartEaseIn;
motion.easing.QuartEaseIn.__name__ = ["motion","easing","QuartEaseIn"];
motion.easing.QuartEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuartEaseIn.prototype = {
	calculate: function(k) {
		return k * k * k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * t * t + b;
	}
	,__class__: motion.easing.QuartEaseIn
};
motion.easing.QuartEaseInOut = function() {
};
$hxClasses["motion.easing.QuartEaseInOut"] = motion.easing.QuartEaseInOut;
motion.easing.QuartEaseInOut.__name__ = ["motion","easing","QuartEaseInOut"];
motion.easing.QuartEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuartEaseInOut.prototype = {
	calculate: function(k) {
		if((k *= 2) < 1) return 0.5 * k * k * k * k;
		return -0.5 * ((k -= 2) * k * k * k - 2);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
		return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
	}
	,__class__: motion.easing.QuartEaseInOut
};
motion.easing.QuartEaseOut = function() {
};
$hxClasses["motion.easing.QuartEaseOut"] = motion.easing.QuartEaseOut;
motion.easing.QuartEaseOut.__name__ = ["motion","easing","QuartEaseOut"];
motion.easing.QuartEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuartEaseOut.prototype = {
	calculate: function(k) {
		return -(--k * k * k * k - 1);
	}
	,ease: function(t,b,c,d) {
		return -c * ((t = t / d - 1) * t * t * t - 1) + b;
	}
	,__class__: motion.easing.QuartEaseOut
};
motion.easing.Quint = function() { };
$hxClasses["motion.easing.Quint"] = motion.easing.Quint;
motion.easing.Quint.__name__ = ["motion","easing","Quint"];
motion.easing.Quint.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Quint.get_easeIn = function() {
	return new motion.easing.QuintEaseIn();
};
motion.easing.Quint.get_easeInOut = function() {
	return new motion.easing.QuintEaseInOut();
};
motion.easing.Quint.get_easeOut = function() {
	return new motion.easing.QuintEaseOut();
};
motion.easing.QuintEaseIn = function() {
};
$hxClasses["motion.easing.QuintEaseIn"] = motion.easing.QuintEaseIn;
motion.easing.QuintEaseIn.__name__ = ["motion","easing","QuintEaseIn"];
motion.easing.QuintEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuintEaseIn.prototype = {
	calculate: function(k) {
		return k * k * k * k * k;
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * t * t * t + b;
	}
	,__class__: motion.easing.QuintEaseIn
};
motion.easing.QuintEaseInOut = function() {
};
$hxClasses["motion.easing.QuintEaseInOut"] = motion.easing.QuintEaseInOut;
motion.easing.QuintEaseInOut.__name__ = ["motion","easing","QuintEaseInOut"];
motion.easing.QuintEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuintEaseInOut.prototype = {
	calculate: function(k) {
		if((k *= 2) < 1) return 0.5 * k * k * k * k * k;
		return 0.5 * ((k -= 2) * k * k * k * k + 2);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
		return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
	}
	,__class__: motion.easing.QuintEaseInOut
};
motion.easing.QuintEaseOut = function() {
};
$hxClasses["motion.easing.QuintEaseOut"] = motion.easing.QuintEaseOut;
motion.easing.QuintEaseOut.__name__ = ["motion","easing","QuintEaseOut"];
motion.easing.QuintEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.QuintEaseOut.prototype = {
	calculate: function(k) {
		return --k * k * k * k * k + 1;
	}
	,ease: function(t,b,c,d) {
		return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
	}
	,__class__: motion.easing.QuintEaseOut
};
motion.easing.Sine = function() { };
$hxClasses["motion.easing.Sine"] = motion.easing.Sine;
motion.easing.Sine.__name__ = ["motion","easing","Sine"];
motion.easing.Sine.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Sine.get_easeIn = function() {
	return new motion.easing.SineEaseIn();
};
motion.easing.Sine.get_easeInOut = function() {
	return new motion.easing.SineEaseInOut();
};
motion.easing.Sine.get_easeOut = function() {
	return new motion.easing.SineEaseOut();
};
motion.easing.SineEaseIn = function() {
};
$hxClasses["motion.easing.SineEaseIn"] = motion.easing.SineEaseIn;
motion.easing.SineEaseIn.__name__ = ["motion","easing","SineEaseIn"];
motion.easing.SineEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.SineEaseIn.prototype = {
	calculate: function(k) {
		return 1 - Math.cos(k * (Math.PI / 2));
	}
	,ease: function(t,b,c,d) {
		return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
	}
	,__class__: motion.easing.SineEaseIn
};
motion.easing.SineEaseInOut = function() {
};
$hxClasses["motion.easing.SineEaseInOut"] = motion.easing.SineEaseInOut;
motion.easing.SineEaseInOut.__name__ = ["motion","easing","SineEaseInOut"];
motion.easing.SineEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.SineEaseInOut.prototype = {
	calculate: function(k) {
		return -(Math.cos(Math.PI * k) - 1) / 2;
	}
	,ease: function(t,b,c,d) {
		return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
	}
	,__class__: motion.easing.SineEaseInOut
};
motion.easing.SineEaseOut = function() {
};
$hxClasses["motion.easing.SineEaseOut"] = motion.easing.SineEaseOut;
motion.easing.SineEaseOut.__name__ = ["motion","easing","SineEaseOut"];
motion.easing.SineEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.SineEaseOut.prototype = {
	calculate: function(k) {
		return Math.sin(k * (Math.PI / 2));
	}
	,ease: function(t,b,c,d) {
		return c * Math.sin(t / d * (Math.PI / 2)) + b;
	}
	,__class__: motion.easing.SineEaseOut
};
openfl.IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl.IAssetCache;
openfl.IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl.IAssetCache.prototype = {
	__class__: openfl.IAssetCache
};
openfl.AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.sound = new haxe.ds.StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl.AssetCache;
openfl.AssetCache.__name__ = ["openfl","AssetCache"];
openfl.AssetCache.__interfaces__ = [openfl.IAssetCache];
openfl.AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.sound = new haxe.ds.StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl.AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
openfl.Assets = function() { };
$hxClasses["openfl.Assets"] = openfl.Assets;
openfl.Assets.__name__ = ["openfl","Assets"];
openfl.Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	openfl.Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl.Assets.dispatchEvent = function(event) {
	return openfl.Assets.dispatcher.dispatchEvent(event);
};
openfl.Assets.exists = function(id,type) {
	return lime.Assets.exists(id,type);
};
openfl.Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl.Assets.cache.getBitmapData(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime.Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl.display.BitmapData.fromImage(image);
		if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl.Assets.getBytes = function(id) {
	return lime.Assets.getBytes(id);
};
openfl.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasFont(id)) return openfl.Assets.cache.getFont(id);
	var limeFont = lime.Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl.text.Font.__fromLimeFont(limeFont);
		if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl.text.Font();
};
openfl.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime.Assets.libraries.get(name);
};
openfl.Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe.Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 221, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 227, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl.Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime.Assets.getPath(id);
	if(path != null) return new openfl.media.Sound(new openfl.net.URLRequest(path));
	return null;
};
openfl.Assets.getPath = function(id) {
	return lime.Assets.getPath(id);
};
openfl.Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasSound(id)) {
		var sound = openfl.Assets.cache.getSound(id);
		if(openfl.Assets.isValidSound(sound)) return sound;
	}
	var path = lime.Assets.getPath(id);
	if(path != null) return new openfl.media.Sound(new openfl.net.URLRequest(path));
	return null;
};
openfl.Assets.getText = function(id) {
	return lime.Assets.getText(id);
};
openfl.Assets.hasEventListener = function(type) {
	return openfl.Assets.dispatcher.hasEventListener(type);
};
openfl.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl.Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl.Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl.Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl.Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.__image != null;
	return true;
};
openfl.Assets.isValidSound = function(sound) {
	return true;
};
openfl.Assets.list = function(type) {
	return lime.Assets.list(type);
};
openfl.Assets.loadBitmapData = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl.Assets.cache.getBitmapData(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) {
			handler(bitmapData);
			return;
		}
	}
	lime.Assets.loadImage(id,function(image) {
		if(image != null) {
			var bitmapData1 = openfl.display.BitmapData.fromImage(image);
			if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setBitmapData(id,bitmapData1);
			handler(bitmapData1);
		}
	},false);
};
openfl.Assets.loadBytes = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 546, className : "openfl.Assets", methodName : "loadBytes"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 552, className : "openfl.Assets", methodName : "loadBytes"});
	handler(null);
};
openfl.Assets.loadFont = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasFont(id)) {
		handler(openfl.Assets.cache.getFont(id));
		return;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			library.loadFont(symbolName,function(limeFont) {
				var font = openfl.text.Font.__fromLimeFont(limeFont);
				if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setFont(id,font);
				handler(font);
			});
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 611, className : "openfl.Assets", methodName : "loadFont"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 617, className : "openfl.Assets", methodName : "loadFont"});
	handler(null);
};
openfl.Assets.loadLibrary = function(name,handler) {
	lime.Assets.loadLibrary(name,handler);
};
openfl.Assets.loadMusic = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl.Assets.getMusic(id,useCache));
};
openfl.Assets.loadMovieClip = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			library.loadMovieClip(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 695, className : "openfl.Assets", methodName : "loadMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 701, className : "openfl.Assets", methodName : "loadMovieClip"});
	handler(null);
};
openfl.Assets.loadSound = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl.Assets.getSound(id,useCache));
};
openfl.Assets.loadText = function(id,handler) {
	lime.Assets.loadText(id,handler);
};
openfl.Assets.registerLibrary = function(name,library) {
	lime.Assets.registerLibrary(name,library);
};
openfl.Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl.Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl.Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl.Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl.Assets.unloadLibrary = function(name) {
	lime.Assets.unloadLibrary(name);
};
openfl.Assets.library_onEvent = function(library,type) {
	if(type == "change") {
		openfl.Assets.cache.clear();
		openfl.Assets.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
};
openfl._Assets = {};
openfl._Assets.AssetType_Impl_ = function() { };
$hxClasses["openfl._Assets.AssetType_Impl_"] = openfl._Assets.AssetType_Impl_;
openfl._Assets.AssetType_Impl_.__name__ = ["openfl","_Assets","AssetType_Impl_"];
openfl.Memory = function() { };
$hxClasses["openfl.Memory"] = openfl.Memory;
openfl.Memory.__name__ = ["openfl","Memory"];
openfl.Memory.gcRef = null;
openfl.Memory.len = null;
openfl.Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl.Memory.gcRef.position;
	openfl.Memory.gcRef.position = position;
	var value = action();
	openfl.Memory.gcRef.position = oldPosition;
	return value;
};
openfl.Memory.getByte = function(addr) {
	return openfl.Memory.gcRef.data.getInt8(addr);
};
openfl.Memory.getDouble = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readDouble();
	});
};
openfl.Memory.getFloat = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readFloat();
	});
};
openfl.Memory.getI32 = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readInt();
	});
};
openfl.Memory.getUI16 = function(addr) {
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readUnsignedShort();
	});
};
openfl.Memory.select = function(inBytes) {
	openfl.Memory.gcRef = inBytes;
	if(inBytes != null) openfl.Memory.len = inBytes.length; else openfl.Memory.len = 0;
};
openfl.Memory.setByte = function(addr,v) {
	openfl.Memory.gcRef.data.setUint8(addr,v);
};
openfl.Memory.setDouble = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeDouble(v);
	});
};
openfl.Memory.setFloat = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeFloat(v);
	});
};
openfl.Memory.setI16 = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeUnsignedShort(v);
	});
};
openfl.Memory.setI32 = function(addr,v) {
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeInt(v);
	});
};
openfl._Vector = {};
openfl._Vector.Vector_Impl_ = function() { };
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl._Vector.Vector_Impl_;
openfl._Vector.Vector_Impl_.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl._Vector.Vector_Impl_.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl._Vector.Vector_Impl_._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl._Vector.Vector_Impl_.concat = function(this1,a) {
	var vectorData = new openfl.VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.copy = function(this1) {
	var vectorData = new openfl.VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.iterator = function(this1) {
	return new openfl.VectorDataIterator(this1);
};
openfl._Vector.Vector_Impl_.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl._Vector.Vector_Impl_.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl._Vector.Vector_Impl_.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl._Vector.Vector_Impl_.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl._Vector.Vector_Impl_.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl._Vector.Vector_Impl_.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl._Vector.Vector_Impl_.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl.VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.sort = function(this1,f) {
	var array = haxe.ds._Vector.Vector_Impl_.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl._Vector.Vector_Impl_.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl.VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl._Vector.Vector_Impl_.toString = function(this1) {
	return haxe.ds._Vector.Vector_Impl_.toArray(this1.data).toString();
};
openfl._Vector.Vector_Impl_.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl._Vector.Vector_Impl_.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl._Vector.Vector_Impl_.ofArray = function(a) {
	var vectorData = new openfl.VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.convert = function(v) {
	return v;
};
openfl._Vector.Vector_Impl_.get = function(this1,index) {
	return this1.data[index];
};
openfl._Vector.Vector_Impl_.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl._Vector.Vector_Impl_.fromArray = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toArray = function(this1) {
	var value = new Array();
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl._Vector.Vector_Impl_.fromHaxeVector = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toHaxeVector = function(this1) {
	return this1.data;
};
openfl._Vector.Vector_Impl_.fromVectorData = function(value) {
	return value;
};
openfl._Vector.Vector_Impl_.toVectorData = function(this1) {
	return this1;
};
openfl._Vector.Vector_Impl_.get_length = function(this1) {
	return this1.length;
};
openfl._Vector.Vector_Impl_.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl._Vector.Vector_Impl_.get_fixed = function(this1) {
	return this1.fixed;
};
openfl._Vector.Vector_Impl_.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl.VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl.VectorDataIterator;
openfl.VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl.VectorDataIterator.prototype = {
	hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl.VectorDataIterator
};
openfl._internal = {};
openfl._internal.aglsl = {};
openfl._internal.aglsl.AGALTokenizer = function() {
};
$hxClasses["openfl._internal.aglsl.AGALTokenizer"] = openfl._internal.aglsl.AGALTokenizer;
openfl._internal.aglsl.AGALTokenizer.__name__ = ["openfl","_internal","aglsl","AGALTokenizer"];
openfl._internal.aglsl.AGALTokenizer.prototype = {
	decribeAGALByteArray: function(bytes) {
		var header = new openfl._internal.aglsl.Header();
		bytes.position = 0;
		if(bytes.readUnsignedByte() != 160) throw "Bad AGAL: Missing 0xa0 magic byte.";
		header.version = bytes.readUnsignedInt();
		if(header.version >= 16) {
			bytes.readUnsignedByte();
			header.version >>= 1;
		}
		if(bytes.readUnsignedByte() != 161) throw "Bad AGAL: Missing 0xa1 magic byte.";
		header.progid = bytes.readUnsignedByte();
		var _sw0_ = header.progid;
		switch(_sw0_) {
		case 1:
			header.type = "fragment";
			break;
		case 0:
			header.type = "vertex";
			break;
		case 2:
			header.type = "cpu";
			break;
		default:
			header.type = "";
		}
		var desc = new openfl._internal.aglsl.Description();
		var tokens = new Array();
		var agal2glsllut = openfl._internal.aglsl.Mapping.get_agal2glsllut();
		while(bytes.position < bytes.length) {
			var token = new openfl._internal.aglsl.Token();
			token.opcode = bytes.readUnsignedInt();
			var lutentry = openfl._internal.aglsl.Mapping.get_agal2glsllut()[token.opcode];
			if(lutentry == null) throw "Opcode not valid or not implemented yet: " + token.opcode;
			if(lutentry.matrixheight == 0) desc.hasmatrix = true;
			if(lutentry.dest) {
				token.dest.regnum = bytes.readUnsignedShort();
				token.dest.mask = bytes.readUnsignedByte();
				token.dest.regtype = bytes.readUnsignedByte();
				if(desc.regwrite[token.dest.regtype][token.dest.regnum] == null) desc.regwrite[token.dest.regtype][token.dest.regnum] = token.dest.mask; else desc.regwrite[token.dest.regtype][token.dest.regnum] |= token.dest.mask;
			} else {
				token.dest = null;
				bytes.readUnsignedInt();
			}
			if(lutentry.a) this.readReg(token.a,1,desc,bytes); else {
				token.a = null;
				bytes.readUnsignedInt();
				bytes.readUnsignedInt();
			}
			if(lutentry.b) this.readReg(token.b,lutentry.matrixheight | 0,desc,bytes); else {
				token.b = null;
				bytes.readUnsignedInt();
				bytes.readUnsignedInt();
			}
			tokens.push(token);
		}
		desc.header = header;
		desc.tokens = tokens;
		return desc;
	}
	,readReg: function(s,mh,desc,bytes) {
		s.regnum = bytes.readUnsignedShort();
		s.indexoffset = bytes.readByte();
		s.swizzle = bytes.readUnsignedByte();
		s.regtype = bytes.readUnsignedByte();
		desc.regread[s.regtype][s.regnum] = 15;
		if((function($this) {
			var $r;
			var $int = s.regtype;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 5) {
			s.lodbiad = s.indexoffset;
			s.indexoffset = 0;
			s.swizzle = 0;
			s.readmode = bytes.readUnsignedByte();
			s.dim = s.readmode >> 4;
			s.readmode &= 15;
			s.special = bytes.readUnsignedByte();
			s.wrap = s.special >> 4;
			s.special &= 15;
			s.mipmap = bytes.readUnsignedByte();
			s.filter = s.mipmap >> 4;
			s.mipmap &= 15;
			desc.samplers[s.regnum] = s;
		} else {
			s.indexregtype = bytes.readUnsignedByte();
			s.indexselect = bytes.readUnsignedByte();
			s.indirectflag = bytes.readUnsignedByte();
		}
		if(s.indirectflag == 1) desc.hasindirect = true;
		if(s.indirectflag == 0 && mh > 0) {
			var mhi = 0;
			while(mhi < mh) {
				desc.regread[s.regtype][s.regnum + mhi] = desc.regread[s.regtype][s.regnum];
				mhi++;
			}
		}
	}
	,__class__: openfl._internal.aglsl.AGALTokenizer
};
openfl._internal.aglsl.AGLSLCompiler = function() {
};
$hxClasses["openfl._internal.aglsl.AGLSLCompiler"] = openfl._internal.aglsl.AGLSLCompiler;
openfl._internal.aglsl.AGLSLCompiler.__name__ = ["openfl","_internal","aglsl","AGLSLCompiler"];
openfl._internal.aglsl.AGLSLCompiler.prototype = {
	compile: function(programType,source) {
		var agalMiniAssembler = new openfl.utils.AGALMiniAssembler();
		var tokenizer = new openfl._internal.aglsl.AGALTokenizer();
		var data;
		var concatSource;
		switch(programType) {
		case "vertex":
			concatSource = "part vertex 1 \n" + source + "\nendpart\n";
			agalMiniAssembler.assemble(concatSource);
			data = agalMiniAssembler.r.get("vertex").data;
			break;
		case "fragment":
			concatSource = "part fragment 1 \n" + source + "\nendpart\n";
			agalMiniAssembler.assemble(concatSource);
			data = agalMiniAssembler.r.get("fragment").data;
			break;
		default:
			throw "Unknown Context3DProgramType";
		}
		var description = tokenizer.decribeAGALByteArray(data);
		var parser = new openfl._internal.aglsl.AGLSLParser();
		this.glsl = parser.parse(description);
		return this.glsl;
	}
	,__class__: openfl._internal.aglsl.AGLSLCompiler
};
openfl._internal.aglsl.AGLSLParser = function() {
};
$hxClasses["openfl._internal.aglsl.AGLSLParser"] = openfl._internal.aglsl.AGLSLParser;
openfl._internal.aglsl.AGLSLParser.__name__ = ["openfl","_internal","aglsl","AGLSLParser"];
openfl._internal.aglsl.AGLSLParser.prototype = {
	parse: function(desc) {
		var header = "";
		var body = "";
		var i = 0;
		header += "precision highp float;\n";
		var tag = desc.header.type.charAt(0);
		if(desc.header.type == "vertex") header += "uniform float yflip;\n";
		if(!desc.hasindirect) {
			i = 0;
			while(i < desc.regread[1].length) {
				if(desc.regread[1][i] > 0) header += "uniform vec4 " + tag + "c" + i + ";\n";
				i++;
			}
		} else header += "uniform vec4 " + tag + "carrr[" + openfl._internal.aglsl.Context3D.maxvertexconstants + "];\n";
		i = 0;
		while(i < desc.regread[2].length || i < desc.regwrite[2].length) {
			if(desc.regread[2][i] > 0 || desc.regwrite[2][i] > 0) header += "vec4 " + tag + "t" + i + ";\n";
			i++;
		}
		i = 0;
		while(i < desc.regread[0].length) {
			if(desc.regread[0][i] > 0) header += "attribute vec4 va" + i + ";\n";
			i++;
		}
		i = 0;
		while(i < desc.regread[4].length || i < desc.regwrite[4].length) {
			if(desc.regread[4][i] > 0 || desc.regwrite[4][i] > 0) header += "varying vec4 vi" + i + ";\n";
			i++;
		}
		var samptype = ["2D","Cube","3D",""];
		i = 0;
		while(i < desc.samplers.length) {
			if(desc.samplers[i] != null) header += "uniform sampler" + samptype[desc.samplers[i].dim & 3] + " fs" + i + ";\n";
			i++;
		}
		if(desc.header.type == "vertex") header += "vec4 outpos;\n";
		if(desc.writedepth) header += "vec4 tmp_FragDepth;\n";
		body += "void main() {\n";
		i = 0;
		while(i < desc.tokens.length) {
			var lutentry = openfl._internal.aglsl.Mapping.get_agal2glsllut()[desc.tokens[i].opcode];
			if(lutentry == null) throw "Opcode not valid or not implemented yet: ";
			var sublines = Std["int"](Math.max(lutentry.matrixheight,1));
			var _g = 0;
			while(_g < sublines) {
				var sl = _g++;
				var line = "  " + lutentry.s;
				var destregstring;
				var destcaststring;
				var destmaskstring;
				if(desc.tokens[i].dest != null) {
					if(lutentry.matrixheight > 0) {
						if((desc.tokens[i].dest.mask >> sl & 1) != 1) continue;
						destregstring = this.regtostring(desc.tokens[i].dest.regtype,desc.tokens[i].dest.regnum,desc,tag);
						destcaststring = "float";
						destmaskstring = ["x","y","z","w"][sl];
						destregstring += "." + destmaskstring;
					} else {
						destregstring = this.regtostring(desc.tokens[i].dest.regtype,desc.tokens[i].dest.regnum,desc,tag);
						if(desc.tokens[i].dest.mask != 15) {
							var ndest = 0;
							destmaskstring = "";
							if((desc.tokens[i].dest.mask & 1) != 0) {
								ndest++;
								destmaskstring += "x";
							}
							if((desc.tokens[i].dest.mask & 2) != 0) {
								ndest++;
								destmaskstring += "y";
							}
							if((desc.tokens[i].dest.mask & 4) != 0) {
								ndest++;
								destmaskstring += "z";
							}
							if((desc.tokens[i].dest.mask & 8) != 0) {
								ndest++;
								destmaskstring += "w";
							}
							destregstring += "." + destmaskstring;
							switch(ndest) {
							case 1:
								destcaststring = "float";
								break;
							case 2:
								destcaststring = "vec2";
								break;
							case 3:
								destcaststring = "vec3";
								break;
							default:
								throw "Unexpected destination mask" + desc.tokens[i].dest.mask;
							}
						} else {
							destcaststring = "vec4";
							destmaskstring = "xyzw";
						}
					}
					line = StringTools.replace(line,"%dest",destregstring);
					line = StringTools.replace(line,"%cast",destcaststring);
					line = StringTools.replace(line,"%dm",destmaskstring);
				}
				var dwm = 15;
				if(!lutentry.ndwm && lutentry.dest && desc.tokens[i].dest != null) dwm = desc.tokens[i].dest.mask;
				if(desc.tokens[i].a != null) line = StringTools.replace(line,"%a",this.sourcetostring(desc.tokens[i].a,0,dwm,lutentry.scalar,desc,tag));
				if(desc.tokens[i].b != null) {
					line = StringTools.replace(line,"%b",this.sourcetostring(desc.tokens[i].b,sl,dwm,lutentry.scalar,desc,tag));
					if(desc.tokens[i].b.regtype == 5) {
						var texdim = ["2D","Cube","3D"][desc.tokens[i].b.dim];
						var texsize = ["vec2","vec3","vec3"][desc.tokens[i].b.dim];
						line = StringTools.replace(line,"%texdim",texdim);
						line = StringTools.replace(line,"%texsize",texsize);
						var texlod = "";
						line = StringTools.replace(line,"%lod",texlod);
					}
				}
				body += line;
			}
			i++;
		}
		if(desc.header.type == "vertex") body += "  gl_Position = vec4(outpos.x, yflip*outpos.y, outpos.z*2.0 - outpos.w, outpos.w);\n";
		if(desc.writedepth) body += "  gl_FragDepth = clamp(tmp_FragDepth,0.0,1.0);\n";
		body += "}\n";
		return header + body;
	}
	,regtostring: function(regtype,regnum,desc,tag) {
		switch(regtype) {
		case 0:
			return "va" + regnum;
		case 1:
			if(desc.hasindirect && desc.header.type == "vertex") return "vcarrr[" + regnum + "]"; else return tag + "c" + regnum;
			break;
		case 2:
			return tag + "t" + regnum;
		case 3:
			if(desc.header.type == "vertex") return "outpos"; else return "gl_FragColor";
			break;
		case 4:
			return "vi" + regnum;
		case 5:
			return "fs" + regnum;
		case 6:
			return "tmp_FragDepth";
		default:
			throw "Unknown register type";
		}
	}
	,sourcetostring: function(s,subline,dwm,isscalar,desc,tag) {
		var swiz = ["x","y","z","w"];
		var r;
		if(s.indirectflag == 1) {
			r = "vcarrr[int(" + this.regtostring(s.indexregtype,s.regnum,desc,tag) + "." + swiz[s.indexselect] + ")";
			var realofs = subline + s.indexoffset;
			if(realofs < 0) if(realofs == null) r += "null"; else r += "" + realofs;
			if(realofs > 0) r += "+" + (realofs == null?"null":"" + realofs);
			r += "]";
		} else r = this.regtostring(s.regtype,s.regnum + subline,desc,tag);
		if((function($this) {
			var $r;
			var $int = s.regtype;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 5) return r;
		if(isscalar) return r + "." + swiz[s.swizzle & 3];
		if(s.swizzle == 228 && dwm == 15) return r;
		r += ".";
		if((dwm & 1) != 0) r += swiz[s.swizzle & 3];
		if((dwm & 2) != 0) r += swiz[s.swizzle >> 2 & 3];
		if((dwm & 4) != 0) r += swiz[s.swizzle >> 4 & 3];
		if((dwm & 8) != 0) r += swiz[s.swizzle >> 6 & 3];
		return r;
	}
	,__class__: openfl._internal.aglsl.AGLSLParser
};
openfl._internal.aglsl.Sampler = function() {
	this.lodbias = 0;
	this.dim = 0;
	this.readmode = 0;
	this.special = 0;
	this.wrap = 0;
	this.mipmap = 0;
	this.filter = 0;
};
$hxClasses["openfl._internal.aglsl.Sampler"] = openfl._internal.aglsl.Sampler;
openfl._internal.aglsl.Sampler.__name__ = ["openfl","_internal","aglsl","Sampler"];
openfl._internal.aglsl.Sampler.prototype = {
	__class__: openfl._internal.aglsl.Sampler
};
openfl._internal.aglsl.Context3D = function() { };
$hxClasses["openfl._internal.aglsl.Context3D"] = openfl._internal.aglsl.Context3D;
openfl._internal.aglsl.Context3D.__name__ = ["openfl","_internal","aglsl","Context3D"];
openfl._internal.aglsl.Description = function() {
	this.regread = [[],[],[],[],[],[],[]];
	this.regwrite = [[],[],[],[],[],[],[]];
	this.hasindirect = false;
	this.writedepth = false;
	this.hasmatrix = false;
	this.samplers = [];
	this.tokens = [];
	this.header = new openfl._internal.aglsl.Header();
};
$hxClasses["openfl._internal.aglsl.Description"] = openfl._internal.aglsl.Description;
openfl._internal.aglsl.Description.__name__ = ["openfl","_internal","aglsl","Description"];
openfl._internal.aglsl.Description.prototype = {
	__class__: openfl._internal.aglsl.Description
};
openfl._internal.aglsl.Destination = function() {
	this.mask = 0;
	this.regnum = 0;
	this.regtype = 0;
	this.dim = 0;
};
$hxClasses["openfl._internal.aglsl.Destination"] = openfl._internal.aglsl.Destination;
openfl._internal.aglsl.Destination.__name__ = ["openfl","_internal","aglsl","Destination"];
openfl._internal.aglsl.Destination.prototype = {
	__class__: openfl._internal.aglsl.Destination
};
openfl._internal.aglsl.Header = function() {
	this.progid = 0;
	this.version = 0;
	this.type = "";
};
$hxClasses["openfl._internal.aglsl.Header"] = openfl._internal.aglsl.Header;
openfl._internal.aglsl.Header.__name__ = ["openfl","_internal","aglsl","Header"];
openfl._internal.aglsl.Header.prototype = {
	__class__: openfl._internal.aglsl.Header
};
openfl._internal.aglsl.Mapping = function() { };
$hxClasses["openfl._internal.aglsl.Mapping"] = openfl._internal.aglsl.Mapping;
openfl._internal.aglsl.Mapping.__name__ = ["openfl","_internal","aglsl","Mapping"];
openfl._internal.aglsl.Mapping.__properties__ = {get_agal2glsllut:"get_agal2glsllut"}
openfl._internal.aglsl.Mapping._agal2glsllut = null;
openfl._internal.aglsl.Mapping.get_agal2glsllut = function() {
	if(openfl._internal.aglsl.Mapping._agal2glsllut == null) openfl._internal.aglsl.Mapping._agal2glsllut = [new openfl._internal.aglsl.OpLUT("%dest = %cast(%a);\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a + %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a - %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a * %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a / %b);\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(1.0) / %a;\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(min(%a,%b));\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(max(%a,%b));\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(fract(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(sqrt(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(inversesqrt(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(pow(abs(%a),%b));\n",0,true,true,true,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(log2(abs(%a)));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(exp2(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(normalize(vec3( %a ) ));\n",0,true,true,false,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(sin(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(cos(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(cross(vec3(%a),vec3(%b)));\n",0,true,true,true,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec3(%a),vec3(%b)));\n",0,true,true,true,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",0,true,true,true,null,null,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(abs(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(%a * -1.0);\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(clamp(%a,0.0,1.0));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec3(%a),vec3(%b)));\n",null,true,true,true,3,3,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",null,true,true,true,4,4,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dot(vec4(%a),vec4(%b)));\n",null,true,true,true,4,3,true,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dFdx(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(dFdx(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)==float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)!=float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)>=float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("if (float(%a)<float(%b)) {;\n",0,false,true,true,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("} else {;\n",0,false,false,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("};\n",0,false,false,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT(null,null,null,null,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(texture%texdimLod(%b,%texsize(%a)).%dm);\n",null,true,true,true,null,null,null,null,true,null),new openfl._internal.aglsl.OpLUT("if ( float(%a)<0.0 ) discard;\n",null,false,true,false,null,null,null,true,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(texture%texdim(%b,%texsize(%a)%lod).%dm);\n",null,true,true,true,null,null,true,null,true,true),new openfl._internal.aglsl.OpLUT("%dest = %cast(greaterThanEqual(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(lessThan(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(sign(%a));\n",0,true,true,false,null,null,null,null,null,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(equal(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null),new openfl._internal.aglsl.OpLUT("%dest = %cast(notEqual(%a,%b).%dm);\n",0,true,true,true,null,null,true,null,true,null)];
	return openfl._internal.aglsl.Mapping._agal2glsllut;
};
openfl._internal.aglsl.OpLUT = function(s,flags,dest,a,b,matrixwidth,matrixheight,ndwm,scaler,dm,lod) {
	if(lod == null) lod = false;
	if(dm == null) dm = false;
	if(scaler == null) scaler = false;
	if(ndwm == null) ndwm = false;
	if(matrixheight == null) matrixheight = 0;
	if(matrixwidth == null) matrixwidth = 0;
	if(b == null) b = false;
	if(a == null) a = false;
	if(dest == null) dest = false;
	if(flags == null) flags = 0;
	this.s = s;
	this.flags = flags;
	this.dest = dest;
	this.a = a;
	this.b = b;
	this.matrixwidth = matrixwidth;
	this.matrixheight = matrixheight;
	this.ndwm = ndwm;
	this.scalar = scaler;
	this.dm = dm;
	this.lod = lod;
};
$hxClasses["openfl._internal.aglsl.OpLUT"] = openfl._internal.aglsl.OpLUT;
openfl._internal.aglsl.OpLUT.__name__ = ["openfl","_internal","aglsl","OpLUT"];
openfl._internal.aglsl.OpLUT.prototype = {
	__class__: openfl._internal.aglsl.OpLUT
};
openfl._internal.aglsl.Token = function() {
	this.dest = new openfl._internal.aglsl.Destination();
	this.opcode = 0;
	this.a = new openfl._internal.aglsl.Destination();
	this.b = new openfl._internal.aglsl.Destination();
};
$hxClasses["openfl._internal.aglsl.Token"] = openfl._internal.aglsl.Token;
openfl._internal.aglsl.Token.__name__ = ["openfl","_internal","aglsl","Token"];
openfl._internal.aglsl.Token.prototype = {
	__class__: openfl._internal.aglsl.Token
};
openfl._internal.aglsl.assembler = {};
openfl._internal.aglsl.assembler.FS = function() {
};
$hxClasses["openfl._internal.aglsl.assembler.FS"] = openfl._internal.aglsl.assembler.FS;
openfl._internal.aglsl.assembler.FS.__name__ = ["openfl","_internal","aglsl","assembler","FS"];
openfl._internal.aglsl.assembler.FS.prototype = {
	__class__: openfl._internal.aglsl.assembler.FS
};
openfl._internal.aglsl.assembler.Flags = function() {
};
$hxClasses["openfl._internal.aglsl.assembler.Flags"] = openfl._internal.aglsl.assembler.Flags;
openfl._internal.aglsl.assembler.Flags.__name__ = ["openfl","_internal","aglsl","assembler","Flags"];
openfl._internal.aglsl.assembler.Flags.prototype = {
	__class__: openfl._internal.aglsl.assembler.Flags
};
openfl._internal.aglsl.assembler.Opcode = function(dest,aformat,asize,bformat,bsize,opcode,simple,horizontal,fragonly,matrix) {
	if(matrix == null) matrix = false;
	if(fragonly == null) fragonly = false;
	if(horizontal == null) horizontal = false;
	this.a = new openfl._internal.aglsl.assembler.FS();
	this.b = new openfl._internal.aglsl.assembler.FS();
	this.flags = new openfl._internal.aglsl.assembler.Flags();
	this.dest = dest;
	this.a.format = aformat;
	this.a.size = asize;
	this.b.format = bformat;
	this.b.size = bsize;
	this.opcode = opcode;
	this.flags.simple = simple;
	this.flags.horizontal = horizontal;
	this.flags.fragonly = fragonly;
	this.flags.matrix = matrix;
};
$hxClasses["openfl._internal.aglsl.assembler.Opcode"] = openfl._internal.aglsl.assembler.Opcode;
openfl._internal.aglsl.assembler.Opcode.__name__ = ["openfl","_internal","aglsl","assembler","Opcode"];
openfl._internal.aglsl.assembler.Opcode.prototype = {
	__class__: openfl._internal.aglsl.assembler.Opcode
};
openfl._internal.aglsl.assembler.OpcodeMap = function() { };
$hxClasses["openfl._internal.aglsl.assembler.OpcodeMap"] = openfl._internal.aglsl.assembler.OpcodeMap;
openfl._internal.aglsl.assembler.OpcodeMap.__name__ = ["openfl","_internal","aglsl","assembler","OpcodeMap"];
openfl._internal.aglsl.assembler.OpcodeMap.__properties__ = {get_map:"get_map"}
openfl._internal.aglsl.assembler.OpcodeMap._map = null;
openfl._internal.aglsl.assembler.OpcodeMap.get_map = function() {
	if(openfl._internal.aglsl.assembler.OpcodeMap._map == null) {
		openfl._internal.aglsl.assembler.OpcodeMap._map = new haxe.ds.StringMap();
		var value = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,0,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("mov",value);
		var value1 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,1,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("add",value1);
		var value2 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,2,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sub",value2);
		var value3 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,3,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("mul",value3);
		var value4 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,4,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("div",value4);
		var value5 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,5,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("rcp",value5);
		var value6 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,6,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("min",value6);
		var value7 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,7,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("max",value7);
		var value8 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,8,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("frc",value8);
		var value9 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,9,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sqt",value9);
		var value10 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,10,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("rsq",value10);
		var value11 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,11,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("pow",value11);
		var value12 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,12,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("log",value12);
		var value13 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,13,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("exp",value13);
		var value14 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,14,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("nrm",value14);
		var value15 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,15,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sin",value15);
		var value16 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,16,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("cos",value16);
		var value17 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,17,true,true,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("crs",value17);
		var value18 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,18,true,true,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("dp3",value18);
		var value19 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,19,true,true,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("dp4",value19);
		var value20 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,20,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("abs",value20);
		var value21 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,21,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("neg",value21);
		var value22 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"none",0,22,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sat",value22);
		var value23 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"sampler",1,38,true,false,true,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("ted",value23);
		var value24 = new openfl._internal.aglsl.assembler.Opcode("none","scalar",1,"none",0,39,true,false,true,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("kil",value24);
		var value25 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"sampler",1,40,true,false,true,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("tex",value25);
		var value26 = new openfl._internal.aglsl.assembler.Opcode("vector","matrix",3,"vector",3,23,true,false,false,true);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("m33",value26);
		var value27 = new openfl._internal.aglsl.assembler.Opcode("vector","matrix",4,"vector",4,24,true,false,false,true);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("m44",value27);
		var value28 = new openfl._internal.aglsl.assembler.Opcode("vector","matrix",3,"vector",4,25,true,false,false,true);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("m43",value28);
		var value29 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,41,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sge",value29);
		var value30 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,42,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("slt",value30);
		var value31 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,43,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sgn",value31);
		var value32 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,44,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("seq",value32);
		var value33 = new openfl._internal.aglsl.assembler.Opcode("vector","vector",4,"vector",4,45,true,false,false,false);
		openfl._internal.aglsl.assembler.OpcodeMap._map.set("sne",value33);
	}
	return openfl._internal.aglsl.assembler.OpcodeMap._map;
};
openfl._internal.aglsl.assembler.Part = function(name,version) {
	if(version == null) version = 0;
	if(name == null) name = "";
	this.name = name;
	this.version = version;
	this.data = new lime.utils.ByteArray();
	this.data.littleEndian = true;
	"littleEndian";
};
$hxClasses["openfl._internal.aglsl.assembler.Part"] = openfl._internal.aglsl.assembler.Part;
openfl._internal.aglsl.assembler.Part.__name__ = ["openfl","_internal","aglsl","assembler","Part"];
openfl._internal.aglsl.assembler.Part.prototype = {
	__class__: openfl._internal.aglsl.assembler.Part
};
openfl._internal.aglsl.assembler.Reg = function(code,desc) {
	this.code = code;
	this.desc = desc;
};
$hxClasses["openfl._internal.aglsl.assembler.Reg"] = openfl._internal.aglsl.assembler.Reg;
openfl._internal.aglsl.assembler.Reg.__name__ = ["openfl","_internal","aglsl","assembler","Reg"];
openfl._internal.aglsl.assembler.Reg.prototype = {
	__class__: openfl._internal.aglsl.assembler.Reg
};
openfl._internal.aglsl.assembler.RegMap = function() { };
$hxClasses["openfl._internal.aglsl.assembler.RegMap"] = openfl._internal.aglsl.assembler.RegMap;
openfl._internal.aglsl.assembler.RegMap.__name__ = ["openfl","_internal","aglsl","assembler","RegMap"];
openfl._internal.aglsl.assembler.RegMap.__properties__ = {get_map:"get_map"}
openfl._internal.aglsl.assembler.RegMap._map = null;
openfl._internal.aglsl.assembler.RegMap.get_map = function() {
	if(openfl._internal.aglsl.assembler.RegMap._map == null) {
		openfl._internal.aglsl.assembler.RegMap._map = new haxe.ds.StringMap();
		openfl._internal.aglsl.assembler.RegMap._map.set("va",new openfl._internal.aglsl.assembler.Reg(0,"vertex attribute"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fc",new openfl._internal.aglsl.assembler.Reg(1,"fragment constant"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vc",new openfl._internal.aglsl.assembler.Reg(1,"vertex constant"));
		openfl._internal.aglsl.assembler.RegMap._map.set("ft",new openfl._internal.aglsl.assembler.Reg(2,"fragment temporary"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vt",new openfl._internal.aglsl.assembler.Reg(2,"vertex temporary"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vo",new openfl._internal.aglsl.assembler.Reg(3,"vertex output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("op",new openfl._internal.aglsl.assembler.Reg(3,"vertex output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fd",new openfl._internal.aglsl.assembler.Reg(3,"fragment depth output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fo",new openfl._internal.aglsl.assembler.Reg(3,"fragment output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("oc",new openfl._internal.aglsl.assembler.Reg(3,"fragment output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("v",new openfl._internal.aglsl.assembler.Reg(4,"varying"));
		openfl._internal.aglsl.assembler.RegMap._map.set("vi",new openfl._internal.aglsl.assembler.Reg(4,"varying output"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fi",new openfl._internal.aglsl.assembler.Reg(4,"varying input"));
		openfl._internal.aglsl.assembler.RegMap._map.set("fs",new openfl._internal.aglsl.assembler.Reg(5,"sampler"));
	}
	return openfl._internal.aglsl.assembler.RegMap._map;
};
openfl._internal.aglsl.assembler.Sampler = function(shift,mask,value) {
	this.shift = shift;
	this.mask = mask;
	this.value = value;
};
$hxClasses["openfl._internal.aglsl.assembler.Sampler"] = openfl._internal.aglsl.assembler.Sampler;
openfl._internal.aglsl.assembler.Sampler.__name__ = ["openfl","_internal","aglsl","assembler","Sampler"];
openfl._internal.aglsl.assembler.Sampler.prototype = {
	__class__: openfl._internal.aglsl.assembler.Sampler
};
openfl._internal.aglsl.assembler.SamplerMap = function() { };
$hxClasses["openfl._internal.aglsl.assembler.SamplerMap"] = openfl._internal.aglsl.assembler.SamplerMap;
openfl._internal.aglsl.assembler.SamplerMap.__name__ = ["openfl","_internal","aglsl","assembler","SamplerMap"];
openfl._internal.aglsl.assembler.SamplerMap.__properties__ = {get_map:"get_map"}
openfl._internal.aglsl.assembler.SamplerMap._map = null;
openfl._internal.aglsl.assembler.SamplerMap.get_map = function() {
	if(openfl._internal.aglsl.assembler.SamplerMap._map == null) {
		openfl._internal.aglsl.assembler.SamplerMap._map = new haxe.ds.StringMap();
		openfl._internal.aglsl.assembler.SamplerMap._map.set("rgba",new openfl._internal.aglsl.assembler.Sampler(8,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("rg",new openfl._internal.aglsl.assembler.Sampler(8,15,5));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("r",new openfl._internal.aglsl.assembler.Sampler(8,15,4));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("compressed",new openfl._internal.aglsl.assembler.Sampler(8,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("compressed_alpha",new openfl._internal.aglsl.assembler.Sampler(8,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("dxt1",new openfl._internal.aglsl.assembler.Sampler(8,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("dxt5",new openfl._internal.aglsl.assembler.Sampler(8,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("2d",new openfl._internal.aglsl.assembler.Sampler(12,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("cube",new openfl._internal.aglsl.assembler.Sampler(12,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("3d",new openfl._internal.aglsl.assembler.Sampler(12,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("centroid",new openfl._internal.aglsl.assembler.Sampler(16,1,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("ignoresampler",new openfl._internal.aglsl.assembler.Sampler(16,4,4));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("clamp",new openfl._internal.aglsl.assembler.Sampler(20,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("repeat",new openfl._internal.aglsl.assembler.Sampler(20,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("wrap",new openfl._internal.aglsl.assembler.Sampler(20,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("nomip",new openfl._internal.aglsl.assembler.Sampler(24,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("mipnone",new openfl._internal.aglsl.assembler.Sampler(24,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("mipnearest",new openfl._internal.aglsl.assembler.Sampler(24,15,1));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("miplinear",new openfl._internal.aglsl.assembler.Sampler(24,15,2));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("nearest",new openfl._internal.aglsl.assembler.Sampler(28,15,0));
		openfl._internal.aglsl.assembler.SamplerMap._map.set("linear",new openfl._internal.aglsl.assembler.Sampler(28,15,1));
	}
	return openfl._internal.aglsl.assembler.SamplerMap._map;
};
openfl._internal.renderer = {};
openfl._internal.renderer.AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl._internal.renderer.AbstractMaskManager;
openfl._internal.renderer.AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl._internal.renderer.AbstractMaskManager.prototype = {
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl._internal.renderer.AbstractMaskManager
};
openfl._internal.renderer.AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl._internal.renderer.AbstractRenderer.prototype = {
	render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,setViewport: function(x,y,width,height) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl._internal.renderer.AbstractRenderer
};
openfl._internal.renderer.RenderSession = function() {
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl._internal.renderer.RenderSession;
openfl._internal.renderer.RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl._internal.renderer.RenderSession.prototype = {
	__class__: openfl._internal.renderer.RenderSession
};
openfl._internal.renderer.TextFieldGraphics = function() { };
$hxClasses["openfl._internal.renderer.TextFieldGraphics"] = openfl._internal.renderer.TextFieldGraphics;
openfl._internal.renderer.TextFieldGraphics.__name__ = ["openfl","_internal","renderer","TextFieldGraphics"];
openfl._internal.renderer.TextFieldGraphics.render = function(textField) {
	openfl._internal.renderer.TextFieldGraphics.update(textField);
	if(textField.__graphics == null) textField.__graphics = new openfl.display.Graphics();
	var graphics = textField.__graphics;
	graphics.clear();
	if(textField.border || textField.background) {
		if(textField.border) graphics.lineStyle(1,textField.borderColor);
		if(textField.background) graphics.beginFill(textField.backgroundColor);
		graphics.drawRect(0.5,0.5,textField.__width - 1,textField.__height - 1);
	}
	if(textField.__tileData != null) {
		var $it0 = textField.__tilesheets.keys();
		while( $it0.hasNext() ) {
			var tilesheet = $it0.next();
			graphics.drawTiles(tilesheet,textField.__tileData.h[tilesheet.__id__],true,4,textField.__tileDataLength.h[tilesheet.__id__]);
		}
	}
};
openfl._internal.renderer.TextFieldGraphics.renderText = function(textField,text,format,offsetX,textWidth) {
	var font = textField.__getFontInstance(format);
	if(font != null && format.size != null) {
		if(!(openfl._internal.renderer.TextFieldGraphics.glyphs.h.__keys__[font.__id__] != null)) {
			var value = new haxe.ds.IntMap();
			openfl._internal.renderer.TextFieldGraphics.glyphs.set(font,value);
		}
		var size = format.size | 0;
		var fontGlyphs = openfl._internal.renderer.TextFieldGraphics.glyphs.h[font.__id__];
		if(!fontGlyphs.exists(size)) {
			var value1 = font.renderGlyphs(font.getGlyphs(),size);
			fontGlyphs.set(size,value1);
		}
		var images = fontGlyphs.get(size);
		if(!(openfl._internal.renderer.TextFieldGraphics.bitmapData.h.__keys__[font.__id__] != null)) {
			var value2 = new haxe.ds.IntMap();
			openfl._internal.renderer.TextFieldGraphics.bitmapData.set(font,value2);
		}
		var fontBitmapData = openfl._internal.renderer.TextFieldGraphics.bitmapData.h[font.__id__];
		if(!fontBitmapData.exists(size)) {
			var width;
			var height;
			var data;
			var $it0 = images.iterator();
			while( $it0.hasNext() ) {
				var image = $it0.next();
				width = image.buffer.width;
				height = image.buffer.height;
				data = image.get_data();
				break;
			}
			var bitmapData = new openfl.display.BitmapData(width,height);
			var _g = 0;
			while(_g < width) {
				var x = _g++;
				var _g1 = 0;
				while(_g1 < height) {
					var y = _g1++;
					var alpha = data[y * width + x];
					var color = alpha << 24 | 16711680 | 65280 | 255;
					bitmapData.setPixel32(x,y,color);
				}
			}
			fontBitmapData.set(size,bitmapData);
		}
		var bitmapData1 = fontBitmapData.get(size);
		if(!(openfl._internal.renderer.TextFieldGraphics.tilesheets.h.__keys__[bitmapData1.__id__] != null)) {
			var tilesheet = new openfl.display.Tilesheet(bitmapData1);
			var tileID = new haxe.ds.IntMap();
			var image1;
			var index;
			var $it1 = images.keys();
			while( $it1.hasNext() ) {
				var key = $it1.next();
				image1 = images.get(key);
				index = tilesheet.addTileRect(new openfl.geom.Rectangle(image1.offsetX,image1.offsetY,image1.width,image1.height));
				tileID.set(key,index);
			}
			openfl._internal.renderer.TextFieldGraphics.tileIDs.set(bitmapData1,tileID);
			openfl._internal.renderer.TextFieldGraphics.tilesheets.set(bitmapData1,tilesheet);
		}
		var tilesheet1 = openfl._internal.renderer.TextFieldGraphics.tilesheets.h[bitmapData1.__id__];
		var tileID1 = openfl._internal.renderer.TextFieldGraphics.tileIDs.h[bitmapData1.__id__];
		var r = (format.color >> 16 & 255) / 255;
		var g = (format.color >> 8 & 255) / 255;
		var b = (format.color & 255) / 255;
		var tlm = textField.getLineMetrics(0);
		var image2;
		var x1 = offsetX;
		var y1 = 2 + tlm.ascent;
		var tileData;
		textField.__tilesheets.set(tilesheet1,true);
		if(!(textField.__tileData.h.__keys__[tilesheet1.__id__] != null)) {
			tileData = new Array();
			textField.__tileData.set(tilesheet1,tileData);
			textField.__tileDataLength.set(tilesheet1,0);
		}
		tileData = textField.__tileData.h[tilesheet1.__id__];
		var offsetY = 0;
		var lines = text.split("\n");
		if(textField.__textLayout == null) textField.__textLayout = new lime.text.TextLayout();
		var textLayout = textField.__textLayout;
		var length = 0;
		var line_i = 0;
		var oldX = x1;
		var _g2 = 0;
		while(_g2 < lines.length) {
			var line = lines[_g2];
			++_g2;
			tlm = textField.getLineMetrics(line_i);
			x1 = oldX;
			var _g11 = format.align;
			switch(_g11[1]) {
			case 0:case 2:
				x1 += 0;
				break;
			case 3:
				x1 += (textField.__width - 4 - tlm.width) / 2;
				break;
			case 1:
				x1 += textField.__width - 4 - tlm.width;
				break;
			}
			textLayout.set_text(null);
			textLayout.set_font(font);
			textLayout.set_size(size);
			textLayout.set_text(line);
			var _g12 = 0;
			var _g21 = textLayout.positions;
			while(_g12 < _g21.length) {
				var position = _g21[_g12];
				++_g12;
				image2 = images.get(position.glyph);
				if(image2 != null) {
					if(length >= tileData.length) {
						tileData.push(x1 + position.offset.x + image2.x);
						tileData.push(y1 + position.offset.y - image2.y);
						tileData.push(tileID1.get(position.glyph));
						tileData.push(r);
						tileData.push(g);
						tileData.push(b);
					} else {
						tileData[length] = x1 + position.offset.x + image2.x;
						tileData[length + 1] = y1 + position.offset.y - image2.y;
						tileData[length + 2] = tileID1.get(position.glyph);
						tileData[length + 3] = r;
						tileData[length + 4] = g;
						tileData[length + 5] = b;
					}
					length += 6;
				}
				x1 += position.advance.x;
				y1 -= position.advance.y;
			}
			y1 += tlm.height;
			line_i++;
		}
		textField.__tileDataLength.set(tilesheet1,length);
	}
};
openfl._internal.renderer.TextFieldGraphics.update = function(textField) {
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl.text.TextFieldAutoSize.LEFT) {
			textField.__tilesheets = null;
			textField.__tileData = null;
			textField.__tileDataLength = null;
			textField.__dirty = false;
		} else {
			textField.__tilesheets = new haxe.ds.ObjectMap();
			if(textField.__tileData == null) {
				textField.__tileData = new haxe.ds.ObjectMap();
				textField.__tileDataLength = new haxe.ds.ObjectMap();
			}
			if(textField.__text != null && textField.__text != "") {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = textField.__measureText();
				var textWidth = 0.0;
				var _g1 = 0;
				while(_g1 < measurements.length) {
					var measurement = measurements[_g1];
					++_g1;
					textWidth += measurement;
				}
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) {
					textField.__width = textWidth + 4;
					textField.__height = textField.get_textHeight() + 4;
				}
				if(textField.__ranges == null) openfl._internal.renderer.TextFieldGraphics.renderText(textField,text,textField.__textFormat,2,textWidth); else {
					var currentIndex = 0;
					var range;
					var offsetX = 2.0;
					var _g11 = 0;
					var _g2 = textField.__ranges.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						range = textField.__ranges[i1];
						openfl._internal.renderer.TextFieldGraphics.renderText(textField,text.substring(range.start,range.end),range.format,offsetX,textWidth);
						offsetX += measurements[i1];
					}
				}
			} else if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) {
				textField.__width = 4;
				textField.__height = 4;
			}
			var $it0 = textField.__tileData.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				if(!(textField.__tilesheets.h.__keys__[key.__id__] != null)) {
					textField.__tileData.remove(key);
					textField.__tileDataLength.remove(key);
				}
			}
			textField.__dirty = false;
			return true;
		}
	}
	return false;
};
openfl._internal.renderer.cairo = {};
openfl._internal.renderer.cairo.CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl._internal.renderer.cairo.CairoBitmap;
openfl._internal.renderer.cairo.CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl._internal.renderer.cairo.CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		var transform = bitmap.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			cairo.setSourceSurface(surface,0,0);
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
openfl._internal.renderer.cairo.CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl._internal.renderer.cairo.CairoGraphics;
openfl._internal.renderer.cairo.CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl._internal.renderer.cairo.CairoGraphics.bitmapFill = null;
openfl._internal.renderer.cairo.CairoGraphics.bitmapRepeat = null;
openfl._internal.renderer.cairo.CairoGraphics.bounds = null;
openfl._internal.renderer.cairo.CairoGraphics.cairo = null;
openfl._internal.renderer.cairo.CairoGraphics.fillCommands = null;
openfl._internal.renderer.cairo.CairoGraphics.fillPattern = null;
openfl._internal.renderer.cairo.CairoGraphics.graphics = null;
openfl._internal.renderer.cairo.CairoGraphics.hasFill = null;
openfl._internal.renderer.cairo.CairoGraphics.hasStroke = null;
openfl._internal.renderer.cairo.CairoGraphics.inversePendingMatrix = null;
openfl._internal.renderer.cairo.CairoGraphics.pendingMatrix = null;
openfl._internal.renderer.cairo.CairoGraphics.strokeCommands = null;
openfl._internal.renderer.cairo.CairoGraphics.strokePattern = null;
openfl._internal.renderer.cairo.CairoGraphics.beginPatternFill = function(bitmapFill,bitmapRepeat) {
	if(openfl._internal.renderer.cairo.CairoGraphics.hasFill || bitmapFill == null) return;
	if(openfl._internal.renderer.cairo.CairoGraphics.fillPattern == null) {
		openfl._internal.renderer.cairo.CairoGraphics.fillPattern = lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createForSurface(bitmapFill.getSurface());
		if(bitmapRepeat) lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.set_extend(openfl._internal.renderer.cairo.CairoGraphics.fillPattern,1);
	}
	openfl._internal.renderer.cairo.CairoGraphics.cairo.set_source(openfl._internal.renderer.cairo.CairoGraphics.fillPattern);
	openfl._internal.renderer.cairo.CairoGraphics.hasFill = true;
};
openfl._internal.renderer.cairo.CairoGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var surface = lime.graphics.cairo._CairoSurface.CairoSurface_Impl_._new(0,width,height);
	var pattern = lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createForSurface(surface);
	if(repeat) lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.set_extend(pattern,1);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.set_source(pattern);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.newPath();
	openfl._internal.renderer.cairo.CairoGraphics.cairo.moveTo(0,0);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(0,height);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(width,height);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(width,0);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(0,0);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.closePath();
	openfl._internal.renderer.cairo.CairoGraphics.cairo.fill();
	lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.destroy(pattern);
	return surface;
};
openfl._internal.renderer.cairo.CairoGraphics.endFill = function() {
	openfl._internal.renderer.cairo.CairoGraphics.cairo.newPath();
	openfl._internal.renderer.cairo.CairoGraphics.playCommands(openfl._internal.renderer.cairo.CairoGraphics.fillCommands,false);
	openfl._internal.renderer.cairo.CairoGraphics.fillCommands = [];
};
openfl._internal.renderer.cairo.CairoGraphics.endStroke = function() {
	openfl._internal.renderer.cairo.CairoGraphics.cairo.newPath();
	openfl._internal.renderer.cairo.CairoGraphics.playCommands(openfl._internal.renderer.cairo.CairoGraphics.strokeCommands,true);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.closePath();
	openfl._internal.renderer.cairo.CairoGraphics.strokeCommands = [];
};
openfl._internal.renderer.cairo.CairoGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl._internal.renderer.cairo.CairoGraphics.SIN45;
	var cx2 = -rx + rx * openfl._internal.renderer.cairo.CairoGraphics.TAN22;
	var cy1 = -ry + ry * openfl._internal.renderer.cairo.CairoGraphics.SIN45;
	var cy2 = -ry + ry * openfl._internal.renderer.cairo.CairoGraphics.TAN22;
	openfl._internal.renderer.cairo.CairoGraphics.cairo.moveTo(xe,ye - ry);
	openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(x + rx,ye);
	openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(x,y + ry);
	openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(xe - rx,y);
	openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(xe,ye - ry);
};
openfl._internal.renderer.cairo.CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.cairo.CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = Math.NEGATIVE_INFINITY;
	var tmp = Math.NEGATIVE_INFINITY;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl._internal.renderer.cairo.CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl._internal.renderer.cairo.CairoGraphics.bounds = openfl._internal.renderer.cairo.CairoGraphics.graphics.__bounds;
	var offsetX = openfl._internal.renderer.cairo.CairoGraphics.bounds.x;
	var offsetY = openfl._internal.renderer.cairo.CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var _g = 0;
	while(_g < commands.length) {
		var command = commands[_g];
		++_g;
		switch(command[1]) {
		case 3:
			var y = command[7];
			var x = command[6];
			var cy2 = command[5];
			var cx2 = command[4];
			var cy1 = command[3];
			var cx1 = command[2];
			openfl._internal.renderer.cairo.CairoGraphics.cairo.curveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
			break;
		case 4:
			var y1 = command[5];
			var x1 = command[4];
			var cy = command[3];
			var cx = command[2];
			openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
			break;
		case 5:
			var radius = command[4];
			var y2 = command[3];
			var x2 = command[2];
			openfl._internal.renderer.cairo.CairoGraphics.cairo.moveTo(x2 - offsetX + radius,y2 - offsetY);
			openfl._internal.renderer.cairo.CairoGraphics.cairo.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2);
			break;
		case 6:
			var height = command[5];
			var width = command[4];
			var y3 = command[3];
			var x3 = command[2];
			x3 -= offsetX;
			y3 -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x3 + width;
			var ye = y3 + height;
			var xm = x3 + width / 2;
			var ym = y3 + height / 2;
			openfl._internal.renderer.cairo.CairoGraphics.cairo.moveTo(x3,ym);
			openfl._internal.renderer.cairo.CairoGraphics.cairo.curveTo(x3,ym - oy,xm - ox,y3,xm,y3);
			openfl._internal.renderer.cairo.CairoGraphics.cairo.curveTo(xm + ox,y3,xe,ym - oy,xe,ym);
			openfl._internal.renderer.cairo.CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl._internal.renderer.cairo.CairoGraphics.cairo.curveTo(xm - ox,ye,x3,ym + oy,x3,ym);
			break;
		case 8:
			var ry = command[7];
			var rx = command[6];
			var height1 = command[5];
			var width1 = command[4];
			var y4 = command[3];
			var x4 = command[2];
			openfl._internal.renderer.cairo.CairoGraphics.drawRoundRect(x4 - offsetX,y4 - offsetY,width1,height1,rx,ry);
			break;
		case 13:
			var y5 = command[3];
			var x5 = command[2];
			openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(x5 - offsetX,y5 - offsetY);
			positionX = x5;
			positionY = y5;
			break;
		case 14:
			var y6 = command[3];
			var x6 = command[2];
			openfl._internal.renderer.cairo.CairoGraphics.cairo.moveTo(x6 - offsetX,y6 - offsetY);
			positionX = x6;
			positionY = y6;
			closeGap = true;
			startX = x6;
			startY = y6;
			break;
		case 12:
			var miterLimit = command[9];
			var joints = command[8];
			var caps = command[7];
			var scaleMode = command[6];
			var pixelHinting = command[5];
			var alpha = command[4];
			var color = command[3];
			var thickness = command[2];
			if(stroke && openfl._internal.renderer.cairo.CairoGraphics.hasStroke) {
				openfl._internal.renderer.cairo.CairoGraphics.cairo.closePath();
				openfl._internal.renderer.cairo.CairoGraphics.cairo.set_source(openfl._internal.renderer.cairo.CairoGraphics.strokePattern);
				openfl._internal.renderer.cairo.CairoGraphics.cairo.strokePreserve();
				openfl._internal.renderer.cairo.CairoGraphics.cairo.newPath();
			}
			openfl._internal.renderer.cairo.CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
			if(thickness == null) openfl._internal.renderer.cairo.CairoGraphics.hasStroke = false; else {
				openfl._internal.renderer.cairo.CairoGraphics.cairo.set_lineWidth(thickness);
				if(joints == null) openfl._internal.renderer.cairo.CairoGraphics.cairo.set_lineJoin(1); else openfl._internal.renderer.cairo.CairoGraphics.cairo.set_lineJoin((function($this) {
					var $r;
					switch(joints[1]) {
					case 0:
						$r = 0;
						break;
					case 2:
						$r = 2;
						break;
					default:
						$r = 1;
					}
					return $r;
				}(this)));
				if(caps == null) openfl._internal.renderer.cairo.CairoGraphics.cairo.set_lineCap(1); else openfl._internal.renderer.cairo.CairoGraphics.cairo.set_lineCap((function($this) {
					var $r;
					switch(caps[1]) {
					case 0:
						$r = 0;
						break;
					case 2:
						$r = 2;
						break;
					default:
						$r = 1;
					}
					return $r;
				}(this)));
				openfl._internal.renderer.cairo.CairoGraphics.cairo.set_miterLimit(miterLimit == null?3:miterLimit);
				if(openfl._internal.renderer.cairo.CairoGraphics.strokePattern != null) lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.destroy(openfl._internal.renderer.cairo.CairoGraphics.strokePattern);
				var r = ((color & 16711680) >>> 16) / 255;
				var g = ((color & 65280) >>> 8) / 255;
				var b = (color & 255) / 255;
				if(alpha == 1 || alpha == null) openfl._internal.renderer.cairo.CairoGraphics.strokePattern = lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createRGB(r,g,b); else openfl._internal.renderer.cairo.CairoGraphics.strokePattern = lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createRGBA(r,g,b,alpha);
				openfl._internal.renderer.cairo.CairoGraphics.hasStroke = true;
			}
			break;
		case 0:
			var smooth = command[5];
			var repeat = command[4];
			var matrix = command[3];
			var bitmap = command[2];
			if(bitmap != openfl._internal.renderer.cairo.CairoGraphics.bitmapFill || repeat != openfl._internal.renderer.cairo.CairoGraphics.bitmapRepeat) {
				openfl._internal.renderer.cairo.CairoGraphics.bitmapFill = bitmap;
				openfl._internal.renderer.cairo.CairoGraphics.bitmapRepeat = repeat;
				if(openfl._internal.renderer.cairo.CairoGraphics.fillPattern != null) lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.destroy(openfl._internal.renderer.cairo.CairoGraphics.fillPattern);
				openfl._internal.renderer.cairo.CairoGraphics.fillPattern = null;
				openfl._internal.renderer.cairo.CairoGraphics.hasFill = false;
			}
			if(matrix != null) {
				openfl._internal.renderer.cairo.CairoGraphics.pendingMatrix = matrix;
				openfl._internal.renderer.cairo.CairoGraphics.inversePendingMatrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
				openfl._internal.renderer.cairo.CairoGraphics.inversePendingMatrix.invert();
			} else {
				openfl._internal.renderer.cairo.CairoGraphics.pendingMatrix = null;
				openfl._internal.renderer.cairo.CairoGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var alpha1 = command[3];
			var rgb = command[2];
			if(alpha1 < 0.005) openfl._internal.renderer.cairo.CairoGraphics.hasFill = false; else {
				if(openfl._internal.renderer.cairo.CairoGraphics.fillPattern != null) lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.destroy(openfl._internal.renderer.cairo.CairoGraphics.fillPattern);
				openfl._internal.renderer.cairo.CairoGraphics.fillPattern = lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createRGBA(((rgb & 16711680) >>> 16) / 255,((rgb & 65280) >>> 8) / 255,(rgb & 255) / 255,alpha1);
				openfl._internal.renderer.cairo.CairoGraphics.bitmapFill = null;
				openfl._internal.renderer.cairo.CairoGraphics.hasFill = true;
			}
			break;
		case 2:
			var focalPointRatio = command[9];
			var interpolationMethod = command[8];
			var spreadMethod = command[7];
			var matrix1 = command[6];
			var ratios = command[5];
			var alphas = command[4];
			var colors = command[3];
			var type = command[2];
			var gradientFill = null;
			switch(type[1]) {
			case 0:
				if(matrix1 == null) matrix1 = new openfl.geom.Matrix();
				var point = matrix1.transformPoint(new openfl.geom.Point(1638.4,0));
				if(openfl._internal.renderer.cairo.CairoGraphics.fillPattern != null) lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.destroy(openfl._internal.renderer.cairo.CairoGraphics.fillPattern);
				openfl._internal.renderer.cairo.CairoGraphics.fillPattern = lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createRadial(matrix1.tx,matrix1.ty,0,matrix1.tx,matrix1.ty,(point.x - matrix1.tx) / 2);
				break;
			case 1:
				var matrix2;
				if(matrix1 != null) matrix2 = new openfl.geom.Matrix(matrix1.a,matrix1.b,matrix1.c,matrix1.d,matrix1.tx,matrix1.ty); else matrix2 = new openfl.geom.Matrix();
				var point1 = matrix2.transformPoint(new openfl.geom.Point(-819.2,0));
				var point2 = matrix2.transformPoint(new openfl.geom.Point(819.2,0));
				if(openfl._internal.renderer.cairo.CairoGraphics.fillPattern != null) lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.destroy(openfl._internal.renderer.cairo.CairoGraphics.fillPattern);
				openfl._internal.renderer.cairo.CairoGraphics.fillPattern = lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.createLinear(point1.x,point1.y,point2.x,point2.y);
				break;
			}
			var _g2 = 0;
			var _g1 = colors.length;
			while(_g2 < _g1) {
				var i = _g2++;
				var rgb1 = colors[i];
				var alpha2 = alphas[i];
				var r1 = ((rgb1 & 16711680) >>> 16) / 255;
				var g1 = ((rgb1 & 65280) >>> 8) / 255;
				var b1 = (rgb1 & 255) / 255;
				var ratio = ratios[i] / 255;
				if(ratio < 0) ratio = 0;
				if(ratio > 1) ratio = 1;
				lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.addColorStopRGBA(openfl._internal.renderer.cairo.CairoGraphics.fillPattern,ratio,r1,g1,b1,alpha2);
			}
			openfl._internal.renderer.cairo.CairoGraphics.bitmapFill = null;
			openfl._internal.renderer.cairo.CairoGraphics.hasFill = true;
			break;
		case 7:
			var height2 = command[5];
			var width2 = command[4];
			var y7 = command[3];
			var x7 = command[2];
			if(openfl._internal.renderer.cairo.CairoGraphics.fillPattern != null) {
				var matrix3 = lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.get_matrix(openfl._internal.renderer.cairo.CairoGraphics.fillPattern);
				matrix3.tx += x7;
				matrix3.ty += y7;
				lime.graphics.cairo._CairoPattern.CairoPattern_Impl_.set_matrix(openfl._internal.renderer.cairo.CairoGraphics.fillPattern,matrix3);
			}
			openfl._internal.renderer.cairo.CairoGraphics.cairo.rectangle(x7 - offsetX,y7 - offsetY,width2,height2);
			break;
		default:
		}
	}
	if(stroke && openfl._internal.renderer.cairo.CairoGraphics.hasStroke) {
		if(openfl._internal.renderer.cairo.CairoGraphics.hasFill && closeGap) openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY);
		openfl._internal.renderer.cairo.CairoGraphics.cairo.set_source(openfl._internal.renderer.cairo.CairoGraphics.strokePattern);
		openfl._internal.renderer.cairo.CairoGraphics.cairo.strokePreserve();
	}
	if(!stroke) {
		if(openfl._internal.renderer.cairo.CairoGraphics.hasFill || openfl._internal.renderer.cairo.CairoGraphics.bitmapFill != null) {
			if(openfl._internal.renderer.cairo.CairoGraphics.bitmapFill != null) openfl._internal.renderer.cairo.CairoGraphics.beginPatternFill(openfl._internal.renderer.cairo.CairoGraphics.bitmapFill,openfl._internal.renderer.cairo.CairoGraphics.bitmapRepeat); else openfl._internal.renderer.cairo.CairoGraphics.cairo.set_source(openfl._internal.renderer.cairo.CairoGraphics.fillPattern);
			openfl._internal.renderer.cairo.CairoGraphics.cairo.translate(-openfl._internal.renderer.cairo.CairoGraphics.bounds.x,-openfl._internal.renderer.cairo.CairoGraphics.bounds.y);
			if(openfl._internal.renderer.cairo.CairoGraphics.pendingMatrix != null) {
				openfl._internal.renderer.cairo.CairoGraphics.cairo.transform(openfl._internal.renderer.cairo.CairoGraphics.pendingMatrix.__toMatrix3());
				openfl._internal.renderer.cairo.CairoGraphics.cairo.fillPreserve();
				openfl._internal.renderer.cairo.CairoGraphics.cairo.transform(openfl._internal.renderer.cairo.CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else openfl._internal.renderer.cairo.CairoGraphics.cairo.fillPreserve();
			openfl._internal.renderer.cairo.CairoGraphics.cairo.translate(openfl._internal.renderer.cairo.CairoGraphics.bounds.x,openfl._internal.renderer.cairo.CairoGraphics.bounds.y);
			openfl._internal.renderer.cairo.CairoGraphics.cairo.closePath();
		}
	}
};
openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl._internal.renderer.cairo.CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl._internal.renderer.cairo.CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime.math.Vector2(cx,cy);
	} else current = openfl._internal.renderer.cairo.CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl._internal.renderer.cairo.CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl._internal.renderer.cairo.CairoGraphics.render = function(graphics,renderSession) {
	if(graphics.__dirty) {
		openfl._internal.renderer.cairo.CairoGraphics.graphics = graphics;
		openfl._internal.renderer.cairo.CairoGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.length == 0 || openfl._internal.renderer.cairo.CairoGraphics.bounds == null || openfl._internal.renderer.cairo.CairoGraphics.bounds.width == 0 || openfl._internal.renderer.cairo.CairoGraphics.bounds.height == 0) {
			if(graphics.__cairo != null) {
				graphics.__cairo.destroy();
				graphics.__cairo = null;
			}
		} else {
			if(graphics.__cairo != null) {
				var surface = graphics.__cairo.get_target();
				if(openfl._internal.renderer.cairo.CairoGraphics.bounds.width != lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_width(surface) || openfl._internal.renderer.cairo.CairoGraphics.bounds.height != lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_height(surface)) {
					graphics.__cairo.destroy();
					graphics.__cairo = null;
				}
			}
			if(graphics.__cairo == null) {
				var surface1 = lime.graphics.cairo._CairoSurface.CairoSurface_Impl_._new(0,Math.ceil(openfl._internal.renderer.cairo.CairoGraphics.bounds.width),Math.ceil(openfl._internal.renderer.cairo.CairoGraphics.bounds.height));
				graphics.__cairo = new lime.graphics.cairo.Cairo(surface1);
				lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.destroy(surface1);
			}
			openfl._internal.renderer.cairo.CairoGraphics.cairo = graphics.__cairo;
			var offsetX = openfl._internal.renderer.cairo.CairoGraphics.bounds.x;
			var offsetY = openfl._internal.renderer.cairo.CairoGraphics.bounds.y;
			openfl._internal.renderer.cairo.CairoGraphics.fillCommands = new Array();
			openfl._internal.renderer.cairo.CairoGraphics.strokeCommands = new Array();
			openfl._internal.renderer.cairo.CairoGraphics.hasFill = false;
			openfl._internal.renderer.cairo.CairoGraphics.hasStroke = false;
			openfl._internal.renderer.cairo.CairoGraphics.bitmapFill = null;
			openfl._internal.renderer.cairo.CairoGraphics.bitmapRepeat = false;
			var _g = 0;
			var _g1 = graphics.__commands;
			try {
				while(_g < _g1.length) {
					var command = _g1[_g];
					++_g;
					switch(command[1]) {
					case 3:case 4:case 13:case 14:
						openfl._internal.renderer.cairo.CairoGraphics.fillCommands.push(command);
						openfl._internal.renderer.cairo.CairoGraphics.strokeCommands.push(command);
						break;
					case 11:
						openfl._internal.renderer.cairo.CairoGraphics.endFill();
						openfl._internal.renderer.cairo.CairoGraphics.endStroke();
						openfl._internal.renderer.cairo.CairoGraphics.hasFill = false;
						break;
					case 12:
						openfl._internal.renderer.cairo.CairoGraphics.strokeCommands.push(command);
						break;
					case 0:case 1:case 2:
						openfl._internal.renderer.cairo.CairoGraphics.endFill();
						openfl._internal.renderer.cairo.CairoGraphics.endStroke();
						openfl._internal.renderer.cairo.CairoGraphics.fillCommands.push(command);
						openfl._internal.renderer.cairo.CairoGraphics.strokeCommands.push(command);
						break;
					case 5:case 6:case 7:case 8:
						openfl._internal.renderer.cairo.CairoGraphics.endFill();
						openfl._internal.renderer.cairo.CairoGraphics.endStroke();
						openfl._internal.renderer.cairo.CairoGraphics.fillCommands.push(command);
						openfl._internal.renderer.cairo.CairoGraphics.strokeCommands.push(command);
						break;
					case 10:
						var culling = command[5];
						var uvtData = command[4];
						var indices = command[3];
						var vertices = command[2];
						openfl._internal.renderer.cairo.CairoGraphics.endFill();
						openfl._internal.renderer.cairo.CairoGraphics.endStroke();
						var v = vertices;
						var ind = indices;
						var uvt = uvtData;
						var pattern = null;
						var colorFill = openfl._internal.renderer.cairo.CairoGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvtData == null) {
								var this1;
								this1 = new openfl.VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvtData = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i = _g3++;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data;
											var this3;
											this3 = new Array(uvtData.data.length + 10);
											data = this3;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
											uvtData.data = data;
										}
										uvtData.data[uvtData.length - 1] = v.data[i * 2] / openfl._internal.renderer.cairo.CairoGraphics.bitmapFill.width;
									}
									uvtData.length;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data1;
											var this4;
											this4 = new Array(uvtData.data.length + 10);
											data1 = this4;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
											uvtData.data = data1;
										}
										uvtData.data[uvtData.length - 1] = v.data[i * 2 + 1] / openfl._internal.renderer.cairo.CairoGraphics.bitmapFill.height;
									}
									uvtData.length;
								}
							}
							var skipT = uvtData.length != v.length;
							var normalizedUVT = openfl._internal.renderer.cairo.CairoGraphics.normalizeUVT(uvtData,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl._internal.renderer.cairo.CairoGraphics.createTempPatternCanvas(openfl._internal.renderer.cairo.CairoGraphics.bitmapFill,openfl._internal.renderer.cairo.CairoGraphics.bitmapRepeat,openfl._internal.renderer.cairo.CairoGraphics.bounds.width | 0,openfl._internal.renderer.cairo.CairoGraphics.bounds.height | 0); else pattern = openfl._internal.renderer.cairo.CairoGraphics.createTempPatternCanvas(openfl._internal.renderer.cairo.CairoGraphics.bitmapFill,openfl._internal.renderer.cairo.CairoGraphics.bitmapRepeat,openfl._internal.renderer.cairo.CairoGraphics.bitmapFill.width,openfl._internal.renderer.cairo.CairoGraphics.bitmapFill.height);
						}
						var i1 = 0;
						var l = ind.length;
						var a;
						var b;
						var c;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i1 < l) {
							a = i1;
							b = i1 + 1;
							c = i1 + 2;
							iax = ind.data[a] * 2;
							iay = ind.data[a] * 2 + 1;
							ibx = ind.data[b] * 2;
							iby = ind.data[b] * 2 + 1;
							icx = ind.data[c] * 2;
							icy = ind.data[c] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							switch(culling[1]) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i1 += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i1 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl._internal.renderer.cairo.CairoGraphics.cairo.newPath();
								openfl._internal.renderer.cairo.CairoGraphics.cairo.moveTo(x1,y1);
								openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(x2,y2);
								openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(x3,y3);
								openfl._internal.renderer.cairo.CairoGraphics.cairo.closePath();
								openfl._internal.renderer.cairo.CairoGraphics.cairo.fillPreserve();
								i1 += 3;
								continue;
							}
							openfl._internal.renderer.cairo.CairoGraphics.cairo.save();
							openfl._internal.renderer.cairo.CairoGraphics.cairo.newPath();
							openfl._internal.renderer.cairo.CairoGraphics.cairo.moveTo(x1,y1);
							openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(x2,y2);
							openfl._internal.renderer.cairo.CairoGraphics.cairo.lineTo(x3,y3);
							openfl._internal.renderer.cairo.CairoGraphics.cairo.closePath();
							openfl._internal.renderer.cairo.CairoGraphics.cairo.clip();
							uvx1 = uvt.data[iax] * lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_width(pattern);
							uvx2 = uvt.data[ibx] * lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_width(pattern);
							uvx3 = uvt.data[icx] * lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_width(pattern);
							uvy1 = uvt.data[iay] * lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_height(pattern);
							uvy2 = uvt.data[iby] * lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_height(pattern);
							uvy3 = uvt.data[icy] * lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.get_height(pattern);
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i1 += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							var matrix = new lime.math.Matrix3(t1,t2,t3,t4,dx,dy);
							openfl._internal.renderer.cairo.CairoGraphics.cairo.transform(matrix);
							openfl._internal.renderer.cairo.CairoGraphics.cairo.setSourceSurface(pattern,0,0);
							openfl._internal.renderer.cairo.CairoGraphics.cairo.paint();
							openfl._internal.renderer.cairo.CairoGraphics.cairo.restore();
							i1 += 3;
						}
						break;
					case 9:
						var count = command[6];
						var flags = command[5];
						var smooth = command[4];
						var tileData = command[3];
						var sheet = command[2];
						return;
						var useScale = (flags & 1) > 0;
						var useRotation = (flags & 2) > 0;
						var useTransform = (flags & 16) > 0;
						var useRGB = (flags & 4) > 0;
						var useAlpha = (flags & 8) > 0;
						var useRect = (flags & 32) > 0;
						var useOrigin = (flags & 64) > 0;
						var useBlendAdd = (flags & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = tileData.length;
						if(count >= 0 && totalCount > count) totalCount = count;
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface2;
						sheet.__bitmap.__sync();
						surface2 = sheet.__bitmap.getSurface();
						openfl._internal.renderer.cairo.CairoGraphics.cairo.setSourceSurface(surface2,0,0);
						if(useBlendAdd) openfl._internal.renderer.cairo.CairoGraphics.cairo.set_operator(12);
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = tileData[index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = sheet.__tileRects[tileID];
								center = sheet.__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = sheet.__rectTile;
								rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
								center = sheet.__point;
								if(useOrigin) {
									center.x = tileData[index + 6];
									center.y = tileData[index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl._internal.renderer.cairo.CairoGraphics.cairo.save();
								openfl._internal.renderer.cairo.CairoGraphics.cairo.translate(tileData[index],tileData[index + 1]);
								if(useRotation) {
								}
								var scale = 1.0;
								if(useScale) scale = tileData[index + scaleIndex];
								if(useTransform) {
									var matrix1 = new lime.math.Matrix3(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
									openfl._internal.renderer.cairo.CairoGraphics.cairo.transform(matrix1);
								}
								if(useAlpha) openfl._internal.renderer.cairo.CairoGraphics.cairo.paintWithAlpha(tileData[index + alphaIndex]); else openfl._internal.renderer.cairo.CairoGraphics.cairo.paint();
								openfl._internal.renderer.cairo.CairoGraphics.cairo.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl._internal.renderer.cairo.CairoGraphics.cairo.set_operator(2);
						break;
					default:
						openfl.Lib.notImplemented("CairoGraphics");
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
		}
		graphics.set___dirty(false);
		if(openfl._internal.renderer.cairo.CairoGraphics.fillCommands.length > 0) openfl._internal.renderer.cairo.CairoGraphics.endFill();
		if(openfl._internal.renderer.cairo.CairoGraphics.strokeCommands.length > 0) openfl._internal.renderer.cairo.CairoGraphics.endStroke();
	}
};
openfl._internal.renderer.cairo.CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				cairo.curveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				cairo.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				cairo.moveTo(x3,ym);
				cairo.curveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				cairo.curveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				cairo.rectangle(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl._internal.renderer.cairo.CairoGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 13:
				var y6 = command[3];
				var x6 = command[2];
				cairo.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 14:
				var y7 = command[3];
				var x7 = command[2];
				cairo.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
openfl._internal.renderer.cairo.CairoMaskManager = function(renderSession) {
	openfl._internal.renderer.AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl._internal.renderer.cairo.CairoMaskManager;
openfl._internal.renderer.cairo.CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl._internal.renderer.cairo.CairoMaskManager.__super__ = openfl._internal.renderer.AbstractMaskManager;
openfl._internal.renderer.cairo.CairoMaskManager.prototype = $extend(openfl._internal.renderer.AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clipPreserve();
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime.math.Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clipPreserve();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl._internal.renderer.cairo.CairoMaskManager
});
openfl._internal.renderer.cairo.CairoRenderer = function(width,height,cairo) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.cairo = cairo;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl._internal.renderer.cairo.CairoMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl._internal.renderer.cairo.CairoRenderer;
openfl._internal.renderer.cairo.CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl._internal.renderer.cairo.CairoRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.cairo.CairoRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	render: function(stage) {
		this.cairo.identityMatrix();
		if(stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2]);
			this.cairo.paint();
		}
		stage.__renderCairo(this.renderSession);
	}
	,__class__: openfl._internal.renderer.cairo.CairoRenderer
});
openfl._internal.renderer.cairo.CairoShape = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl._internal.renderer.cairo.CairoShape;
openfl._internal.renderer.cairo.CairoShape.__name__ = ["openfl","_internal","renderer","cairo","CairoShape"];
openfl._internal.renderer.cairo.CairoShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl._internal.renderer.cairo.CairoGraphics.render(graphics,renderSession);
		if(graphics.__cairo != null) {
			if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
			var cairo = renderSession.cairo;
			var scrollRect = shape.get_scrollRect();
			var transform = shape.__worldTransform;
			if(renderSession.roundPixels) {
				var matrix = transform.__toMatrix3();
				matrix.tx = Math.round(matrix.tx);
				matrix.ty = Math.round(matrix.ty);
				cairo.set_matrix(matrix);
			} else cairo.set_matrix(transform.__toMatrix3());
			cairo.setSourceSurface(graphics.__cairo.get_target(),graphics.__bounds.x,graphics.__bounds.y);
			cairo.paintWithAlpha(shape.__worldAlpha);
			if(shape.__mask != null) renderSession.maskManager.popMask();
		}
	}
};
openfl._internal.renderer.canvas = {};
openfl._internal.renderer.canvas.CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl._internal.renderer.canvas.CanvasBitmap;
openfl._internal.renderer.canvas.CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl._internal.renderer.canvas.CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.webkitImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.__image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.__image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.webkitImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
openfl._internal.renderer.canvas.CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl._internal.renderer.canvas.CanvasGraphics;
openfl._internal.renderer.canvas.CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill = null;
openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat = null;
openfl._internal.renderer.canvas.CanvasGraphics.bounds = null;
openfl._internal.renderer.canvas.CanvasGraphics.fillCommands = null;
openfl._internal.renderer.canvas.CanvasGraphics.graphics = null;
openfl._internal.renderer.canvas.CanvasGraphics.hasFill = null;
openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = null;
openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands = null;
openfl._internal.renderer.canvas.CanvasGraphics.context = null;
openfl._internal.renderer.canvas.CanvasGraphics.pattern = null;
openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill = function(bitmapFill,bitmapRepeat) {
	if(openfl._internal.renderer.canvas.CanvasGraphics.hasFill || bitmapFill == null) return;
	if(openfl._internal.renderer.canvas.CanvasGraphics.pattern == null) openfl._internal.renderer.canvas.CanvasGraphics.pattern = openfl._internal.renderer.canvas.CanvasGraphics.context.createPattern(bitmapFill.__image.get_src(),bitmapRepeat?"repeat":"no-repeat");
	openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = openfl._internal.renderer.canvas.CanvasGraphics.pattern;
	openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
};
openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.__image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	context.fill();
	return canvas;
};
openfl._internal.renderer.canvas.CanvasGraphics.endFill = function() {
	openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
	openfl._internal.renderer.canvas.CanvasGraphics.playCommands(openfl._internal.renderer.canvas.CanvasGraphics.fillCommands,false);
	openfl._internal.renderer.canvas.CanvasGraphics.fillCommands = [];
};
openfl._internal.renderer.canvas.CanvasGraphics.endStroke = function() {
	openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
	openfl._internal.renderer.canvas.CanvasGraphics.playCommands(openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands,true);
	openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
	openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands = [];
};
openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl._internal.renderer.canvas.CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl._internal.renderer.canvas.CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl._internal.renderer.canvas.CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl._internal.renderer.canvas.CanvasGraphics.TAN22;
	openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x + rx,ye);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x,y + ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(xe - rx,y);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl._internal.renderer.canvas.CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.canvas.CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = Math.NEGATIVE_INFINITY;
	var tmp = Math.NEGATIVE_INFINITY;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl._internal.renderer.canvas.CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl._internal.renderer.canvas.CanvasGraphics.bounds = openfl._internal.renderer.canvas.CanvasGraphics.graphics.__bounds;
	var offsetX = openfl._internal.renderer.canvas.CanvasGraphics.bounds.x;
	var offsetY = openfl._internal.renderer.canvas.CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var _g = 0;
	while(_g < commands.length) {
		var command = commands[_g];
		++_g;
		switch(command[1]) {
		case 3:
			var y = command[7];
			var x = command[6];
			var cy2 = command[5];
			var cx2 = command[4];
			var cy1 = command[3];
			var cx1 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
			break;
		case 4:
			var y1 = command[5];
			var x1 = command[4];
			var cy = command[3];
			var cx = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
			break;
		case 5:
			var radius = command[4];
			var y2 = command[3];
			var x2 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x2 - offsetX + radius,y2 - offsetY);
			openfl._internal.renderer.canvas.CanvasGraphics.context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
			break;
		case 6:
			var height = command[5];
			var width = command[4];
			var y3 = command[3];
			var x3 = command[2];
			x3 -= offsetX;
			y3 -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x3 + width;
			var ye = y3 + height;
			var xm = x3 + width / 2;
			var ym = y3 + height / 2;
			openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x3,ym);
			openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
			openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
			openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
			break;
		case 8:
			var ry = command[7];
			var rx = command[6];
			var height1 = command[5];
			var width1 = command[4];
			var y4 = command[3];
			var x4 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect(x4 - offsetX,y4 - offsetY,width1,height1,rx,ry);
			break;
		case 13:
			var y5 = command[3];
			var x5 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x5 - offsetX,y5 - offsetY);
			positionX = x5;
			positionY = y5;
			break;
		case 14:
			var y6 = command[3];
			var x6 = command[2];
			openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x6 - offsetX,y6 - offsetY);
			positionX = x6;
			positionY = y6;
			closeGap = true;
			startX = x6;
			startY = y6;
			break;
		case 12:
			var miterLimit = command[9];
			var joints = command[8];
			var caps = command[7];
			var scaleMode = command[6];
			var pixelHinting = command[5];
			var alpha = command[4];
			var color = command[3];
			var thickness = command[2];
			if(stroke && openfl._internal.renderer.canvas.CanvasGraphics.hasStroke) {
				openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
				openfl._internal.renderer.canvas.CanvasGraphics.context.stroke();
				openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
			}
			openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(thickness == null) openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false; else {
				openfl._internal.renderer.canvas.CanvasGraphics.context.lineWidth = thickness;
				if(joints == null) openfl._internal.renderer.canvas.CanvasGraphics.context.lineJoin = "round"; else openfl._internal.renderer.canvas.CanvasGraphics.context.lineJoin = Std.string(joints).toLowerCase();
				if(caps == null) openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = "round"; else switch(caps[1]) {
				case 0:
					openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = "butt";
					break;
				default:
					openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = Std.string(caps).toLowerCase();
				}
				if(miterLimit == null) openfl._internal.renderer.canvas.CanvasGraphics.context.miterLimit = 3; else openfl._internal.renderer.canvas.CanvasGraphics.context.miterLimit = miterLimit;
				if(alpha == 1 || alpha == null) if(color == null) openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#000000"; else openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(color & 16777215,6); else {
					var r = (color & 16711680) >>> 16;
					var g = (color & 65280) >>> 8;
					var b = color & 255;
					if(color == null) openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#000000"; else openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
				}
				openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = true;
			}
			break;
		case 0:
			var smooth = command[5];
			var repeat = command[4];
			var matrix = command[3];
			var bitmap = command[2];
			if(bitmap != openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill || repeat != openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat) {
				openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill = bitmap;
				openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat = repeat;
				openfl._internal.renderer.canvas.CanvasGraphics.pattern = null;
				openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
				bitmap.__sync();
			}
			if(matrix != null) {
				openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = matrix;
				openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
				openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
				openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var alpha1 = command[3];
			var rgb = command[2];
			if(alpha1 < 0.005) openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false; else {
				if(alpha1 == 1) openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = "#" + StringTools.hex(rgb,6); else {
					var r1 = (rgb & 16711680) >>> 16;
					var g1 = (rgb & 65280) >>> 8;
					var b1 = rgb & 255;
					openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + alpha1 + ")";
				}
				openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill = null;
				openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var focalPointRatio = command[9];
			var interpolationMethod = command[8];
			var spreadMethod = command[7];
			var matrix1 = command[6];
			var ratios = command[5];
			var alphas = command[4];
			var colors = command[3];
			var type = command[2];
			var gradientFill = null;
			switch(type[1]) {
			case 0:
				if(matrix1 == null) matrix1 = new openfl.geom.Matrix();
				var point = matrix1.transformPoint(new openfl.geom.Point(1638.4,0));
				gradientFill = openfl._internal.renderer.canvas.CanvasGraphics.context.createRadialGradient(matrix1.tx,matrix1.ty,0,matrix1.tx,matrix1.ty,(point.x - matrix1.tx) / 2);
				break;
			case 1:
				var matrix2;
				if(matrix1 != null) matrix2 = new openfl.geom.Matrix(matrix1.a,matrix1.b,matrix1.c,matrix1.d,matrix1.tx,matrix1.ty); else matrix2 = new openfl.geom.Matrix();
				var point1 = matrix2.transformPoint(new openfl.geom.Point(-819.2,0));
				var point2 = matrix2.transformPoint(new openfl.geom.Point(819.2,0));
				gradientFill = openfl._internal.renderer.canvas.CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
				break;
			}
			var _g2 = 0;
			var _g1 = colors.length;
			while(_g2 < _g1) {
				var i = _g2++;
				var rgb1 = colors[i];
				var alpha2 = alphas[i];
				var r2 = (rgb1 & 16711680) >>> 16;
				var g2 = (rgb1 & 65280) >>> 8;
				var b2 = rgb1 & 255;
				var ratio = ratios[i] / 255;
				if(ratio < 0) ratio = 0;
				if(ratio > 1) ratio = 1;
				gradientFill.addColorStop(ratio,"rgba(" + r2 + ", " + g2 + ", " + b2 + ", " + alpha2 + ")");
			}
			openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = gradientFill;
			openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill = null;
			openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
			break;
		case 7:
			var height2 = command[5];
			var width2 = command[4];
			var y7 = command[3];
			var x7 = command[2];
			var optimizationUsed = false;
			if(openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix != null) {
					if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.b != 0 || openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.transformPoint(new openfl.geom.Point(x7,y7));
						var sbr = openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.transformPoint(new openfl.geom.Point(x7 + width2,y7 + height2));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = y7;
					sl = x7;
					sb = y7 + height2;
					sr = x7 + width2;
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.width && sb <= openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.__image.get_src(),sl,st,sr - sl,sb - st,x7 - offsetX,y7 - offsetY,width2,height2);
				}
			}
			if(!optimizationUsed) openfl._internal.renderer.canvas.CanvasGraphics.context.rect(x7 - offsetX,y7 - offsetY,width2,height2);
			break;
		default:
		}
	}
	if(stroke && openfl._internal.renderer.canvas.CanvasGraphics.hasStroke) {
		if(openfl._internal.renderer.canvas.CanvasGraphics.hasFill && closeGap) openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
		openfl._internal.renderer.canvas.CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl._internal.renderer.canvas.CanvasGraphics.hasFill || openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill != null) {
			if(openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill != null) openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill,openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat);
			openfl._internal.renderer.canvas.CanvasGraphics.context.translate(-openfl._internal.renderer.canvas.CanvasGraphics.bounds.x,-openfl._internal.renderer.canvas.CanvasGraphics.bounds.y);
			if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix != null) {
				openfl._internal.renderer.canvas.CanvasGraphics.context.transform(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.a,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.b,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.c,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.d,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.tx,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.ty);
				openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
				openfl._internal.renderer.canvas.CanvasGraphics.context.transform(openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.a,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.b,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.c,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.d,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.tx,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.ty);
			} else openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
			openfl._internal.renderer.canvas.CanvasGraphics.context.translate(openfl._internal.renderer.canvas.CanvasGraphics.bounds.x,openfl._internal.renderer.canvas.CanvasGraphics.bounds.y);
			openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
		}
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.render = function(graphics,renderSession) {
	if(graphics.__dirty) {
		openfl._internal.renderer.canvas.CanvasGraphics.graphics = graphics;
		openfl._internal.renderer.canvas.CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.length == 0 || openfl._internal.renderer.canvas.CanvasGraphics.bounds == null || openfl._internal.renderer.canvas.CanvasGraphics.bounds.width == 0 || openfl._internal.renderer.canvas.CanvasGraphics.bounds.height == 0) {
			graphics.__canvas = null;
			graphics.__context = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl._internal.renderer.canvas.CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = Math.ceil(openfl._internal.renderer.canvas.CanvasGraphics.bounds.width);
			graphics.__canvas.height = Math.ceil(openfl._internal.renderer.canvas.CanvasGraphics.bounds.height);
			var offsetX = openfl._internal.renderer.canvas.CanvasGraphics.bounds.x;
			var offsetY = openfl._internal.renderer.canvas.CanvasGraphics.bounds.y;
			openfl._internal.renderer.canvas.CanvasGraphics.fillCommands = new Array();
			openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands = new Array();
			openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
			openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false;
			openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill = null;
			openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat = false;
			var _g = 0;
			var _g1 = graphics.__commands;
			try {
				while(_g < _g1.length) {
					var command = _g1[_g];
					++_g;
					switch(command[1]) {
					case 3:case 4:case 13:case 14:
						openfl._internal.renderer.canvas.CanvasGraphics.fillCommands.push(command);
						openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands.push(command);
						break;
					case 11:
						openfl._internal.renderer.canvas.CanvasGraphics.endFill();
						openfl._internal.renderer.canvas.CanvasGraphics.endStroke();
						openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
						break;
					case 12:
						openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands.push(command);
						break;
					case 0:case 1:case 2:
						openfl._internal.renderer.canvas.CanvasGraphics.endFill();
						openfl._internal.renderer.canvas.CanvasGraphics.endStroke();
						openfl._internal.renderer.canvas.CanvasGraphics.fillCommands.push(command);
						openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands.push(command);
						break;
					case 5:case 6:case 7:case 8:
						openfl._internal.renderer.canvas.CanvasGraphics.endFill();
						openfl._internal.renderer.canvas.CanvasGraphics.endStroke();
						openfl._internal.renderer.canvas.CanvasGraphics.fillCommands.push(command);
						openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands.push(command);
						break;
					case 10:
						var culling = command[5];
						var uvtData = command[4];
						var indices = command[3];
						var vertices = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.endFill();
						openfl._internal.renderer.canvas.CanvasGraphics.endStroke();
						var v = vertices;
						var ind = indices;
						var uvt = uvtData;
						var pattern = null;
						var colorFill = openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvtData == null) {
								var this1;
								this1 = new openfl.VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvtData = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i = _g3++;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data;
											var this3;
											this3 = new Array(uvtData.data.length + 10);
											data = this3;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
											uvtData.data = data;
										}
										uvtData.data[uvtData.length - 1] = v.data[i * 2] / openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.width;
									}
									uvtData.length;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data1;
											var this4;
											this4 = new Array(uvtData.data.length + 10);
											data1 = this4;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
											uvtData.data = data1;
										}
										uvtData.data[uvtData.length - 1] = v.data[i * 2 + 1] / openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.height;
									}
									uvtData.length;
								}
							}
							var skipT = uvtData.length != v.length;
							var normalizedUVT = openfl._internal.renderer.canvas.CanvasGraphics.normalizeUVT(uvtData,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas(openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill,openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat,openfl._internal.renderer.canvas.CanvasGraphics.bounds.width | 0,openfl._internal.renderer.canvas.CanvasGraphics.bounds.height | 0); else pattern = openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas(openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill,openfl._internal.renderer.canvas.CanvasGraphics.bitmapRepeat,openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.width,openfl._internal.renderer.canvas.CanvasGraphics.bitmapFill.height);
						}
						var i1 = 0;
						var l = ind.length;
						var a;
						var b;
						var c;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i1 < l) {
							a = i1;
							b = i1 + 1;
							c = i1 + 2;
							iax = ind.data[a] * 2;
							iay = ind.data[a] * 2 + 1;
							ibx = ind.data[b] * 2;
							iby = ind.data[b] * 2 + 1;
							icx = ind.data[c] * 2;
							icy = ind.data[c] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							switch(culling[1]) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i1 += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i1 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
								openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x1,y1);
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x2,y2);
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x3,y3);
								openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
								openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
								i1 += 3;
								continue;
							}
							openfl._internal.renderer.canvas.CanvasGraphics.context.save();
							openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x1,y1);
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x2,y2);
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x3,y3);
							openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i1 += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl._internal.renderer.canvas.CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(pattern,0,0);
							openfl._internal.renderer.canvas.CanvasGraphics.context.restore();
							i1 += 3;
						}
						break;
					case 9:
						var count = command[6];
						var flags = command[5];
						var smooth = command[4];
						var tileData = command[3];
						var sheet = command[2];
						var useScale = (flags & 1) > 0;
						var useRotation = (flags & 2) > 0;
						var useTransform = (flags & 16) > 0;
						var useRGB = (flags & 4) > 0;
						var useAlpha = (flags & 8) > 0;
						var useRect = (flags & 32) > 0;
						var useOrigin = (flags & 64) > 0;
						var useBlendAdd = (flags & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = tileData.length;
						if(count >= 0 && totalCount > count) totalCount = count;
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						sheet.__bitmap.__sync();
						surface = sheet.__bitmap.__image.get_src();
						if(useBlendAdd) openfl._internal.renderer.canvas.CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = tileData[index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = sheet.__tileRects[tileID];
								center = sheet.__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = sheet.__rectTile;
								rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
								center = sheet.__point;
								if(useOrigin) {
									center.x = tileData[index + 6];
									center.y = tileData[index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl._internal.renderer.canvas.CanvasGraphics.context.save();
								openfl._internal.renderer.canvas.CanvasGraphics.context.translate(tileData[index],tileData[index + 1]);
								if(useRotation) openfl._internal.renderer.canvas.CanvasGraphics.context.rotate(tileData[index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = tileData[index + scaleIndex];
								if(useTransform) openfl._internal.renderer.canvas.CanvasGraphics.context.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
								if(useAlpha) openfl._internal.renderer.canvas.CanvasGraphics.context.globalAlpha = tileData[index + alphaIndex];
								openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl._internal.renderer.canvas.CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl._internal.renderer.canvas.CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					default:
						openfl.Lib.notImplemented("CanvasGraphics");
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
		}
		graphics.set___dirty(false);
		if(openfl._internal.renderer.canvas.CanvasGraphics.fillCommands.length > 0) openfl._internal.renderer.canvas.CanvasGraphics.endFill();
		if(openfl._internal.renderer.canvas.CanvasGraphics.strokeCommands.length > 0) openfl._internal.renderer.canvas.CanvasGraphics.endStroke();
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				context.moveTo(x3,ym);
				context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 13:
				var y6 = command[3];
				var x6 = command[2];
				context.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 14:
				var y7 = command[3];
				var x7 = command[2];
				context.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
openfl._internal.renderer.canvas.CanvasMaskManager = function(renderSession) {
	openfl._internal.renderer.AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl._internal.renderer.canvas.CanvasMaskManager;
openfl._internal.renderer.canvas.CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl._internal.renderer.canvas.CanvasMaskManager.__super__ = openfl._internal.renderer.AbstractMaskManager;
openfl._internal.renderer.canvas.CanvasMaskManager.prototype = $extend(openfl._internal.renderer.AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getTransform();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl._internal.renderer.canvas.CanvasMaskManager
});
openfl._internal.renderer.canvas.CanvasRenderer = function(width,height,context) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl._internal.renderer.canvas.CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl._internal.renderer.canvas.CanvasRenderer;
openfl._internal.renderer.canvas.CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl._internal.renderer.canvas.CanvasRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.canvas.CanvasRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl._internal.renderer.canvas.CanvasRenderer
});
openfl._internal.renderer.canvas.CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl._internal.renderer.canvas.CanvasShape;
openfl._internal.renderer.canvas.CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl._internal.renderer.canvas.CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl._internal.renderer.canvas.CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			context.globalAlpha = shape.__worldAlpha;
			var transform = shape.__worldTransform;
			if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,scrollRect.x - graphics.__bounds.x,scrollRect.y - graphics.__bounds.y,scrollRect.width,scrollRect.height,graphics.__bounds.x + scrollRect.x,graphics.__bounds.y + scrollRect.y,scrollRect.width,scrollRect.height);
			if(shape.__mask != null) renderSession.maskManager.popMask();
		}
	}
};
openfl._internal.renderer.canvas.CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl._internal.renderer.canvas.CanvasTextField;
openfl._internal.renderer.canvas.CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl._internal.renderer.canvas.CanvasTextField.context = null;
openfl._internal.renderer.canvas.CanvasTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	openfl._internal.renderer.canvas.CanvasTextField.update(textField);
	if(textField.__canvas != null) {
		var context = renderSession.context;
		context.globalAlpha = textField.__worldAlpha;
		var transform = textField.__worldTransform;
		var scrollRect = textField.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(scrollRect == null) context.drawImage(textField.__canvas,0,0); else context.drawImage(textField.__canvas,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
	}
};
openfl._internal.renderer.canvas.CanvasTextField.renderText = function(textField,text,format,offsetX) {
	openfl._internal.renderer.canvas.CanvasTextField.context.font = textField.__getFont(format);
	openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(format.color,6);
	openfl._internal.renderer.canvas.CanvasTextField.context.textBaseline = "top";
	var yOffset = 0.0;
	if(new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent)) yOffset = format.size * 0.185;
	var lines = [];
	if(textField.get_wordWrap()) {
		var words = text.split(" ");
		var line = "";
		var word;
		var newLineIndex;
		var test;
		var _g1 = 0;
		var _g = words.length;
		while(_g1 < _g) {
			var i = _g1++;
			word = words[i];
			newLineIndex = word.indexOf("\n");
			if(newLineIndex > -1) {
				while(newLineIndex > -1) {
					test = line + word.substring(0,newLineIndex) + " ";
					if(openfl._internal.renderer.canvas.CanvasTextField.context.measureText(test).width > textField.__width - 4 && i > 0) {
						lines.push(line);
						lines.push(word.substring(0,newLineIndex));
					} else lines.push(line + word.substring(0,newLineIndex));
					word = HxOverrides.substr(word,newLineIndex + 1,null);
					newLineIndex = word.indexOf("\n");
					line = "";
				}
				if(word != "") line = word + " ";
			} else {
				test = line + words[i] + " ";
				if(openfl._internal.renderer.canvas.CanvasTextField.context.measureText(test).width > textField.__width - 4 && i > 0) {
					lines.push(line);
					line = words[i] + " ";
				} else line = test;
			}
		}
		if(line != "") lines.push(line);
	} else lines = text.split("\n");
	var _g2 = 0;
	while(_g2 < lines.length) {
		var line1 = lines[_g2];
		++_g2;
		var _g11 = format.align;
		switch(_g11[1]) {
		case 3:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "center";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line1,textField.__width / 2,2 + yOffset,textField.__width - 4);
			break;
		case 1:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "end";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line1,textField.__width - 2,2 + yOffset,textField.__width - 4);
			break;
		default:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "start";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line1,2 + offsetX,2 + yOffset,textField.__width - 4);
		}
		yOffset += textField.get_textHeight();
	}
};
openfl._internal.renderer.canvas.CanvasTextField.update = function(textField) {
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border && !textField.__hasFocus || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl.text.TextFieldAutoSize.LEFT) {
			textField.__canvas = null;
			textField.__context = null;
			textField.__dirty = false;
		} else {
			if(textField.__canvas == null) {
				textField.__canvas = window.document.createElement("canvas");
				textField.__context = textField.__canvas.getContext("2d");
			}
			openfl._internal.renderer.canvas.CanvasTextField.context = textField.__context;
			if(textField.__text != null && textField.__text != "" || textField.__hasFocus) {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = textField.__measureText();
				var textWidth = 0.0;
				var _g1 = 0;
				while(_g1 < measurements.length) {
					var measurement = measurements[_g1];
					++_g1;
					textWidth += measurement;
				}
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = textWidth + 4;
				textField.__canvas.width = Math.ceil(textField.__width);
				textField.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					textField.__context.rect(0.5,0.5,textField.__width - 1,textField.__height - 1);
					if(textField.background) {
						openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl._internal.renderer.canvas.CanvasTextField.context.lineWidth = 1;
						openfl._internal.renderer.canvas.CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.stroke();
					}
				}
				if(textField.__hasFocus && textField.__selectionStart == textField.__cursorPosition && textField.__showCursor) {
					var cursorOffset = textField.__getTextWidth(text.substring(0,textField.__cursorPosition)) + 3;
					openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.__textFormat.color,6);
					openfl._internal.renderer.canvas.CanvasTextField.context.fillRect(cursorOffset,5,1,textField.__textFormat.size * 1.185 - 4);
				} else if(textField.__hasFocus && Math.abs(textField.__selectionStart - textField.__cursorPosition) > 0) {
					var lowPos = Std["int"](Math.min(textField.__selectionStart,textField.__cursorPosition));
					var highPos = Std["int"](Math.max(textField.__selectionStart,textField.__cursorPosition));
					var xPos = textField.__getTextWidth(text.substring(0,lowPos)) + 2;
					var widthPos = textField.__getTextWidth(text.substring(lowPos,highPos));
					openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#000000";
					openfl._internal.renderer.canvas.CanvasTextField.context.fillRect(xPos,5,widthPos,textField.__textFormat.size * 1.185 - 4);
				}
				if(textField.__ranges == null) openfl._internal.renderer.canvas.CanvasTextField.renderText(textField,text,textField.__textFormat,0); else {
					var currentIndex = 0;
					var range;
					var offsetX = 0.0;
					var _g11 = 0;
					var _g2 = textField.__ranges.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						range = textField.__ranges[i1];
						openfl._internal.renderer.canvas.CanvasTextField.renderText(textField,text.substring(range.start,range.end),range.format,offsetX);
						offsetX += measurements[i1];
					}
				}
			} else {
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = 4;
				textField.__canvas.width = Math.ceil(textField.__width);
				textField.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					if(textField.border) openfl._internal.renderer.canvas.CanvasTextField.context.rect(0.5,0.5,textField.__width - 1,textField.__height - 1); else textField.__context.rect(0,0,textField.__width,textField.__height);
					if(textField.background) {
						openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl._internal.renderer.canvas.CanvasTextField.context.lineWidth = 1;
						openfl._internal.renderer.canvas.CanvasTextField.context.lineCap = "square";
						openfl._internal.renderer.canvas.CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.stroke();
					}
				}
			}
			textField.__dirty = false;
			return true;
		}
	}
	return false;
};
openfl._internal.renderer.dom = {};
openfl._internal.renderer.dom.DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl._internal.renderer.dom.DOMBitmap;
openfl._internal.renderer.dom.DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl._internal.renderer.dom.DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.__image.buffer.__srcImage != null) openfl._internal.renderer.dom.DOMBitmap.renderImage(bitmap,renderSession); else openfl._internal.renderer.dom.DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl._internal.renderer.dom.DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.webkitImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl._internal.renderer.dom.DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.__image.buffer.__srcCanvas,0,0);
	openfl._internal.renderer.dom.DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl._internal.renderer.dom.DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.__image.buffer.__srcImage.src;
		openfl._internal.renderer.dom.DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl._internal.renderer.dom.DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl._internal.renderer.dom.DOMRenderer = function(width,height,element) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl._internal.renderer.dom.DOMRenderer;
openfl._internal.renderer.dom.DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl._internal.renderer.dom.DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = displayObject.__worldClip.transform(displayObject.__worldTransform.clone().invert());
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl._internal.renderer.dom.DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl._internal.renderer.dom.DOMRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.dom.DOMRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl._internal.renderer.dom.DOMRenderer
});
openfl._internal.renderer.dom.DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl._internal.renderer.dom.DOMShape;
openfl._internal.renderer.dom.DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl._internal.renderer.dom.DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl._internal.renderer.canvas.CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl._internal.renderer.dom.DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = new openfl.geom.Matrix();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform = transform.mult(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl._internal.renderer.dom.DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl._internal.renderer.dom.DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl._internal.renderer.dom.DOMTextField;
openfl._internal.renderer.dom.DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl._internal.renderer.dom.DOMTextField.render = function(textField,renderSession) {
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textField.__text != "" || textField.background || textField.border) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl._internal.renderer.dom.DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("cursor","inherit",null);
				}
				var style = textField.__style;
				textField.__div.innerHTML = textField.__text;
				if(textField.background) style.setProperty("background-color","#" + StringTools.hex(textField.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textField.border) style.setProperty("border","solid 1px #" + StringTools.hex(textField.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",textField.__getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textField.autoSize != openfl.text.TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textField.__width + "px",null);
				style.setProperty("height",textField.__height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl._internal.renderer.dom.DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl._internal.renderer.opengl = {};
openfl._internal.renderer.opengl.GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl._internal.renderer.opengl.GLBitmap;
openfl._internal.renderer.opengl.GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl._internal.renderer.opengl.GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
	renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData,bitmap.smoothing,bitmap.__worldTransform,bitmap.__worldColorTransform,bitmap.__worldAlpha,bitmap.blendMode,bitmap.pixelSnapping);
};
openfl._internal.renderer.opengl.GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	this.vpHeight = 0;
	this.vpWidth = 0;
	this.vpY = 0;
	this.vpX = 0;
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl._internal.renderer.opengl.GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl._internal.renderer.opengl.GLRenderer.glContexts[this._glContextId] = gl;
	if(openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL == null) {
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL = new haxe.ds.EnumValueMap();
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.NORMAL,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ADD,[gl.SRC_ALPHA,gl.DST_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.MULTIPLY,[gl.DST_COLOR,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.SCREEN,[gl.SRC_ALPHA,gl.ONE]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ALPHA,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.DARKEN,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.DIFFERENCE,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ERASE,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.HARDLIGHT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.INVERT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.LAYER,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.LIGHTEN,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.OVERLAY,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.SUBTRACT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
	}
	this.projectionMatrix = new openfl.geom.Matrix();
	this.projection = new openfl.geom.Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl.geom.Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl._internal.renderer.opengl.utils.ShaderManager(gl);
	this.spriteBatch = new openfl._internal.renderer.opengl.utils.SpriteBatch(gl);
	this.filterManager = new openfl._internal.renderer.opengl.utils.FilterManager(gl,this.transparent);
	this.stencilManager = new openfl._internal.renderer.opengl.utils.StencilManager(gl);
	this.blendModeManager = new openfl._internal.renderer.opengl.utils.BlendModeManager(gl);
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.maskManager = this.maskManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
	this.renderSession.projectionMatrix = this.projectionMatrix;
	this.maskManager = new openfl._internal.renderer.opengl.utils.GLMaskManager(this.renderSession);
	this.renderSession.maskManager = this.maskManager;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl._internal.renderer.opengl.GLRenderer;
openfl._internal.renderer.opengl.GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl._internal.renderer.opengl.GLRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.opengl.GLRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	destroy: function() {
		openfl._internal.renderer.opengl.GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,setViewport: function(x,y,width,height) {
		if(!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
			this.vpX = x;
			this.vpY = y;
			this.vpWidth = width;
			this.vpHeight = height;
			this.gl.viewport(x,y,width,height);
			this.setOrtho(x,y,width,height);
		}
	}
	,setOrtho: function(x,y,width,height) {
		var o = this.projectionMatrix;
		o.identity();
		o.a = 1 / width * 2;
		o.d = -1 / height * 2;
		o.tx = -1 - x * o.a;
		o.ty = 1 - y * o.d;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl._internal.renderer.opengl.GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		this.defaultFramebuffer = null;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		this.setViewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		this.setViewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl.display.BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl._internal.renderer.AbstractRenderer.prototype.resize.call(this,width,height);
		this.setViewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl._internal.renderer.opengl.GLRenderer
});
openfl._internal.renderer.opengl.GLTextField = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLTextField"] = openfl._internal.renderer.opengl.GLTextField;
openfl._internal.renderer.opengl.GLTextField.__name__ = ["openfl","_internal","renderer","opengl","GLTextField"];
openfl._internal.renderer.opengl.GLTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	openfl._internal.renderer.TextFieldGraphics.render(textField);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.render(textField,renderSession);
};
openfl._internal.renderer.opengl.shaders2 = {};
openfl._internal.renderer.opengl.shaders2.Shader = function(gl) {
	this.uniforms = new haxe.ds.StringMap();
	this.attributes = new haxe.ds.StringMap();
	this.ID = openfl._internal.renderer.opengl.shaders2.Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl._internal.renderer.opengl.shaders2.Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var vertexShader = openfl._internal.renderer.opengl.shaders2.Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl._internal.renderer.opengl.shaders2.Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) haxe.Log.trace("Could not initialize shaders",{ fileName : "Shader.hx", lineNumber : 127, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
	}
	return program;
};
openfl._internal.renderer.opengl.shaders2.Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc.join("\n");
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe.Log.trace(gl.getShaderInfoLog(shader),{ fileName : "Shader.hx", lineNumber : 141, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		return null;
	}
	return shader;
};
openfl._internal.renderer.opengl.shaders2.Shader.prototype = {
	init: function() {
		this.program = openfl._internal.renderer.opengl.shaders2.Shader.compileProgram(this.gl,this.vertexSrc,this.fragmentSrc);
		this.gl.useProgram(this.program);
	}
	,destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.attributes = null;
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw "Shader isn't initialized";
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw "Shader isn't initialized";
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,unbindVertexArray: function(va) {
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this.disableVertexAttribute(attribute,false);
		}
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.Shader
};
openfl._internal.renderer.opengl.shaders2.DefaultShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","attribute vec2 " + Std.string("aTexCoord0") + ";","attribute vec4 " + Std.string("aColor") + ";","uniform mat3 " + Std.string("uProjectionMatrix") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + Std.string("uProjectionMatrix") + " * vec3(" + Std.string("aPosition") + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + Std.string("aTexCoord0") + ";","   vColor = " + Std.string("aColor") + ";","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + Std.string("uSampler0") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + Std.string("uSampler0") + ", vTexCoord);","   gl_FragColor = colorTransform(tc, vColor, " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl._internal.renderer.opengl.shaders2.DefaultShader;
openfl._internal.renderer.opengl.shaders2.DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl._internal.renderer.opengl.shaders2.DefaultShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.DefaultShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.DefaultShader
});
openfl._internal.renderer.opengl.shaders2._DefaultShader = {};
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DefaultShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DefaultShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","attribute vec2 " + Std.string("aTexCoord0") + ";","attribute vec4 " + Std.string("aColor") + ";","uniform mat3 " + Std.string("uProjectionMatrix") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + Std.string("uProjectionMatrix") + " * vec3(" + Std.string("aPosition") + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + Std.string("aTexCoord0") + ";","   vColor = " + Std.string("aColor") + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + Std.string("uSampler0") + ";","uniform vec3 " + Std.string("uColor") + ";","uniform bool " + Std.string("uUseTexture") + ";","uniform float " + Std.string("uAlpha") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + Std.string("uUseTexture") + ") {","       tmp = texture2D(" + Std.string("uSampler0") + ", vTexCoord);","   } else {","       tmp = vec4(" + Std.string("uColor") + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader;
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uUseTexture");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader
});
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader = {};
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DrawTrianglesShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_DrawTrianglesShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.FillShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","uniform mat3 " + Std.string("uTranslationMatrix") + ";","uniform mat3 " + Std.string("uProjectionMatrix") + ";","uniform vec4 " + Std.string("uColor") + ";","uniform float " + Std.string("uAlpha") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + Std.string("uProjectionMatrix") + " * " + Std.string("uTranslationMatrix") + " * vec3(" + Std.string("aPosition") + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + Std.string("uColor") + ", " + Std.string("uAlpha") + ", " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl._internal.renderer.opengl.shaders2.FillShader;
openfl._internal.renderer.opengl.shaders2.FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl._internal.renderer.opengl.shaders2.FillShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.FillShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.FillShader
});
openfl._internal.renderer.opengl.shaders2._FillShader = {};
openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_FillShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_FillShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.PatternFillShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","uniform mat3 " + Std.string("uTranslationMatrix") + ";","uniform mat3 " + Std.string("uProjectionMatrix") + ";","uniform mat3 " + Std.string("uPatternMatrix") + ";","varying vec2 vPosition;","void main(void) {","   gl_Position = vec4((" + Std.string("uProjectionMatrix") + " * " + Std.string("uTranslationMatrix") + " * vec3(" + Std.string("aPosition") + ", 1.0)).xy, 0.0, 1.0);","   vPosition = (" + Std.string("uPatternMatrix") + " * vec3(" + Std.string("aPosition") + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + Std.string("uAlpha") + ";","uniform vec2 " + Std.string("uPatternTL") + ";","uniform vec2 " + Std.string("uPatternBR") + ";","uniform sampler2D " + Std.string("uSampler0") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + Std.string("uPatternTL") + ", " + Std.string("uPatternBR") + ", vPosition);","   vec4 tcol = texture2D(" + Std.string("uSampler0") + ", pos);","   gl_FragColor = colorTransform(tcol, " + Std.string("uAlpha") + ", " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl._internal.renderer.opengl.shaders2.PatternFillShader;
openfl._internal.renderer.opengl.shaders2.PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl._internal.renderer.opengl.shaders2.PatternFillShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.PatternFillShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uPatternMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uPatternTL");
		this.getUniformLocation("uPatternBR");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.PatternFillShader
});
openfl._internal.renderer.opengl.shaders2._PatternFillShader = {};
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PatternFillShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PatternFillShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.shaders2.PrimitiveShader = function(gl) {
	openfl._internal.renderer.opengl.shaders2.Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + Std.string("aPosition") + ";","attribute vec4 " + Std.string("aColor") + ";","uniform mat3 " + Std.string("uTranslationMatrix") + ";","uniform mat3 " + Std.string("uProjectionMatrix") + ";","uniform vec4 " + Std.string("uColorMultiplier") + ";","uniform vec4 " + Std.string("uColorOffset") + ";","uniform float " + Std.string("uAlpha") + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + Std.string("uProjectionMatrix") + " * " + Std.string("uTranslationMatrix") + " * vec3(" + Std.string("aPosition") + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + Std.string("aColor") + ", " + Std.string("uAlpha") + ", " + Std.string("uColorMultiplier") + ", " + Std.string("uColorOffset") + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl._internal.renderer.opengl.shaders2.PrimitiveShader;
openfl._internal.renderer.opengl.shaders2.PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl._internal.renderer.opengl.shaders2.PrimitiveShader.__super__ = openfl._internal.renderer.opengl.shaders2.Shader;
openfl._internal.renderer.opengl.shaders2.PrimitiveShader.prototype = $extend(openfl._internal.renderer.opengl.shaders2.Shader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders2.Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl._internal.renderer.opengl.shaders2.PrimitiveShader
});
openfl._internal.renderer.opengl.shaders2._PrimitiveShader = {};
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_"] = openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_;
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PrimitiveShader","Attrib_Impl_"];
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_"] = openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_;
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.__name__ = ["openfl","_internal","renderer","opengl","shaders2","_PrimitiveShader","Uniform_Impl_"];
openfl._internal.renderer.opengl.utils = {};
openfl._internal.renderer.opengl.utils.BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl._internal.renderer.opengl.utils.BlendModeManager;
openfl._internal.renderer.opengl.utils.BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl._internal.renderer.opengl.utils.BlendModeManager.prototype = {
	destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode,force) {
		if(force == null) force = false;
		if(blendMode == null) {
			blendMode = openfl.display.BlendMode.NORMAL;
			force = true;
		}
		if(!force && this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		var blendModeWebGL = openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.get(this.currentBlendMode);
		this.gl.blendFunc(blendModeWebGL[0],blendModeWebGL[1]);
		return true;
	}
	,__class__: openfl._internal.renderer.opengl.utils.BlendModeManager
};
openfl._internal.renderer.opengl.utils.DrawPath = function() {
	this.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	this.points = [];
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl._internal.renderer.opengl.utils.LineStyle();
	this.fill = openfl._internal.renderer.opengl.utils.FillType.None;
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl._internal.renderer.opengl.utils.DrawPath;
openfl._internal.renderer.opengl.utils.DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl._internal.renderer.opengl.utils.DrawPath.getStack = function(graphics,gl) {
	return openfl._internal.renderer.opengl.utils.PathBuiler.build(graphics,gl);
};
openfl._internal.renderer.opengl.utils.DrawPath.prototype = {
	update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl.display.LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl.display.CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl.display.JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl._internal.renderer.opengl.utils.DrawPath
};
openfl._internal.renderer.opengl.utils.PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl._internal.renderer.opengl.utils.PathBuiler;
openfl._internal.renderer.opengl.utils.PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__line = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__fill = null;
openfl._internal.renderer.opengl.utils.PathBuiler.closePath = function() {
	var l = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type == openfl._internal.renderer.opengl.utils.GraphicType.Polygon && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.fill != openfl._internal.renderer.opengl.utils.FillType.None) {
		var sx = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[0];
		var sy = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[1];
		var ex = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[l - 2];
		var ey = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) {
			openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(sx);
			openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(sy);
		}
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.endFill = function() {
	openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
	openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex++;
};
openfl._internal.renderer.opengl.utils.PathBuiler.moveTo = function(x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y);
	openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
};
openfl._internal.renderer.opengl.utils.PathBuiler.lineTo = function(x,y) {
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y);
};
openfl._internal.renderer.opengl.utils.PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
		if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
	}
	var xa = 0;
	var ya = 0;
	var n = 20;
	var points = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
		if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(0);
		openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
	}
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var points = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.graphicDataPop = function() {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
};
openfl._internal.renderer.opengl.utils.PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths = new Array();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__line = new openfl._internal.renderer.opengl.utils.LineStyle();
	openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
	openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId] = new openfl._internal.renderer.opengl.utils.GLStack(gl);
	if(!graphics.__visible || graphics.__commands.length == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmap = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				if(bitmap != null) openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.Texture(bitmap,matrix,repeat,smooth); else openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
					if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
					openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				}
				break;
			case 1:
				var alpha = command[3];
				var rgb = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				if(alpha > 0) openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.Color(rgb & 16777215,alpha); else openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
					if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
					openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				}
				break;
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cx2 = command[4];
				var cy = command[3];
				var cx = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.cubicCurveTo(cx,cy,cx2,cy2,x,y);
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy1 = command[3];
				var cx1 = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.curveTo(cx1,cy1,x1,y1);
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Circle;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x2,y2,radius];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Ellipse;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x3,y3,width,height];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Rectangle(false);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x4,y4,width1,height1];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width2 / 2) rx = width2 / 2;
				if(ry > height2 / 2) ry = height2 / 2;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Rectangle(true);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x5,y5,width2,height2,rx,ry];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 11:
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				break;
			case 12:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color = command[3];
				var thickness = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.__line = new openfl._internal.renderer.opengl.utils.LineStyle();
				if(thickness == null || Math.isNaN(thickness) || thickness < 0) openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = 0; else if(thickness == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = 1; else openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = thickness;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				if(color == null) openfl._internal.renderer.opengl.utils.PathBuiler.__line.color = 0; else openfl._internal.renderer.opengl.utils.PathBuiler.__line.color = color;
				if(alpha1 == null) openfl._internal.renderer.opengl.utils.PathBuiler.__line.alpha = 1; else openfl._internal.renderer.opengl.utils.PathBuiler.__line.alpha = alpha1;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.scaleMode = scaleMode;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.caps = caps;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.joints = joints;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.miterLimit = miterLimit;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 13:
				var y6 = command[3];
				var x6 = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x6);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y6);
				break;
			case 14:
				var y7 = command[3];
				var x7 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x7);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y7);
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 10:
				var blendMode = command[7];
				var colors = command[6];
				var culling = command[5];
				var uvtData = command[4];
				var indices = command[3];
				var vertices = command[2];
				var isColor;
				{
					var _g2 = openfl._internal.renderer.opengl.utils.PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl.VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl._internal.renderer.opengl.utils.PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data = this3;
										haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
										uvtData.data = data;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data1 = this4;
										haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 9:
				var count = command[6];
				var flags = command[5];
				var smooth1 = command[4];
				var tileData = command[3];
				var sheet = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex++;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.DrawTiles(sheet,tileData,smooth1,flags,count);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 15:
				var winding = command[4];
				var data2 = command[3];
				var commands = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				switch(winding) {
				case openfl.display.GraphicsPathWinding.EVEN_ODD:
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
					break;
				case openfl.display.GraphicsPathWinding.NON_ZERO:
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
				}
				var command1;
				var cx3;
				var cy3;
				var cx21;
				var cy21;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g22 = commands.length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					command1 = commands.data[i1];
					switch(command1) {
					case 1:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
						break;
					case 4:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
						break;
					case 2:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						break;
					case 5:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ax);
						openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(ay);
						break;
					case 3:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl._internal.renderer.opengl.utils.PathBuiler.curveTo(cx3,cy3,ax,ay);
						break;
					case 6:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						cx21 = data2.data[idx + 2];
						cy21 = data2.data[idx + 3];
						ax = data2.data[idx + 4];
						ay = data2.data[idx + 5];
						idx += 6;
						openfl._internal.renderer.opengl.utils.PathBuiler.cubicCurveTo(cx3,cy3,cx21,cy21,ax,ay);
						break;
					default:
					}
				}
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
				break;
			case 16:
				var m = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex,openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.OverrideMatrix(m);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			default:
			}
		}
		openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
	}
	graphics.__drawPaths = openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths;
	return glStack;
};
openfl._internal.renderer.opengl.utils.LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl.display.LineScaleMode.NORMAL;
	this.caps = openfl.display.CapsStyle.ROUND;
	this.joints = openfl.display.JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl._internal.renderer.opengl.utils.LineStyle;
openfl._internal.renderer.opengl.utils.LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl._internal.renderer.opengl.utils.LineStyle.prototype = {
	__class__: openfl._internal.renderer.opengl.utils.LineStyle
};
openfl._internal.renderer.opengl.utils._DrawPath = {};
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_"] = openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_;
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_DrawPath","WindingRule_Impl_"];
openfl._internal.renderer.opengl.utils.FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","FillType"], __constructs__ : ["None","Color","Texture","Gradient"] };
openfl._internal.renderer.opengl.utils.FillType.None = ["None",0];
openfl._internal.renderer.opengl.utils.FillType.None.toString = $estr;
openfl._internal.renderer.opengl.utils.FillType.None.__enum__ = openfl._internal.renderer.opengl.utils.FillType;
openfl._internal.renderer.opengl.utils.FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl._internal.renderer.opengl.utils.FillType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl._internal.renderer.opengl.utils.FillType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.FillType.Gradient = ["Gradient",3];
openfl._internal.renderer.opengl.utils.FillType.Gradient.toString = $estr;
openfl._internal.renderer.opengl.utils.FillType.Gradient.__enum__ = openfl._internal.renderer.opengl.utils.FillType;
openfl._internal.renderer.opengl.utils.FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl._internal.renderer.opengl.utils.FilterManager;
openfl._internal.renderer.opengl.utils.FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl._internal.renderer.opengl.utils.FilterManager.prototype = {
	applyFilterPass: function(filter,filterArea,width,height) {
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		this.width = 0;
		this.height = 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		this.vertexArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		this.uvArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		this.colorArray = new Float32Array([1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,1,3,2]),gl.STATIC_DRAW);
	}
	,popFilter: function() {
	}
	,pushFilter: function(filterBlock) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl._internal.renderer.opengl.utils.FilterManager
};
openfl._internal.renderer.opengl.utils.FilterTexture = function(gl,width,height,smoothing) {
	if(smoothing == null) smoothing = true;
	this.gl = gl;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterTexture"] = openfl._internal.renderer.opengl.utils.FilterTexture;
openfl._internal.renderer.opengl.utils.FilterTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterTexture"];
openfl._internal.renderer.opengl.utils.FilterTexture.prototype = {
	clear: function() {
		this.gl.clearColor(0,0,0,0);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,destroy: function() {
		this.gl.deleteFramebuffer(this.frameBuffer);
		this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,width,height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,width,height);
	}
	,__class__: openfl._internal.renderer.opengl.utils.FilterTexture
};
openfl._internal.renderer.opengl.utils.GLMaskManager = function(renderSession) {
	openfl._internal.renderer.AbstractMaskManager.call(this,renderSession);
	this.setContext(renderSession.gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl._internal.renderer.opengl.utils.GLMaskManager;
openfl._internal.renderer.opengl.utils.GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","GLMaskManager"];
openfl._internal.renderer.opengl.utils.GLMaskManager.__super__ = openfl._internal.renderer.AbstractMaskManager;
openfl._internal.renderer.opengl.utils.GLMaskManager.prototype = $extend(openfl._internal.renderer.AbstractMaskManager.prototype,{
	destroy: function() {
		this.gl = null;
	}
	,pushMask: function(mask) {
		this.renderSession.stencilManager.pushMask(mask,this.renderSession);
	}
	,popMask: function() {
		this.renderSession.stencilManager.popMask(null,this.renderSession);
	}
	,setContext: function(gl) {
		if(this.renderSession != null) this.renderSession.gl = gl;
		this.gl = gl;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLMaskManager
});
openfl._internal.renderer.opengl.utils.VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) this.defaultValue = new Float32Array(components); else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl._internal.renderer.opengl.utils.VertexAttribute;
openfl._internal.renderer.opengl.utils.VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl._internal.renderer.opengl.utils.VertexAttribute.prototype = {
	copy: function() {
		return new openfl._internal.renderer.opengl.utils.VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,get_elements: function() {
		return Math.floor(this.components * this.getElementsBytes() / 4);
	}
	,__class__: openfl._internal.renderer.opengl.utils.VertexAttribute
	,__properties__: {get_elements:"get_elements"}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl._internal.renderer.opengl.utils.GraphicsRenderer;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastVertsBuffer = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastBucketMode = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTexture = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTextureRepeat = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTextureSmooth = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.overrideMatrix = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height;
	if(rectData.length == 3) height = width; else height = rectData[3];
	if(path.type == openfl._internal.renderer.opengl.utils.GraphicType.Ellipse) {
		width /= 2;
		height /= 2;
		x += width;
		y += height;
	}
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * width);
			verts.push(y + Math.cos(seg * i) * height);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		var _g11 = 0;
		var _g2 = totalSegs + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			path.points.push(x + Math.sin(seg * i1) * width);
			path.points.push(y + Math.cos(seg * i1) * height);
		}
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl.geom.Point(points[0],points[1]);
	var lastPoint = new openfl.geom.Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl.geom.Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0] * alpha;
	var g = color[1] * alpha;
	var b = color[2] * alpha;
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!Math.isFinite(dist)) haxe.Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 411, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g3 = 0;
	while(_g3 < indexCount) {
		var i2 = _g3++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	var verts = fill.verts;
	var indices = fill.indices;
	if(fill != null) {
		var triangles = openfl._internal.renderer.opengl.utils.PolyK.triangulate(points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl._internal.renderer.opengl.utils.GraphicsRenderer.SIN45;
	var cx2 = -rx + rx * openfl._internal.renderer.opengl.utils.GraphicsRenderer.TAN22;
	var cy1 = -ry + ry * openfl._internal.renderer.opengl.utils.GraphicsRenderer.SIN45;
	var cy2 = -ry + ry * openfl._internal.renderer.opengl.utils.GraphicsRenderer.TAN22;
	var recPoints = [];
	recPoints.push(xe);
	recPoints.push(ye - ry);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,xe + cx2,ye,xe - rx,ye);
	recPoints.push(x + rx);
	recPoints.push(ye);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,x - cx2,ye,x - cx1,ye + cy1);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,x,ye + cy2,x,ye - ry);
	recPoints.push(x);
	recPoints.push(y + ry);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,x,y - cy2,x - cx1,y - cy1);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,x - cx2,y,x + rx,y);
	recPoints.push(xe - rx);
	recPoints.push(y);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,xe + cx2,y,xe + cx1,y - cy1);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo(recPoints,xe,y - cy2,xe,y + ry);
	recPoints.push(xe);
	recPoints.push(ye - ry);
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = openfl._internal.renderer.opengl.utils.PolyK.triangulate(recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl._internal.renderer.opengl.utils.BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	colorAttrib.defaultValue = new Float32Array([1,1,1,1]);
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		verts = new Float32Array(vertsLength);
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors = new Uint32Array(verts.buffer);
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y0 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			x1 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y1 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			x2 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y2 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		verts[idx++] = a * x0 + c * y0 + tx;
		verts[idx++] = b * x0 + d * y0 + ty;
		verts[idx++] = uvtData.data[v0];
		verts[idx++] = uvtData.data[v0 + 1];
		if(hasColors) glColors[idx++] = colors.data[i0];
		verts[idx++] = a * x1 + c * y1 + tx;
		verts[idx++] = b * x1 + d * y1 + ty;
		verts[idx++] = uvtData.data[v1];
		verts[idx++] = uvtData.data[v1 + 1];
		if(hasColors) glColors[idx++] = colors.data[i1];
		verts[idx++] = a * x2 + c * y2 + tx;
		verts[idx++] = b * x2 + d * y2 + ty;
		verts[idx++] = uvtData.data[v2];
		verts[idx++] = uvtData.data[v2 + 1];
		if(hasColors) glColors[idx++] = colors.data[i2];
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var n = 20;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(graphics.__commands.length <= 0) return;
	if(dirty) openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.cacheAsBitmap);
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics(object,renderSession,false);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics = function(object,renderSession,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl.geom.Matrix.__identity; else translationMatrix = object.__worldTransform;
	renderSession.blendModeManager.setBlendMode(object.blendMode);
	var batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
			renderSession.stencilManager.pushBucket(bucket,renderSession,translationMatrix.toArray(true));
			var shader = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader(bucket,renderSession,object,translationMatrix.toArray(true));
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
			var shader1 = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader(bucket,renderSession,object,null);
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4]);
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				batchDrawing = renderSession.spriteBatch.drawing;
				if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniformMatrix3fv(shader2.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
				gl.uniform1f(shader2.getUniformLocation("uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds = new openfl.geom.Rectangle(); else openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl._internal.renderer.opengl.utils.DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.get_bottom()));
		bucket.optimize();
	}
	glStack.upload();
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var pMatrix;
			if(m == null) pMatrix = new openfl.geom.Matrix(); else pMatrix = new openfl.geom.Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix.invert();
			pMatrix.scale(1 / b.width,1 / b.height);
			var tx = pMatrix.tx;
			var ty = pMatrix.ty;
			pMatrix.tx = 0;
			pMatrix.ty = 0;
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			bucket.textureMatrix = pMatrix;
			break;
		default:
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl._internal.renderer.opengl.utils.GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl._internal.renderer.opengl.utils.GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader = function(bucket,renderSession,object,translationMatrix) {
	var gl = renderSession.gl;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform1f(shader.getUniformLocation("uAlpha"),object.__worldAlpha);
	gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("uColor"),new Float32Array(bucket.color));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uPatternMatrix"),false,bucket.textureMatrix.toArray(true));
		break;
	case 5:
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("uColor"),new Float32Array(bucket.color));
		}
		break;
	default:
	}
	return shader;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl._internal.renderer.opengl.utils.BucketMode.PatternFill && bucket.texture != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.__image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
openfl._internal.renderer.opengl.utils.GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl._internal.renderer.opengl.utils.GLStack;
openfl._internal.renderer.opengl.utils.GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl._internal.renderer.opengl.utils.GLStack.prototype = {
	reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLStack
};
openfl._internal.renderer.opengl.utils.GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl._internal.renderer.opengl.utils.BucketMode.Fill;
	this.textureMatrix = new openfl.geom.Matrix();
	this.textureTL = new openfl.geom.Point();
	this.textureBR = new openfl.geom.Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl._internal.renderer.opengl.utils.GLBucket;
openfl._internal.renderer.opengl.utils.GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl._internal.renderer.opengl.utils.GLBucket.prototype = {
	getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl._internal.renderer.opengl.utils.GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl._internal.renderer.opengl.utils.GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl._internal.renderer.opengl.utils.GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl._internal.renderer.opengl.utils.GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl._internal.renderer.opengl.utils.BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		this.glTile = new Int16Array(this.tile);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl._internal.renderer.opengl.utils.BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLBucket
};
openfl._internal.renderer.opengl.utils.GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl._internal.renderer.opengl.utils.VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl._internal.renderer.opengl.utils.GLBucketData;
openfl._internal.renderer.opengl.utils.GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl._internal.renderer.opengl.utils.GLBucketData.prototype = {
	reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) this.glVerts = new Float32Array(this.verts);
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * 4 * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) this.glIndices = new Uint16Array(this.indices);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLBucketData
};
openfl._internal.renderer.opengl.utils.BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketMode"], __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl._internal.renderer.opengl.utils.BucketMode.None = ["None",0];
openfl._internal.renderer.opengl.utils.BucketMode.None.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.None.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.Fill = ["Fill",1];
openfl._internal.renderer.opengl.utils.BucketMode.Fill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.Fill.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill = ["PatternFill",2];
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.Line = ["Line",3];
openfl._internal.renderer.opengl.utils.BucketMode.Line.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.Line.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine = ["PatternLine",4];
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles = ["DrawTiles",6];
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketDataType"], __constructs__ : ["Line","Fill"] };
openfl._internal.renderer.opengl.utils.BucketDataType.Line = ["Line",0];
openfl._internal.renderer.opengl.utils.BucketDataType.Line.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketDataType.Line.__enum__ = openfl._internal.renderer.opengl.utils.BucketDataType;
openfl._internal.renderer.opengl.utils.BucketDataType.Fill = ["Fill",1];
openfl._internal.renderer.opengl.utils.BucketDataType.Fill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketDataType.Fill.__enum__ = openfl._internal.renderer.opengl.utils.BucketDataType;
openfl._internal.renderer.opengl.utils.GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl._internal.renderer.opengl.utils.GLGraphicsData;
openfl._internal.renderer.opengl.utils.GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl._internal.renderer.opengl.utils.GLGraphicsData.prototype = {
	reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		this.glData = new Float32Array(this.data);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		this.glIndices = new Uint16Array(this.indices);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLGraphicsData
};
openfl._internal.renderer.opengl.utils.PolyK = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PolyK"] = openfl._internal.renderer.opengl.utils.PolyK;
openfl._internal.renderer.opengl.utils.PolyK.__name__ = ["openfl","_internal","renderer","opengl","utils","PolyK"];
openfl._internal.renderer.opengl.utils.PolyK.triangulate = function(p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var tgs = [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i = _g1++;
		_g.push(i);
	}
	avl = _g;
	var i1 = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i1 % al];
		var i11 = avl[(i1 + 1) % al];
		var i2 = avl[(i1 + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl._internal.renderer.opengl.utils.PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl._internal.renderer.opengl.utils.PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i1 + 1) % al,1);
			al--;
			i1 = 0;
		} else if(i1++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i1 = 0;
				al = n;
				sign = false;
			} else {
				haxe.Log.trace("Warning: shape too complex to fill",{ fileName : "GraphicsRenderer.hx", lineNumber : 1704, className : "openfl._internal.renderer.opengl.utils.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl._internal.renderer.opengl.utils.PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl._internal.renderer.opengl.utils.PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
openfl._internal.renderer.opengl.utils.GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","GraphicType"], __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl._internal.renderer.opengl.utils.GraphicType.Polygon = ["Polygon",0];
openfl._internal.renderer.opengl.utils.GraphicType.Polygon.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Polygon.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.Circle = ["Circle",2];
openfl._internal.renderer.opengl.utils.GraphicType.Circle.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Circle.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse = ["Ellipse",3];
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils._GraphicsRenderer = {};
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_"] = openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_;
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_GraphicsRenderer","RenderMode_Impl_"];
openfl._internal.renderer.opengl.utils.ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl._internal.renderer.opengl.utils.ShaderManager;
openfl._internal.renderer.opengl.utils.ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl._internal.renderer.opengl.utils.ShaderManager.prototype = {
	setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl._internal.renderer.opengl.shaders2.DefaultShader(gl);
		this.fillShader = new openfl._internal.renderer.opengl.shaders2.FillShader(gl);
		this.patternFillShader = new openfl._internal.renderer.opengl.shaders2.PatternFillShader(gl);
		this.drawTrianglesShader = new openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader(gl);
		this.primitiveShader = new openfl._internal.renderer.opengl.shaders2.PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,destroy: function() {
		this.defaultShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.primitiveShader.destroy();
		this.gl = null;
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return true;
		}
		if(this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl._internal.renderer.opengl.utils.ShaderManager
};
openfl._internal.renderer.opengl.utils.SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition"));
	this.attributes.push(new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aTexCoord0"));
	this.attributes.push(new openfl._internal.renderer.opengl.utils.VertexAttribute(4,5121,true,"aColor"));
	this.attributes[2].defaultValue = new Float32Array([1,1,1,1]);
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl._internal.renderer.opengl.utils.VertexArray(this.attributes,this.vertexArraySize,false);
	this.positions = new Float32Array(this.vertexArray.buffer);
	this.colors = new Uint32Array(this.vertexArray.buffer);
	this.indices = new Uint16Array(this.indexArraySize);
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl._internal.renderer.opengl.utils._SpriteBatch.State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl._internal.renderer.opengl.utils.SpriteBatch;
openfl._internal.renderer.opengl.utils.SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl._internal.renderer.opengl.utils.SpriteBatch.prototype = {
	destroy: function() {
		this.vertexArray.destroy();
		this.vertexArray = null;
		this.indices = null;
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentState.destroy();
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.destroy();
		}
		this.gl = null;
	}
	,begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.flush();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) throw "Call Spritebatch.begin() before start()";
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode,pixelSnapping) {
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,null,color,pixelSnapping);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl.display.BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl.display.BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl.display.BlendMode.SCREEN;
			break;
		default:
			blendMode = openfl.display.BlendMode.NORMAL;
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = totalCount / numValues | 0;
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var matrix = new openfl.geom.Matrix();
		var oMatrix = object.__worldTransform;
		var uvs = new openfl.display.TextureUvs();
		var bIndex = 0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				tileUV.setTo(rect.get_left() / sheet.__bitmap.width,rect.get_top() / sheet.__bitmap.height,rect.get_right() / sheet.__bitmap.width,rect.get_bottom() / sheet.__bitmap.height);
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				a = 1;
				b = 0;
				c = 0;
				d = 1;
				tx = 0;
				ty = 0;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				matrix.identity();
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				matrix.a = a * oMatrix.a + b * oMatrix.c;
				matrix.b = a * oMatrix.b + b * oMatrix.d;
				matrix.c = c * oMatrix.a + d * oMatrix.c;
				matrix.d = c * oMatrix.b + d * oMatrix.d;
				matrix.tx = tx * oMatrix.a + ty * oMatrix.c + oMatrix.tx;
				matrix.ty = tx * oMatrix.b + ty * oMatrix.d + oMatrix.ty;
				uvs.x0 = tileUV.x;
				uvs.y0 = tileUV.y;
				uvs.x1 = tileUV.width;
				uvs.y1 = tileUV.y;
				uvs.x2 = tileUV.width;
				uvs.y2 = tileUV.height;
				uvs.x3 = tileUV.x;
				uvs.y3 = tileUV.height;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				color = ((alpha * 255 | 0) & 255) << 24 | (tint & 255) << 16 | (tint >> 8 & 255) << 8 | tint >> 16 & 255;
				this.fillVertices(bIndex,rect.width,rect.height,matrix,uvs,null,color,openfl.display.PixelSnapping.NEVER);
				this.setState(this.batchedSprites,texture,smooth,blendMode,object.__worldColorTransform,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,renderCachedGraphics: function(object) {
		var cachedTexture = object.__graphics.__cachedTexture;
		if(cachedTexture == null) return;
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var alpha = object.__worldAlpha;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		var uvs = new openfl.display.TextureUvs();
		uvs.x0 = 0;
		uvs.y0 = 1;
		uvs.x1 = 1;
		uvs.y1 = 1;
		uvs.x2 = 1;
		uvs.y2 = 0;
		uvs.x3 = 0;
		uvs.y3 = 0;
		var worldTransform = object.__worldTransform.clone();
		worldTransform.__translateTransformed(new openfl.geom.Point(object.__graphics.__bounds.x,object.__graphics.__bounds.y));
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,cachedTexture.width,cachedTexture.height,worldTransform,uvs,null,color,null);
		this.setState(this.batchedSprites,cachedTexture.texture,null,object.blendMode,object.__worldColorTransform);
		this.batchedSprites++;
	}
	,fillVertices: function(index,width,height,matrix,uvs,pivot,color,pixelSnapping) {
		if(color == null) color = -1;
		var w0;
		var w1;
		var h0;
		var h1;
		if(pivot == null) {
			w0 = width;
			w1 = 0;
			h0 = height;
			h1 = 0;
		} else {
			w0 = width * (1 - pivot.x);
			w1 = width * -pivot.x;
			h0 = height * (1 - pivot.y);
			h1 = height * -pivot.y;
		}
		if(pixelSnapping == null) pixelSnapping = openfl.display.PixelSnapping.NEVER;
		var snap = pixelSnapping != openfl.display.PixelSnapping.NEVER;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		var cOffsetIndex = 0;
		if(!snap) {
			this.positions[index++] = a * w1 + c * h1 + tx;
			this.positions[index++] = d * h1 + b * w1 + ty;
		} else {
			this.positions[index++] = Math.round(a * w1 + c * h1 + tx);
			this.positions[index++] = Math.round(d * h1 + b * w1 + ty);
		}
		this.positions[index++] = uvs.x0;
		this.positions[index++] = uvs.y0;
		if(this.enableColor) this.colors[index++] = color;
		if(!snap) {
			this.positions[index++] = a * w0 + c * h1 + tx;
			this.positions[index++] = d * h1 + b * w0 + ty;
		} else {
			this.positions[index++] = Math.round(a * w0 + c * h1 + tx);
			this.positions[index++] = Math.round(d * h1 + b * w0 + ty);
		}
		this.positions[index++] = uvs.x1;
		this.positions[index++] = uvs.y1;
		if(this.enableColor) this.colors[index++] = color;
		if(!snap) {
			this.positions[index++] = a * w0 + c * h0 + tx;
			this.positions[index++] = d * h0 + b * w0 + ty;
		} else {
			this.positions[index++] = Math.round(a * w0 + c * h0 + tx);
			this.positions[index++] = Math.round(d * h0 + b * w0 + ty);
		}
		this.positions[index++] = uvs.x2;
		this.positions[index++] = uvs.y2;
		if(this.enableColor) this.colors[index++] = color;
		if(!snap) {
			this.positions[index++] = a * w1 + c * h0 + tx;
			this.positions[index++] = d * h0 + b * w1 + ty;
		} else {
			this.positions[index++] = Math.round(a * w1 + c * h0 + tx);
			this.positions[index++] = Math.round(d * h0 + b * w1 + ty);
		}
		this.positions[index++] = uvs.x3;
		this.positions[index++] = uvs.y3;
		if(this.enableColor) this.colors[index++] = color;
		this.writtenVertexBytes = index;
	}
	,enableAttributes: function(color) {
		if(color == null) color = -1;
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect == null) this.gl.disable(this.gl.SCISSOR_TEST); else {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.floor(this.clipRect.width),Math.floor(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = this.renderSession.shaderManager.defaultShader;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,this.renderSession.projectionMatrix.toArray(true));
		if(state.colorTransform != null) {
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),0,0,0,0);
		}
		this.renderSession.blendModeManager.setBlendMode(state.blendMode);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		if(state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl._internal.renderer.opengl.utils._SpriteBatch.State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		state.colorTransform = colorTransform;
		state.skipColorTransformAlpha = skipAlpha;
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl._internal.renderer.opengl.utils.SpriteBatch
};
openfl._internal.renderer.opengl.utils._SpriteBatch = {};
openfl._internal.renderer.opengl.utils._SpriteBatch.State = function() {
	this.skipColorTransformAlpha = false;
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl._internal.renderer.opengl.utils._SpriteBatch.State;
openfl._internal.renderer.opengl.utils._SpriteBatch.State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl._internal.renderer.opengl.utils._SpriteBatch.State.prototype = {
	equals: function(other) {
		return (this.shader == null || other.shader == null || this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform != null && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,destroy: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl._internal.renderer.opengl.utils._SpriteBatch.State
};
openfl._internal.renderer.opengl.utils.StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl._internal.renderer.opengl.utils.StencilManager;
openfl._internal.renderer.opengl.utils.StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl._internal.renderer.opengl.utils.StencilManager.prototype = {
	prepareGraphics: function(fill,renderSession,translationMatrix) {
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.length <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,bindGraphics: function(object,glData,renderSession) {
	}
	,destroy: function() {
		this.stencilStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl._internal.renderer.opengl.utils.StencilManager
};
openfl._internal.renderer.opengl.utils.VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl._internal.renderer.opengl.utils.VertexArray;
openfl._internal.renderer.opengl.utils.VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl._internal.renderer.opengl.utils.VertexArray.prototype = {
	bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,unbind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,destroy: function() {
		this.gl.deleteBuffer(this.glBuffer);
		this.buffer = null;
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl._internal.renderer.opengl.utils.VertexArray
	,__properties__: {get_stride:"get_stride"}
};
openfl._internal.renderer.opengl.utils._VertexAttribute = {};
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_"] = openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_VertexAttribute","ElementType_Impl_"];
openfl.display.BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.__usingFramebuffer = false;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl.geom.Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((function($this) {
				var $r;
				var $int = fillColor & -16777216;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.__image = new lime.graphics.Image(null,0,0,width,height,fillColor);
		this.__image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl.geom.Matrix();
	this.__worldColorTransform = new openfl.geom.ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl.display.BitmapData;
openfl.display.BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl.display.BitmapData.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__fromBase64(base64,type,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime.graphics.Image.fromCanvas(canvas));
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl.display.BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl.display.BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl.display.BitmapData.__flipPixel = function(pixel) {
	return (pixel & 255) << 24 | (pixel >> 8 & 255) << 16 | (pixel >> 16 & 255) << 8 | pixel >> 24 & 255;
};
openfl.display.BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl.display.BitmapData.prototype = {
	applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.__image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(this.__image);
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceBitmapData.__image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(sourceBitmapData.__image);
		filter.__applyFilter(this.__image.buffer.__srcImageData,sourceBitmapData.__image.buffer.__srcImageData,sourceRect,destPoint);
		this.__image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl.display.BitmapData(this.width,this.height,this.transparent); else return openfl.display.BitmapData.fromImage(this.__image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) return;
		this.__image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
		this.__usingFramebuffer = false;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime.graphics.ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime.graphics.ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime.graphics.ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime.graphics.ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime.graphics.ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime.graphics.ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime.graphics.ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime.graphics.ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.__image.copyChannel(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
		this.__usingFramebuffer = false;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.__image.copyPixels(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.__image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
		this.__usingFramebuffer = false;
	}
	,dispose: function() {
		this.__image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl.Lib.current.stage.__renderer;
			if(renderer != null) {
				var renderSession = renderer.renderSession;
				var gl = renderSession.gl;
				if(gl != null) gl.deleteTexture(this.__texture);
			}
		}
		if(this.__framebuffer != null) this.__framebuffer.destroy();
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		var _g = this.__image.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.__image);
			lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
			var buffer = this.__image.buffer;
			var renderSession = new openfl._internal.renderer.RenderSession();
			renderSession.context = buffer.__srcContext;
			renderSession.roundPixels = true;
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.webkitImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			var matrixCache = source.__worldTransform;
			if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl.geom.Matrix();
			source.__updateChildren(false);
			source.__renderCanvas(renderSession);
			source.__worldTransform = matrixCache;
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.webkitImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			break;
		case 1:
			var renderSession1 = openfl.Lib.current.stage.__renderer.renderSession;
			this.__drawGL(renderSession1,this.width,this.height,source,matrix,colorTransform,blendMode,clipRect,smoothing,!this.__usingFramebuffer,false,true);
			break;
		default:
		}
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js.Boot.__instanceof(compressor,openfl.display.PNGEncoderOptions)) return byteArray = this.__image.encode("png"); else if(js.Boot.__instanceof(compressor,openfl.display.JPEGEncoderOptions)) return byteArray = this.__image.encode("jpg",(js.Boot.__cast(compressor , openfl.display.JPEGEncoderOptions)).quality);
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		this.__image.fillRect(rect.__toLimeRectangle(),color,1);
		this.__usingFramebuffer = false;
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.floodFill(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(data),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.__isValid) return new openfl.geom.Rectangle(0,0,this.width,this.height);
		var rect = this.__image.getColorBoundsRect(mask,color,findColor);
		return new openfl.geom.Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return this.__image.getPixels(rect.__toLimeRectangle(),1);
	}
	,getSurface: function() {
		if(!this.__isValid) return null;
		if(this.__surface == null) this.__image.dirty = true;
		if(this.__image != null && this.__image.dirty) {
			if(this.__surface != null) lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.destroy(this.__surface);
			this.__surfaceImage = this.__image.clone();
			this.__surfaceImage.set_format(2);
			this.__surfaceImage.set_premultiplied(true);
			this.__surface = lime.graphics.cairo._CairoSurface.CairoSurface_Impl_.fromImage(this.__surfaceImage);
			this.__image.dirty = false;
		}
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__usingFramebuffer && this.__framebuffer != null) return this.__framebuffer.texture;
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__image.dirty = true;
		}
		if(this.__image != null && this.__image.dirty) {
			var format;
			if(this.__image.buffer.bitsPerPixel == 1) format = gl.ALPHA; else format = gl.RGBA;
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.__image.clone();
			textureImage.set_premultiplied(true);
			gl.texImage2D(gl.TEXTURE_2D,0,format,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = pixels.length / 4 | 0;
		var result;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl.geom.Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = pixels.length;
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		openfl.Lib.notImplemented("BitmapData.hitTest");
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.__image.merge(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		this.__usingFramebuffer = false;
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		openfl.Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl.geom.Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl.Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		openfl.Lib.notImplemented("BitmapData.scroll");
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel32(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.__image.setPixels(rect.__toLimeRectangle(),byteArray,1);
		this.__usingFramebuffer = false;
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new lime.utils.ByteArray();
		byteArray.set_length(inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var memory = new lime.utils.ByteArray();
			memory.set_length(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl.Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl.Memory._setPositionTemporarily(position,function() {
						return openfl.Memory.gcRef.readInt();
					});
					pixelMask = pixelValue & mask;
					i = openfl.display.BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl.Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl.Memory.select(null);
			return hits;
		} else {
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceBitmapData.width | 0;
			var sh = sourceBitmapData.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = 0;
			if(copySource) sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new lime.utils.ByteArray();
			if(memory1.allocated < totalMemory) memory1.___resizeBuffer(memory1.allocated = Std["int"](Math.max(totalMemory,memory1.allocated * 2))); else if(memory1.allocated > totalMemory * 2) memory1.___resizeBuffer(memory1.allocated = totalMemory);
			memory1.length = totalMemory;
			totalMemory;
			memory1.position = 0;
			var bitmapData = sourceBitmapData.clone();
			var pixels = bitmapData.getPixels(sourceRect);
			memory1.writeBytes(pixels);
			memory1.position = canvasMemory;
			if(copySource) memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl.Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl.Memory._setPositionTemporarily(position1,function() {
						return openfl.Memory.gcRef.readInt();
					});
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl.display.BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl.Memory.setI32(position1,color);
						hits1++;
					} else if(copySource) openfl.Memory.setI32(position1,openfl.Memory._setPositionTemporarily(canvasMemory + position1,function() {
						return openfl.Memory.gcRef.readInt();
					}));
				}
			}
			memory1.position = 0;
			bitmapData.setPixels(sourceRect,memory1);
			this.copyPixels(bitmapData,bitmapData.rect,destPoint);
			openfl.Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl.display.TextureUvs();
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = 1;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = 1;
		this.__uvData.y2 = 1;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = 1;
	}
	,__drawGL: function(renderSession,width,height,source,matrix,colorTransform,blendMode,clipRect,smoothing,drawSelf,clearBuffer,readPixels) {
		if(readPixels == null) readPixels = false;
		if(clearBuffer == null) clearBuffer = false;
		if(drawSelf == null) drawSelf = false;
		if(smoothing == null) smoothing = false;
		var renderer = openfl.Lib.current.stage.__renderer;
		if(renderer == null) return;
		var renderSession1 = renderer.renderSession;
		var gl = renderSession1.gl;
		if(gl == null) return;
		var spritebatch = renderSession1.spriteBatch;
		var renderTransparent = renderSession1.renderer.transparent;
		var tmpRect;
		if(clipRect == null) tmpRect = new openfl.geom.Rectangle(0,0,width,height); else tmpRect = clipRect.clone();
		renderSession1.renderer.transparent = this.transparent;
		if(this.__framebuffer == null) this.__framebuffer = new openfl._internal.renderer.opengl.utils.FilterTexture(gl,width,height,smoothing);
		this.__framebuffer.resize(width,height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer.frameBuffer);
		renderer.setViewport(0,0,width,height);
		spritebatch.begin(renderSession1,drawSelf?null:tmpRect);
		gl.colorMask(true,true,true,true);
		renderSession1.blendModeManager.setBlendMode(openfl.display.BlendMode.NORMAL);
		renderSession1.shaderManager.setShader(renderSession1.shaderManager.defaultShader,true);
		if(clearBuffer || drawSelf) this.__framebuffer.clear();
		if(drawSelf) {
			this.__worldTransform.identity();
			this.__flipMatrix(this.__worldTransform);
			this.__renderGL(renderSession1);
			spritebatch.stop();
			gl.deleteTexture(this.__texture);
			spritebatch.start(tmpRect);
		}
		var ctCache = source.__worldColorTransform;
		var matrixCache = source.__worldTransform;
		var blendModeCache = source.blendMode;
		var cached = source.__cacheAsBitmap;
		var m;
		if(matrix != null) m = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else m = new openfl.geom.Matrix();
		this.__flipMatrix(m);
		source.__worldTransform = m;
		if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl.geom.ColorTransform();
		source.blendMode = blendMode;
		source.__cacheAsBitmap = false;
		source.__updateChildren(false);
		source.__renderGL(renderSession1);
		source.__worldColorTransform = ctCache;
		source.__worldTransform = matrixCache;
		source.blendMode = blendModeCache;
		source.__cacheAsBitmap = cached;
		source.__updateChildren(true);
		spritebatch.finish();
		if(readPixels) {
			if(this.__image.width != width || this.__image.height != height) this.__image.resize(width,height);
			gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,this.__image.buffer.data);
		}
		gl.bindFramebuffer(gl.FRAMEBUFFER,renderSession1.defaultFramebuffer);
		renderer.setViewport(0,0,renderSession1.renderer.width,renderSession1.renderer.height);
		renderSession1.renderer.transparent = renderTransparent;
		gl.colorMask(true,true,true,renderSession1.renderer.transparent);
		this.__usingFramebuffer = true;
		if(this.__image != null) {
			this.__image.dirty = false;
			this.__image.set_premultiplied(true);
		}
		this.__createUVs();
		this.__isValid = true;
	}
	,__flipMatrix: function(m) {
		var tx = m.tx;
		var ty = m.ty;
		m.tx = 0;
		m.ty = 0;
		m.scale(1,-1);
		m.translate(0,this.height);
		m.tx += tx;
		m.ty -= ty;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime.graphics.Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime.graphics.Image.fromBytes(bytes,function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime.graphics.utils.ImageCanvasUtil.convertToCanvas(_g.__image);
				lime.graphics.utils.ImageCanvasUtil.createImageData(_g.__image);
				var data = _g.__image.buffer.data;
				var _g2 = 0;
				var _g1 = rawAlpha.length;
				while(_g2 < _g1) {
					var i = _g2++;
					data[i * 4 + 3] = rawAlpha.readUnsignedByte();
				}
				_g.__image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime.graphics.Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		this.__image = image;
		this.width = image.width;
		this.height = image.height;
		this.rect = new openfl.geom.Rectangle(0,0,image.width,image.height);
		this.__isValid = true;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__isValid) return;
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = this.getSurface();
		if(surface != null) {
			cairo.setSourceSurface(surface,0,0);
			cairo.paint();
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.__image.buffer.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		renderSession.spriteBatch.renderBitmapData(this,false,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.blendMode);
	}
	,__sync: function() {
		lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__class__: openfl.display.BitmapData
};
openfl.display.TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl.display.TextureUvs;
openfl.display.TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl.display.TextureUvs.prototype = {
	__class__: openfl.display.TextureUvs
};
openfl.display.BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : ["openfl","display","BlendMode"], __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl.display.BlendMode.ADD = ["ADD",0];
openfl.display.BlendMode.ADD.toString = $estr;
openfl.display.BlendMode.ADD.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ALPHA = ["ALPHA",1];
openfl.display.BlendMode.ALPHA.toString = $estr;
openfl.display.BlendMode.ALPHA.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DARKEN = ["DARKEN",2];
openfl.display.BlendMode.DARKEN.toString = $estr;
openfl.display.BlendMode.DARKEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl.display.BlendMode.DIFFERENCE.toString = $estr;
openfl.display.BlendMode.DIFFERENCE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ERASE = ["ERASE",4];
openfl.display.BlendMode.ERASE.toString = $estr;
openfl.display.BlendMode.ERASE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl.display.BlendMode.HARDLIGHT.toString = $estr;
openfl.display.BlendMode.HARDLIGHT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.INVERT = ["INVERT",6];
openfl.display.BlendMode.INVERT.toString = $estr;
openfl.display.BlendMode.INVERT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LAYER = ["LAYER",7];
openfl.display.BlendMode.LAYER.toString = $estr;
openfl.display.BlendMode.LAYER.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl.display.BlendMode.LIGHTEN.toString = $estr;
openfl.display.BlendMode.LIGHTEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl.display.BlendMode.MULTIPLY.toString = $estr;
openfl.display.BlendMode.MULTIPLY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.NORMAL = ["NORMAL",10];
openfl.display.BlendMode.NORMAL.toString = $estr;
openfl.display.BlendMode.NORMAL.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.OVERLAY = ["OVERLAY",11];
openfl.display.BlendMode.OVERLAY.toString = $estr;
openfl.display.BlendMode.OVERLAY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SCREEN = ["SCREEN",12];
openfl.display.BlendMode.SCREEN.toString = $estr;
openfl.display.BlendMode.SCREEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl.display.BlendMode.SUBTRACT.toString = $estr;
openfl.display.BlendMode.SUBTRACT.__enum__ = openfl.display.BlendMode;
openfl.display.DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl.display.DirectRenderer;
openfl.display.DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl.display.DirectRenderer.__super__ = openfl.display.DisplayObject;
openfl.display.DirectRenderer.prototype = $extend(openfl.display.DisplayObject.prototype,{
	get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl.display.DirectRenderer
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
openfl.display.FrameLabel = function(name,frame) {
	openfl.events.EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl.display.FrameLabel;
openfl.display.FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl.display.FrameLabel.__super__ = openfl.events.EventDispatcher;
openfl.display.FrameLabel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl.display.FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
openfl.display.GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : ["openfl","display","GradientType"], __constructs__ : ["RADIAL","LINEAR"] };
openfl.display.GradientType.RADIAL = ["RADIAL",0];
openfl.display.GradientType.RADIAL.toString = $estr;
openfl.display.GradientType.RADIAL.__enum__ = openfl.display.GradientType;
openfl.display.GradientType.LINEAR = ["LINEAR",1];
openfl.display.GradientType.LINEAR.toString = $estr;
openfl.display.GradientType.LINEAR.__enum__ = openfl.display.GradientType;
openfl.display.Graphics = function() {
	this.__visible = true;
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = [];
	this.__commands = new Array();
	this.__halfStrokeWidth = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl.display.Graphics;
openfl.display.Graphics.__name__ = ["openfl","display","Graphics"];
openfl.display.Graphics.prototype = {
	beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl.display.DrawCommand.BeginBitmapFill(bitmap,matrix != null?new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth));
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.push(openfl.display.DrawCommand.BeginFill(color & 16777215,alpha));
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.push(openfl.display.DrawCommand.BeginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio));
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands = new Array();
		this.__halfStrokeWidth = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds.clone();
		this.__commands = sourceGraphics.__commands.slice();
		this.set___dirty(true);
		this.__halfStrokeWidth = sourceGraphics.__halfStrokeWidth;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__inflateBounds(controlX1,controlY1);
		this.__inflateBounds(controlX2,controlY2);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.CubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY));
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__inflateBounds(controlX,controlY);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.CurveTo(controlX,controlY,anchorX,anchorY));
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__halfStrokeWidth,y - radius - this.__halfStrokeWidth);
		this.__inflateBounds(x + radius + this.__halfStrokeWidth,y + radius + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawCircle(x,y,radius));
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawEllipse(x,y,width,height));
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		openfl.Lib.notImplemented("Graphics.drawGraphicsData");
	}
	,drawPath: function(commands,data,winding) {
		var dataIndex = 0;
		var _g = 0;
		while(_g < commands.length) {
			var command = commands.data[_g];
			++_g;
			switch(command) {
			case 1:
				this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
				dataIndex += 4;
				break;
			case 6:
				this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
				dataIndex += 6;
				break;
			default:
			}
		}
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRect(x,y,width,height));
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRoundRect(x,y,width,height,rx,ry));
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl.Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		this.__inflateBounds(0,0);
		this.__inflateBounds(openfl.Lib.current.stage.stageWidth,openfl.Lib.current.stage.stageHeight);
		this.__commands.push(openfl.display.DrawCommand.DrawTiles(sheet,tileData,smooth,flags,count));
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		if(blendMode == null) blendMode = 0;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = openfl.display.TriangleCulling.NONE;
		if(indices == null) {
			if(vlen % 3 != 0) throw new openfl.errors.ArgumentError("Not enough vertices to close a triangle.");
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = Math.NEGATIVE_INFINITY;
		var tmpy = Math.NEGATIVE_INFINITY;
		var maxX = Math.NEGATIVE_INFINITY;
		var maxY = Math.NEGATIVE_INFINITY;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.push(openfl.display.DrawCommand.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode));
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.push(openfl.display.DrawCommand.EndFill);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		openfl.Lib.notImplemented("Graphics.lineBitmapStyle");
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		openfl.Lib.notImplemented("Graphics.lineGradientStyle");
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness > this.__halfStrokeWidth) this.__halfStrokeWidth = thickness; else this.__halfStrokeWidth = this.__halfStrokeWidth;
		this.__commands.push(openfl.display.DrawCommand.LineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit));
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.LineTo(x,y));
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.push(openfl.display.DrawCommand.MoveTo(x,y));
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = this.__bounds.transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var bounds = this.__bounds.transform(matrix);
		return x > bounds.x && y > bounds.y && x <= bounds.get_right() && y <= bounds.get_bottom();
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl.geom.Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl.display.Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
openfl.display.DrawCommand = $hxClasses["openfl.display.DrawCommand"] = { __ename__ : ["openfl","display","DrawCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CubicCurveTo","CurveTo","DrawCircle","DrawEllipse","DrawRect","DrawRoundRect","DrawTiles","DrawTriangles","EndFill","LineStyle","LineTo","MoveTo","DrawPathC","OverrideMatrix"] };
openfl.display.DrawCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.BeginGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CubicCurveTo = function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) { var $x = ["CubicCurveTo",3,controlX1,controlY1,controlX2,controlY2,anchorX,anchorY]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",4,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawCircle = function(x,y,radius) { var $x = ["DrawCircle",5,x,y,radius]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawEllipse = function(x,y,width,height) { var $x = ["DrawEllipse",6,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRect = function(x,y,width,height) { var $x = ["DrawRect",7,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRoundRect = function(x,y,width,height,rx,ry) { var $x = ["DrawRoundRect",8,x,y,width,height,rx,ry]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",9,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",10,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.EndFill = ["EndFill",11];
openfl.display.DrawCommand.EndFill.toString = $estr;
openfl.display.DrawCommand.EndFill.__enum__ = openfl.display.DrawCommand;
openfl.display.DrawCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",12,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.LineTo = function(x,y) { var $x = ["LineTo",13,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.MoveTo = function(x,y) { var $x = ["MoveTo",14,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawPathC = function(commands,data,winding) { var $x = ["DrawPathC",15,commands,data,winding]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",16,matrix]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl.display.GraphicsPathCommand;
openfl.display.GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
openfl.display.GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : ["openfl","display","GraphicsPathWinding"], __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl.display.GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl.display.GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl.display.GraphicsPathWinding.EVEN_ODD.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl.display.GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl.display.GraphicsPathWinding.NON_ZERO.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl.display.IGraphicsData;
openfl.display.IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl.display.IGraphicsData.prototype = {
	__class__: openfl.display.IGraphicsData
};
openfl.display.GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl.display.GraphicsDataType.STROKE = ["STROKE",0];
openfl.display.GraphicsDataType.STROKE.toString = $estr;
openfl.display.GraphicsDataType.STROKE.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.SOLID = ["SOLID",1];
openfl.display.GraphicsDataType.SOLID.toString = $estr;
openfl.display.GraphicsDataType.SOLID.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl.display.GraphicsDataType.GRADIENT.toString = $estr;
openfl.display.GraphicsDataType.GRADIENT.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.PATH = ["PATH",3];
openfl.display.GraphicsDataType.PATH.toString = $estr;
openfl.display.GraphicsDataType.PATH.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.BITMAP = ["BITMAP",4];
openfl.display.GraphicsDataType.BITMAP.toString = $estr;
openfl.display.GraphicsDataType.BITMAP.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.END = ["END",5];
openfl.display.GraphicsDataType.END.toString = $estr;
openfl.display.GraphicsDataType.END.__enum__ = openfl.display.GraphicsDataType;
openfl.display.JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl.display.JPEGEncoderOptions;
openfl.display.JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl.display.JPEGEncoderOptions.prototype = {
	__class__: openfl.display.JPEGEncoderOptions
};
openfl.display.Loader = function() {
	openfl.display.Sprite.call(this);
	this.contentLoaderInfo = openfl.display.LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl.display.Loader;
openfl.display.Loader.__name__ = ["openfl","display","Loader"];
openfl.display.Loader.__super__ = openfl.display.Sprite;
openfl.display.Loader.prototype = $extend(openfl.display.Sprite.prototype,{
	close: function() {
		openfl.Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		openfl.display.BitmapData.fromFile(request.url,$bind(this,this.BitmapData_onLoad),$bind(this,this.BitmapData_onError));
	}
	,loadBytes: function(buffer) {
		openfl.display.BitmapData.fromBytes(buffer,null,$bind(this,this.BitmapData_onLoad));
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl.events.Event(openfl.events.Event.UNLOAD);
			event.currentTarget = this;
			this.dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl.Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl.display.Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl.events.Event(openfl.events.Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function() {
		var event = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl.display.Loader
});
openfl.display.OpenGLView = function() {
	openfl.display.DirectRenderer.call(this,"OpenGLView");
	if(!this.__added) {
		this.__added = true;
		haxe.Log.trace("Warning: OpenGLView is not available in HTML5 canvas rendering mode",{ fileName : "OpenGLView.hx", lineNumber : 66, className : "openfl.display.OpenGLView", methodName : "new"});
		haxe.Log.trace("Please compile your project using -Ddom or -Dwebgl (beta) to enable",{ fileName : "OpenGLView.hx", lineNumber : 67, className : "openfl.display.OpenGLView", methodName : "new"});
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl.display.OpenGLView;
openfl.display.OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl.display.OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl.display.OpenGLView.isSupported = null;
openfl.display.OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) return false;
	if(lime.graphics.opengl.GL.context != null) return true; else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) context = canvas.getContext("experimental-webgl");
		return context != null;
	}
	return true;
};
openfl.display.OpenGLView.__super__ = openfl.display.DirectRenderer;
openfl.display.OpenGLView.prototype = $extend(openfl.display.DirectRenderer.prototype,{
	__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl._internal.renderer.dom.DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
		}
	}
	,__class__: openfl.display.OpenGLView
});
openfl.display.PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl.display.PNGEncoderOptions;
openfl.display.PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl.display.PNGEncoderOptions.prototype = {
	__class__: openfl.display.PNGEncoderOptions
};
openfl.display.PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : ["openfl","display","PixelSnapping"], __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl.display.PixelSnapping.NEVER = ["NEVER",0];
openfl.display.PixelSnapping.NEVER.toString = $estr;
openfl.display.PixelSnapping.NEVER.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.AUTO = ["AUTO",1];
openfl.display.PixelSnapping.AUTO.toString = $estr;
openfl.display.PixelSnapping.AUTO.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl.display.PixelSnapping.ALWAYS.toString = $estr;
openfl.display.PixelSnapping.ALWAYS.__enum__ = openfl.display.PixelSnapping;
openfl.display.Preloader = function(display) {
	lime.app.Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl.Lib.current.addChild(display);
		if(js.Boot.__instanceof(display,NMEPreloader)) (js.Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl.display.Preloader;
openfl.display.Preloader.__name__ = ["openfl","display","Preloader"];
openfl.display.Preloader.__super__ = lime.app.Preloader;
openfl.display.Preloader.prototype = $extend(lime.app.Preloader.prototype,{
	load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe.io.Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl.media.Sound();
			sound1.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl.net.URLRequest(soundName + ".ogg"));
		}
		lime.app.Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js.Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.display_onComplete));
			(js.Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime.app.Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js.Boot.__instanceof(this.display,NMEPreloader)) (js.Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl.events.Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl.Lib.current.removeChild(this.display);
		openfl.Lib.current.stage.set_focus(null);
		this.display = null;
		lime.app.Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl.display.Preloader
});
openfl.display.SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl.display.DisplayObjectContainer.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.mouseChildren = false;
	this.set_upState(upState != null?upState:this.__generateDefaultState());
	this.set_overState(overState != null?overState:this.__generateDefaultState());
	this.set_downState(downState != null?downState:this.__generateDefaultState());
	this.set_hitTestState(hitTestState != null?hitTestState:this.__generateDefaultState());
	this.set___currentState(this.upState);
};
$hxClasses["openfl.display.SimpleButton"] = openfl.display.SimpleButton;
openfl.display.SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl.display.SimpleButton.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.SimpleButton.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	switchState: function(state) {
		if(this.__currentState != null && this.__currentState.parent == this) this.removeChild(this.__currentState);
		if(state != null) this.addChild(state);
	}
	,__generateDefaultState: function() {
		return new openfl.display.DisplayObject();
	}
	,__getCursor: function() {
		if(this.useHandCursor) return lime.ui.MouseCursor.POINTER; else return null;
	}
	,set_downState: function(downState) {
		if(this.downState != null && this.__currentState == this.downState) this.set___currentState(downState);
		return this.downState = downState;
	}
	,set_hitTestState: function(hitTestState) {
		if(hitTestState != this.hitTestState) {
			if(this.hitTestState != null && this.hitTestState.parent == this) this.removeChild(this.hitTestState);
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__this_onMouseDown));
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.__this_onMouseOut));
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.__this_onMouseOver));
			this.removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__this_onMouseUp));
			if(hitTestState != null) {
				this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this.__this_onMouseDown));
				this.addEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.__this_onMouseOut));
				this.addEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.__this_onMouseOver));
				this.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this.__this_onMouseUp));
				hitTestState.set_alpha(0.0);
				this.addChild(hitTestState);
			}
		}
		return this.hitTestState = hitTestState;
	}
	,set_overState: function(overState) {
		if(this.overState != null && this.__currentState == this.overState) this.set___currentState(overState);
		return this.overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) this.__soundTransform = new openfl.media.SoundTransform();
		return new openfl.media.SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl.media.SoundTransform(value.volume,value.pan);
		return value;
	}
	,set_upState: function(upState) {
		if(this.upState != null && this.__currentState == this.upState) this.set___currentState(upState);
		return this.upState = upState;
	}
	,set___currentState: function(state) {
		if(this.__currentState == state) return state;
		this.switchState(state);
		return this.__currentState = state;
	}
	,__this_onMouseDown: function(event) {
		this.set___currentState(this.downState);
	}
	,__this_onMouseOut: function(event) {
		if(this.upState != this.__currentState) this.set___currentState(this.upState);
	}
	,__this_onMouseOver: function(event) {
		if(this.overState != this.__currentState) this.set___currentState(this.overState);
	}
	,__this_onMouseUp: function(event) {
		this.set___currentState(this.overState);
	}
	,__class__: openfl.display.SimpleButton
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",set_hitTestState:"set_hitTestState",set_downState:"set_downState"})
});
openfl.display.Stage = function(width,height,color) {
	openfl.display.DisplayObjectContainer.call(this);
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__displayState = openfl.display.StageDisplayState.NORMAL;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = width;
	this.stageHeight = height;
	this.stage = this;
	this.align = openfl.display.StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.frameRate = 60;
	this.quality = openfl.display.StageQuality.HIGH;
	this.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl.display.Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
};
$hxClasses["openfl.display.Stage"] = openfl.display.Stage;
openfl.display.Stage.__name__ = ["openfl","display","Stage"];
openfl.display.Stage.__interfaces__ = [lime.app.IModule];
openfl.display.Stage.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Stage.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	globalToLocal: function(pos) {
		return pos;
	}
	,init: function(context) {
		switch(context[1]) {
		case 0:
			var gl = context[2];
			this.__renderer = new openfl._internal.renderer.opengl.GLRenderer(this.stageWidth,this.stageHeight,gl);
			break;
		case 1:
			var context1 = context[2];
			this.__renderer = new openfl._internal.renderer.canvas.CanvasRenderer(this.stageWidth,this.stageHeight,context1);
			break;
		case 2:
			var element = context[2];
			this.__renderer = new openfl._internal.renderer.dom.DOMRenderer(this.stageWidth,this.stageHeight,element);
			break;
		case 4:
			var cairo = context[2];
			this.__renderer = new openfl._internal.renderer.cairo.CairoRenderer(this.stageWidth,this.stageHeight,cairo);
			break;
		default:
		}
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
		this.__onKey(openfl.events.KeyboardEvent.KEY_DOWN,keyCode,modifier);
	}
	,onKeyUp: function(keyCode,modifier) {
		this.__onKey(openfl.events.KeyboardEvent.KEY_UP,keyCode,modifier);
	}
	,onMouseDown: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl.events.MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl.events.MouseEvent.MOUSE_DOWN;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseMove: function(x,y) {
		this.__onMouse(openfl.events.MouseEvent.MOUSE_MOVE,x,y,0);
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl.events.MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl.events.MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl.events.MouseEvent.MOUSE_UP;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseWheel: function(deltaX,deltaY) {
		this.__onMouseWheel(deltaX,deltaY);
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchMove: function(x,y,id) {
		this.__onTouch("touchMove",x,y,id);
	}
	,onTouchEnd: function(x,y,id) {
		this.__onTouch("touchEnd",x,y,id);
	}
	,onTouchStart: function(x,y,id) {
		this.__onTouch("touchBegin",x,y,id);
	}
	,onWindowActivate: function() {
		var event = new openfl.events.Event(openfl.events.Event.ACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
		var event = new openfl.events.Event(openfl.events.Event.DEACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowEnter: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.MOUSE_LEAVE));
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
		this.stageWidth = width;
		this.stageHeight = height;
		if(this.__renderer != null) this.__renderer.resize(width,height);
		var event = new openfl.events.Event(openfl.events.Event.RESIZE);
		this.__broadcast(event,false);
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl.events.Event(openfl.events.Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl.events.Event(openfl.events.Event.RENDER),true);
		}
		this.__renderable = true;
		this.__update(false,true);
		if(this.__renderer != null) {
			switch(context[1]) {
			case 4:
				var cairo = context[2];
				(js.Boot.__cast(this.__renderer , openfl._internal.renderer.cairo.CairoRenderer)).cairo = cairo;
				this.__renderer.renderSession.cairo = cairo;
				break;
			default:
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl.events.EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl.events.EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = openfl.events.EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = openfl.events.EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl.events.MouseEvent.__altKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey(modifier);
		openfl.events.MouseEvent.__commandKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey(modifier);
		openfl.events.MouseEvent.__ctrlKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey(modifier);
		openfl.events.MouseEvent.__shiftKey = lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey(modifier);
		var stack = new Array();
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyCode1 = openfl.ui.Keyboard.convertKeyCode(keyCode);
			var charCode = openfl.ui.Keyboard.__getCharCode(keyCode1,lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey(modifier));
			var event = new openfl.events.KeyboardEvent(type,true,false,charCode,keyCode1,null,lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey(modifier),lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl.geom.Point(x,y);
		if(this.__hitTest(x,y,false,stack,true)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(type == openfl.events.MouseEvent.MOUSE_DOWN) this.set_focus(target);
		this.__fireEvent(openfl.events.MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case openfl.events.MouseEvent.MOUSE_UP:
			clickType = openfl.events.MouseEvent.CLICK;
			break;
		case openfl.events.MouseEvent.MIDDLE_MOUSE_UP:
			clickType = openfl.events.MouseEvent.MIDDLE_CLICK;
			break;
		case openfl.events.MouseEvent.RIGHT_MOUSE_UP:
			clickType = openfl.events.MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.__fireEvent(openfl.events.MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl.events.MouseEvent.MOUSE_UP && (js.Boot.__cast(target , openfl.display.InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl.Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl.events.MouseEvent.__create(openfl.events.MouseEvent.DOUBLE_CLICK,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime.ui.Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				var localPoint = target2.globalToLocal(targetPoint);
				target2.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target2));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target3,0) == -1) {
				if(target3.hasEventListener(openfl.events.MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target3.globalToLocal(targetPoint);
					target3.dispatchEvent(new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target3));
				}
				if(target3.hasEventListener(openfl.events.MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target3);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl.geom.Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl.events.MouseEvent.__create(openfl.events.MouseEvent.MOUSE_WHEEL,0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,x,y,id) {
		var point = new openfl.geom.Point(x,y);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		var mouseType;
		switch(type) {
		case "touchBegin":
			mouseType = openfl.events.MouseEvent.MOUSE_DOWN;
			break;
		case "touchMove":
			mouseType = openfl.events.MouseEvent.MOUSE_MOVE;
			break;
		case "touchEnd":
			mouseType = openfl.events.MouseEvent.MOUSE_UP;
			break;
		default:
			mouseType = null;
		}
		if(this.__hitTest(x,y,false,__stack,true)) {
			var target = __stack[__stack.length - 1];
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl.events.TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = id;
			touchEvent.isPrimaryTouchPoint = true;
			var mouseEvent = openfl.events.MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,localPoint,target);
			mouseEvent.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent,__stack);
			this.__fireEvent(mouseEvent,__stack);
		} else {
			var touchEvent1 = openfl.events.TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = id;
			touchEvent1.isPrimaryTouchPoint = true;
			var mouseEvent1 = openfl.events.MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,point,this);
			mouseEvent1.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent1,[this.stage]);
			this.__fireEvent(mouseEvent1,[this.stage]);
		}
		if(type == "touchMove" && this.__dragObject != null) this.__drag(point);
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl.geom.Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl.display.DisplayObject.__worldTransformDirty > 0) {
				openfl.display.DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl.display.DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl.display.DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl.display.DisplayObject.__worldRenderDirty > 0) {
			openfl.display.DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl.display.DisplayObject.__worldTransformDirty = 0;
				openfl.display.DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			if(this.__focus != null) {
				var event = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_OUT,true,false,value,false,0);
				this.__stack = [];
				this.__focus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(value != null) {
				var event1 = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_IN,true,false,this.__focus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
			this.__focus = value;
		}
		return this.__focus;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		switch(value[1]) {
		case 0:
			openfl.Lib.application.windows[0].set_fullscreen(false);
			break;
		default:
			openfl.Lib.application.windows[0].set_fullscreen(true);
		}
		return this.__displayState = value;
	}
	,__class__: openfl.display.Stage
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
openfl.display.Stage3D = function() {
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl.display.Stage3D;
openfl.display.Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl.display.Stage3D.__super__ = openfl.events.EventDispatcher;
openfl.display.Stage3D.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		if(openfl.display.OpenGLView.get_isSupported()) {
			this.context3D = new openfl.display3D.Context3D();
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CONTEXT3D_CREATE));
		} else this.dispatchEvent(new openfl.events.ErrorEvent(openfl.events.ErrorEvent.ERROR));
	}
	,__class__: openfl.display.Stage3D
});
openfl.display.StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : ["openfl","display","StageAlign"], __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl.display.StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl.display.StageAlign.TOP_RIGHT.toString = $estr;
openfl.display.StageAlign.TOP_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl.display.StageAlign.TOP_LEFT.toString = $estr;
openfl.display.StageAlign.TOP_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP = ["TOP",2];
openfl.display.StageAlign.TOP.toString = $estr;
openfl.display.StageAlign.TOP.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.RIGHT = ["RIGHT",3];
openfl.display.StageAlign.RIGHT.toString = $estr;
openfl.display.StageAlign.RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.LEFT = ["LEFT",4];
openfl.display.StageAlign.LEFT.toString = $estr;
openfl.display.StageAlign.LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl.display.StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl.display.StageAlign.BOTTOM_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl.display.StageAlign.BOTTOM_LEFT.toString = $estr;
openfl.display.StageAlign.BOTTOM_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM = ["BOTTOM",7];
openfl.display.StageAlign.BOTTOM.toString = $estr;
openfl.display.StageAlign.BOTTOM.__enum__ = openfl.display.StageAlign;
openfl.display.StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : ["openfl","display","StageDisplayState"], __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl.display.StageDisplayState.NORMAL = ["NORMAL",0];
openfl.display.StageDisplayState.NORMAL.toString = $estr;
openfl.display.StageDisplayState.NORMAL.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl.display.StageDisplayState.FULL_SCREEN.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : ["openfl","display","StageQuality"], __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl.display.StageQuality.BEST = ["BEST",0];
openfl.display.StageQuality.BEST.toString = $estr;
openfl.display.StageQuality.BEST.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.HIGH = ["HIGH",1];
openfl.display.StageQuality.HIGH.toString = $estr;
openfl.display.StageQuality.HIGH.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.MEDIUM = ["MEDIUM",2];
openfl.display.StageQuality.MEDIUM.toString = $estr;
openfl.display.StageQuality.MEDIUM.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.LOW = ["LOW",3];
openfl.display.StageQuality.LOW.toString = $estr;
openfl.display.StageQuality.LOW.__enum__ = openfl.display.StageQuality;
openfl.display.StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : ["openfl","display","StageScaleMode"], __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl.display.StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl.display.StageScaleMode.SHOW_ALL.toString = $estr;
openfl.display.StageScaleMode.SHOW_ALL.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl.display.StageScaleMode.NO_SCALE.toString = $estr;
openfl.display.StageScaleMode.NO_SCALE.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl.display.StageScaleMode.NO_BORDER.toString = $estr;
openfl.display.StageScaleMode.NO_BORDER.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl.display.StageScaleMode.EXACT_FIT.toString = $estr;
openfl.display.StageScaleMode.EXACT_FIT.__enum__ = openfl.display.StageScaleMode;
openfl.display.Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = new Array();
	this.__tileRects = new Array();
	this.__tileUVs = new Array();
	this.__rectTile = new openfl.geom.Rectangle();
	this.__rectUV = new openfl.geom.Rectangle();
	this.__point = new openfl.geom.Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl.display.Tilesheet;
openfl.display.Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl.display.Tilesheet.prototype = {
	addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl.display.Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl.geom.Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl.display.Tilesheet
};
openfl.display.TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : ["openfl","display","TriangleCulling"], __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl.display.TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl.display.TriangleCulling.NEGATIVE.toString = $estr;
openfl.display.TriangleCulling.NEGATIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.NONE = ["NONE",1];
openfl.display.TriangleCulling.NONE.toString = $estr;
openfl.display.TriangleCulling.NONE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl.display.TriangleCulling.POSITIVE.toString = $estr;
openfl.display.TriangleCulling.POSITIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display3D = {};
openfl.display3D.Context3D = function() {
	this.disposed = false;
	this._yFlip = 1;
	this.vertexBuffersCreated = new Array();
	this.indexBuffersCreated = new Array();
	this.programsCreated = new Array();
	this.texturesCreated = new Array();
	this.samplerParameters = new Array();
	var _g1 = 0;
	var _g = openfl.display3D.Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl.display3D._Context3D.SamplerState();
		this.samplerParameters[i].wrap = openfl.display3D.Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl.display3D.Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl.display3D.Context3DMipFilter.MIPNONE;
	}
	var stage = openfl.Lib.current.stage;
	this.ogl = new openfl.display.OpenGLView();
	this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl.display3D.Context3D;
openfl.display3D.Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl.display3D.Context3D.prototype = {
	clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime.graphics.opengl.GL.context.clearColor(red,green,blue,alpha);
		lime.graphics.opengl.GL.context.clearDepth(depth);
		lime.graphics.opengl.GL.context.clearStencil(stencil);
		lime.graphics.opengl.GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime.graphics.opengl.GL.context.enable(2929);
			lime.graphics.opengl.GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime.graphics.opengl.GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.CubeTexture(lime.graphics.opengl.GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices) {
		var indexBuffer = new openfl.display3D.IndexBuffer3D(lime.graphics.opengl.GL.context.createBuffer(),numIndices);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl.display3D.Program3D(lime.graphics.opengl.GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl.display3D.textures.RectangleTexture(lime.graphics.opengl.GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.Texture(lime.graphics.opengl.GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		var vertexBuffer = new openfl.display3D.VertexBuffer3D(lime.graphics.opengl.GL.context.createBuffer(),numVertices,data32PerVertex);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime.graphics.opengl.GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime.graphics.opengl.GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime.graphics.opengl.GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new openfl.errors.Error("Need to clear before drawing if the buffer has not been cleared since the last present() call.");
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime.graphics.opengl.GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime.graphics.opengl.GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime.graphics.opengl.GL.context.useProgram(null);
		lime.graphics.opengl.GL.context.bindBuffer(34962,null);
		lime.graphics.opengl.GL.context.disable(2884);
		if(this.framebuffer != null) lime.graphics.opengl.GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime.graphics.opengl.GL.context.bindRenderbuffer(36161,null);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime.graphics.opengl.GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime.graphics.opengl.GL.context.disable(2884); else {
			lime.graphics.opengl.GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime.graphics.opengl.GL.context.cullFace(1029);
				break;
			case 1028:
				lime.graphics.opengl.GL.context.cullFace(1028);
				break;
			case 1032:
				lime.graphics.opengl.GL.context.cullFace(1032);
				break;
			default:
				throw "Unknown Context3DTriangleFace type.";
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw "Unknown culling mode " + triangleFaceToCull + ".";
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime.graphics.opengl.GL.context.depthFunc(passCompareMode);
		lime.graphics.opengl.GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.uniformMatrix4fv(location,!transposedMatrix,new Float32Array((function($this) {
			var $r;
			var this1 = matrix.rawData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this))));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime.graphics.opengl.GL.context.activeTexture(33984);
			break;
		case 1:
			lime.graphics.opengl.GL.context.activeTexture(33985);
			break;
		case 2:
			lime.graphics.opengl.GL.context.activeTexture(33986);
			break;
		case 3:
			lime.graphics.opengl.GL.context.activeTexture(33987);
			break;
		case 4:
			lime.graphics.opengl.GL.context.activeTexture(33988);
			break;
		case 5:
			lime.graphics.opengl.GL.context.activeTexture(33989);
			break;
		case 6:
			lime.graphics.opengl.GL.context.activeTexture(33990);
			break;
		case 7:
			lime.graphics.opengl.GL.context.activeTexture(33991);
			break;
		default:
			throw "Does not support texture8 or more";
		}
		if(texture == null) {
			lime.graphics.opengl.GL.context.bindTexture(3553,null);
			lime.graphics.opengl.GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			lime.graphics.opengl.GL.context.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.Texture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.RectangleTexture)) {
			lime.graphics.opengl.GL.context.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.RectangleTexture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			lime.graphics.opengl.GL.context.bindTexture(34067,(js.Boot.__cast(texture , openfl.display3D.textures.CubeTexture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl.display3D.Context3DWrapMode.CLAMP,openfl.display3D.Context3DTextureFilter.NEAREST,openfl.display3D.Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime.graphics.opengl.GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime.graphics.opengl.GL.context.disableVertexAttribArray(location);
			return;
		}
		lime.graphics.opengl.GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl.display3D.Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw "Buffer format " + Std.string(format) + " is not supported";
		lime.graphics.opengl.GL.context.enableVertexAttribArray(location);
		lime.graphics.opengl.GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime.graphics.opengl.GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime.graphics.opengl.GL.context.disable(2929);
		lime.graphics.opengl.GL.context.disable(2960);
		lime.graphics.opengl.GL.context.disable(3089);
		if(this.framebuffer != null) lime.graphics.opengl.GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime.graphics.opengl.GL.context.bindRenderbuffer(36161,null);
		lime.graphics.opengl.GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime.graphics.opengl.GL.context.createFramebuffer();
		lime.graphics.opengl.GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime.graphics.opengl.GL.context.createRenderbuffer();
		lime.graphics.opengl.GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime.graphics.opengl.GL.context.renderbufferStorage(36161,6408,texture.width,texture.height);
		lime.graphics.opengl.GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime.graphics.opengl.GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime.graphics.opengl.GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime.graphics.opengl.GL.context.enable(2929);
			lime.graphics.opengl.GL.context.enable(2960);
		}
		lime.graphics.opengl.GL.context.bindTexture(3553,texture.glTexture);
		lime.graphics.opengl.GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
		lime.graphics.opengl.GL.context.texParameteri(3553,10241,9985);
		lime.graphics.opengl.GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl.display3D.Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw "Sampler is out of bounds.";
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime.graphics.opengl.GL.context.disable(3089);
			return;
		}
		lime.graphics.opengl.GL.context.enable(3089);
		lime.graphics.opengl.GL.context.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime.graphics.opengl.GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime.graphics.opengl.GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime.graphics.opengl.GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime.graphics.opengl.GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl.display3D.Context3D.anisotropySupportTested) {
			var ext = lime.graphics.opengl.GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime.graphics.opengl.GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime.graphics.opengl.GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl.display3D.Context3D.supportsAnisotropy = ext != null;
			openfl.display3D.Context3D.anisotropySupportTested = true;
			lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
				var $r;
				var $int = openfl.display3D.Context3D.maxSupportedAnisotropy;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)));
			openfl.display3D.Context3D.maxSupportedAnisotropy = lime.graphics.opengl.GL.context.getTexParameter(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT);
		}
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			switch(wrap[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
				lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(3553,10242,10497);
				lime.graphics.opengl.GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg = 2 < 0;
						var bNeg = a < 0;
						$r = aNeg != bNeg?aNeg:2 > a;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int1 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a1 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg1 = 4 < 0;
						var bNeg1 = a1 < 0;
						$r = aNeg1 != bNeg1?aNeg1:4 > a1;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int2 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a2 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg2 = 8 < 0;
						var bNeg2 = a2 < 0;
						$r = aNeg2 != bNeg2?aNeg2:8 > a2;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int3 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a3 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg3 = 16 < 0;
						var bNeg3 = a3 < 0;
						$r = aNeg3 != bNeg3?aNeg3:16 > a3;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int4 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime.graphics.opengl.GL.context.generateMipmap(3553);
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime.graphics.opengl.GL.context.generateMipmap(3553);
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9729);
				break;
			}
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.RectangleTexture)) {
			lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
			lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a4 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg4 = 2 < 0;
						var bNeg4 = a4 < 0;
						$r = aNeg4 != bNeg4?aNeg4:2 > a4;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int5 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a5 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg5 = 4 < 0;
						var bNeg5 = a5 < 0;
						$r = aNeg5 != bNeg5?aNeg5:4 > a5;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int6 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a6 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg6 = 8 < 0;
						var bNeg6 = a6 < 0;
						$r = aNeg6 != bNeg6?aNeg6:8 > a6;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int7 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int7 < 0?4294967296.0 + int7:int7 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a7 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg7 = 16 < 0;
						var bNeg7 = a7 < 0;
						$r = aNeg7 != bNeg7?aNeg7:16 > a7;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int8 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int8 < 0?4294967296.0 + int8:int8 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			lime.graphics.opengl.GL.context.texParameteri(3553,10241,9729);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(34067,10242,33071);
				lime.graphics.opengl.GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(34067,10242,10497);
				lime.graphics.opengl.GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(34067,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(34067,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a8 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg8 = 2 < 0;
						var bNeg8 = a8 < 0;
						$r = aNeg8 != bNeg8?aNeg8:2 > a8;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int9 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int9 < 0?4294967296.0 + int9:int9 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a9 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg9 = 4 < 0;
						var bNeg9 = a9 < 0;
						$r = aNeg9 != bNeg9?aNeg9:4 > a9;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int10 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int10 < 0?4294967296.0 + int10:int10 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a10 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg10 = 8 < 0;
						var bNeg10 = a10 < 0;
						$r = aNeg10 != bNeg10?aNeg10:8 > a10;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int11 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int11 < 0?4294967296.0 + int11:int11 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a11 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg11 = 16 < 0;
						var bNeg11 = a11 < 0;
						$r = aNeg11 != bNeg11?aNeg11:16 > a11;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int12 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int12 < 0?4294967296.0 + int12:int12 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9729);
				break;
			}
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl.display3D.Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl.display3D.Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw "Program Type " + Std.string(programType) + " not supported";
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime.graphics.opengl.GL.context.enable(3042);
			lime.graphics.opengl.GL.context.blendEquation(32774);
			lime.graphics.opengl.GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime.graphics.opengl.GL.context.disable(3042);
	}
	,__class__: openfl.display3D.Context3D
};
openfl.display3D._Context3D = {};
openfl.display3D._Context3D.SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl.display3D._Context3D.SamplerState;
openfl.display3D._Context3D.SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl.display3D._Context3D.SamplerState.prototype = {
	__class__: openfl.display3D._Context3D.SamplerState
};
openfl.display3D._Context3DBlendFactor = {};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl.display3D.Context3DClearMask;
openfl.display3D.Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
openfl.display3D._Context3DCompareMode = {};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : ["openfl","display3D","Context3DMipFilter"], __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl.display3D.Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl.display3D.Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPLINEAR.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl.display3D.Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNEAREST.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl.display3D.Context3DMipFilter.MIPNONE.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNONE.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : ["openfl","display3D","Context3DProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl.display3D.Context3DProgramType.VERTEX = ["VERTEX",0];
openfl.display3D.Context3DProgramType.VERTEX.toString = $estr;
openfl.display3D.Context3DProgramType.VERTEX.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl.display3D.Context3DProgramType.FRAGMENT.toString = $estr;
openfl.display3D.Context3DProgramType.FRAGMENT.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DRenderMode = $hxClasses["openfl.display3D.Context3DRenderMode"] = { __ename__ : ["openfl","display3D","Context3DRenderMode"], __constructs__ : ["AUTO","SOFTWARE"] };
openfl.display3D.Context3DRenderMode.AUTO = ["AUTO",0];
openfl.display3D.Context3DRenderMode.AUTO.toString = $estr;
openfl.display3D.Context3DRenderMode.AUTO.__enum__ = openfl.display3D.Context3DRenderMode;
openfl.display3D.Context3DRenderMode.SOFTWARE = ["SOFTWARE",1];
openfl.display3D.Context3DRenderMode.SOFTWARE.toString = $estr;
openfl.display3D.Context3DRenderMode.SOFTWARE.__enum__ = openfl.display3D.Context3DRenderMode;
openfl.display3D.Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : ["openfl","display3D","Context3DTextureFilter"], __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl.display3D.Context3DTextureFilter.LINEAR.toString = $estr;
openfl.display3D.Context3DTextureFilter.LINEAR.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl.display3D.Context3DTextureFilter.NEAREST.toString = $estr;
openfl.display3D.Context3DTextureFilter.NEAREST.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : ["openfl","display3D","Context3DTextureFormat"], __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl.display3D.Context3DTextureFormat.BGRA = ["BGRA",0];
openfl.display3D.Context3DTextureFormat.BGRA.toString = $estr;
openfl.display3D.Context3DTextureFormat.BGRA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl.display3D.Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D._Context3DTriangleFace = {};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : ["openfl","display3D","Context3DVertexBufferFormat"], __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl.display3D.Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : ["openfl","display3D","Context3DWrapMode"], __constructs__ : ["CLAMP","REPEAT"] };
openfl.display3D.Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl.display3D.Context3DWrapMode.CLAMP.toString = $estr;
openfl.display3D.Context3DWrapMode.CLAMP.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl.display3D.Context3DWrapMode.REPEAT.toString = $estr;
openfl.display3D.Context3DWrapMode.REPEAT.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.IndexBuffer3D = function(glBuffer,numIndices) {
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl.display3D.IndexBuffer3D;
openfl.display3D.IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl.display3D.IndexBuffer3D.prototype = {
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime.graphics.opengl.GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		indices = new Int16Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			indices[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.bufferData(34963,indices,35044);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime.graphics.opengl.GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		indices = new Int16Array(count);
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime.graphics.opengl.GL.context.bufferData(34963,indices,35044);
	}
	,__class__: openfl.display3D.IndexBuffer3D
};
openfl.display3D.Program3D = function(program) {
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl.display3D.Program3D;
openfl.display3D.Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl.display3D.Program3D.prototype = {
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteProgram(this.glProgram);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime.graphics.opengl.GL.context.attachShader(this.glProgram,vertexShader);
		lime.graphics.opengl.GL.context.attachShader(this.glProgram,fragmentShader);
		lime.graphics.opengl.GL.context.linkProgram(this.glProgram);
		if(lime.graphics.opengl.GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime.graphics.opengl.GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw result;
		}
	}
	,__class__: openfl.display3D.Program3D
};
openfl.display3D.VertexBuffer3D = function(glBuffer,numVertices,data32PerVertex) {
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl.display3D.VertexBuffer3D;
openfl.display3D.VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl.display3D.VertexBuffer3D.prototype = {
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			float32Array[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.bufferData(34962,float32Array,35044);
	}
	,uploadFromFloat32Array: function(data,startVertex,numVertices) {
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		lime.graphics.opengl.GL.context.bufferData(34962,data,35044);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime.graphics.opengl.GL.context.bufferData(34962,float32Array,35044);
		float32Array = null;
	}
	,__class__: openfl.display3D.VertexBuffer3D
};
openfl.display3D._shaders = {};
openfl.display3D._shaders.AGLSLShaderUtils = function() { };
$hxClasses["openfl.display3D._shaders.AGLSLShaderUtils"] = openfl.display3D._shaders.AGLSLShaderUtils;
openfl.display3D._shaders.AGLSLShaderUtils.__name__ = ["openfl","display3D","_shaders","AGLSLShaderUtils"];
openfl.display3D._shaders.AGLSLShaderUtils.compile = function(programType,source) {
	var agalMiniAssembler = new openfl.utils.AGALMiniAssembler();
	var data = null;
	var concatSource;
	switch(programType) {
	case "vertex":
		concatSource = "part vertex 1 \n" + source + "endpart";
		agalMiniAssembler.assemble(concatSource);
		data = agalMiniAssembler.r.get("vertex").data;
		break;
	case "fragment":
		concatSource = "part fragment 1 \n" + source + "endpart";
		agalMiniAssembler.assemble(concatSource);
		data = agalMiniAssembler.r.get("fragment").data;
		break;
	default:
		throw "Unknown Context3DProgramType";
	}
	return data;
};
openfl.display3D._shaders.AGLSLShaderUtils.createShader = function(type,shaderSource) {
	var aglsl = new openfl._internal.aglsl.AGLSLCompiler();
	var glType;
	var shaderType;
	switch(type[1]) {
	case 0:
		glType = 35633;
		shaderType = "vertex";
		break;
	case 1:
		glType = 35632;
		shaderType = "fragment";
		break;
	}
	var shaderSourceString = aglsl.compile(shaderType,shaderSource);
	var shader = lime.graphics.opengl.GL.context.createShader(glType);
	lime.graphics.opengl.GL.context.shaderSource(shader,shaderSourceString);
	lime.graphics.opengl.GL.context.compileShader(shader);
	if(lime.graphics.opengl.GL.context.getShaderParameter(shader,35713) == 0) {
		haxe.Log.trace("--- ERR ---\n" + shaderSourceString,{ fileName : "AGLSLShaderUtils.hx", lineNumber : 85, className : "openfl.display3D._shaders.AGLSLShaderUtils", methodName : "createShader"});
		var err = lime.graphics.opengl.GL.context.getShaderInfoLog(shader);
		if(err != "") throw err;
	}
	return shader;
};
openfl.display3D.textures = {};
openfl.display3D.textures.TextureBase = function(glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl.events.EventDispatcher.call(this);
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl.display3D.textures.TextureBase.__super__ = openfl.events.EventDispatcher;
openfl.display3D.textures.TextureBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteTexture(this.glTexture);
	}
	,__class__: openfl.display3D.textures.TextureBase
});
openfl.display3D.textures.CubeTexture = function(glTexture,size) {
	openfl.display3D.textures.TextureBase.call(this,glTexture,size,size);
	this.size = size;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime.graphics.opengl.GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl.display3D.textures.CubeTexture;
openfl.display3D.textures.CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl.display3D.textures.CubeTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.CubeTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.__image.get_data();
		lime.graphics.opengl.GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime.graphics.opengl.GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime.graphics.opengl.GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime.graphics.opengl.GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime.graphics.opengl.GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime.graphics.opengl.GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime.graphics.opengl.GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw "unknown side type";
		}
		lime.graphics.opengl.GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl.display3D.textures.CubeTexture
});
openfl.display3D.textures.RectangleTexture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl.display3D.textures.RectangleTexture;
openfl.display3D.textures.RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl.display3D.textures.RectangleTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.RectangleTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime.utils.ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime.graphics.opengl.GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime.graphics.opengl.GL.context.pixelStorei(37440,1);
		lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
		lime.graphics.opengl.GL.context.texParameteri(3553,10241,9728);
		lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
		lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime.graphics.opengl.GL.context.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.RectangleTexture
});
openfl.display3D.textures.Texture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl.display3D.textures.Texture;
openfl.display3D.textures.Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl.display3D.textures.Texture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.Texture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var image = bitmapData.__image;
		if(!image.get_premultiplied()) {
			image = image.clone();
			image.set_premultiplied(true);
		}
		this.width = image.width;
		this.height = image.height;
		this.uploadFromUInt8Array(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		this.uploadFromUInt8Array(source,miplevel);
	}
	,uploadFromUInt8Array: function(data,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime.graphics.opengl.GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime.graphics.opengl.GL.context.pixelStorei(37440,1);
			lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
			lime.graphics.opengl.GL.context.texParameteri(3553,10241,9728);
			lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
			lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
		}
		lime.graphics.opengl.GL.context.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,data);
		lime.graphics.opengl.GL.context.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.Texture
});
openfl.errors.ArgumentError = function(message) {
	if(message == null) message = "";
	openfl.errors.Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl.errors.ArgumentError;
openfl.errors.ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl.errors.ArgumentError.__super__ = openfl.errors.Error;
openfl.errors.ArgumentError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.ArgumentError
});
openfl.errors.IOError = function(message) {
	if(message == null) message = "";
	openfl.errors.Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl.errors.IOError;
openfl.errors.IOError.__name__ = ["openfl","errors","IOError"];
openfl.errors.IOError.__super__ = openfl.errors.Error;
openfl.errors.IOError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.IOError
});
openfl.errors.RangeError = function(message) {
	if(message == null) message = "";
	openfl.errors.Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl.errors.RangeError;
openfl.errors.RangeError.__name__ = ["openfl","errors","RangeError"];
openfl.errors.RangeError.__super__ = openfl.errors.Error;
openfl.errors.RangeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.RangeError
});
openfl.errors.TypeError = function(message) {
	if(message == null) message = "";
	openfl.errors.Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl.errors.TypeError;
openfl.errors.TypeError.__name__ = ["openfl","errors","TypeError"];
openfl.errors.TypeError.__super__ = openfl.errors.Error;
openfl.errors.TypeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.TypeError
});
openfl.events.TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl.events.TextEvent;
openfl.events.TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl.events.TextEvent.__super__ = openfl.events.Event;
openfl.events.TextEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.TextEvent(this.type,this.bubbles,this.cancelable,this.text);
	}
	,toString: function() {
		return "[TextEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + "]";
	}
	,__class__: openfl.events.TextEvent
});
openfl.events.ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl.events.ErrorEvent;
openfl.events.ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl.events.ErrorEvent.__super__ = openfl.events.TextEvent;
openfl.events.ErrorEvent.prototype = $extend(openfl.events.TextEvent.prototype,{
	clone: function() {
		return new openfl.events.ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[ErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.ErrorEvent
});
openfl.events._EventDispatcher = {};
openfl.events._EventDispatcher.Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl.events._EventDispatcher.Listener;
openfl.events._EventDispatcher.Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl.events._EventDispatcher.Listener.prototype = {
	match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl.events._EventDispatcher.Listener
};
openfl.events.FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl.events.FocusEvent;
openfl.events.FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl.events.FocusEvent.__super__ = openfl.events.Event;
openfl.events.FocusEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		var event = new openfl.events.FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return "[FocusEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " relatedObject=" + Std.string(this.relatedObject) + " shiftKey=" + Std.string(this.shiftKey) + " keyCode=" + this.keyCode + "]";
	}
	,__class__: openfl.events.FocusEvent
});
openfl.events.HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl.events.HTTPStatusEvent;
openfl.events.HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl.events.HTTPStatusEvent.__super__ = openfl.events.Event;
openfl.events.HTTPStatusEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.HTTPStatusEvent
});
openfl.events.IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl.events.IOErrorEvent;
openfl.events.IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl.events.IOErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.IOErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[IOErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.IOErrorEvent
});
openfl.events.KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl.events.KeyboardEvent;
openfl.events.KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl.events.KeyboardEvent.__super__ = openfl.events.Event;
openfl.events.KeyboardEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
	}
	,toString: function() {
		return "[KeyboardEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " charCode=" + this.charCode + " keyCode=" + this.keyCode + " keyLocation=" + Std.string(this.keyLocation) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + "]";
	}
	,__class__: openfl.events.KeyboardEvent
});
openfl.events.MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl.events.MouseEvent;
openfl.events.MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl.events.MouseEvent.__altKey = null;
openfl.events.MouseEvent.__commandKey = null;
openfl.events.MouseEvent.__ctrlKey = null;
openfl.events.MouseEvent.__shiftKey = null;
openfl.events.MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case openfl.events.MouseEvent.MOUSE_DOWN:case openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN:case openfl.events.MouseEvent.RIGHT_MOUSE_DOWN:
		openfl.events.MouseEvent.__buttonDown[button] = true;
		break;
	case openfl.events.MouseEvent.MOUSE_UP:case openfl.events.MouseEvent.MIDDLE_MOUSE_UP:case openfl.events.MouseEvent.RIGHT_MOUSE_UP:
		openfl.events.MouseEvent.__buttonDown[button] = false;
		break;
	}
	var event = new openfl.events.MouseEvent(type,true,false,local.x,local.y,null,openfl.events.MouseEvent.__ctrlKey,openfl.events.MouseEvent.__altKey,openfl.events.MouseEvent.__shiftKey,openfl.events.MouseEvent.__buttonDown[button],delta,openfl.events.MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl.events.MouseEvent.__super__ = openfl.events.Event;
openfl.events.MouseEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
	}
	,toString: function() {
		return "[MouseEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " localX=" + this.localX + " localY=" + this.localY + " relatedObject=" + Std.string(this.relatedObject) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + " buttonDown=" + Std.string(this.buttonDown) + " delta=" + this.delta + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.MouseEvent
});
openfl.events.ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl.events.ProgressEvent;
openfl.events.ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl.events.ProgressEvent.__super__ = openfl.events.Event;
openfl.events.ProgressEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
	}
	,toString: function() {
		return "[ProgressEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " bytesLoaded=" + this.bytesLoaded + " bytesTotal=" + this.bytesTotal + "]";
	}
	,__class__: openfl.events.ProgressEvent
});
openfl.events.SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl.events.SecurityErrorEvent;
openfl.events.SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl.events.SecurityErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.SecurityErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[SecurityErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.SecurityErrorEvent
});
openfl.events.TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl.events.TimerEvent;
openfl.events.TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl.events.TimerEvent.__super__ = openfl.events.Event;
openfl.events.TimerEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.TimerEvent(this.type,this.bubbles,this.cancelable);
	}
	,toString: function() {
		return "[TimerEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.TimerEvent
});
openfl.events.TouchEvent = function(type,bubbles,cancelable,localX,localY,sizeX,sizeY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(sizeY == null) sizeY = 1;
	if(sizeX == null) sizeX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.pressure = 1;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl.events.TouchEvent;
openfl.events.TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl.events.TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl.events.TouchEvent(type,true,false,local.x,local.y,null,null,null,false,false,false,false,0,null,0);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl.events.TouchEvent.__super__ = openfl.events.Event;
openfl.events.TouchEvent.prototype = $extend(openfl.events.Event.prototype,{
	updateAfterEvent: function() {
	}
	,__class__: openfl.events.TouchEvent
});
openfl.filters = {};
openfl.filters.BitmapFilter = function() {
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl.filters.BitmapFilter;
openfl.filters.BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl.filters.BitmapFilter.prototype = {
	clone: function() {
		return new openfl.filters.BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__class__: openfl.filters.BitmapFilter
};
openfl.filters.BitmapFilterQuality = function() { };
$hxClasses["openfl.filters.BitmapFilterQuality"] = openfl.filters.BitmapFilterQuality;
openfl.filters.BitmapFilterQuality.__name__ = ["openfl","filters","BitmapFilterQuality"];
openfl.filters.BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) quality = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	openfl.filters.BitmapFilter.call(this);
	this.blurX = blurX;
	this.blurY = blurY;
	this.quality = quality;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl.filters.BlurFilter;
openfl.filters.BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl.filters.BlurFilter.__super__ = openfl.filters.BitmapFilter;
openfl.filters.BlurFilter.prototype = $extend(openfl.filters.BitmapFilter.prototype,{
	clone: function() {
		return new openfl.filters.BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__class__: openfl.filters.BlurFilter
});
openfl.filters.ColorMatrixFilter = function(matrix) {
	openfl.filters.BitmapFilter.call(this);
	if(matrix == null) matrix = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
	this.matrix = matrix;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl.filters.ColorMatrixFilter;
openfl.filters.ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl.filters.ColorMatrixFilter.__super__ = openfl.filters.BitmapFilter;
openfl.filters.ColorMatrixFilter.prototype = $extend(openfl.filters.BitmapFilter.prototype,{
	clone: function() {
		return new openfl.filters.ColorMatrixFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
		var source = sourceData.data;
		var target = targetData.data;
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceData.width * 4;
		var targetStride = targetData.width * 4;
		var sourceOffset;
		var targetOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				targetOffset = (row + offsetX) * targetStride + (column + offsetY) * 4;
				var srcR = source[sourceOffset];
				var srcG = source[sourceOffset + 1];
				var srcB = source[sourceOffset + 2];
				var srcA = source[sourceOffset + 3];
				target[targetOffset] = this.matrix[0] * srcR + this.matrix[1] * srcG + this.matrix[2] * srcB + this.matrix[3] * srcA + this.matrix[4] | 0;
				target[targetOffset + 1] = this.matrix[5] * srcR + this.matrix[6] * srcG + this.matrix[7] * srcB + this.matrix[8] * srcA + this.matrix[9] | 0;
				target[targetOffset + 2] = this.matrix[10] * srcR + this.matrix[11] * srcG + this.matrix[12] * srcB + this.matrix[13] * srcA + this.matrix[14] | 0;
				target[targetOffset + 3] = this.matrix[15] * srcR + this.matrix[16] * srcG + this.matrix[17] * srcB + this.matrix[18] * srcA + this.matrix[19] | 0;
			}
		}
	}
	,__class__: openfl.filters.ColorMatrixFilter
});
openfl.filters.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) hideObject = false;
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	if(angle == null) angle = 45;
	if(distance == null) distance = 4;
	openfl.filters.BitmapFilter.call(this);
	this.distance = distance;
	this.angle = angle;
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.quality = quality;
	this.inner = inner;
	this.knockout = knockout;
	this.hideObject = hideObject;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl.filters.DropShadowFilter;
openfl.filters.DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl.filters.DropShadowFilter.__super__ = openfl.filters.BitmapFilter;
openfl.filters.DropShadowFilter.prototype = $extend(openfl.filters.BitmapFilter.prototype,{
	clone: function() {
		return new openfl.filters.DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,__class__: openfl.filters.DropShadowFilter
});
openfl.filters.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 2;
	if(blurY == null) blurY = 6;
	if(blurX == null) blurX = 6;
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	openfl.filters.BitmapFilter.call(this);
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.quality = quality;
	this.inner = inner;
	this.knockout = knockout;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl.filters.GlowFilter;
openfl.filters.GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl.filters.GlowFilter.__super__ = openfl.filters.BitmapFilter;
openfl.filters.GlowFilter.prototype = $extend(openfl.filters.BitmapFilter.prototype,{
	clone: function() {
		return new openfl.filters.GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,__class__: openfl.filters.GlowFilter
});
openfl.geom.Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl.geom.Matrix3D;
openfl.geom.Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl.geom.Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl.geom.Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl.geom.Matrix3D.getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl.geom.Matrix3D();
	var a1 = new openfl.geom.Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl.geom.Matrix3D.prototype = {
	append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl.geom.Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = vector.length - index;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(c >= this1.length) this1.length = c + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[c] = vector.data[c + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = this.rawData.length;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var key = c + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[c];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + Std.string((function($this) {
				var $r;
				var $int = row;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) + " out of bounds [0, ..., 3]");
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + row + " out of bounds [0, ..., 3]");
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		var vec;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl.geom.Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		if(!mr.fixed) {
			if(12 >= mr.length) mr.length = 13;
			if(mr.data.length < mr.length) {
				var data;
				var this5;
				this5 = new Array(mr.data.length + 10);
				data = this5;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data,0,mr.data.length);
				mr.data = data;
			}
		}
		mr.data[12] = 0;
		if(!mr.fixed) {
			if(13 >= mr.length) mr.length = 14;
			if(mr.data.length < mr.length) {
				var data1;
				var this6;
				this6 = new Array(mr.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data1,0,mr.data.length);
				mr.data = data1;
			}
		}
		mr.data[13] = 0;
		if(!mr.fixed) {
			if(14 >= mr.length) mr.length = 15;
			if(mr.data.length < mr.length) {
				var data2;
				var this7;
				this7 = new Array(mr.data.length + 10);
				data2 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data2,0,mr.data.length);
				mr.data = data2;
			}
		}
		mr.data[14] = 0;
		var scale = new openfl.geom.Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		if(!mr.fixed) {
			if(0 >= mr.length) mr.length = 1;
			if(mr.data.length < mr.length) {
				var data3;
				var this8;
				this8 = new Array(mr.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data3,0,mr.data.length);
				mr.data = data3;
			}
		}
		mr.data[0] = mr.data[0] / scale.x;
		if(!mr.fixed) {
			if(1 >= mr.length) mr.length = 2;
			if(mr.data.length < mr.length) {
				var data4;
				var this9;
				this9 = new Array(mr.data.length + 10);
				data4 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data4,0,mr.data.length);
				mr.data = data4;
			}
		}
		mr.data[1] = mr.data[1] / scale.x;
		if(!mr.fixed) {
			if(2 >= mr.length) mr.length = 3;
			if(mr.data.length < mr.length) {
				var data5;
				var this10;
				this10 = new Array(mr.data.length + 10);
				data5 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data5,0,mr.data.length);
				mr.data = data5;
			}
		}
		mr.data[2] = mr.data[2] / scale.x;
		if(!mr.fixed) {
			if(4 >= mr.length) mr.length = 5;
			if(mr.data.length < mr.length) {
				var data6;
				var this11;
				this11 = new Array(mr.data.length + 10);
				data6 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data6,0,mr.data.length);
				mr.data = data6;
			}
		}
		mr.data[4] = mr.data[4] / scale.y;
		if(!mr.fixed) {
			if(5 >= mr.length) mr.length = 6;
			if(mr.data.length < mr.length) {
				var data7;
				var this12;
				this12 = new Array(mr.data.length + 10);
				data7 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data7,0,mr.data.length);
				mr.data = data7;
			}
		}
		mr.data[5] = mr.data[5] / scale.y;
		if(!mr.fixed) {
			if(6 >= mr.length) mr.length = 7;
			if(mr.data.length < mr.length) {
				var data8;
				var this13;
				this13 = new Array(mr.data.length + 10);
				data8 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data8,0,mr.data.length);
				mr.data = data8;
			}
		}
		mr.data[6] = mr.data[6] / scale.y;
		if(!mr.fixed) {
			if(8 >= mr.length) mr.length = 9;
			if(mr.data.length < mr.length) {
				var data9;
				var this14;
				this14 = new Array(mr.data.length + 10);
				data9 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data9,0,mr.data.length);
				mr.data = data9;
			}
		}
		mr.data[8] = mr.data[8] / scale.z;
		if(!mr.fixed) {
			if(9 >= mr.length) mr.length = 10;
			if(mr.data.length < mr.length) {
				var data10;
				var this15;
				this15 = new Array(mr.data.length + 10);
				data10 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data10,0,mr.data.length);
				mr.data = data10;
			}
		}
		mr.data[9] = mr.data[9] / scale.z;
		if(!mr.fixed) {
			if(10 >= mr.length) mr.length = 11;
			if(mr.data.length < mr.length) {
				var data11;
				var this16;
				this16 = new Array(mr.data.length + 10);
				data11 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data11,0,mr.data.length);
				mr.data = data11;
			}
		}
		mr.data[10] = mr.data[10] / scale.z;
		var rot = new openfl.geom.Vector3D();
		switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl.geom.Vector3D(0,0,-1);
		if(up == null) up = new openfl.geom.Vector3D(0,-1,0);
		var dir = new openfl.geom.Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl.geom.Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl.geom.Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl.geom.Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl.geom.Vector3D(-dir.y,dir.x,0); else vup = new openfl.geom.Vector3D(1,0,0);
		right = new openfl.geom.Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl.geom.Matrix3D();
		m.set_position(new openfl.geom.Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl.geom.Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe.ds._Vector.Vector_Impl_.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe.ds._Vector.Vector_Impl_.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe.ds._Vector.Vector_Impl_.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe.ds._Vector.Vector_Impl_.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe.ds._Vector.Vector_Impl_.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe.ds._Vector.Vector_Impl_.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe.ds._Vector.Vector_Impl_.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe.ds._Vector.Vector_Impl_.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe.ds._Vector.Vector_Impl_.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe.ds._Vector.Vector_Impl_.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe.ds._Vector.Vector_Impl_.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe.ds._Vector.Vector_Impl_.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe.ds._Vector.Vector_Impl_.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe.ds._Vector.Vector_Impl_.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		while(i + 3 <= vin.length) {
			var x = vin.data[i];
			var y = vin.data[i + 1];
			var z = vin.data[i + 2];
			if(!vout.fixed) {
				if(i >= vout.length) vout.length = i + 1;
				if(vout.data.length < vout.length) {
					var data;
					var this1;
					this1 = new Array(vout.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data,0,vout.data.length);
					vout.data = data;
				}
			}
			vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl.geom.Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl.geom.Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
openfl.geom.Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : ["openfl","geom","Orientation3D"], __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl.geom.Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl.geom.Orientation3D.AXIS_ANGLE.toString = $estr;
openfl.geom.Orientation3D.AXIS_ANGLE.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl.geom.Orientation3D.EULER_ANGLES.toString = $estr;
openfl.geom.Orientation3D.EULER_ANGLES.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.QUATERNION = ["QUATERNION",2];
openfl.geom.Orientation3D.QUATERNION.toString = $estr;
openfl.geom.Orientation3D.QUATERNION.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Transform = function(displayObject) {
	this.__colorTransform = new openfl.geom.ColorTransform();
	this.concatenatedColorTransform = new openfl.geom.ColorTransform();
	this.concatenatedMatrix = new openfl.geom.Matrix();
	this.pixelBounds = new openfl.geom.Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl.geom.Transform;
openfl.geom.Transform.__name__ = ["openfl","geom","Transform"];
openfl.geom.Transform.prototype = {
	get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		this.__colorTransform = value;
		if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			var matrix = new openfl.geom.Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return matrix;
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.tx);
			this.__displayObject.set_y(value.ty);
			this.__displayObject.set_scaleX(Math.sqrt(value.a * value.a + value.b * value.b));
			this.__displayObject.set_scaleY(Math.sqrt(value.c * value.c + value.d * value.d));
			this.__displayObject.set_rotation(Math.atan2(value.b,value.a) * (180 / Math.PI));
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = new openfl.geom.Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return new openfl.geom.Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl.VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.rawData.data[12]);
			this.__displayObject.set_y(value.rawData.data[13]);
			this.__displayObject.set_scaleX(Math.sqrt(value.rawData.data[0] * value.rawData.data[0] + value.rawData.data[1] * value.rawData.data[1]));
			this.__displayObject.set_scaleY(Math.sqrt(value.rawData.data[4] * value.rawData.data[4] + value.rawData.data[5] * value.rawData.data[5]));
			this.__displayObject.set_rotation(Math.atan2(value.rawData.data[1],value.rawData.data[0]) * (180 / Math.PI));
		}
		return value;
	}
	,__class__: openfl.geom.Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
openfl.media = {};
openfl.media.ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl.media.ID3Info;
openfl.media.ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl.media.ID3Info.prototype = {
	__class__: openfl.media.ID3Info
};
openfl.media.Sound = function(stream,context) {
	openfl.events.EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl.media.Sound;
openfl.media.Sound.__name__ = ["openfl","media","Sound"];
openfl.media.Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl.media.Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl.media.Sound.fromFile = function(path) {
	return openfl.media.Sound.fromAudioBuffer(lime.audio.AudioBuffer.fromFile(path));
};
openfl.media.Sound.__super__ = openfl.events.EventDispatcher;
openfl.media.Sound.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	close: function() {
		if(openfl.media.Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe.io.Path.withoutExtension(stream.url);
		if(!openfl.media.Sound.__registeredSounds.exists(this.__soundID)) {
			openfl.media.Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl.Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl.Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl.media.SoundTransform(1,0);
		var instance;
		if(loops > 1) instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,sndTransform.pan); else instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,sndTransform.pan);
		return new openfl.media.SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl.media.ID3Info();
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		this.__buffer = buffer;
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl.media.Sound
	,__properties__: {get_id3:"get_id3"}
});
openfl.media.SoundChannel = function(soundInstance) {
	openfl.events.EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl.media.SoundChannel;
openfl.media.SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl.media.SoundChannel.__super__ = openfl.events.EventDispatcher;
openfl.media.SoundChannel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl.media.SoundTransform();
		return new openfl.media.SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,__class__: openfl.media.SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
openfl.media.SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl.media.SoundLoaderContext;
openfl.media.SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl.media.SoundLoaderContext.prototype = {
	__class__: openfl.media.SoundLoaderContext
};
openfl.media.SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl.media.SoundTransform;
openfl.media.SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl.media.SoundTransform.prototype = {
	clone: function() {
		return new openfl.media.SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl.media.SoundTransform
};
openfl.net = {};
openfl.net.URLLoader = function(request) {
	openfl.events.EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl.net.URLLoader;
openfl.net.URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl.net.URLLoader.__super__ = openfl.events.EventDispatcher;
openfl.net.URLLoader.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,lime.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,openfl.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl.events.Event(openfl.events.Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl.events.Event(openfl.events.Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl.events.ProgressEvent(openfl.events.ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl.events.SecurityErrorEvent(openfl.events.SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl.events.HTTPStatusEvent(openfl.events.HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
openfl.net.URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : ["openfl","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl.net.URLLoaderDataFormat.BINARY.toString = $estr;
openfl.net.URLLoaderDataFormat.BINARY.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl.net.URLLoaderDataFormat.TEXT.toString = $estr;
openfl.net.URLLoaderDataFormat.TEXT.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl.net.URLLoaderDataFormat.VARIABLES.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = openfl.net.URLRequestMethod.GET;
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl.net.URLRequest;
openfl.net.URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl.net.URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == openfl.net.URLRequestMethod.GET || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,lime.utils.ByteArray)) {
			res = res.slice();
			res.push(new openfl.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl.net.URLRequest
};
openfl.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl.net.URLRequestHeader;
openfl.net.URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl.net.URLRequestHeader.prototype = {
	__class__: openfl.net.URLRequestHeader
};
openfl.net.URLRequestMethod = function() { };
$hxClasses["openfl.net.URLRequestMethod"] = openfl.net.URLRequestMethod;
openfl.net.URLRequestMethod.__name__ = ["openfl","net","URLRequestMethod"];
openfl.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["openfl.net.URLVariables"] = openfl.net.URLVariables;
openfl.net.URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl.net.URLVariables
};
openfl.system.TouchscreenType = $hxClasses["openfl.system.TouchscreenType"] = { __ename__ : ["openfl","system","TouchscreenType"], __constructs__ : ["FINGER","NONE","STYLUS"] };
openfl.system.TouchscreenType.FINGER = ["FINGER",0];
openfl.system.TouchscreenType.FINGER.toString = $estr;
openfl.system.TouchscreenType.FINGER.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.NONE = ["NONE",1];
openfl.system.TouchscreenType.NONE.toString = $estr;
openfl.system.TouchscreenType.NONE.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.STYLUS = ["STYLUS",2];
openfl.system.TouchscreenType.STYLUS.toString = $estr;
openfl.system.TouchscreenType.STYLUS.__enum__ = openfl.system.TouchscreenType;
openfl.system.Capabilities = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl.system.Capabilities;
openfl.system.Capabilities.__name__ = ["openfl","system","Capabilities"];
openfl.system.Capabilities.__properties__ = {get_version:"get_version",get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_language:"get_language"}
openfl.system.Capabilities.language = null;
openfl.system.Capabilities.os = null;
openfl.system.Capabilities.pixelAspectRatio = null;
openfl.system.Capabilities.screenDPI = null;
openfl.system.Capabilities.screenResolutionX = null;
openfl.system.Capabilities.screenResolutionY = null;
openfl.system.Capabilities.version = null;
openfl.system.Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl.system.Capabilities.get_os = function() {
	return "HTML5";
};
openfl.system.Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl.system.Capabilities.get_screenDPI = function() {
	if(openfl.system.Capabilities.screenDPI > 0) return openfl.system.Capabilities.screenDPI;
	var body = window.document.getElementsByTagName("body")[0];
	var testDiv = window.document.createElement("div");
	testDiv.style.width = testDiv.style.height = "1in";
	testDiv.style.padding = testDiv.style.margin = "0px";
	testDiv.style.position = "absolute";
	testDiv.style.top = "-100%";
	body.appendChild(testDiv);
	openfl.system.Capabilities.screenDPI = testDiv.offsetWidth;
	body.removeChild(testDiv);
	return openfl.system.Capabilities.screenDPI;
};
openfl.system.Capabilities.get_screenResolutionX = function() {
	return window.screen.width;
};
openfl.system.Capabilities.get_screenResolutionY = function() {
	return window.screen.height;
};
openfl.system.Capabilities.get_language = function() {
	return navigator.language;
};
openfl.system.Capabilities.get_version = function() {
	var value = "WEB";
	value += " " + StringTools.replace("3.0.6",".",",") + ",0";
	return value;
};
openfl.system.LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl.system.LoaderContext;
openfl.system.LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl.system.LoaderContext.prototype = {
	__class__: openfl.system.LoaderContext
};
openfl.system.SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl.system.SecurityDomain;
openfl.system.SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl.system.SecurityDomain.prototype = {
	__class__: openfl.system.SecurityDomain
};
openfl.text.AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : ["openfl","text","AntiAliasType"], __constructs__ : ["ADVANCED","NORMAL"] };
openfl.text.AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl.text.AntiAliasType.ADVANCED.toString = $estr;
openfl.text.AntiAliasType.ADVANCED.__enum__ = openfl.text.AntiAliasType;
openfl.text.AntiAliasType.NORMAL = ["NORMAL",1];
openfl.text.AntiAliasType.NORMAL.toString = $estr;
openfl.text.AntiAliasType.NORMAL.__enum__ = openfl.text.AntiAliasType;
openfl.text.Font = function(name) {
	lime.text.Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl.text.Font;
openfl.text.Font.__name__ = ["openfl","text","Font"];
openfl.text.Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return [];
};
openfl.text.Font.fromBytes = function(bytes) {
	var font = new openfl.text.Font();
	font.__fromBytes(bytes);
	return font;
};
openfl.text.Font.fromFile = function(path) {
	var font = new openfl.text.Font();
	font.__fromFile(path);
	return font;
};
openfl.text.Font.registerFont = function(font) {
	var instance;
	instance = js.Boot.__cast(Type.createInstance(font,[]) , openfl.text.Font);
	if(instance != null) openfl.text.Font.__registeredFonts.push(instance);
};
openfl.text.Font.__fromLimeFont = function(value) {
	var font = new openfl.text.Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl.text.Font.__super__ = lime.text.Font;
openfl.text.Font.prototype = $extend(lime.text.Font.prototype,{
	get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl.text.Font
	,__properties__: $extend(lime.text.Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
openfl.text.FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : ["openfl","text","FontStyle"], __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl.text.FontStyle.REGULAR = ["REGULAR",0];
openfl.text.FontStyle.REGULAR.toString = $estr;
openfl.text.FontStyle.REGULAR.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.ITALIC = ["ITALIC",1];
openfl.text.FontStyle.ITALIC.toString = $estr;
openfl.text.FontStyle.ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl.text.FontStyle.BOLD_ITALIC.toString = $estr;
openfl.text.FontStyle.BOLD_ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD = ["BOLD",3];
openfl.text.FontStyle.BOLD.toString = $estr;
openfl.text.FontStyle.BOLD.__enum__ = openfl.text.FontStyle;
openfl.text.FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : ["openfl","text","FontType"], __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl.text.FontType.DEVICE = ["DEVICE",0];
openfl.text.FontType.DEVICE.toString = $estr;
openfl.text.FontType.DEVICE.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED = ["EMBEDDED",1];
openfl.text.FontType.EMBEDDED.toString = $estr;
openfl.text.FontType.EMBEDDED.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl.text.FontType.EMBEDDED_CFF.toString = $estr;
openfl.text.FontType.EMBEDDED_CFF.__enum__ = openfl.text.FontType;
openfl.text.GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : ["openfl","text","GridFitType"], __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl.text.GridFitType.NONE = ["NONE",0];
openfl.text.GridFitType.NONE.toString = $estr;
openfl.text.GridFitType.NONE.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.PIXEL = ["PIXEL",1];
openfl.text.GridFitType.PIXEL.toString = $estr;
openfl.text.GridFitType.PIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl.text.GridFitType.SUBPIXEL.toString = $estr;
openfl.text.GridFitType.SUBPIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text.TextFormatRange"] = openfl.text.TextFormatRange;
openfl.text.TextFormatRange.__name__ = ["openfl","text","TextFormatRange"];
openfl.text.TextFormatRange.prototype = {
	__class__: openfl.text.TextFormatRange
};
openfl.text.TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : ["openfl","text","TextFieldAutoSize"], __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl.text.TextFieldAutoSize.CENTER = ["CENTER",0];
openfl.text.TextFieldAutoSize.CENTER.toString = $estr;
openfl.text.TextFieldAutoSize.CENTER.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.LEFT = ["LEFT",1];
openfl.text.TextFieldAutoSize.LEFT.toString = $estr;
openfl.text.TextFieldAutoSize.LEFT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.NONE = ["NONE",2];
openfl.text.TextFieldAutoSize.NONE.toString = $estr;
openfl.text.TextFieldAutoSize.NONE.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl.text.TextFieldAutoSize.RIGHT.toString = $estr;
openfl.text.TextFieldAutoSize.RIGHT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : ["openfl","text","TextFieldType"], __constructs__ : ["DYNAMIC","INPUT"] };
openfl.text.TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl.text.TextFieldType.DYNAMIC.toString = $estr;
openfl.text.TextFieldType.DYNAMIC.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFieldType.INPUT = ["INPUT",1];
openfl.text.TextFieldType.INPUT.toString = $estr;
openfl.text.TextFieldType.INPUT.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl.text.TextFormat;
openfl.text.TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl.text.TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl.text.TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl.text.TextFormat
};
openfl.text.TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : ["openfl","text","TextFormatAlign"], __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl.text.TextFormatAlign.LEFT = ["LEFT",0];
openfl.text.TextFormatAlign.LEFT.toString = $estr;
openfl.text.TextFormatAlign.LEFT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.RIGHT = ["RIGHT",1];
openfl.text.TextFormatAlign.RIGHT.toString = $estr;
openfl.text.TextFormatAlign.RIGHT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl.text.TextFormatAlign.JUSTIFY.toString = $estr;
openfl.text.TextFormatAlign.JUSTIFY.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.CENTER = ["CENTER",3];
openfl.text.TextFormatAlign.CENTER.toString = $estr;
openfl.text.TextFormatAlign.CENTER.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl.text.TextLineMetrics;
openfl.text.TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl.text.TextLineMetrics.prototype = {
	__class__: openfl.text.TextLineMetrics
};
openfl.ui = {};
openfl.ui._KeyLocation = {};
openfl.ui._KeyLocation.KeyLocation_Impl_ = function() { };
$hxClasses["openfl.ui._KeyLocation.KeyLocation_Impl_"] = openfl.ui._KeyLocation.KeyLocation_Impl_;
openfl.ui._KeyLocation.KeyLocation_Impl_.__name__ = ["openfl","ui","_KeyLocation","KeyLocation_Impl_"];
openfl.ui.Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl.ui.Keyboard;
openfl.ui.Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl.ui.Keyboard.capsLock = null;
openfl.ui.Keyboard.numLock = null;
openfl.ui.Keyboard.convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl.ui.Keyboard.isAccessible = function() {
	return false;
};
openfl.ui.Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
openfl.utils = {};
openfl.utils.AGALMiniAssembler = function() {
	this.r = new haxe.ds.StringMap();
	this.cur = new openfl._internal.aglsl.assembler.Part();
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl.utils.AGALMiniAssembler;
openfl.utils.AGALMiniAssembler.__name__ = ["openfl","utils","AGALMiniAssembler"];
openfl.utils.AGALMiniAssembler.prototype = {
	addHeader: function(partname,version) {
		if(version == 0) version = 1;
		if(!this.r.exists(partname)) {
			this.r.set(partname,new openfl._internal.aglsl.assembler.Part(partname,version));
			this.emitHeader(this.r.get(partname));
		} else if(this.r.get(partname).version != (version | 0)) throw "Multiple versions for part " + partname;
		this.cur = this.r.get(partname);
	}
	,assemble: function(source,ext_part,ext_version) {
		if(ext_version == 0) ext_version = 1;
		if(ext_part != null) this.addHeader(ext_part,ext_version);
		var reg = new EReg("[\n\r]+","g");
		var lines = reg.split(source);
		var i;
		var _g1 = 0;
		var _g = lines.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.processLine(lines[i1],i1);
		}
		return this.r;
	}
	,emitDest: function(pr,token,opdest) {
		var reg = this.getGroupMatches(new EReg("([fov]?[tpocidavs])(\\d*)(\\.[xyzw]{1,4})?","i"),token,3);
		if(openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]) == null) return false;
		if(Std.parseInt(reg[2]) == null) reg[2] = "0";
		var em_num;
		if(reg[2] != null) em_num = reg[2]; else em_num = "0";
		var em_code = openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]).code;
		var em_mask = this.stringToMask(reg[3]);
		pr.data.writeShort(Std.parseInt(em_num));
		pr.data.writeByte(em_mask);
		pr.data.writeByte(em_code);
		return true;
	}
	,emitHeader: function(pr) {
		pr.data.writeByte(160);
		pr.data.writeUnsignedInt(pr.version);
		if(pr.version >= 16) pr.data.writeByte(0);
		pr.data.writeByte(161);
		var _g = pr.name;
		switch(_g) {
		case "fragment":
			pr.data.writeByte(1);
			break;
		case "vertex":
			pr.data.writeByte(0);
			break;
		case "cpu":
			pr.data.writeByte(2);
			break;
		default:
			pr.data.writeByte(255);
		}
	}
	,emitOpcode: function(pr,opcode) {
		pr.data.writeUnsignedInt(opcode);
	}
	,emitSampler: function(pr,token,opsrc,opts) {
		var reg = this.getGroupMatches(new EReg("fs(\\d*)","i"),token,1);
		if(reg.length < 1) return false;
		pr.data.writeShort(Std.parseInt(reg[1]));
		pr.data.writeByte(0);
		pr.data.writeByte(0);
		var samplerbits = 5;
		var sampleroptset = 0;
		var _g1 = 0;
		var _g = opts.length;
		while(_g1 < _g) {
			var i = _g1++;
			var o = openfl._internal.aglsl.assembler.SamplerMap.get_map().get(opts[i].toLowerCase());
			if(o != null) {
				if((function($this) {
					var $r;
					var $int = sampleroptset >> o.shift & o.mask;
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) != 0) haxe.Log.trace("Warning, duplicate sampler option",{ fileName : "AGALMiniAssembler.hx", lineNumber : 173, className : "openfl.utils.AGALMiniAssembler", methodName : "emitSampler"});
				sampleroptset = sampleroptset | o.mask << o.shift;
				samplerbits = samplerbits & ~(o.mask << o.shift);
				samplerbits = samplerbits | o.value << o.shift;
			} else {
			}
		}
		pr.data.writeUnsignedInt(samplerbits);
		return true;
	}
	,emitSource: function(pr,token,opsrc) {
		var indexed = this.getGroupMatches(new EReg("vc\\[(v[tcai])(\\d+)\\.([xyzw])([\\+\\-]\\d+)?\\](\\.[xyzw]{1,4})?","i"),token,5);
		var reg;
		if(indexed.length > 0) {
			if(openfl._internal.aglsl.assembler.RegMap.get_map().get(indexed[1]) == null) return false;
			var selindex = { x : 0, y : 1, z : 2, w : 3};
			var em = { num : Std.parseInt(indexed[2]) | 0, code : openfl._internal.aglsl.assembler.RegMap.get_map().get(indexed[1]).code, swizzle : this.stringToSwizzle(indexed[5]), select : Reflect.getProperty(selindex,indexed[3]), offset : Std.parseInt(indexed[4]) | 0};
			pr.data.writeShort(em.num);
			pr.data.writeByte(em.offset);
			pr.data.writeByte(em.swizzle);
			pr.data.writeByte(1);
			pr.data.writeByte(em.code);
			pr.data.writeByte(em.select);
			pr.data.writeByte(128);
		} else {
			reg = this.getGroupMatches(new EReg("([fov]?[tpocidavs])(\\d*)(\\.[xyzw]{1,4})?","i"),token,3);
			if(openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]) == null) return false;
			if(reg.length < 4) reg.push("");
			var em1 = { num : Std.parseInt(reg[2]) | 0, code : openfl._internal.aglsl.assembler.RegMap.get_map().get(reg[1]).code, swizzle : this.stringToSwizzle(reg[3])};
			pr.data.writeShort(em1.num);
			pr.data.writeByte(0);
			pr.data.writeByte(em1.swizzle);
			pr.data.writeByte(em1.code);
			pr.data.writeByte(0);
			pr.data.writeByte(0);
			pr.data.writeByte(0);
		}
		return true;
	}
	,emitZeroDword: function(pr) {
		pr.data.writeUnsignedInt(0);
	}
	,emitZeroQword: function(pr) {
		pr.data.writeUnsignedInt(0);
		pr.data.writeUnsignedInt(0);
	}
	,getGroupMatches: function(ereg,text,groupCount) {
		if(groupCount == null) groupCount = 0;
		var matches = [];
		if(!ereg.match(text)) return matches;
		var m = 0;
		var t = null;
		var completed = false;
		while(!completed && (t = ereg.matched(m++)) != null) {
			matches.push(t);
			if((function($this) {
				var $r;
				var $int = groupCount;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) != 0 && (function($this) {
				var $r;
				var aNeg = m < 0;
				var bNeg = groupCount < 0;
				$r = aNeg != bNeg?aNeg:m > groupCount;
				return $r;
			}(this))) completed = true;
		}
		return matches;
	}
	,getMatches: function(ereg,text) {
		var matches = [];
		while(ereg.match(text)) {
			var t = ereg.matched(1);
			matches.push(t);
			text = ereg.matchedRight();
		}
		return matches;
	}
	,processLine: function(line,linenr) {
		var startcomment = line.indexOf("//");
		if(startcomment != -1) line = line.substring(0,startcomment);
		var r = new EReg("^\\s+|\\s+$","g");
		line = r.replace(line,"");
		if(!(line.length > 0)) return;
		r = new EReg("<.*>","g");
		var optsb = r.match(line);
		var opts = null;
		if(optsb) {
			var optsi = r.matchedPos().pos;
			opts = this.getMatches(new EReg("([\\w\\.\\-\\+]+)","gi"),line.substring(optsi));
			line = line.substring(0,optsi);
		}
		var tokens = this.getMatches(new EReg("([\\w\\.\\+\\[\\]]+)","gi"),line);
		if(tokens.length == 0) {
			if(line.length >= 3) haxe.Log.trace("Warning: bad line " + Std.string((function($this) {
				var $r;
				var $int = linenr;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) + ": " + line,{ fileName : "AGALMiniAssembler.hx", lineNumber : 349, className : "openfl.utils.AGALMiniAssembler", methodName : "processLine"});
			return;
		}
		var _g = tokens[0];
		switch(_g) {
		case "part":
			this.addHeader(tokens[1],Std.parseInt(tokens[2]));
			break;
		case "endpart":
			if(this.cur == null) throw "Unexpected endpart";
			this.cur.data.position = 0;
			this.cur = null;
			return;
		default:
			if(this.cur == null) {
				haxe.Log.trace("Warning: bad line " + Std.string((function($this) {
					var $r;
					var int1 = linenr;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this))) + ": " + line + " (Outside of any part definition)",{ fileName : "AGALMiniAssembler.hx", lineNumber : 380, className : "openfl.utils.AGALMiniAssembler", methodName : "processLine"});
				return;
			}
			if(this.cur.name == "comment") return;
			var op;
			var this1 = openfl._internal.aglsl.assembler.OpcodeMap.get_map();
			op = this1.get(tokens[0]);
			if(op == null) throw "Bad opcode " + tokens[0] + " " + Std.string((function($this) {
				var $r;
				var int2 = linenr;
				$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
				return $r;
			}(this))) + ": " + line;
			this.emitOpcode(this.cur,op.opcode);
			var ti = 1;
			if(op.dest != null && op.dest != "none") {
				if(!this.emitDest(this.cur,tokens[ti++],op.dest)) throw "Bad destination register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int3 = linenr;
					$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroDword(this.cur);
			if(op.a != null && op.a.format != "none") {
				if(!this.emitSource(this.cur,tokens[ti++],op.a)) throw "Bad source register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int4 = linenr;
					$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroQword(this.cur);
			if(op.b != null && op.b.format != "none") {
				if(op.b.format == "sampler") {
					if(!this.emitSampler(this.cur,tokens[ti++],op.b,opts)) throw "Bad sampler register " + tokens[ti - 1] + " " + Std.string((function($this) {
						var $r;
						var int5 = linenr;
						$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
						return $r;
					}(this))) + ": " + line;
				} else if(!this.emitSource(this.cur,tokens[ti++],op.b)) throw "Bad source register " + tokens[ti - 1] + " " + Std.string((function($this) {
					var $r;
					var int6 = linenr;
					$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
					return $r;
				}(this))) + ": " + line;
			} else this.emitZeroQword(this.cur);
		}
	}
	,stringToMask: function(s) {
		if(s == null) return 15;
		var r = 0;
		if(s.indexOf("x") != -1) r |= 1;
		if(s.indexOf("y") != -1) r |= 2;
		if(s.indexOf("z") != -1) r |= 4;
		if(s.indexOf("w") != -1) r |= 8;
		return r;
	}
	,stringToSwizzle: function(s) {
		if(s == "") return 228;
		var chartoindex = { x : 0, y : 1, z : 2, w : 3};
		var sw = 0;
		if(s.charAt(0) != ".") throw "Missing . for swizzle";
		if(s.length > 1) sw |= Reflect.field(chartoindex,s.charAt(1));
		if(s.length > 2) sw |= Reflect.field(chartoindex,s.charAt(2)) << 2; else sw |= (sw & 3) << 2;
		if(s.length > 3) sw |= Reflect.field(chartoindex,s.charAt(3)) << 4; else sw |= (sw & 12) << 2;
		if(s.length > 4) sw |= Reflect.field(chartoindex,s.charAt(4)) << 6; else sw |= (sw & 48) << 2;
		return sw;
	}
	,__class__: openfl.utils.AGALMiniAssembler
};
openfl.utils.Endian = function() { };
$hxClasses["openfl.utils.Endian"] = openfl.utils.Endian;
openfl.utils.Endian.__name__ = ["openfl","utils","Endian"];
openfl.utils.Timer = function(delay,repeatCount) {
	if(repeatCount == null) repeatCount = 0;
	if(Math.isNaN(delay) || delay < 0) throw new openfl.errors.Error("The delay specified is negative or not a finite number");
	openfl.events.EventDispatcher.call(this);
	this.__delay = delay;
	this.set_repeatCount(repeatCount);
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl.utils.Timer;
openfl.utils.Timer.__name__ = ["openfl","utils","Timer"];
openfl.utils.Timer.__super__ = openfl.events.EventDispatcher;
openfl.utils.Timer.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	reset: function() {
		if(this.running) this.stop();
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = window.setInterval($bind(this,this.timer_onTimer),this.__delay | 0);
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			window.clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,get_delay: function() {
		return this.__delay;
	}
	,set_delay: function(value) {
		this.__delay = value;
		if(this.running) {
			this.stop();
			this.start();
		}
		return this.__delay;
	}
	,set_repeatCount: function(v) {
		if(this.running && v != 0 && v <= this.currentCount) this.stop();
		this.repeatCount = v;
		return v;
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.repeatCount > 0 && this.currentCount >= this.repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl.events.TimerEvent(openfl.events.TimerEvent.TIMER));
			this.dispatchEvent(new openfl.events.TimerEvent(openfl.events.TimerEvent.TIMER_COMPLETE));
		} else this.dispatchEvent(new openfl.events.TimerEvent(openfl.events.TimerEvent.TIMER));
	}
	,__class__: openfl.utils.Timer
	,__properties__: {set_repeatCount:"set_repeatCount",set_delay:"set_delay",get_delay:"get_delay"}
});
var org = {};
org.vic = {};
org.vic.box2d = {};
org.vic.box2d.Box2dHelper = function() {
};
$hxClasses["org.vic.box2d.Box2dHelper"] = org.vic.box2d.Box2dHelper;
org.vic.box2d.Box2dHelper.__name__ = ["org","vic","box2d","Box2dHelper"];
org.vic.box2d.Box2dHelper.prototype = {
	createWorld: function(gravity) {
		return new box2D.dynamics.B2World(gravity,true);
	}
	,createBoxBody: function(b2w,scale,type,x,y,w,h,degree,density,friction,restitution) {
		if(restitution == null) restitution = 0;
		if(friction == null) friction = 1;
		if(density == null) density = 1;
		if(degree == null) degree = 0.0;
		if(h == null) h = 30;
		if(w == null) w = 30;
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(type == null) type = 2;
		var def = new box2D.dynamics.B2BodyDef();
		def.position.set(x / scale,y / scale);
		def.angle = degree / 180 * Math.PI;
		def.type = type;
		var body = b2w.createBody(def);
		var fixdef = new box2D.dynamics.B2FixtureDef();
		fixdef.density = density;
		fixdef.friction = friction;
		fixdef.restitution = restitution;
		var shape = new box2D.collision.shapes.B2PolygonShape();
		shape.setAsBox(w / scale,h / scale);
		fixdef.shape = shape;
		body.createFixture(fixdef);
		return body;
	}
	,createCustomBody: function(b2w,scale,ary_point,type,x,y,degree,density,friction,restitution) {
		if(restitution == null) restitution = 0;
		if(friction == null) friction = 1;
		if(density == null) density = 1;
		if(degree == null) degree = 0.0;
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(type == null) type = 2;
		var def = new box2D.dynamics.B2BodyDef();
		def.position.set(x / scale,y / scale);
		def.angle = degree / 180 * Math.PI;
		def.type = type;
		var body = b2w.createBody(def);
		var fixdef = new box2D.dynamics.B2FixtureDef();
		fixdef.density = density;
		fixdef.friction = friction;
		var shape = new box2D.collision.shapes.B2PolygonShape();
		Lambda.mapi((function($this) {
			var $r;
			var _g = [];
			{
				var _g2 = 0;
				var _g1 = Math.floor(ary_point.length / 4);
				while(_g2 < _g1) {
					var i = _g2++;
					_g.push(i);
				}
			}
			$r = _g;
			return $r;
		}(this)),function(id,pos) {
			var ta = [ary_point[id * 4],ary_point[id * 4 + 1],ary_point[id * 4 + 2],ary_point[id * 4 + 3]];
			var fixdef1 = new box2D.dynamics.B2FixtureDef();
			fixdef1.density = density;
			fixdef1.friction = friction;
			fixdef1.restitution = restitution;
			fixdef1.shape = shape;
			shape.setAsArray(ta,ta.length);
			body.createFixture(fixdef1);
		});
		return body;
	}
	,createSphereBody: function(b2w,scale,type,x,y,radius,degree,density,friction,restitution) {
		if(restitution == null) restitution = 0;
		if(friction == null) friction = 1;
		if(density == null) density = 1;
		if(degree == null) degree = 0.0;
		if(radius == null) radius = 20;
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(type == null) type = 2;
		var def = new box2D.dynamics.B2BodyDef();
		def.position.set(x / scale,y / scale);
		def.angle = degree / 180 * Math.PI;
		def.type = type;
		var body = b2w.createBody(def);
		var fixdef = new box2D.dynamics.B2FixtureDef();
		fixdef.density = density;
		fixdef.friction = friction;
		fixdef.restitution = restitution;
		var shape = new box2D.collision.shapes.B2CircleShape(radius / scale);
		fixdef.shape = shape;
		body.createFixture(fixdef);
		return body;
	}
	,createJoint: function(b2w,scale,bodyA,bodyB,length,dampingRatio,frequencyHz,offsetA,offsetB) {
		if(frequencyHz == null) frequencyHz = 0.0;
		if(dampingRatio == null) dampingRatio = 0.0;
		if(length == null) length = 50;
		var j = new box2D.dynamics.joints.B2DistanceJointDef();
		j.bodyA = bodyA;
		j.bodyB = bodyB;
		j.localAnchorA = (function() {
			if(offsetA == null) return bodyA.getLocalCenter(); else {
				var t = bodyA.getLocalCenter().copy();
				t.add(offsetA);
				return t;
			}
		})();
		j.localAnchorB = (function() {
			if(offsetB == null) return bodyB.getLocalCenter(); else {
				var t1 = bodyB.getLocalCenter().copy();
				t1.add(offsetB);
				return t1;
			}
		})();
		j.length = length / scale;
		j.dampingRatio = dampingRatio;
		j.frequencyHz = frequencyHz;
		b2w.createJoint(j);
		return j;
	}
	,createDebugDraw: function(b2w,scale,sprite) {
		var dd = new box2D.dynamics.B2DebugDraw();
		dd.setFillAlpha(.5);
		dd.setFlags(box2D.dynamics.B2DebugDraw.e_shapeBit);
		dd.setDrawScale(scale);
		dd.setSprite(sprite);
		b2w.setDebugDraw(dd);
		return sprite;
	}
	,updateB2w: function(b2w,dt,velocityIterations,positionIterations) {
		if(positionIterations == null) positionIterations = 2;
		if(velocityIterations == null) velocityIterations = 6;
		if(dt == null) dt = 0.033333333333333333;
		b2w.drawDebugData();
		b2w.step(dt,velocityIterations,positionIterations);
	}
	,__class__: org.vic.box2d.Box2dHelper
};
var ru = {};
ru.stablex = {};
ru.stablex.Err = function() {
};
$hxClasses["ru.stablex.Err"] = ru.stablex.Err;
ru.stablex.Err.__name__ = ["ru","stablex","Err"];
ru.stablex.Err.trigger = function(msg) {
	throw msg;
};
ru.stablex.Err.prototype = {
	__class__: ru.stablex.Err
};
ru.stablex.TweenSprite = function() {
	openfl.display.Sprite.call(this);
};
$hxClasses["ru.stablex.TweenSprite"] = ru.stablex.TweenSprite;
ru.stablex.TweenSprite.__name__ = ["ru","stablex","TweenSprite"];
ru.stablex.TweenSprite.__super__ = openfl.display.Sprite;
ru.stablex.TweenSprite.prototype = $extend(openfl.display.Sprite.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this._listeners == null) this._listeners = new haxe.ds.StringMap();
		var listeners = this._listeners.get(type);
		if(listeners == null) {
			listeners = new List();
			listeners.add(listener);
			this._listeners.set(type,listeners);
		} else listeners.add(listener);
		openfl.display.Sprite.prototype.addEventListener.call(this,type,listener,false,priority,useWeakReference);
	}
	,addUniqueListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.hasListener(type,listener)) return false;
		this.addEventListener(type,listener,useCapture,priority,useWeakReference);
		return true;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this._listeners != null) {
			if(this._listeners.exists(type)) this._listeners.get(type).remove(listener);
		}
		openfl.display.Sprite.prototype.removeEventListener.call(this,type,listener,false);
	}
	,clearEvent: function(type) {
		if(this._listeners != null) {
			var listeners = this._listeners.get(type);
			if(listeners != null) while(listeners.length > 0) this.removeEventListener(type,listeners.first());
		}
	}
	,hasListener: function(event,listener) {
		if(this._listeners == null) return false;
		var lst = this._listeners.get(event);
		if(lst == null) return false;
		var $it0 = lst.iterator();
		while( $it0.hasNext() ) {
			var l = $it0.next();
			if(l == listener) return true;
		}
		return false;
	}
	,tween: function(duration,properties,easing,overwrite,customActuator) {
		if(overwrite == null) overwrite = true;
		if(easing == null) easing = "Linear.easeNone";
		switch(easing) {
		case "Quad.easeInOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Quad.get_easeInOut());
		case "Quad.easeOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Quad.get_easeOut());
		case "Quad.easeIn":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Quad.get_easeIn());
		case "Expo.easeInOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Expo.get_easeInOut());
		case "Expo.easeOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Expo.get_easeOut());
		case "Expo.easeIn":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Expo.get_easeIn());
		case "Bounce.easeInOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Bounce.get_easeInOut());
		case "Bounce.easeOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Bounce.get_easeOut());
		case "Bounce.easeIn":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Bounce.get_easeIn());
		case "Quint.easeInOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Quint.get_easeInOut());
		case "Quint.easeOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Quint.get_easeOut());
		case "Quint.easeIn":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Quint.get_easeIn());
		case "Elastic.easeInOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Elastic.get_easeInOut());
		case "Elastic.easeOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Elastic.get_easeOut());
		case "Elastic.easeIn":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Elastic.get_easeIn());
		case "Back.easeInOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Back.get_easeInOut());
		case "Back.easeOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Back.get_easeOut());
		case "Back.easeIn":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Back.get_easeIn());
		case "Quart.easeInOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Quart.get_easeInOut());
		case "Quart.easeOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Quart.get_easeOut());
		case "Quart.easeIn":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Quart.get_easeIn());
		case "Cubic.easeInOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Cubic.get_easeInOut());
		case "Cubic.easeOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Cubic.get_easeOut());
		case "Cubic.easeIn":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Cubic.get_easeIn());
		case "Sine.easeInOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Sine.get_easeInOut());
		case "Sine.easeOut":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Sine.get_easeOut());
		case "Sine.easeIn":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Sine.get_easeIn());
		case "Linear.easeNone":
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Linear.get_easeNone());
		default:
			return motion.Actuate.tween(this,duration,properties,overwrite,customActuator).ease(motion.easing.Linear.get_easeNone());
		}
	}
	,tweenStop: function(properties,complete,sendEvent) {
		if(sendEvent == null) sendEvent = false;
		if(complete == null) complete = false;
		motion.Actuate.stop(this,properties,complete,sendEvent);
	}
	,free: function(recursive) {
		if(recursive == null) recursive = true;
		this.tweenStop();
		if(this._listeners != null) {
			var $it0 = this._listeners.keys();
			while( $it0.hasNext() ) {
				var event = $it0.next();
				var listeners = this._listeners.get(event);
				while(!listeners.isEmpty()) this.removeEventListener(event,listeners.first());
			}
		}
		this.freeChildren(recursive);
		if(this.parent != null) this.parent.removeChild(this);
	}
	,freeChildren: function(recursive) {
		if(recursive == null) recursive = true;
		var child;
		while(this.get_numChildren() > 0) {
			child = this.removeChildAt(0);
			if(recursive && js.Boot.__instanceof(child,ru.stablex.TweenSprite)) (js.Boot.__cast(child , ru.stablex.TweenSprite)).free(true);
		}
	}
	,__class__: ru.stablex.TweenSprite
});
ru.stablex.ui = {};
ru.stablex.ui.UIBuilder = function() { };
$hxClasses["ru.stablex.ui.UIBuilder"] = ru.stablex.ui.UIBuilder;
ru.stablex.ui.UIBuilder.__name__ = ["ru","stablex","ui","UIBuilder"];
ru.stablex.ui.UIBuilder.pos = function(pos) {
	return pos.className + ":" + pos.lineNumber;
};
ru.stablex.ui.UIBuilder.createId = function() {
	return "__widget__" + Std.string(ru.stablex.ui.UIBuilder._nextId++);
};
ru.stablex.ui.UIBuilder.create = function(cls,properties) {
	var obj = Type.createInstance(cls,[]);
	obj.defaults = Reflect.field(properties,"defaults");
	if(obj.defaults == null) obj.defaults = "Default";
	ru.stablex.ui.UIBuilder.applyDefaults(obj);
	var children = Reflect.field(properties,"children");
	if(children != null) Reflect.deleteField(properties,"children");
	if(properties != null) ru.stablex.ui.UIBuilder.apply(obj,properties);
	obj._onInitialize();
	if(children != null) {
		var _g1 = 0;
		var _g = children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(js.Boot.__instanceof(children[i],ru.stablex.ui.widgets.Widget)) obj.addChild(children[i]);
		}
	}
	obj._onCreate();
	return obj;
};
ru.stablex.ui.UIBuilder.apply = function(obj,properties) {
	var _g = 0;
	var _g1 = Reflect.fields(properties);
	while(_g < _g1.length) {
		var property = _g1[_g];
		++_g;
		if(Type["typeof"](Reflect.field(properties,property)) == ValueType.TObject) ru.stablex.ui.UIBuilder.apply(Reflect.getProperty(obj,property),Reflect.field(properties,property)); else Reflect.setProperty(obj,property,Reflect.field(properties,property));
	}
};
ru.stablex.ui.UIBuilder.applyDefaults = function(obj) {
	var clsName = Type.getClassName(Type.getClass(obj));
	var widgetDefaults;
	var key;
	var pos = clsName.lastIndexOf(".",clsName.length - 1) + 1;
	key = HxOverrides.substr(clsName,pos,null);
	widgetDefaults = ru.stablex.ui.UIBuilder.defaults.get(key);
	if(widgetDefaults != null) {
		var defs = obj.defaults.split(",");
		var _g1 = 0;
		var _g = defs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var defaultsFn = widgetDefaults.get(defs[i]);
			if(defaultsFn != null) defaultsFn(obj);
		}
	}
};
ru.stablex.ui.UIBuilder.skin = function(skinName) {
	return ru.stablex.ui.UIBuilder.skins.get(skinName);
};
ru.stablex.ui.UIBuilder.get = function(id) {
	return ru.stablex.ui.UIBuilder._objects.get(id);
};
ru.stablex.ui.UIBuilder.getAs = function(id,cls) {
	var w = ru.stablex.ui.UIBuilder._objects.get(id);
	if(js.Boot.__instanceof(w,cls)) return w; else return null;
};
ru.stablex.ui.UIBuilder.save = function(obj) {
	if(ru.stablex.ui.UIBuilder._objects.exists(obj.id)) throw "Widget id \"" + obj.id + "\" is already used"; else ru.stablex.ui.UIBuilder._objects.set(obj.id,obj);
};
ru.stablex.ui.UIBuilder.forget = function(id) {
	ru.stablex.ui.UIBuilder._objects.remove(id);
};
ru.stablex.ui.UIBuilder.queueSkin = function(w) {
	if(w.skin != null && !w._skinQueued) {
		ru.stablex.ui.UIBuilder._skinQueue.add(w);
		w._skinQueued = true;
	}
};
ru.stablex.ui.UIBuilder.skinQueue = function(e) {
	ru.stablex.ui.UIBuilder.frameTime = openfl.Lib.getTimer();
	if(ru.stablex.ui.UIBuilder._skinQueue.length > 0) {
		var lst = ru.stablex.ui.UIBuilder._skinQueue;
		ru.stablex.ui.UIBuilder._skinQueue = new List();
		var $it0 = lst.iterator();
		while( $it0.hasNext() ) {
			var w = $it0.next();
			w.applySkin();
			w._skinQueued = false;
		}
	}
};
ru.stablex.ui.UIBuilder.customStringReplace = function(s) {
	return s;
};
ru.stablex.ui.events = {};
ru.stablex.ui.events.WidgetEvent = function(type,widget) {
	openfl.events.Event.call(this,type);
	this._widget = widget;
};
$hxClasses["ru.stablex.ui.events.WidgetEvent"] = ru.stablex.ui.events.WidgetEvent;
ru.stablex.ui.events.WidgetEvent.__name__ = ["ru","stablex","ui","events","WidgetEvent"];
ru.stablex.ui.events.WidgetEvent.__super__ = openfl.events.Event;
ru.stablex.ui.events.WidgetEvent.prototype = $extend(openfl.events.Event.prototype,{
	get_widget: function() {
		if(this._widget == null && js.Boot.__instanceof(this.currentTarget,ru.stablex.ui.widgets.Widget)) this._widget = this.currentTarget;
		return this._widget;
	}
	,__class__: ru.stablex.ui.events.WidgetEvent
	,__properties__: {get_widget:"get_widget"}
});
ru.stablex.ui.layouts = {};
ru.stablex.ui.layouts.Layout = function() {
};
$hxClasses["ru.stablex.ui.layouts.Layout"] = ru.stablex.ui.layouts.Layout;
ru.stablex.ui.layouts.Layout.__name__ = ["ru","stablex","ui","layouts","Layout"];
ru.stablex.ui.layouts.Layout.prototype = {
	arrangeChildren: function(Widget) {
	}
	,'as': function(cls) {
		if(js.Boot.__instanceof(this,cls)) return this; else return null;
	}
	,__class__: ru.stablex.ui.layouts.Layout
};
ru.stablex.ui.misc = {};
ru.stablex.ui.misc.SizeTools = function() { };
$hxClasses["ru.stablex.ui.misc.SizeTools"] = ru.stablex.ui.misc.SizeTools;
ru.stablex.ui.misc.SizeTools.__name__ = ["ru","stablex","ui","misc","SizeTools"];
ru.stablex.ui.misc.SizeTools.width = function(obj) {
	if(js.Boot.__instanceof(obj,ru.stablex.ui.widgets.Widget)) return (js.Boot.__cast(obj , ru.stablex.ui.widgets.Widget)).get_w(); else if(js.Boot.__instanceof(obj,openfl.text.TextField)) return (js.Boot.__cast(obj , openfl.text.TextField)).get_textWidth() + 4; else return obj.get_width();
};
ru.stablex.ui.misc.SizeTools.height = function(obj) {
	if(js.Boot.__instanceof(obj,ru.stablex.ui.widgets.Widget)) return (js.Boot.__cast(obj , ru.stablex.ui.widgets.Widget)).get_h(); else if(js.Boot.__instanceof(obj,openfl.text.TextField)) {
		var tf = (js.Boot.__cast(obj , openfl.text.TextField)).get_defaultTextFormat();
		var lines = (js.Boot.__cast(obj , openfl.text.TextField)).get_numLines();
		var h = tf.size * 1.185 * lines | 0;
		h = ((h | 0) - h + 1) * lines + 1 + (lines - 1) * tf.leading + h;
		return h + 4;
	} else return obj.get_height();
};
ru.stablex.ui.misc.SizeTools.setX = function(obj,x) {
	obj.set_x(js.Boot.__instanceof(obj,openfl.text.TextField)?obj.set_x(x + 2):x);
};
ru.stablex.ui.misc.SizeTools.setY = function(obj,y) {
	obj.set_y(js.Boot.__instanceof(obj,openfl.text.TextField)?obj.set_y(y + 2):y);
};
ru.stablex.ui.skins = {};
ru.stablex.ui.skins.Skin = function() {
	this.clear = true;
};
$hxClasses["ru.stablex.ui.skins.Skin"] = ru.stablex.ui.skins.Skin;
ru.stablex.ui.skins.Skin.__name__ = ["ru","stablex","ui","skins","Skin"];
ru.stablex.ui.skins.Skin.prototype = {
	apply: function(w) {
		if(this.clear) w.get_graphics().clear();
		if(w._appliedSkin != null) {
			if(w._appliedSkin == this) this.reDraw(w); else {
				w._appliedSkin.unDraw(w);
				this.draw(w);
			}
		} else this.draw(w);
		w._appliedSkin = this;
	}
	,draw: function(w) {
	}
	,unDraw: function(w) {
	}
	,reDraw: function(w) {
		this.unDraw(w);
		this.draw(w);
	}
	,'as': function(cls) {
		if(js.Boot.__instanceof(this,cls)) return this; else return null;
	}
	,__class__: ru.stablex.ui.skins.Skin
};
ru.stablex.ui.widgets = {};
ru.stablex.ui.widgets.Widget = function() {
	this.overflow = true;
	this._skinQueued = false;
	this._appliedSkin = null;
	this._bottomPercent = 0;
	this._bottom = 0;
	this._topPercent = 0;
	this._top = 0;
	this._yUse = 5;
	this._xUse = 1;
	this._rightPercent = 0;
	this._right = 0;
	this._leftPercent = 0;
	this._left = 0;
	this._resizing = false;
	this._silentResize = false;
	this._heightUsePercent = false;
	this._heightPercent = 0;
	this._height = 0;
	this._widthUsePercent = false;
	this._widthPercent = 0;
	this._width = 0;
	this.destroyed = false;
	this.created = false;
	this.initialized = false;
	this.defaults = "Default";
	ru.stablex.TweenSprite.call(this);
	this.set_id("__widget__" + Std.string(ru.stablex.ui.UIBuilder._nextId++));
};
$hxClasses["ru.stablex.ui.widgets.Widget"] = ru.stablex.ui.widgets.Widget;
ru.stablex.ui.widgets.Widget.__name__ = ["ru","stablex","ui","widgets","Widget"];
ru.stablex.ui.widgets.Widget.__super__ = ru.stablex.TweenSprite;
ru.stablex.ui.widgets.Widget.prototype = $extend(ru.stablex.TweenSprite.prototype,{
	_onInitialize: function() {
		this.onInitialize();
		this.initialized = true;
	}
	,onInitialize: function() {
	}
	,_onCreate: function() {
		this.onCreate();
		this.refresh();
		this.clearEvent("widgetInitialResize");
		this.created = true;
		this.dispatchEvent(new ru.stablex.ui.events.WidgetEvent("widgetCreate"));
	}
	,onCreate: function() {
	}
	,free: function(recursive) {
		if(recursive == null) recursive = true;
		this.destroyed = true;
		this.dispatchEvent(new ru.stablex.ui.events.WidgetEvent("widgetFree"));
		ru.stablex.TweenSprite.prototype.free.call(this,recursive);
		ru.stablex.ui.UIBuilder._objects.remove(this.id);
	}
	,applySkin: function() {
		if(this.initialized && this.skin != null) this.skin.apply(this);
	}
	,applyLayout: function() {
		if(this.layout != null) this.layout.arrangeChildren(this);
	}
	,refresh: function() {
		if(this.skin != null && !this._skinQueued) {
			ru.stablex.ui.UIBuilder._skinQueue.add(this);
			this._skinQueued = true;
		}
		this.applyLayout();
	}
	,_newParent: function(newParent) {
		if(newParent != this.parent) this.onNewParent(newParent);
	}
	,onNewParent: function(newParent) {
		if(this._widthUsePercent || this._heightUsePercent) this.resize(this._widthUsePercent?newParent.get_contentWidth() * this._widthPercent / 100:this._width,this._heightUsePercent?newParent.get_contentHeight() * this._heightPercent / 100:this._height,true);
		var _g = this._xUse;
		switch(_g) {
		case 3:
			this.set_x(newParent._width - this._right - this._width);
			break;
		case 4:
			this.set_x(newParent._width - newParent._width * this._rightPercent / 100 - this._width);
			break;
		case 2:
			this.set_x(newParent._width * this._leftPercent / 100);
			break;
		}
		var _g1 = this._yUse;
		switch(_g1) {
		case 7:
			this.set_y(newParent._height - this._bottom - this._height);
			break;
		case 8:
			this.set_y(newParent._height - newParent._height * this._bottomPercent / 100 - this._height);
			break;
		case 6:
			this.set_y(newParent._height * this._topPercent / 100);
			break;
		}
		ru.stablex.ui.UIBuilder.dispatcher.dispatchEvent(new ru.stablex.ui.events.WidgetEvent("widgetAdded",this));
	}
	,_onParentResize: function(e) {
		var parent;
		parent = js.Boot.__cast(e.currentTarget , ru.stablex.ui.widgets.Widget);
		if(this._widthUsePercent || this._heightUsePercent) this.resize(this._widthUsePercent?parent.get_contentWidth() * this._widthPercent / 100:this._width,this._heightUsePercent?parent.get_contentHeight() * this._heightPercent / 100:this._height,true);
		var _g = this._xUse;
		switch(_g) {
		case 3:
			this.set_x(parent._width - this._right - this._width);
			break;
		case 4:
			this.set_x(parent._width - parent._width * this._rightPercent / 100 - this.get_w());
			break;
		case 2:
			this.set_x(parent._width * this._leftPercent / 100);
			break;
		}
		var _g1 = this._yUse;
		switch(_g1) {
		case 7:
			this.set_y(parent._height - this._bottom - this._height);
			break;
		case 8:
			this.set_y(parent._height - parent._height * this._bottomPercent / 100 - this._height);
			break;
		case 6:
			this.set_y(parent._height * this._topPercent / 100);
			break;
		}
	}
	,resize: function(width,height,keepPercentage) {
		if(keepPercentage == null) keepPercentage = false;
		if(this._width == width && this._height == height) return;
		if(!keepPercentage) {
			this._silentResize = true;
			this.set_w(width);
			this.set_h(height);
			this._silentResize = false;
		} else {
			this._width = width;
			this._height = height;
		}
		this._onResize();
	}
	,_onResize: function() {
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) {
			var _g = this._xUse;
			switch(_g) {
			case 3:
				this.set_x((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width - this._right - this._width);
				break;
			case 4:
				this.set_x((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width - (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width * this._rightPercent / 100 - this._width);
				break;
			}
			var _g1 = this._yUse;
			switch(_g1) {
			case 7:
				this.set_y((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height - this._bottom - this._height);
				break;
			case 8:
				this.set_y((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height - (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height * this._bottomPercent / 100 - this._height);
				break;
			}
		}
		if(!this.overflow) this.set_scrollRect(new openfl.geom.Rectangle(0,0,this._width,this._height));
		if(!this._resizing) {
			this._resizing = true;
			if(this.created) this.onResize();
			if(this.initialized) this.refresh();
			this._resizing = false;
		}
		this.dispatchEvent(new ru.stablex.ui.events.WidgetEvent(this.created?"widgetResize":"widgetInitialResize"));
	}
	,onResize: function() {
	}
	,addChild: function(child) {
		if(child.parent != null) child.parent.removeChild(child);
		if(js.Boot.__instanceof(child,ru.stablex.ui.widgets.Widget)) {
			(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget))._newParent(this);
			this.addUniqueListener("widgetResize",($_=(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)),$bind($_,$_._onParentResize)));
			this.addUniqueListener("widgetInitialResize",($_=(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)),$bind($_,$_._onParentResize)));
		}
		return ru.stablex.TweenSprite.prototype.addChild.call(this,child);
	}
	,addChildAt: function(child,idx) {
		if(child.parent != null) child.parent.removeChild(child);
		if(js.Boot.__instanceof(child,ru.stablex.ui.widgets.Widget)) {
			(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget))._newParent(this);
			this.addUniqueListener("widgetResize",($_=(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)),$bind($_,$_._onParentResize)));
			this.addUniqueListener("widgetInitialResize",($_=(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)),$bind($_,$_._onParentResize)));
		}
		return ru.stablex.TweenSprite.prototype.addChildAt.call(this,child,idx);
	}
	,removeChild: function(child) {
		if(js.Boot.__instanceof(child,ru.stablex.ui.widgets.Widget)) {
			this.removeEventListener("widgetResize",($_=(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)),$bind($_,$_._onParentResize)));
			this.removeEventListener("widgetInitialResize",($_=(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)),$bind($_,$_._onParentResize)));
			ru.stablex.ui.UIBuilder.dispatcher.dispatchEvent(new ru.stablex.ui.events.WidgetEvent("widgetRemoved",child));
		}
		return ru.stablex.TweenSprite.prototype.removeChild.call(this,child);
	}
	,removeChildAt: function(idx) {
		var child = this.getChildAt(idx);
		if(js.Boot.__instanceof(child,ru.stablex.ui.widgets.Widget)) {
			this.removeEventListener("widgetResize",($_=(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)),$bind($_,$_._onParentResize)));
			this.removeEventListener("widgetInitialResize",($_=(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)),$bind($_,$_._onParentResize)));
			ru.stablex.ui.UIBuilder.dispatcher.dispatchEvent(new ru.stablex.ui.events.WidgetEvent("widgetRemoved",child));
		}
		return ru.stablex.TweenSprite.prototype.removeChildAt.call(this,idx);
	}
	,getChildAs: function(name,cls) {
		var w = this._findChildWidget(name);
		if(js.Boot.__instanceof(w,cls)) return w; else return null;
	}
	,getChild: function(name) {
		return this._findChildWidget(name);
	}
	,_findChildWidget: function(name) {
		var child = null;
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			child = this.getChildAt(i);
			if(child.get_name() == name) break;
			if(js.Boot.__instanceof(child,ru.stablex.ui.widgets.Widget)) {
				child = (js.Boot.__cast(child , ru.stablex.ui.widgets.Widget))._findChildWidget(name);
				if(child != null) break;
			}
			child = null;
		}
		if(js.Boot.__instanceof(child,ru.stablex.ui.widgets.Widget)) return js.Boot.__cast(child , ru.stablex.ui.widgets.Widget); else return null;
	}
	,getParent: function(name) {
		var p;
		if(js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)) p = js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget); else p = null;
		while(p != null && p.get_name() != name) if(js.Boot.__instanceof(p.parent,ru.stablex.ui.widgets.Widget)) p = js.Boot.__cast(p.parent , ru.stablex.ui.widgets.Widget); else p = null;
		return p;
	}
	,getParentAs: function(name,cls) {
		var p;
		if(js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)) p = js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget); else p = null;
		while(p != null && p.get_name() != name) if(js.Boot.__instanceof(p.parent,ru.stablex.ui.widgets.Widget)) p = js.Boot.__cast(p.parent , ru.stablex.ui.widgets.Widget); else p = null;
		if(js.Boot.__instanceof(p,cls)) return p; else return null;
	}
	,getNearestParent: function(cls) {
		var p = this.parent;
		while(p != null) {
			if(js.Boot.__instanceof(p,cls)) return p;
			p = p.parent;
		}
		return null;
	}
	,'as': function(cls) {
		if(js.Boot.__instanceof(this,cls)) return this; else return null;
	}
	,set_overflow: function(o) {
		if(!o) this.set_scrollRect(new openfl.geom.Rectangle(0,0,this._width,this._height)); else this.set_scrollRect(null);
		return this.overflow = o;
	}
	,set_skinName: function(sn) {
		this.skin = (ru.stablex.ui.UIBuilder.skins.get(sn))();
		if(this.created) {
			if(this.skin != null && !this._skinQueued) {
				ru.stablex.ui.UIBuilder._skinQueue.add(this);
				this._skinQueued = true;
			}
		}
		return this.skinName = sn;
	}
	,get_wparent: function() {
		if(js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)) return js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget); else return null;
	}
	,set_left: function(l) {
		this._xUse = 1;
		this.set_x(l);
		return this._left = l;
	}
	,get_left: function() {
		return this.get_x();
	}
	,set_right: function(r) {
		this._xUse = 3;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) this.set_x((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width - r - this.get_w());
		return this._right = r;
	}
	,get_right: function() {
		if(this._xUse == 3) return this._right;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) return (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width - this.get_x() - this.get_w();
		return 0;
	}
	,set_leftPt: function(lp) {
		this._xUse = 2;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) this.set_x((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width * lp / 100);
		return this._leftPercent = lp;
	}
	,get_leftPt: function() {
		if(this._xUse == 2) return this._leftPercent;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null && (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width != 0) return this.get_x() / (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width * 100;
		return 0;
	}
	,set_rightPt: function(rp) {
		this._xUse = 4;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) this.set_x((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width - (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width * rp / 100 - this.get_w());
		return this._rightPercent = rp;
	}
	,get_rightPt: function() {
		if(this._xUse == 4) return this._rightPercent;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null && (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width != 0) return ((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width - this.get_x() - this._width) / (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width * 100;
		return 0;
	}
	,set_top: function(t) {
		this._yUse = 5;
		this.set_y(t);
		return this._top = t;
	}
	,get_top: function() {
		return this.get_y();
	}
	,set_bottom: function(b) {
		this._yUse = 7;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) this.set_y((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height - b - this.get_h());
		return this._bottom = b;
	}
	,get_bottom: function() {
		if(this._yUse == 7) return this._bottom;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) return (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height - this.get_y() - this.get_h();
		return 0;
	}
	,set_topPt: function(tp) {
		this._yUse = 6;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) this.set_y((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height * tp / 100);
		return this._topPercent = tp;
	}
	,get_topPt: function() {
		if(this._yUse == 6) return this._topPercent;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null && (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height != 0) return this.get_y() / (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height * 100;
		return 0;
	}
	,set_bottomPt: function(bp) {
		this._yUse = 8;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) this.set_y((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height - (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height * bp / 100 - this.get_h());
		return this._bottomPercent = bp;
	}
	,get_bottomPt: function() {
		if(this._yUse == 8) return this._bottomPercent;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null && (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height != 0) return ((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height - this.get_y() - this._height) / (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height * 100;
		return 0;
	}
	,set_w: function(w) {
		this._width = w;
		this._widthUsePercent = false;
		if(!this._silentResize) this._onResize();
		return w;
	}
	,get_w: function() {
		return this._width;
	}
	,set_h: function(h) {
		this._height = h;
		this._heightUsePercent = false;
		if(!this._silentResize) this._onResize();
		return h;
	}
	,get_h: function() {
		return this._height;
	}
	,get_contentHeight: function() {
		return this.get_h();
	}
	,get_contentWidth: function() {
		return this.get_w();
	}
	,set_widthPt: function(wp) {
		this._widthPercent = wp;
		this._widthUsePercent = true;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) {
			this._width = (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null).get_contentWidth() * wp / 100;
			if(!this._silentResize) this._onResize();
		}
		return wp;
	}
	,get_widthPt: function() {
		if(this._widthUsePercent) return this._widthPercent; else if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null && (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width != 0) return this.get_w() / (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._width * 100; else return 0;
	}
	,set_heightPt: function(hp) {
		this._heightPercent = hp;
		this._heightUsePercent = true;
		if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null) {
			this._height = (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null).get_contentHeight() * hp / 100;
			if(!this._silentResize) this._onResize();
		}
		return hp;
	}
	,get_heightPt: function() {
		if(this._heightUsePercent) return this._heightPercent; else if((js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null) != null && (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height != 0) return this._height / (js.Boot.__instanceof(this.parent,ru.stablex.ui.widgets.Widget)?js.Boot.__cast(this.parent , ru.stablex.ui.widgets.Widget):null)._height * 100; else return 0;
	}
	,set_id: function(id) {
		if(id == null) throw "Widget id cannot be null";
		if(this.id != null) ru.stablex.ui.UIBuilder._objects.remove(this.id);
		this.id = id;
		if(ru.stablex.ui.UIBuilder._objects.exists(this.id)) throw "Widget id \"" + this.id + "\" is already used"; else ru.stablex.ui.UIBuilder._objects.set(this.id,this);
		return id;
	}
	,set_tip: function(tip) {
		if(this.tip != null) this.tip.free();
		tip.bindTo(this);
		return this.tip = tip;
	}
	,__class__: ru.stablex.ui.widgets.Widget
	,__properties__: $extend(ru.stablex.TweenSprite.prototype.__properties__,{set_tip:"set_tip",set_overflow:"set_overflow",set_skinName:"set_skinName",set_bottomPt:"set_bottomPt",get_bottomPt:"get_bottomPt",set_bottom:"set_bottom",get_bottom:"get_bottom",set_topPt:"set_topPt",get_topPt:"get_topPt",set_top:"set_top",get_top:"get_top",get_wparent:"get_wparent",set_rightPt:"set_rightPt",get_rightPt:"get_rightPt",set_right:"set_right",get_right:"get_right",set_leftPt:"set_leftPt",get_leftPt:"get_leftPt",set_left:"set_left",get_left:"get_left",set_id:"set_id",set_heightPt:"set_heightPt",get_heightPt:"get_heightPt",get_contentHeight:"get_contentHeight",set_h:"set_h",get_h:"get_h",set_widthPt:"set_widthPt",get_widthPt:"get_widthPt",get_contentWidth:"get_contentWidth",set_w:"set_w",get_w:"get_w"})
});
ru.stablex.ui.widgets.Box = function() {
	this.lastUnifyCount = 0;
	this.lastUnifyChildren = -1;
	this.lastUnifyFrame = -1;
	this.intPositions = false;
	this.unifyChildren = false;
	this.autoHeight = true;
	this.autoWidth = true;
	this.align = "center,middle";
	this.childPadding = 0;
	this.paddingBottom = 0;
	this.paddingTop = 0;
	this.paddingRight = 0;
	this.paddingLeft = 0;
	this.vertical = true;
	ru.stablex.ui.widgets.Widget.call(this);
};
$hxClasses["ru.stablex.ui.widgets.Box"] = ru.stablex.ui.widgets.Box;
ru.stablex.ui.widgets.Box.__name__ = ["ru","stablex","ui","widgets","Box"];
ru.stablex.ui.widgets.Box.__super__ = ru.stablex.ui.widgets.Widget;
ru.stablex.ui.widgets.Box.prototype = $extend(ru.stablex.ui.widgets.Widget.prototype,{
	_objWidth: function(obj) {
		if(js.Boot.__instanceof(obj,ru.stablex.ui.widgets.Widget)) return (js.Boot.__cast(obj , ru.stablex.ui.widgets.Widget)).get_w(); else if(js.Boot.__instanceof(obj,openfl.text.TextField)) return (js.Boot.__cast(obj , openfl.text.TextField)).get_textWidth() + 4; else return obj.get_width();
	}
	,_objHeight: function(obj) {
		return ru.stablex.ui.misc.SizeTools.height(obj);
	}
	,_setObjX: function(obj,x) {
		obj.set_x(js.Boot.__instanceof(obj,openfl.text.TextField)?obj.set_x(x + 2):x);
		if(this.intPositions) obj.set_x(Std["int"](obj.get_x()));
	}
	,_setObjY: function(obj,y) {
		obj.set_y(js.Boot.__instanceof(obj,openfl.text.TextField)?obj.set_y(y + 2):y);
		if(this.intPositions) obj.set_y(Std["int"](obj.get_y()));
	}
	,refresh: function() {
		if(this.autoWidth || this.autoHeight) {
			var w;
			if(this.autoWidth) w = this._calcWidth(); else w = this._width;
			var h;
			if(this.autoHeight) h = this._calcHeight(); else h = this._height;
			if(this._width != w || this._height != h) {
				this._width = w;
				this._height = h;
				this.dispatchEvent(new ru.stablex.ui.events.WidgetEvent("widgetResize"));
			}
		}
		ru.stablex.ui.widgets.Widget.prototype.refresh.call(this);
		if(this.layout == null) this.alignElements();
	}
	,_calcWidth: function() {
		if(this.vertical) {
			var w = 0;
			var child;
			var childW = 0;
			var _g1 = 0;
			var _g = this.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				child = this.getChildAt(i);
				child = this.getChildAt(i);
				if(child.get_visible()) {
					childW = this._objWidth(child);
					if(childW > w) w = childW;
				}
			}
			return w + this.paddingLeft + this.paddingRight;
		} else {
			var w1 = this.paddingLeft + this.paddingRight;
			var child1;
			var visibleChildren = 0;
			var _g11 = 0;
			var _g2 = this.get_numChildren();
			while(_g11 < _g2) {
				var i1 = _g11++;
				child1 = this.getChildAt(i1);
				if(child1.get_visible()) {
					w1 += this._objWidth(child1);
					visibleChildren++;
				}
			}
			return w1 + (visibleChildren - 1) * this.childPadding;
		}
	}
	,_calcHeight: function() {
		if(this.vertical) {
			var h = this.paddingTop + this.paddingBottom;
			var child;
			var visibleChildren = 0;
			var _g1 = 0;
			var _g = this.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				child = this.getChildAt(i);
				if(child.get_visible()) {
					h += this._objHeight(child);
					visibleChildren++;
				}
			}
			return h + (visibleChildren - 1) * this.childPadding;
		} else {
			var h1 = 0;
			var childH = 0;
			var child1;
			var _g11 = 0;
			var _g2 = this.get_numChildren();
			while(_g11 < _g2) {
				var i1 = _g11++;
				child1 = this.getChildAt(i1);
				if(child1.get_visible()) {
					childH = this._objHeight(child1);
					if(childH > h1) h1 = childH;
				}
			}
			return h1 + this.paddingTop + this.paddingBottom;
		}
	}
	,alignElements: function() {
		if(this.unifyChildren) this._unifyChildren();
		if(this.get_numChildren() == 0) return;
		var alignments = this.align.split(",");
		var _g = 0;
		while(_g < alignments.length) {
			var align = alignments[_g];
			++_g;
			switch(align) {
			case "top":
				this._vAlignTop();
				break;
			case "middle":
				this._vAlignMiddle();
				break;
			case "bottom":
				this._vAlignBottom();
				break;
			case "left":
				this._hAlignLeft();
				break;
			case "center":
				this._hAlignCenter();
				break;
			case "right":
				this._hAlignRight();
				break;
			}
		}
	}
	,_unifyChildren: function() {
		if(ru.stablex.ui.UIBuilder.frameTime == this.lastUnifyFrame && this.get_numChildren() == this.lastUnifyChildren && this.lastUnifyCount > 1) return;
		if(this.lastUnifyFrame != ru.stablex.ui.UIBuilder.frameTime || this.get_numChildren() != this.lastUnifyChildren) this.lastUnifyCount = 1; else this.lastUnifyCount++;
		this.lastUnifyFrame = ru.stablex.ui.UIBuilder.frameTime;
		this.lastUnifyChildren = this.get_numChildren();
		var visibleChildren = 0;
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.getChildAt(i).get_visible()) visibleChildren++;
		}
		var child;
		if(this.vertical) {
			var childWidth = this._width - this.paddingLeft - this.paddingRight;
			var childHeight = (this._height - this.paddingTop - this.paddingBottom - this.childPadding * (visibleChildren - 1)) / visibleChildren;
			var _g11 = 0;
			var _g2 = this.get_numChildren();
			while(_g11 < _g2) {
				var i1 = _g11++;
				child = this.getChildAt(i1);
				if(js.Boot.__instanceof(child,ru.stablex.ui.widgets.Widget)) {
					(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)).removeEventListener("widgetResize",$bind(this,this._onChildResize));
					(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)).resize(childWidth,childHeight);
					(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)).addUniqueListener("widgetResize",$bind(this,this._onChildResize));
				}
			}
		} else {
			var childWidth1 = (this._width - this.paddingLeft - this.paddingRight - this.childPadding * (visibleChildren - 1)) / visibleChildren;
			var childHeight1 = this._height - this.paddingTop - this.paddingBottom;
			var _g12 = 0;
			var _g3 = this.get_numChildren();
			while(_g12 < _g3) {
				var i2 = _g12++;
				child = this.getChildAt(i2);
				if(js.Boot.__instanceof(child,ru.stablex.ui.widgets.Widget)) {
					(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)).removeEventListener("widgetResize",$bind(this,this._onChildResize));
					(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)).resize(childWidth1,childHeight1);
					(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)).addUniqueListener("widgetResize",$bind(this,this._onChildResize));
				}
			}
		}
	}
	,_vAlignTop: function() {
		if(this.vertical) {
			var lastY = this.paddingTop;
			var child;
			var _g1 = 0;
			var _g = this.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				child = this.getChildAt(i);
				if(!child.get_visible()) continue;
				this._setObjY(child,lastY);
				lastY += this._objHeight(child) + this.childPadding;
			}
		} else {
			var _g11 = 0;
			var _g2 = this.get_numChildren();
			while(_g11 < _g2) {
				var i1 = _g11++;
				this._setObjY(this.getChildAt(i1),this.paddingTop);
			}
		}
	}
	,_vAlignMiddle: function() {
		if(this.vertical) {
			var height = 0;
			var child;
			var visibleChildren = 0;
			var _g1 = 0;
			var _g = this.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				child = this.getChildAt(i);
				if(!child.get_visible()) continue;
				visibleChildren++;
				height += this._objHeight(child);
			}
			height += (visibleChildren - 1) * this.childPadding;
			var lastY = (this.get_h() - height) / 2;
			var _g11 = 0;
			var _g2 = this.get_numChildren();
			while(_g11 < _g2) {
				var i1 = _g11++;
				child = this.getChildAt(i1);
				if(!child.get_visible()) continue;
				this._setObjY(child,lastY);
				lastY += this._objHeight(child) + this.childPadding;
			}
		} else {
			var child1;
			var _g12 = 0;
			var _g3 = this.get_numChildren();
			while(_g12 < _g3) {
				var i2 = _g12++;
				child1 = this.getChildAt(i2);
				this._setObjY(child1,(this.get_h() - this._objHeight(child1)) / 2);
			}
		}
	}
	,_vAlignBottom: function() {
		if(this.vertical) {
			var lastY = this.get_h() - this.paddingBottom;
			var child;
			var _g1 = 0;
			var _g = this.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				child = this.getChildAt(this.get_numChildren() - 1 - i);
				if(!child.get_visible()) continue;
				this._setObjY(child,lastY - this._objHeight(child));
				lastY = child.get_y() - this.childPadding - (js.Boot.__instanceof(child,openfl.text.TextField)?2:0);
			}
		} else {
			var child1;
			var _g11 = 0;
			var _g2 = this.get_numChildren();
			while(_g11 < _g2) {
				var i1 = _g11++;
				child1 = this.getChildAt(i1);
				this._setObjY(child1,this.get_h() - this.paddingBottom - this._objHeight(child1));
			}
		}
	}
	,_hAlignLeft: function() {
		if(this.vertical) {
			var _g1 = 0;
			var _g = this.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				this._setObjX(this.getChildAt(i),this.paddingLeft);
			}
		} else {
			var lastX = this.paddingLeft;
			var child;
			var _g11 = 0;
			var _g2 = this.get_numChildren();
			while(_g11 < _g2) {
				var i1 = _g11++;
				child = this.getChildAt(i1);
				if(!child.get_visible()) continue;
				this._setObjX(child,lastX);
				lastX += this._objWidth(child) + this.childPadding;
			}
		}
	}
	,_hAlignRight: function() {
		if(this.vertical) {
			var child;
			var _g1 = 0;
			var _g = this.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				child = this.getChildAt(i);
				this._setObjX(child,this.get_w() - this.paddingRight - this._objWidth(child));
			}
		} else {
			var lastX = this.get_w() - this.paddingRight;
			var child1;
			var _g11 = 0;
			var _g2 = this.get_numChildren();
			while(_g11 < _g2) {
				var i1 = _g11++;
				child1 = this.getChildAt(this.get_numChildren() - 1 - i1);
				if(!child1.get_visible()) continue;
				this._setObjX(child1,lastX - this._objWidth(child1));
				lastX = child1.get_x() - (js.Boot.__instanceof(child1,openfl.text.TextField)?2:0) - this.childPadding;
			}
		}
	}
	,_hAlignCenter: function() {
		if(this.vertical) {
			var child;
			var _g1 = 0;
			var _g = this.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				child = this.getChildAt(i);
				this._setObjX(child,(this.get_w() - this._objWidth(child)) / 2);
			}
		} else {
			var child1;
			var width = 0;
			var visibleChildren = 0;
			var _g11 = 0;
			var _g2 = this.get_numChildren();
			while(_g11 < _g2) {
				var i1 = _g11++;
				child1 = this.getChildAt(i1);
				if(!child1.get_visible()) continue;
				visibleChildren++;
				width += this._objWidth(child1);
			}
			width += (visibleChildren - 1) * this.childPadding;
			var lastX = (this.get_w() - width) / 2;
			var _g12 = 0;
			var _g3 = this.get_numChildren();
			while(_g12 < _g3) {
				var i2 = _g12++;
				child1 = this.getChildAt(i2);
				if(!child1.get_visible()) continue;
				this._setObjX(child1,lastX);
				lastX += this._objWidth(child1) + this.childPadding;
			}
		}
	}
	,addChild: function(child) {
		ru.stablex.ui.widgets.Widget.prototype.addChild.call(this,child);
		if(js.Boot.__instanceof(child,ru.stablex.ui.widgets.Widget)) {
			(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)).addUniqueListener("widgetResize",$bind(this,this._onChildResize));
			this._onChildResize();
		}
		return child;
	}
	,addChildAt: function(child,idx) {
		ru.stablex.ui.widgets.Widget.prototype.addChildAt.call(this,child,idx);
		if(js.Boot.__instanceof(child,ru.stablex.ui.widgets.Widget)) {
			(js.Boot.__cast(child , ru.stablex.ui.widgets.Widget)).addUniqueListener("widgetResize",$bind(this,this._onChildResize));
			this._onChildResize();
		}
		return child;
	}
	,removeChild: function(child) {
		ru.stablex.ui.widgets.Widget.prototype.removeChild.call(this,child);
		child.removeEventListener("widgetResize",$bind(this,this._onChildResize));
		if(!this.destroyed) this._onChildResize();
		return child;
	}
	,removeChildAt: function(idx) {
		var child = ru.stablex.ui.widgets.Widget.prototype.removeChildAt.call(this,idx);
		child.removeEventListener("widgetResize",$bind(this,this._onChildResize));
		if(!this.destroyed) this._onChildResize();
		return child;
	}
	,_onChildResize: function(e) {
		if(this.created) {
			if(this.autoWidth || this.autoHeight) {
				if(e != null) {
					var child;
					if(js.Boot.__instanceof(e.currentTarget,ru.stablex.ui.widgets.Widget)) child = js.Boot.__cast(e.currentTarget , ru.stablex.ui.widgets.Widget); else child = null;
					if(child != null && child.get_visible() != false && !(this.autoWidth && child._widthUsePercent) && !(this.autoHeight && child._heightUsePercent)) this.refresh();
				} else this.refresh();
			} else this.alignElements();
		}
	}
	,get_contentHeight: function() {
		return this.get_h() - this.paddingTop - this.paddingBottom;
	}
	,get_contentWidth: function() {
		return this.get_w() - this.paddingLeft - this.paddingRight;
	}
	,set_autoSize: function($as) {
		return this.autoWidth = this.autoHeight = $as;
	}
	,set_w: function(w) {
		this.autoWidth = false;
		return ru.stablex.ui.widgets.Widget.prototype.set_w.call(this,w);
	}
	,set_widthPt: function(wp) {
		this.autoWidth = false;
		return ru.stablex.ui.widgets.Widget.prototype.set_widthPt.call(this,wp);
	}
	,set_heightPt: function(hp) {
		this.autoHeight = false;
		return ru.stablex.ui.widgets.Widget.prototype.set_heightPt.call(this,hp);
	}
	,set_h: function(h) {
		this.autoHeight = false;
		return ru.stablex.ui.widgets.Widget.prototype.set_h.call(this,h);
	}
	,set_padding: function(p) {
		this.paddingTop = this.paddingBottom = this.paddingRight = this.paddingLeft = p;
		return p;
	}
	,__class__: ru.stablex.ui.widgets.Box
	,__properties__: $extend(ru.stablex.ui.widgets.Widget.prototype.__properties__,{set_autoSize:"set_autoSize",set_padding:"set_padding"})
});
ru.stablex.ui.widgets.Floating = function() {
	this.scaleContent = 1;
	this.renderTo = null;
	this.shown = false;
	ru.stablex.ui.widgets.Box.call(this);
	this.set_visible(false);
};
$hxClasses["ru.stablex.ui.widgets.Floating"] = ru.stablex.ui.widgets.Floating;
ru.stablex.ui.widgets.Floating.__name__ = ["ru","stablex","ui","widgets","Floating"];
ru.stablex.ui.widgets.Floating.__super__ = ru.stablex.ui.widgets.Box;
ru.stablex.ui.widgets.Floating.prototype = $extend(ru.stablex.ui.widgets.Box.prototype,{
	show: function() {
		if(this.renderTo == null) {
			this.set_visible(this.shown = true);
			if(this._widthUsePercent || this._heightUsePercent || this._xUse == 2 || this._xUse == 4 || this._xUse == 3 || this._yUse == 6 || this._yUse == 8 || this._yUse == 7) {
				openfl.Lib.current.stage.removeEventListener(openfl.events.Event.RESIZE,$bind(this,this._onStageResize));
				openfl.Lib.current.stage.addEventListener(openfl.events.Event.RESIZE,$bind(this,this._onStageResize));
			}
			if(this.parent == openfl.Lib.current.stage) openfl.Lib.current.stage.setChildIndex(this,openfl.Lib.current.stage.get_numChildren() - 1); else {
				if(this.parent != null) this.parent.removeChild(this);
				openfl.Lib.current.stage.addChild(this);
			}
			this._onStageResize();
		} else {
			var to = ru.stablex.ui.UIBuilder._objects.get(this.renderTo);
			if(to != null) {
				this.set_visible(this.shown = true);
				if(this.parent == to) to.setChildIndex(this,to.get_numChildren() - 1); else {
					if(this.parent != null) this.parent.removeChild(this);
					to.addChild(this);
				}
			}
		}
	}
	,hide: function() {
		openfl.Lib.current.stage.removeEventListener(openfl.events.Event.RESIZE,$bind(this,this._onStageResize));
		if(this.parent != null) this.parent.removeChild(this);
		this.set_visible(this.shown = false);
	}
	,_usingParentSize: function() {
		return this._widthUsePercent || this._heightUsePercent || this._xUse == 2 || this._xUse == 4 || this._xUse == 3 || this._yUse == 6 || this._yUse == 8 || this._yUse == 7;
	}
	,_onStageResize: function(e) {
		if(this.parent != openfl.Lib.current.stage) return;
		var scale;
		if(this.scaleContent == 0) scale = 0.001; else scale = this.scaleContent;
		var width = openfl.Lib.current.stage.stageWidth / scale;
		var height = openfl.Lib.current.stage.stageHeight / scale;
		if(this._widthUsePercent && this._heightUsePercent) this.resize(width * this._widthPercent / 100,height * this._heightPercent / 100,true); else if(this._widthUsePercent) this.resize(width * this._widthPercent / 100,this._height,true); else if(this._heightUsePercent) this.resize(this._width,height * this._heightPercent / 100,true);
		var _g = this._xUse;
		switch(_g) {
		case 3:
			this.set_x(width - this._right - this._width);
			break;
		case 4:
			this.set_x(width - width * this._rightPercent / 100 - this.get_w());
			break;
		case 2:
			this.set_x(width * this._leftPercent / 100);
			break;
		}
		var _g1 = this._yUse;
		switch(_g1) {
		case 7:
			this.set_y(height - this._bottom - this._height);
			break;
		case 8:
			this.set_y(height - height * this._bottomPercent / 100 - this._height);
			break;
		case 6:
			this.set_y(height * this._topPercent / 100);
			break;
		}
	}
	,getRenderTarget: function() {
		if(this.renderTo == null) return openfl.Lib.current.stage; else return ru.stablex.ui.UIBuilder._objects.get(this.renderTo);
	}
	,free: function(recursive) {
		if(recursive == null) recursive = true;
		openfl.Lib.current.stage.removeEventListener(openfl.events.Event.RESIZE,$bind(this,this._onStageResize));
		ru.stablex.ui.widgets.Box.prototype.free.call(this,recursive);
	}
	,set_scaleContent: function(scaleContent) {
		this.set_scaleX(this.set_scaleY(scaleContent));
		this.scaleContent = scaleContent;
		if(this.renderTo == null && this.created && this.parent != null) this._onStageResize();
		return scaleContent;
	}
	,__class__: ru.stablex.ui.widgets.Floating
	,__properties__: $extend(ru.stablex.ui.widgets.Box.prototype.__properties__,{set_scaleContent:"set_scaleContent"})
});
ru.stablex.ui.widgets.Text = function() {
	this.highlighted = false;
	ru.stablex.ui.widgets.Box.call(this);
	this.label = js.Boot.__cast(this.addChild(new openfl.text.TextField()) , openfl.text.TextField);
	this.label.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
	this.label.multiline = true;
	this.format = this.label.get_defaultTextFormat();
	this.align = "top,left";
};
$hxClasses["ru.stablex.ui.widgets.Text"] = ru.stablex.ui.widgets.Text;
ru.stablex.ui.widgets.Text.__name__ = ["ru","stablex","ui","widgets","Text"];
ru.stablex.ui.widgets.Text.__super__ = ru.stablex.ui.widgets.Box;
ru.stablex.ui.widgets.Text.prototype = $extend(ru.stablex.ui.widgets.Box.prototype,{
	get_highlightFormat: function() {
		if(this._hightlightFormat == null) this._hightlightFormat = new openfl.text.TextFormat(this.format.font,this.format.size,this.format.color,this.format.bold,this.format.italic,this.format.underline,this.format.url,this.format.target,this.format.align,this.format.leftMargin | 0,this.format.rightMargin | 0,this.format.indent | 0,this.format.leading | 0);
		return this._hightlightFormat;
	}
	,set_highlightFormat: function(hl) {
		return this._hightlightFormat = hl;
	}
	,refresh: function() {
		if(this.highlighted) {
			this.label.set_defaultTextFormat(this.get_highlightFormat());
			if(this.label.get_text().length > 0) this.label.setTextFormat(this.get_highlightFormat());
		} else {
			this.label.set_defaultTextFormat(this.format);
			if(this.label.get_text().length > 0) this.label.setTextFormat(this.format);
		}
		if(!this.autoWidth && this.label.get_wordWrap()) this.label.set_width(this._width);
		ru.stablex.ui.widgets.Box.prototype.refresh.call(this);
	}
	,highlight: function() {
		this.highlighted = true;
		this.refresh();
	}
	,unhighlight: function() {
		this.highlighted = false;
		this.refresh();
	}
	,get_text: function() {
		return this.label.get_text();
	}
	,set_text: function(txt) {
		this.label.set_text(txt);
		if(this.autoWidth || this.autoHeight) this.refresh(); else this.alignElements();
		return txt;
	}
	,__class__: ru.stablex.ui.widgets.Text
	,__properties__: $extend(ru.stablex.ui.widgets.Box.prototype.__properties__,{set_text:"set_text",get_text:"get_text",set_highlightFormat:"set_highlightFormat",get_highlightFormat:"get_highlightFormat"})
});
ru.stablex.ui.widgets.Tip = function() {
	ru.stablex.ui.widgets.Floating.call(this);
	this.label = ru.stablex.ui.UIBuilder.create(ru.stablex.ui.widgets.Text);
	this.addChild(this.label);
	this.mouseEnabled = false;
	this.mouseChildren = false;
};
$hxClasses["ru.stablex.ui.widgets.Tip"] = ru.stablex.ui.widgets.Tip;
ru.stablex.ui.widgets.Tip.__name__ = ["ru","stablex","ui","widgets","Tip"];
ru.stablex.ui.widgets.Tip.__super__ = ru.stablex.ui.widgets.Floating;
ru.stablex.ui.widgets.Tip.prototype = $extend(ru.stablex.ui.widgets.Floating.prototype,{
	get_text: function() {
		return this.label.get_text();
	}
	,set_text: function(s) {
		return this.label.set_text(s);
	}
	,bindTo: function(w) {
		this._removeTargetListeners();
		this.target = w;
		this.target.addUniqueListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.showTooltip));
		this.target.addUniqueListener("widgetFree",$bind(this,this.freeTooltip));
	}
	,showTooltip: function(e) {
		this.target.addUniqueListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.hideTooltip));
		openfl.Lib.current.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.moveTooltip));
		openfl.Lib.current.stage.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.moveTooltip));
		this.renderTo = null;
		this.refresh();
		this.set_left(openfl.Lib.current.get_mouseX() + 10 + this.get_w() <= openfl.Lib.current.stage.stageWidth?openfl.Lib.current.get_mouseX() + 10:openfl.Lib.current.stage.stageWidth - this.get_w());
		this.set_top(openfl.Lib.current.get_mouseY() + 10 + this.get_h() <= openfl.Lib.current.stage.stageHeight?openfl.Lib.current.get_mouseY() + 10:openfl.Lib.current.get_mouseY() - 10 - this.get_h());
		this.show();
	}
	,moveTooltip: function(e) {
		this.set_left(openfl.Lib.current.get_mouseX() + 10 + this.get_w() <= openfl.Lib.current.stage.stageWidth?openfl.Lib.current.get_mouseX() + 10:openfl.Lib.current.stage.stageWidth - this.get_w());
		this.set_top(openfl.Lib.current.get_mouseY() + 10 + this.get_h() <= openfl.Lib.current.stage.stageHeight?openfl.Lib.current.get_mouseY() + 10:openfl.Lib.current.get_mouseY() - 10 - this.get_h());
	}
	,hideTooltip: function(e) {
		this.target.removeEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.hideTooltip));
		openfl.Lib.current.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.moveTooltip));
		this.hide();
	}
	,_adjustPosition: function() {
		this.set_left(openfl.Lib.current.get_mouseX() + 10 + this.get_w() <= openfl.Lib.current.stage.stageWidth?openfl.Lib.current.get_mouseX() + 10:openfl.Lib.current.stage.stageWidth - this.get_w());
		this.set_top(openfl.Lib.current.get_mouseY() + 10 + this.get_h() <= openfl.Lib.current.stage.stageHeight?openfl.Lib.current.get_mouseY() + 10:openfl.Lib.current.get_mouseY() - 10 - this.get_h());
	}
	,freeTooltip: function(e) {
		this.free(true);
	}
	,_removeTargetListeners: function() {
		if(this.target != null) {
			this.target.removeEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this.hideTooltip));
			this.target.removeEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this.showTooltip));
			this.target.removeEventListener("widgetFree",$bind(this,this.freeTooltip));
		}
	}
	,free: function(recursive) {
		if(recursive == null) recursive = true;
		this._removeTargetListeners();
		openfl.Lib.current.stage.removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.moveTooltip));
		ru.stablex.ui.widgets.Floating.prototype.free.call(this,recursive);
	}
	,refresh: function() {
		this.label.refresh();
		ru.stablex.ui.widgets.Floating.prototype.refresh.call(this);
	}
	,__class__: ru.stablex.ui.widgets.Tip
	,__properties__: $extend(ru.stablex.ui.widgets.Floating.prototype.__properties__,{set_text:"set_text",get_text:"get_text"})
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i1) {
	return isNaN(i1);
};
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
if(Array.prototype.map == null) Array.prototype.map = function(f) {
	var a = [];
	var _g1 = 0;
	var _g = this.length;
	while(_g1 < _g) {
		var i = _g1++;
		a[i] = f(this[i]);
	}
	return a;
};
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.ProcessingInstruction = "processingInstruction";
Xml.Document = "document";
com.yagp.GifPlayer.rect = new openfl.geom.Rectangle();
com.yagp.GifPlayer.point = new openfl.geom.Point();
haxe.Resource.content = [];
var this1;
this1 = new Array(256);
lime.graphics.utils.ImageDataUtil.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime.graphics.utils.ImageDataUtil.__alpha16[i] = i * 65536 / 255 | 0;
}
var this2;
this2 = new Array(510);
lime.graphics.utils.ImageDataUtil.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime.graphics.utils.ImageDataUtil.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime.graphics.utils.ImageDataUtil.__clamp[i2] = 255;
}
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl.display.DisplayObject.__instanceCount = 0;
openfl.display.DisplayObject.__worldRenderDirty = 0;
openfl.display.DisplayObject.__worldTransformDirty = 0;
away3d.Away3D.WEBSITE_URL = "http://www.away3d.com";
away3d.Away3D.MAJOR_VERSION = 4;
away3d.Away3D.MINOR_VERSION = 1;
away3d.Away3D.REVISION = 5;
away3d.library.assets.NamedAssetBase.DEFAULT_NAMESPACE = "default";
away3d.core.managers.AGALProgram3DCache._currentId = 0;
openfl.events.Event.ACTIVATE = "activate";
openfl.events.Event.ADDED = "added";
openfl.events.Event.ADDED_TO_STAGE = "addedToStage";
openfl.events.Event.CANCEL = "cancel";
openfl.events.Event.CHANGE = "change";
openfl.events.Event.CLOSE = "close";
openfl.events.Event.COMPLETE = "complete";
openfl.events.Event.CONNECT = "connect";
openfl.events.Event.CONTEXT3D_CREATE = "context3DCreate";
openfl.events.Event.DEACTIVATE = "deactivate";
openfl.events.Event.ENTER_FRAME = "enterFrame";
openfl.events.Event.ID3 = "id3";
openfl.events.Event.INIT = "init";
openfl.events.Event.MOUSE_LEAVE = "mouseLeave";
openfl.events.Event.OPEN = "open";
openfl.events.Event.REMOVED = "removed";
openfl.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl.events.Event.RENDER = "render";
openfl.events.Event.RESIZE = "resize";
openfl.events.Event.SCROLL = "scroll";
openfl.events.Event.SELECT = "select";
openfl.events.Event.SOUND_COMPLETE = "soundComplete";
openfl.events.Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl.events.Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl.events.Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl.events.Event.UNLOAD = "unload";
away3d.events.MouseEvent3D.MOUSE_OVER = "mouseOver3d";
away3d.events.MouseEvent3D.MOUSE_OUT = "mouseOut3d";
away3d.events.MouseEvent3D.MOUSE_UP = "mouseUp3d";
away3d.events.MouseEvent3D.MOUSE_DOWN = "mouseDown3d";
away3d.events.MouseEvent3D.MOUSE_MOVE = "mouseMove3d";
away3d.events.MouseEvent3D.CLICK = "click3d";
away3d.events.MouseEvent3D.DOUBLE_CLICK = "doubleClick3d";
away3d.events.MouseEvent3D.MOUSE_WHEEL = "mouseWheel3d";
away3d.core.managers.Mouse3DManager._viewCount = 0;
away3d.core.managers.Mouse3DManager._queuedEvents = new Array();
away3d.core.managers.Mouse3DManager._mouseUp = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_UP);
away3d.core.managers.Mouse3DManager._mouseClick = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.CLICK);
away3d.core.managers.Mouse3DManager._mouseOut = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_OUT);
away3d.core.managers.Mouse3DManager._mouseDown = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_DOWN);
away3d.core.managers.Mouse3DManager._mouseMove = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_MOVE);
away3d.core.managers.Mouse3DManager._mouseOver = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_OVER);
away3d.core.managers.Mouse3DManager._mouseWheel = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.MOUSE_WHEEL);
away3d.core.managers.Mouse3DManager._mouseDoubleClick = new away3d.events.MouseEvent3D(away3d.events.MouseEvent3D.DOUBLE_CLICK);
away3d.core.managers.Mouse3DManager._previousCollidingView = -1;
away3d.core.managers.Mouse3DManager._collidingView = -1;
away3d.core.managers.Stage3DManager._numStageProxies = 0;
openfl.geom.Matrix.__identity = new openfl.geom.Matrix();
away3d.core.managers.Stage3DProxy._frameEventDriver = new openfl.display.Shape();
away3d.core.managers.Touch3DManager._collidingObjectFromTouchId = new haxe.ds.IntMap();
away3d.core.managers.Touch3DManager._previousCollidingObjectFromTouchId = new haxe.ds.IntMap();
away3d.core.managers.Touch3DManager._queuedEvents = (function($this) {
	var $r;
	var this1;
	this1 = new openfl.VectorData();
	{
		var this2;
		this2 = new Array(0);
		this1.data = this2;
	}
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
away3d.core.math.MathConsts.RADIANS_TO_DEGREES = 180 / Math.PI;
away3d.core.math.MathConsts.DEGREES_TO_RADIANS = Math.PI / 180;
away3d.core.math.Plane3D.ALIGN_ANY = 0;
away3d.core.math.Plane3D.ALIGN_XY_AXIS = 1;
away3d.core.math.Plane3D.ALIGN_YZ_AXIS = 2;
away3d.core.math.Plane3D.ALIGN_XZ_AXIS = 3;
away3d.core.math.PlaneClassification.BACK = 0;
away3d.core.math.PlaneClassification.FRONT = 1;
away3d.core.math.PlaneClassification.IN = 0;
away3d.core.math.PlaneClassification.OUT = 1;
away3d.core.math.PlaneClassification.INTERSECT = 2;
away3d.core.traverse.PartitionTraverser._collectionMark = 0;
away3d.core.pick.ShaderPicker.MOUSE_SCISSOR_RECT = new openfl.geom.Rectangle(0,0,1,1);
openfl.display.LoaderInfo.__rootURL = window.document.URL;
openfl.system.ApplicationDomain.currentDomain = new openfl.system.ApplicationDomain(null);
openfl.Lib.current = new openfl.display.MovieClip();
openfl.Lib.__sentWarnings = new haxe.ds.StringMap();
lime.system.System.__moduleNames = null;
away3d.core.pick.PickingType.SHADER = new away3d.core.pick.ShaderPicker();
away3d.core.pick.PickingType.RAYCAST_FIRST_ENCOUNTERED = new away3d.core.pick.RaycastPicker(false);
away3d.core.pick.PickingType.RAYCAST_BEST_HIT = new away3d.core.pick.RaycastPicker(true);
away3d.core.render.DefaultRenderer.RTT_PASSES = 1;
away3d.core.render.DefaultRenderer.SCREEN_PASSES = 2;
away3d.core.render.DefaultRenderer.ALL_PASSES = 3;
away3d.debug.Debug.active = false;
away3d.debug.Debug.warningsAsErrors = false;
openfl.errors.Error.DEFAULT_TO_STRING = "Error";
away3d.events.Asset3DEvent.ASSET_COMPLETE = "assetComplete";
away3d.events.Asset3DEvent.ENTITY_COMPLETE = "entityComplete";
away3d.events.Asset3DEvent.SKYBOX_COMPLETE = "skyboxComplete";
away3d.events.Asset3DEvent.CAMERA_COMPLETE = "cameraComplete";
away3d.events.Asset3DEvent.MESH_COMPLETE = "meshComplete";
away3d.events.Asset3DEvent.GEOMETRY_COMPLETE = "geometryComplete";
away3d.events.Asset3DEvent.SKELETON_COMPLETE = "skeletonComplete";
away3d.events.Asset3DEvent.SKELETON_POSE_COMPLETE = "skeletonPoseComplete";
away3d.events.Asset3DEvent.CONTAINER_COMPLETE = "containerComplete";
away3d.events.Asset3DEvent.TEXTURE_COMPLETE = "textureComplete";
away3d.events.Asset3DEvent.TEXTURE_PROJECTOR_COMPLETE = "textureProjectorComplete";
away3d.events.Asset3DEvent.MATERIAL_COMPLETE = "materialComplete";
away3d.events.Asset3DEvent.ANIMATOR_COMPLETE = "animatorComplete";
away3d.events.Asset3DEvent.ANIMATION_SET_COMPLETE = "animationSetComplete";
away3d.events.Asset3DEvent.ANIMATION_STATE_COMPLETE = "animationStateComplete";
away3d.events.Asset3DEvent.ANIMATION_NODE_COMPLETE = "animationNodeComplete";
away3d.events.Asset3DEvent.STATE_TRANSITION_COMPLETE = "stateTransitionComplete";
away3d.events.Asset3DEvent.SEGMENT_SET_COMPLETE = "segmentSetComplete";
away3d.events.Asset3DEvent.LIGHT_COMPLETE = "lightComplete";
away3d.events.Asset3DEvent.LIGHTPICKER_COMPLETE = "lightPickerComplete";
away3d.events.Asset3DEvent.EFFECTMETHOD_COMPLETE = "effectMethodComplete";
away3d.events.Asset3DEvent.SHADOWMAPMETHOD_COMPLETE = "shadowMapMethodComplete";
away3d.events.Asset3DEvent.ASSET_RENAME = "assetRename";
away3d.events.Asset3DEvent.ASSET_CONFLICT_RESOLVED = "assetConflictResolved";
away3d.events.Asset3DEvent.TEXTURE_SIZE_ERROR = "textureSizeError";
away3d.events.CameraEvent.LENS_CHANGED = "lensChanged";
away3d.events.GeometryEvent.SUB_GEOMETRY_ADDED = "SubGeometryAdded";
away3d.events.GeometryEvent.SUB_GEOMETRY_REMOVED = "SubGeometryRemoved";
away3d.events.GeometryEvent.BOUNDS_INVALID = "BoundsInvalid";
away3d.events.LensEvent.MATRIX_CHANGED = "matrixChanged";
away3d.events.LightEvent.CASTS_SHADOW_CHANGE = "castsShadowChange";
away3d.events.Object3DEvent.VISIBLITY_UPDATED = "visiblityUpdated";
away3d.events.Object3DEvent.SCENETRANSFORM_CHANGED = "scenetransformChanged";
away3d.events.Object3DEvent.SCENE_CHANGED = "sceneChanged";
away3d.events.Object3DEvent.POSITION_CHANGED = "positionChanged";
away3d.events.Object3DEvent.ROTATION_CHANGED = "rotationChanged";
away3d.events.Object3DEvent.SCALE_CHANGED = "scaleChanged";
away3d.events.Scene3DEvent.ADDED_TO_SCENE = "addedToScene";
away3d.events.Scene3DEvent.REMOVED_FROM_SCENE = "removedFromScene";
away3d.events.Scene3DEvent.PARTITION_CHANGED = "partitionChanged";
away3d.events.ShadingMethodEvent.SHADER_INVALIDATED = "ShaderInvalidated";
away3d.events.Stage3DEvent.CONTEXT3D_CREATED = "Context3DCreated";
away3d.events.Stage3DEvent.CONTEXT3D_DISPOSED = "Context3DDisposed";
away3d.events.Stage3DEvent.CONTEXT3D_RECREATED = "Context3DRecreated";
away3d.events.Stage3DEvent.VIEWPORT_UPDATED = "ViewportUpdated";
away3d.events.TouchEvent3D.TOUCH_END = "touchEnd3d";
away3d.events.TouchEvent3D.TOUCH_BEGIN = "touchBegin3d";
away3d.events.TouchEvent3D.TOUCH_MOVE = "touchMove3d";
away3d.events.TouchEvent3D.TOUCH_OUT = "touchOut3d";
away3d.events.TouchEvent3D.TOUCH_OVER = "touchOver3d";
away3d.library.assets.Asset3DType.ENTITY = "entity";
away3d.library.assets.Asset3DType.SKYBOX = "skybox";
away3d.library.assets.Asset3DType.CAMERA = "camera";
away3d.library.assets.Asset3DType.SEGMENT_SET = "segmentSet";
away3d.library.assets.Asset3DType.MESH = "mesh";
away3d.library.assets.Asset3DType.GEOMETRY = "geometry";
away3d.library.assets.Asset3DType.SKELETON = "skeleton";
away3d.library.assets.Asset3DType.SKELETON_POSE = "skeletonPose";
away3d.library.assets.Asset3DType.CONTAINER = "container";
away3d.library.assets.Asset3DType.TEXTURE = "texture";
away3d.library.assets.Asset3DType.TEXTURE_PROJECTOR = "textureProjector";
away3d.library.assets.Asset3DType.MATERIAL = "material";
away3d.library.assets.Asset3DType.ANIMATION_SET = "animationSet";
away3d.library.assets.Asset3DType.ANIMATION_STATE = "animationState";
away3d.library.assets.Asset3DType.ANIMATION_NODE = "animationNode";
away3d.library.assets.Asset3DType.ANIMATOR = "animator";
away3d.library.assets.Asset3DType.STATE_TRANSITION = "stateTransition";
away3d.library.assets.Asset3DType.LIGHT = "light";
away3d.library.assets.Asset3DType.LIGHT_PICKER = "lightPicker";
away3d.library.assets.Asset3DType.SHADOW_MAP_METHOD = "shadowMapMethod";
away3d.library.assets.Asset3DType.EFFECTS_METHOD = "effectsMethod";
away3d.materials.LightSources.LIGHTS = 1;
away3d.materials.LightSources.PROBES = 2;
away3d.materials.LightSources.ALL = 3;
away3d.materials.MaterialBase.MATERIAL_ID_COUNT = 0;
away3d.materials.compilation.RegisterPool._regPool = new haxe.ds.StringMap();
away3d.materials.compilation.RegisterPool._regCompsPool = new haxe.ds.StringMap();
away3d.materials.compilation.ShaderRegisterElement.COMPONENTS = ["x","y","z","w"];
away3d.materials.passes.MaterialPassBase._previousUsedStreams = [0,0,0,0,0,0,0,0];
away3d.materials.passes.MaterialPassBase._previousUsedTexs = [0,0,0,0,0,0,0,0];
away3d.materials.passes.SegmentPass.ONE_VECTOR = (function($this) {
	var $r;
	var a = [1.0,1.0,1.0,1.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	{
		var vec;
		var this1;
		this1 = new Array(a.length);
		vec = this1;
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = a[i];
		}
		vectorData.data = vec;
	}
	$r = vectorData;
	return $r;
}(this));
away3d.materials.passes.SegmentPass.FRONT_VECTOR = (function($this) {
	var $r;
	var a = [0.0,0.0,-1.0,0.0];
	var vectorData = new openfl.VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	{
		var vec;
		var this1;
		this1 = new Array(a.length);
		vec = this1;
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = a[i];
		}
		vectorData.data = vec;
	}
	$r = vectorData;
	return $r;
}(this));
away3d.materials.utils.MipmapGenerator._matrix = new openfl.geom.Matrix();
away3d.materials.utils.MipmapGenerator._rect = new openfl.geom.Rectangle();
away3d.textures.BitmapTexture._mipMaps = [];
away3d.textures.BitmapTexture._mipMapUses = [];
away3d.tools.utils.TextureUtils.MAX_SIZE = 4096;
box2D.collision.B2Collision.b2_nullFeature = 255;
box2D.collision.B2Collision.s_incidentEdge = box2D.collision.B2Collision.makeClipPointVector();
box2D.collision.B2Collision.s_clipPoints1 = box2D.collision.B2Collision.makeClipPointVector();
box2D.collision.B2Collision.s_clipPoints2 = box2D.collision.B2Collision.makeClipPointVector();
box2D.collision.B2Collision.s_edgeAO = new Array();
box2D.collision.B2Collision.s_edgeBO = new Array();
box2D.collision.B2Collision.s_localTangent = new box2D.common.math.B2Vec2();
box2D.collision.B2Collision.s_localNormal = new box2D.common.math.B2Vec2();
box2D.collision.B2Collision.s_planePoint = new box2D.common.math.B2Vec2();
box2D.collision.B2Collision.s_normal = new box2D.common.math.B2Vec2();
box2D.collision.B2Collision.s_tangent = new box2D.common.math.B2Vec2();
box2D.collision.B2Collision.s_tangent2 = new box2D.common.math.B2Vec2();
box2D.collision.B2Collision.s_v11 = new box2D.common.math.B2Vec2();
box2D.collision.B2Collision.s_v12 = new box2D.common.math.B2Vec2();
box2D.collision.B2Collision.b2CollidePolyTempVec = new box2D.common.math.B2Vec2();
box2D.collision.B2Distance.b2_gjkCalls = 0;
box2D.collision.B2Distance.b2_gjkIters = 0;
box2D.collision.B2Distance.b2_gjkMaxIters = 0;
box2D.collision.B2Distance.s_simplex = new box2D.collision.B2Simplex();
box2D.collision.B2Distance.s_saveA = new Array();
box2D.collision.B2Distance.s_saveB = new Array();
box2D.collision.B2DynamicTreeNode.currentID = 0;
box2D.collision.B2TimeOfImpact.b2_toiCalls = 0;
box2D.collision.B2TimeOfImpact.b2_toiIters = 0;
box2D.collision.B2TimeOfImpact.b2_toiMaxIters = 0;
box2D.collision.B2TimeOfImpact.b2_toiRootIters = 0;
box2D.collision.B2TimeOfImpact.b2_toiMaxRootIters = 0;
box2D.collision.B2TimeOfImpact.s_cache = new box2D.collision.B2SimplexCache();
box2D.collision.B2TimeOfImpact.s_distanceInput = new box2D.collision.B2DistanceInput();
box2D.collision.B2TimeOfImpact.s_xfA = new box2D.common.math.B2Transform();
box2D.collision.B2TimeOfImpact.s_xfB = new box2D.common.math.B2Transform();
box2D.collision.B2TimeOfImpact.s_fcn = new box2D.collision.B2SeparationFunction();
box2D.collision.B2TimeOfImpact.s_distanceOutput = new box2D.collision.B2DistanceOutput();
box2D.collision.shapes.B2Shape.e_hitCollide = 1;
box2D.collision.shapes.B2Shape.e_missCollide = 0;
box2D.collision.shapes.B2Shape.e_startsInsideCollide = -1;
box2D.collision.shapes.B2PolygonShape.s_mat = new box2D.common.math.B2Mat22();
box2D.collision.shapes._B2ShapeType.B2ShapeType_Impl_.UNKNOWN_SHAPE = 0;
box2D.collision.shapes._B2ShapeType.B2ShapeType_Impl_.CIRCLE_SHAPE = 1;
box2D.collision.shapes._B2ShapeType.B2ShapeType_Impl_.POLYGON_SHAPE = 2;
box2D.collision.shapes._B2ShapeType.B2ShapeType_Impl_.EDGE_SHAPE = 3;
box2D.common.B2Settings.VERSION = "2.1alpha";
box2D.common.B2Settings.USHRT_MAX = 65535;
box2D.common.B2Settings.b2_pi = Math.PI;
box2D.common.B2Settings.b2_maxManifoldPoints = 2;
box2D.common.B2Settings.b2_aabbExtension = 0.1;
box2D.common.B2Settings.b2_aabbMultiplier = 2.0;
box2D.common.B2Settings.b2_polygonRadius = 0.01;
box2D.common.B2Settings.b2_linearSlop = 0.005;
box2D.common.B2Settings.b2_angularSlop = 0.011111111111111112 * Math.PI;
box2D.common.B2Settings.b2_toiSlop = 0.04;
box2D.common.B2Settings.b2_maxTOIContactsPerIsland = 32;
box2D.common.B2Settings.b2_maxTOIJointsPerIsland = 32;
box2D.common.B2Settings.b2_velocityThreshold = 1.0;
box2D.common.B2Settings.b2_maxLinearCorrection = 0.2;
box2D.common.B2Settings.b2_maxAngularCorrection = 0.044444444444444446 * Math.PI;
box2D.common.B2Settings.b2_maxTranslation = 2.0;
box2D.common.B2Settings.b2_maxTranslationSquared = 4.0;
box2D.common.B2Settings.b2_maxRotation = 0.5 * Math.PI;
box2D.common.B2Settings.b2_maxRotationSquared = 0.5 * Math.PI * (0.5 * Math.PI);
box2D.common.B2Settings.b2_contactBaumgarte = 0.2;
box2D.common.B2Settings.b2_timeToSleep = 0.5;
box2D.common.B2Settings.b2_linearSleepTolerance = 0.01;
box2D.common.B2Settings.b2_angularSleepTolerance = 0.011111111111111112 * Math.PI;
box2D.common.math.B2Math.b2Vec2_zero = new box2D.common.math.B2Vec2(0.0,0.0);
box2D.common.math.B2Math.b2Mat22_identity = box2D.common.math.B2Mat22.fromVV(new box2D.common.math.B2Vec2(1.0,0.0),new box2D.common.math.B2Vec2(0.0,1.0));
box2D.common.math.B2Math.b2Transform_identity = new box2D.common.math.B2Transform(box2D.common.math.B2Math.b2Vec2_zero,box2D.common.math.B2Math.b2Mat22_identity);
box2D.dynamics.B2Body.s_xf1 = new box2D.common.math.B2Transform();
box2D.dynamics.B2Body.e_islandFlag = 1;
box2D.dynamics.B2Body.e_awakeFlag = 2;
box2D.dynamics.B2Body.e_allowSleepFlag = 4;
box2D.dynamics.B2Body.e_bulletFlag = 8;
box2D.dynamics.B2Body.e_fixedRotationFlag = 16;
box2D.dynamics.B2Body.e_activeFlag = 32;
box2D.dynamics.B2Body.b2_staticBody = 0;
box2D.dynamics.B2Body.b2_kinematicBody = 1;
box2D.dynamics.B2Body.b2_dynamicBody = 2;
box2D.dynamics._B2BodyType.B2BodyType_Impl_.STATIC_BODY = 0;
box2D.dynamics._B2BodyType.B2BodyType_Impl_.KINEMATIC_BODY = 1;
box2D.dynamics._B2BodyType.B2BodyType_Impl_.DYNAMIC_BODY = 2;
box2D.dynamics.B2ContactFilter.b2_defaultFilter = new box2D.dynamics.B2ContactFilter();
box2D.dynamics.B2ContactListener.b2_defaultListener = new box2D.dynamics.B2ContactListener();
box2D.dynamics.B2ContactManager.s_evalCP = new box2D.collision.B2ContactPoint();
box2D.dynamics.B2DebugDraw.e_shapeBit = 1;
box2D.dynamics.B2DebugDraw.e_jointBit = 2;
box2D.dynamics.B2DebugDraw.e_aabbBit = 4;
box2D.dynamics.B2DebugDraw.e_pairBit = 8;
box2D.dynamics.B2DebugDraw.e_centerOfMassBit = 16;
box2D.dynamics.B2DebugDraw.e_controllerBit = 32;
box2D.dynamics.B2Island.s_impulse = new box2D.dynamics.B2ContactImpulse();
box2D.dynamics.B2World.s_timestep2 = new box2D.dynamics.B2TimeStep();
box2D.dynamics.B2World.s_xf = new box2D.common.math.B2Transform();
box2D.dynamics.B2World.s_backupA = new box2D.common.math.B2Sweep();
box2D.dynamics.B2World.s_backupB = new box2D.common.math.B2Sweep();
box2D.dynamics.B2World.s_timestep = new box2D.dynamics.B2TimeStep();
box2D.dynamics.B2World.s_queue = new Array();
box2D.dynamics.B2World.s_jointColor = new box2D.common.B2Color(0.5,0.8,0.8);
box2D.dynamics.B2World.e_newFixture = 1;
box2D.dynamics.B2World.e_locked = 2;
box2D.dynamics.contacts.B2Contact.e_sensorFlag = 1;
box2D.dynamics.contacts.B2Contact.e_continuousFlag = 2;
box2D.dynamics.contacts.B2Contact.e_islandFlag = 4;
box2D.dynamics.contacts.B2Contact.e_toiFlag = 8;
box2D.dynamics.contacts.B2Contact.e_touchingFlag = 16;
box2D.dynamics.contacts.B2Contact.e_enabledFlag = 32;
box2D.dynamics.contacts.B2Contact.e_filterFlag = 64;
box2D.dynamics.contacts.B2Contact.s_input = new box2D.collision.B2TOIInput();
box2D.dynamics.contacts.B2PositionSolverManifold.circlePointA = new box2D.common.math.B2Vec2();
box2D.dynamics.contacts.B2PositionSolverManifold.circlePointB = new box2D.common.math.B2Vec2();
box2D.dynamics.contacts.B2ContactSolver.staticFix = box2D.common.B2Settings.b2_maxManifoldPoints;
box2D.dynamics.contacts.B2ContactSolver.s_worldManifold = new box2D.collision.B2WorldManifold();
box2D.dynamics.contacts.B2ContactSolver.s_psm = new box2D.dynamics.contacts.B2PositionSolverManifold();
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.UNKNOWN_JOINT = 0;
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.REVOLUTE_JOINT = 1;
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.PRISMATIC_JOINT = 2;
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.DISTANCE_JOINT = 3;
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.PULLEY_JOINT = 4;
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.MOUSE_JOINT = 5;
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.GEAR_JOINT = 6;
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.LINE_JOINT = 7;
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.WELD_JOINT = 8;
box2D.dynamics.joints._B2JointType.B2JointType_Impl_.FRICTION_JOINT = 9;
box2D.dynamics.joints._B2LimitState.B2LimitState_Impl_.INACTIVE_LIMIT = 0;
box2D.dynamics.joints._B2LimitState.B2LimitState_Impl_.AT_LOWER_LIMIT = 1;
box2D.dynamics.joints._B2LimitState.B2LimitState_Impl_.AT_UPPER_LIMIT = 2;
box2D.dynamics.joints._B2LimitState.B2LimitState_Impl_.EQUAL_LIMITS = 3;
box2D.dynamics.joints.B2PulleyJoint.b2_minPulleyLength = 2.0;
box2D.dynamics.joints.B2RevoluteJoint.tImpulse = new box2D.common.math.B2Vec2();
com.yagp.GifPlayerWrapper.globalTimescale = 1;
format.gfx.GfxBytes.EOF = 0;
format.gfx.GfxBytes.SIZE = 1;
format.gfx.GfxBytes.BEGIN_FILL = 10;
format.gfx.GfxBytes.GRADIENT_FILL = 11;
format.gfx.GfxBytes.END_FILL = 12;
format.gfx.GfxBytes.LINE_STYLE = 20;
format.gfx.GfxBytes.END_LINE_STYLE = 21;
format.gfx.GfxBytes.MOVE = 30;
format.gfx.GfxBytes.LINE = 31;
format.gfx.GfxBytes.CURVE = 32;
format.gfx.GfxBytes.base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
format.gfx.GfxBytes.scaleModes = [openfl.display.LineScaleMode.NORMAL,openfl.display.LineScaleMode.NONE,openfl.display.LineScaleMode.VERTICAL,openfl.display.LineScaleMode.HORIZONTAL];
format.gfx.GfxBytes.capsStyles = [openfl.display.CapsStyle.ROUND,openfl.display.CapsStyle.NONE,openfl.display.CapsStyle.SQUARE];
format.gfx.GfxBytes.jointStyles = [openfl.display.JointStyle.ROUND,openfl.display.JointStyle.MITER,openfl.display.JointStyle.BEVEL];
format.gfx.GfxBytes.spreadMethods = [openfl.display.SpreadMethod.PAD,openfl.display.SpreadMethod.REPEAT,openfl.display.SpreadMethod.REFLECT];
format.gfx.GfxBytes.interpolationMethods = [openfl.display.InterpolationMethod.RGB,openfl.display.InterpolationMethod.LINEAR_RGB];
format.svg.PathParser.MOVE = 77;
format.svg.PathParser.MOVER = 109;
format.svg.PathParser.LINE = 76;
format.svg.PathParser.LINER = 108;
format.svg.PathParser.HLINE = 72;
format.svg.PathParser.HLINER = 104;
format.svg.PathParser.VLINE = 86;
format.svg.PathParser.VLINER = 118;
format.svg.PathParser.CUBIC = 67;
format.svg.PathParser.CUBICR = 99;
format.svg.PathParser.SCUBIC = 83;
format.svg.PathParser.SCUBICR = 115;
format.svg.PathParser.QUAD = 81;
format.svg.PathParser.QUADR = 113;
format.svg.PathParser.SQUAD = 84;
format.svg.PathParser.SQUADR = 116;
format.svg.PathParser.ARC = 65;
format.svg.PathParser.ARCR = 97;
format.svg.PathParser.CLOSE = 90;
format.svg.PathParser.CLOSER = 122;
format.svg.PathParser.UNKNOWN = -1;
format.svg.PathParser.SEPARATOR = -2;
format.svg.PathParser.FLOAT = -3;
format.svg.PathParser.FLOAT_SIGN = -4;
format.svg.PathParser.FLOAT_DOT = -5;
format.svg.PathParser.FLOAT_EXP = -6;
format.svg.PathSegment.MOVE = 1;
format.svg.PathSegment.DRAW = 2;
format.svg.PathSegment.CURVE = 3;
format.svg.PathSegment.CUBIC = 4;
format.svg.PathSegment.ARC = 5;
format.svg.SVGData.SIN45 = 0.70710678118654752440084436210485;
format.svg.SVGData.TAN22 = 0.4142135623730950488016887242097;
format.svg.SVGData.mStyleSplit = new EReg(";","g");
format.svg.SVGData.mStyleValue = new EReg("\\s*(.*)\\s*:\\s*(.*)\\s*","");
format.svg.SVGData.mTranslateMatch = new EReg("translate\\((.*)[, ](.*)\\)","");
format.svg.SVGData.mScaleMatch = new EReg("scale\\((.*)\\)","");
format.svg.SVGData.mMatrixMatch = new EReg("matrix\\((.*)[, ](.*)[, ](.*)[, ](.*)[, ](.*)[, ](.*)\\)","");
format.svg.SVGData.mURLMatch = new EReg("url\\(#(.*)\\)","");
format.svg.SVGData.defaultFill = format.svg.FillType.FillSolid(0);
openfl.text.TextField.__utf8_endline_code = 10;
openfl.text.TextField.ASCENDER = 0;
openfl.text.TextField.DESCENDER = 1;
openfl.text.TextField.LINE_HEIGHT = 2;
openfl.text.TextField.LEADING = 3;
format.swf.lite.SWFLite.instances = new haxe.ds.StringMap();
haxe.Serializer.USE_CACHE = false;
haxe.Serializer.USE_ENUM_INDEX = false;
haxe.Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.Unserializer.DEFAULT_RESOLVER = Type;
haxe.Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.Unserializer.CODES = null;
haxe.crypto.Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe.crypto.Base64.BYTES = haxe.io.Bytes.ofString(haxe.crypto.Base64.CHARS);
haxe.ds.ObjectMap.count = 0;
haxe.ui.toolkit.core.StyleableDisplayObject.__meta__ = { fields : { baseStyle : { clonable : null}, style : { clonable : null}}};
haxe.ui.toolkit.controls.Button.STATE_NORMAL = "normal";
haxe.ui.toolkit.controls.Button.STATE_OVER = "over";
haxe.ui.toolkit.controls.Button.STATE_DOWN = "down";
haxe.ui.toolkit.controls.Button.STATE_DISABLED = "disabled";
haxe.ui.toolkit.containers.CalendarView.MONTH_NAMES = ["January","Febuary","March","April","May","June","July","August","September","October","November","December"];
haxe.ui.toolkit.containers.TableViewRow.STATE_NORMAL = "normal";
haxe.ui.toolkit.containers.TableViewRow.STATE_OVER = "over";
haxe.ui.toolkit.containers.TableViewRow.STATE_SELECTED = "selected";
haxe.ui.toolkit.controls.Link.STATE_NORMAL = "normal";
haxe.ui.toolkit.controls.Link.STATE_OVER = "over";
haxe.ui.toolkit.controls.Link.STATE_DOWN = "down";
haxe.ui.toolkit.core.Macros.componentClasses = new haxe.ds.StringMap();
haxe.ui.toolkit.core.Macros.dataSourceClasses = new haxe.ds.StringMap();
haxe.ui.toolkit.core.Macros.themeResources = new haxe.ds.StringMap();
haxe.ui.toolkit.core.PopupButton.OK = 1;
haxe.ui.toolkit.core.PopupButton.YES = 16;
haxe.ui.toolkit.core.PopupButton.NO = 256;
haxe.ui.toolkit.core.PopupButton.CANCEL = 4096;
haxe.ui.toolkit.core.PopupButton.CONFIRM = 65536;
haxe.ui.toolkit.core.PopupButton.CLOSE = 1048576;
haxe.ui.toolkit.core.PopupButton.CUSTOM = 16777216;
haxe.ui.toolkit.core.Dismiss.ESCAPE = 1;
haxe.ui.toolkit.core.Dismiss.ENTER = 16;
haxe.ui.toolkit.core.Dismiss.ANYKEY = 256;
haxe.ui.toolkit.core.Dismiss.CLICK_OUTSIDE = 4096;
haxe.ui.toolkit.core.Dismiss.CLICK_INSIDE = 65536;
haxe.ui.toolkit.core.Dismiss.CLICK = 69632;
haxe.ui.toolkit.core._ToolTipManager.ToolTipPosition_Impl_.Top = "top";
haxe.ui.toolkit.core._ToolTipManager.ToolTipPosition_Impl_.Bottom = "bottom";
haxe.ui.toolkit.core._ToolTipManager.ToolTipPosition_Impl_.Left = "left";
haxe.ui.toolkit.core._ToolTipManager.ToolTipPosition_Impl_.Right = "right";
haxe.ui.toolkit.core._ToolTipManager.ToolTipRelativeTo_Impl_.Cursor = "cursor";
haxe.ui.toolkit.core._ToolTipManager.ToolTipRelativeTo_Impl_.Target = "target";
haxe.ui.toolkit.core.Toolkit.DPI_THRESHOLD = 120;
haxe.ui.toolkit.core.Toolkit._versionInfo = new haxe.ds.StringMap();
haxe.ui.toolkit.core.Toolkit.useDefaultTheme = true;
haxe.ui.toolkit.core.Toolkit.autoScale = true;
haxe.ui.toolkit.core.Toolkit._defaultTransition = "slide";
haxe.ui.toolkit.core.Toolkit._scaleFactor = 0;
haxe.ui.toolkit.core.base.HorizontalAlign.LEFT = "left";
haxe.ui.toolkit.core.base.HorizontalAlign.RIGHT = "right";
haxe.ui.toolkit.core.base.HorizontalAlign.CENTER = "center";
haxe.ui.toolkit.core.base.State.NORMAL = "normal";
haxe.ui.toolkit.core.base.State.OVER = "over";
haxe.ui.toolkit.core.base.State.DOWN = "down";
haxe.ui.toolkit.core.base.State.DISABLED = "disabled";
haxe.ui.toolkit.core.base.VerticalAlign.TOP = "top";
haxe.ui.toolkit.core.base.VerticalAlign.BOTTOM = "bottom";
haxe.ui.toolkit.core.base.VerticalAlign.CENTER = "center";
haxe.ui.toolkit.core.interfaces.Direction.HORIZONTAL = "horizontal";
haxe.ui.toolkit.core.interfaces.Direction.VERTICAL = "vertical";
haxe.ui.toolkit.core.interfaces.InvalidationFlag.LAYOUT = 1;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.DISPLAY = 16;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.SIZE = 256;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.STATE = 4096;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.DATA = 65536;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.STYLE = 1048576;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.ALL = 1118481;
haxe.ui.toolkit.core.renderers.ItemRenderer.STATE_NORMAL = "normal";
haxe.ui.toolkit.core.renderers.ItemRenderer.STATE_OVER = "over";
haxe.ui.toolkit.core.renderers.ItemRenderer.STATE_SELECTED = "selected";
haxe.ui.toolkit.core.renderers.ItemRenderer.STATE_DISABLED = "disabled";
haxe.ui.toolkit.data.DataSource.SAFE_NUM = 2147483647;
haxe.ui.toolkit.data.DataSource.clsId = 0;
haxe.ui.toolkit.events.MenuEvent.SELECT = openfl.events.Event.SELECT;
haxe.ui.toolkit.events.MenuEvent.OPEN = openfl.events.Event.OPEN;
haxe.ui.toolkit.events.UIEvent.PREFIX = "haxeui_";
haxe.ui.toolkit.events.UIEvent.INIT = "haxeui_" + "init";
haxe.ui.toolkit.events.UIEvent.RESIZE = "haxeui_" + "resize";
haxe.ui.toolkit.events.UIEvent.READY = "haxeui_" + "ready";
haxe.ui.toolkit.events.UIEvent.CLICK = "haxeui_" + "click";
haxe.ui.toolkit.events.UIEvent.MOUSE_DOWN = "haxeui_" + "mouseDown";
haxe.ui.toolkit.events.UIEvent.MOUSE_UP = "haxeui_" + "mouseUp";
haxe.ui.toolkit.events.UIEvent.MOUSE_OVER = "haxeui_" + "mouseOver";
haxe.ui.toolkit.events.UIEvent.MOUSE_OUT = "haxeui_" + "mouseOut";
haxe.ui.toolkit.events.UIEvent.MOUSE_MOVE = "haxeui_" + "mouseMove";
haxe.ui.toolkit.events.UIEvent.DOUBLE_CLICK = "haxeui_" + "doubleClick";
haxe.ui.toolkit.events.UIEvent.ROLL_OVER = "haxeui_" + "rollOver";
haxe.ui.toolkit.events.UIEvent.ROLL_OUT = "haxeui_" + "rollOut";
haxe.ui.toolkit.events.UIEvent.CHANGE = "haxeui_" + "change";
haxe.ui.toolkit.events.UIEvent.SCROLL = "haxeui_" + "scroll";
haxe.ui.toolkit.events.UIEvent.ADDED = "haxeui_" + "added";
haxe.ui.toolkit.events.UIEvent.ADDED_TO_STAGE = "haxeui_" + "addedToStage";
haxe.ui.toolkit.events.UIEvent.REMOVED = "haxeui_" + "removed";
haxe.ui.toolkit.events.UIEvent.REMOVED_FROM_STAGE = "haxeui_" + "removedFromStage";
haxe.ui.toolkit.events.UIEvent.ACTIVATE = "haxeui_" + "activate";
haxe.ui.toolkit.events.UIEvent.DEACTIVATE = "haxeui_" + "deactivate";
haxe.ui.toolkit.events.UIEvent.GLYPH_CLICK = "haxeui_" + "glyphClick";
haxe.ui.toolkit.events.UIEvent.COMPONENT_EVENT = "haxeui_" + "componentEvent";
haxe.ui.toolkit.events.UIEvent.MENU_SELECT = "haxeui_" + "menuSelect";
haxe.ui.toolkit.events.UIEvent.MENU_OPEN = "haxeui_" + "menuOpen";
haxe.ui.toolkit.text.TextDisplay.X_PADDING = 0;
haxe.ui.toolkit.text.TextDisplay.Y_PADDING = 2;
haxe.ui.toolkit.themes.Theme.assets = new haxe.ds.StringMap();
haxe.ui.toolkit.util.FilterParser.filterParamDefaults = { blur : ["4","4","1"], dropShadow : ["4","45","0","1","4","4","1","1","false","false","false"], glow : ["16711680","1","6","6","2","1","false","false"]};
haxe.ui.toolkit.util.Identifier._objectCount = new haxe.ds.StringMap();
haxe.xml.Parser.escapes = (function($this) {
	var $r;
	var h = new haxe.ds.StringMap();
	h.set("lt","<");
	h.set("gt",">");
	h.set("amp","&");
	h.set("quot","\"");
	h.set("apos","'");
	h.set("nbsp",String.fromCharCode(160));
	$r = h;
	return $r;
}(this));
hscript.Parser.p1 = 0;
hscript.Parser.readPos = 0;
hscript.Parser.tokenMin = 0;
hscript.Parser.tokenMax = 0;
js.Boot.__toStr = {}.toString;
lime.Assets.cache = new lime.AssetCache();
lime.Assets.libraries = new haxe.ds.StringMap();
lime.Assets.initialized = false;
lime._Assets.AssetType_Impl_.BINARY = "BINARY";
lime._Assets.AssetType_Impl_.FONT = "FONT";
lime._Assets.AssetType_Impl_.IMAGE = "IMAGE";
lime._Assets.AssetType_Impl_.MUSIC = "MUSIC";
lime._Assets.AssetType_Impl_.SOUND = "SOUND";
lime._Assets.AssetType_Impl_.TEMPLATE = "TEMPLATE";
lime._Assets.AssetType_Impl_.TEXT = "TEXT";
lime.app.Preloader.images = new haxe.ds.StringMap();
lime.app.Preloader.loaders = new haxe.ds.StringMap();
lime.audio.openal.AL.NONE = 0;
lime.audio.openal.AL.FALSE = 0;
lime.audio.openal.AL.TRUE = 1;
lime.audio.openal.AL.SOURCE_RELATIVE = 514;
lime.audio.openal.AL.CONE_INNER_ANGLE = 4097;
lime.audio.openal.AL.CONE_OUTER_ANGLE = 4098;
lime.audio.openal.AL.PITCH = 4099;
lime.audio.openal.AL.POSITION = 4100;
lime.audio.openal.AL.DIRECTION = 4101;
lime.audio.openal.AL.VELOCITY = 4102;
lime.audio.openal.AL.LOOPING = 4103;
lime.audio.openal.AL.BUFFER = 4105;
lime.audio.openal.AL.GAIN = 4106;
lime.audio.openal.AL.MIN_GAIN = 4109;
lime.audio.openal.AL.MAX_GAIN = 4110;
lime.audio.openal.AL.ORIENTATION = 4111;
lime.audio.openal.AL.SOURCE_STATE = 4112;
lime.audio.openal.AL.INITIAL = 4113;
lime.audio.openal.AL.PLAYING = 4114;
lime.audio.openal.AL.PAUSED = 4115;
lime.audio.openal.AL.STOPPED = 4116;
lime.audio.openal.AL.BUFFERS_QUEUED = 4117;
lime.audio.openal.AL.BUFFERS_PROCESSED = 4118;
lime.audio.openal.AL.REFERENCE_DISTANCE = 4128;
lime.audio.openal.AL.ROLLOFF_FACTOR = 4129;
lime.audio.openal.AL.CONE_OUTER_GAIN = 4130;
lime.audio.openal.AL.MAX_DISTANCE = 4131;
lime.audio.openal.AL.SEC_OFFSET = 4132;
lime.audio.openal.AL.SAMPLE_OFFSET = 4133;
lime.audio.openal.AL.BYTE_OFFSET = 4134;
lime.audio.openal.AL.SOURCE_TYPE = 4135;
lime.audio.openal.AL.STATIC = 4136;
lime.audio.openal.AL.STREAMING = 4137;
lime.audio.openal.AL.UNDETERMINED = 4144;
lime.audio.openal.AL.FORMAT_MONO8 = 4352;
lime.audio.openal.AL.FORMAT_MONO16 = 4353;
lime.audio.openal.AL.FORMAT_STEREO8 = 4354;
lime.audio.openal.AL.FORMAT_STEREO16 = 4355;
lime.audio.openal.AL.FREQUENCY = 8193;
lime.audio.openal.AL.BITS = 8194;
lime.audio.openal.AL.CHANNELS = 8195;
lime.audio.openal.AL.SIZE = 8196;
lime.audio.openal.AL.NO_ERROR = 0;
lime.audio.openal.AL.INVALID_NAME = 40961;
lime.audio.openal.AL.INVALID_ENUM = 40962;
lime.audio.openal.AL.INVALID_VALUE = 40963;
lime.audio.openal.AL.INVALID_OPERATION = 40964;
lime.audio.openal.AL.OUT_OF_MEMORY = 40965;
lime.audio.openal.AL.VENDOR = 45057;
lime.audio.openal.AL.VERSION = 45058;
lime.audio.openal.AL.RENDERER = 45059;
lime.audio.openal.AL.EXTENSIONS = 45060;
lime.audio.openal.AL.DOPPLER_FACTOR = 49152;
lime.audio.openal.AL.SPEED_OF_SOUND = 49155;
lime.audio.openal.AL.DOPPLER_VELOCITY = 49153;
lime.audio.openal.AL.DISTANCE_MODEL = 53248;
lime.audio.openal.AL.INVERSE_DISTANCE = 53249;
lime.audio.openal.AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime.audio.openal.AL.LINEAR_DISTANCE = 53251;
lime.audio.openal.AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime.audio.openal.AL.EXPONENT_DISTANCE = 53253;
lime.audio.openal.AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime.audio.openal.ALC.FALSE = 0;
lime.audio.openal.ALC.TRUE = 1;
lime.audio.openal.ALC.FREQUENCY = 4103;
lime.audio.openal.ALC.REFRESH = 4104;
lime.audio.openal.ALC.SYNC = 4105;
lime.audio.openal.ALC.MONO_SOURCES = 4112;
lime.audio.openal.ALC.STEREO_SOURCES = 4113;
lime.audio.openal.ALC.NO_ERROR = 0;
lime.audio.openal.ALC.INVALID_DEVICE = 40961;
lime.audio.openal.ALC.INVALID_CONTEXT = 40962;
lime.audio.openal.ALC.INVALID_ENUM = 40963;
lime.audio.openal.ALC.INVALID_VALUE = 40964;
lime.audio.openal.ALC.OUT_OF_MEMORY = 40965;
lime.audio.openal.ALC.ATTRIBUTES_SIZE = 4098;
lime.audio.openal.ALC.ALL_ATTRIBUTES = 4099;
lime.audio.openal.ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime.audio.openal.ALC.DEVICE_SPECIFIER = 4101;
lime.audio.openal.ALC.EXTENSIONS = 4102;
lime.audio.openal.ALC.ENUMERATE_ALL_EXT = 1;
lime.audio.openal.ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime.audio.openal.ALC.ALL_DEVICES_SPECIFIER = 4115;
lime.graphics.Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime.graphics._PixelFormat.PixelFormat_Impl_.RGBA = 0;
lime.graphics._PixelFormat.PixelFormat_Impl_.ARGB = 1;
lime.graphics._PixelFormat.PixelFormat_Impl_.BGRA = 2;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.DEFAULT = 0;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.NONE = 1;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.GRAY = 2;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.SUBPIXEL = 3;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.FAST = 4;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.GOOD = 5;
lime.graphics.cairo._CairoAntialias.CairoAntialias_Impl_.BEST = 6;
lime.graphics.cairo._CairoContent.CairoContent_Impl_.COLOR = 4096;
lime.graphics.cairo._CairoContent.CairoContent_Impl_.ALPHA = 8192;
lime.graphics.cairo._CairoContent.CairoContent_Impl_.COLOR_ALPHA = 12288;
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_.NONE = 0;
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_.REPEAT = 1;
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_.REFLECT = 2;
lime.graphics.cairo._CairoExtend.CairoExtend_Impl_.PAD = 3;
lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_.WINDING = 0;
lime.graphics.cairo._CairoFillRule.CairoFillRule_Impl_.EVEN_ODD = 1;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.FAST = 0;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.GOOD = 1;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.BEST = 2;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.NEAREST = 3;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.BILINEAR = 4;
lime.graphics.cairo._CairoFilter.CairoFilter_Impl_.GAUSSIAN = 5;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.INVALID = -1;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.ARGB32 = 0;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.RGB24 = 1;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.A8 = 2;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.A1 = 3;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.RGB16_565 = 4;
lime.graphics.cairo._CairoFormat.CairoFormat_Impl_.RGB30 = 5;
lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_.BUTT = 0;
lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_.ROUND = 1;
lime.graphics.cairo._CairoLineCap.CairoLineCap_Impl_.SQUARE = 2;
lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_.MITER = 0;
lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_.ROUND = 1;
lime.graphics.cairo._CairoLineJoin.CairoLineJoin_Impl_.BEVEL = 2;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.CLEAR = 0;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.SOURCE = 1;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.OVER = 2;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.IN = 3;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.OUT = 4;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.ATOP = 5;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DEST = 6;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DEST_OVER = 7;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DEST_IN = 8;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DEST_OUT = 9;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DEST_ATOP = 10;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.XOR = 11;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.ADD = 12;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.SATURATE = 13;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.MULTIPLY = 14;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.SCREEN = 15;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.OVERLAY = 16;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DARKEN = 17;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.LIGHTEN = 18;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.COLOR_DODGE = 19;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.COLOR_BURN = 20;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.HARD_LIGHT = 21;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.SOFT_LIGHT = 22;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.DIFFERENCE = 23;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.EXCLUSION = 24;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.HSL_HUE = 25;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.HSL_SATURATION = 26;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.HSL_COLOR = 27;
lime.graphics.cairo._CairoOperator.CairoOperator_Impl_.HSL_LUMINOSITY = 28;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.SUCCESS = 0;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.NO_MEMORY = 1;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_RESTORE = 2;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_POP_GROUP = 3;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.NO_CURRENT_POINT = 4;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_MATRIX = 5;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_STATUS = 6;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.NULL_POINTER = 7;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_STRING = 8;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_PATH_DATA = 9;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.READ_ERROR = 10;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.WRITE_ERROR = 11;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.SURFACE_FINISHED = 12;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.SURFACE_TYPE_MISMATCH = 13;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.PATTERN_TYPE_MISMATCH = 14;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_CONTENT = 15;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_FORMAT = 16;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_VISUAL = 17;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.FILE_NOT_FOUND = 18;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_DASH = 19;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_DSC_COMMENT = 20;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_INDEX = 21;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.CLIP_NOT_REPRESENTABLE = 22;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.TEMP_FILE_ERROR = 23;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_STRIDE = 24;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.FONT_TYPE_MISMATCH = 25;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.USER_FONT_IMMUTABLE = 26;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.USER_FONT_ERROR = 27;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.NEGATIVE_COUNT = 28;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_CLUSTERS = 29;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_SLANT = 30;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_WEIGHT = 31;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_SIZE = 32;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.USER_FONT_NOT_IMPLEMENTED = 33;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.DEVICE_TYPE_MISMATCH = 34;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.DEVICE_ERROR = 35;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.INVALID_MESH_CONSTRUCTION = 36;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.DEVICE_FINISHED = 37;
lime.graphics.cairo._CairoStatus.CairoStatus_Impl_.JBIG2_GLOBAL_MISSING = 38;
lime.graphics.opengl.GL.DEPTH_BUFFER_BIT = 256;
lime.graphics.opengl.GL.STENCIL_BUFFER_BIT = 1024;
lime.graphics.opengl.GL.COLOR_BUFFER_BIT = 16384;
lime.graphics.opengl.GL.POINTS = 0;
lime.graphics.opengl.GL.LINES = 1;
lime.graphics.opengl.GL.LINE_LOOP = 2;
lime.graphics.opengl.GL.LINE_STRIP = 3;
lime.graphics.opengl.GL.TRIANGLES = 4;
lime.graphics.opengl.GL.TRIANGLE_STRIP = 5;
lime.graphics.opengl.GL.TRIANGLE_FAN = 6;
lime.graphics.opengl.GL.ZERO = 0;
lime.graphics.opengl.GL.ONE = 1;
lime.graphics.opengl.GL.SRC_COLOR = 768;
lime.graphics.opengl.GL.ONE_MINUS_SRC_COLOR = 769;
lime.graphics.opengl.GL.SRC_ALPHA = 770;
lime.graphics.opengl.GL.ONE_MINUS_SRC_ALPHA = 771;
lime.graphics.opengl.GL.DST_ALPHA = 772;
lime.graphics.opengl.GL.ONE_MINUS_DST_ALPHA = 773;
lime.graphics.opengl.GL.DST_COLOR = 774;
lime.graphics.opengl.GL.ONE_MINUS_DST_COLOR = 775;
lime.graphics.opengl.GL.SRC_ALPHA_SATURATE = 776;
lime.graphics.opengl.GL.FUNC_ADD = 32774;
lime.graphics.opengl.GL.BLEND_EQUATION = 32777;
lime.graphics.opengl.GL.BLEND_EQUATION_RGB = 32777;
lime.graphics.opengl.GL.BLEND_EQUATION_ALPHA = 34877;
lime.graphics.opengl.GL.FUNC_SUBTRACT = 32778;
lime.graphics.opengl.GL.FUNC_REVERSE_SUBTRACT = 32779;
lime.graphics.opengl.GL.BLEND_DST_RGB = 32968;
lime.graphics.opengl.GL.BLEND_SRC_RGB = 32969;
lime.graphics.opengl.GL.BLEND_DST_ALPHA = 32970;
lime.graphics.opengl.GL.BLEND_SRC_ALPHA = 32971;
lime.graphics.opengl.GL.CONSTANT_COLOR = 32769;
lime.graphics.opengl.GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime.graphics.opengl.GL.CONSTANT_ALPHA = 32771;
lime.graphics.opengl.GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime.graphics.opengl.GL.BLEND_COLOR = 32773;
lime.graphics.opengl.GL.ARRAY_BUFFER = 34962;
lime.graphics.opengl.GL.ELEMENT_ARRAY_BUFFER = 34963;
lime.graphics.opengl.GL.ARRAY_BUFFER_BINDING = 34964;
lime.graphics.opengl.GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime.graphics.opengl.GL.STREAM_DRAW = 35040;
lime.graphics.opengl.GL.STATIC_DRAW = 35044;
lime.graphics.opengl.GL.DYNAMIC_DRAW = 35048;
lime.graphics.opengl.GL.BUFFER_SIZE = 34660;
lime.graphics.opengl.GL.BUFFER_USAGE = 34661;
lime.graphics.opengl.GL.CURRENT_VERTEX_ATTRIB = 34342;
lime.graphics.opengl.GL.FRONT = 1028;
lime.graphics.opengl.GL.BACK = 1029;
lime.graphics.opengl.GL.FRONT_AND_BACK = 1032;
lime.graphics.opengl.GL.CULL_FACE = 2884;
lime.graphics.opengl.GL.BLEND = 3042;
lime.graphics.opengl.GL.DITHER = 3024;
lime.graphics.opengl.GL.STENCIL_TEST = 2960;
lime.graphics.opengl.GL.DEPTH_TEST = 2929;
lime.graphics.opengl.GL.SCISSOR_TEST = 3089;
lime.graphics.opengl.GL.POLYGON_OFFSET_FILL = 32823;
lime.graphics.opengl.GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime.graphics.opengl.GL.SAMPLE_COVERAGE = 32928;
lime.graphics.opengl.GL.NO_ERROR = 0;
lime.graphics.opengl.GL.INVALID_ENUM = 1280;
lime.graphics.opengl.GL.INVALID_VALUE = 1281;
lime.graphics.opengl.GL.INVALID_OPERATION = 1282;
lime.graphics.opengl.GL.OUT_OF_MEMORY = 1285;
lime.graphics.opengl.GL.CW = 2304;
lime.graphics.opengl.GL.CCW = 2305;
lime.graphics.opengl.GL.LINE_WIDTH = 2849;
lime.graphics.opengl.GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime.graphics.opengl.GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime.graphics.opengl.GL.CULL_FACE_MODE = 2885;
lime.graphics.opengl.GL.FRONT_FACE = 2886;
lime.graphics.opengl.GL.DEPTH_RANGE = 2928;
lime.graphics.opengl.GL.DEPTH_WRITEMASK = 2930;
lime.graphics.opengl.GL.DEPTH_CLEAR_VALUE = 2931;
lime.graphics.opengl.GL.DEPTH_FUNC = 2932;
lime.graphics.opengl.GL.STENCIL_CLEAR_VALUE = 2961;
lime.graphics.opengl.GL.STENCIL_FUNC = 2962;
lime.graphics.opengl.GL.STENCIL_FAIL = 2964;
lime.graphics.opengl.GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime.graphics.opengl.GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime.graphics.opengl.GL.STENCIL_REF = 2967;
lime.graphics.opengl.GL.STENCIL_VALUE_MASK = 2963;
lime.graphics.opengl.GL.STENCIL_WRITEMASK = 2968;
lime.graphics.opengl.GL.STENCIL_BACK_FUNC = 34816;
lime.graphics.opengl.GL.STENCIL_BACK_FAIL = 34817;
lime.graphics.opengl.GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime.graphics.opengl.GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime.graphics.opengl.GL.STENCIL_BACK_REF = 36003;
lime.graphics.opengl.GL.STENCIL_BACK_VALUE_MASK = 36004;
lime.graphics.opengl.GL.STENCIL_BACK_WRITEMASK = 36005;
lime.graphics.opengl.GL.VIEWPORT = 2978;
lime.graphics.opengl.GL.SCISSOR_BOX = 3088;
lime.graphics.opengl.GL.COLOR_CLEAR_VALUE = 3106;
lime.graphics.opengl.GL.COLOR_WRITEMASK = 3107;
lime.graphics.opengl.GL.UNPACK_ALIGNMENT = 3317;
lime.graphics.opengl.GL.PACK_ALIGNMENT = 3333;
lime.graphics.opengl.GL.MAX_TEXTURE_SIZE = 3379;
lime.graphics.opengl.GL.MAX_VIEWPORT_DIMS = 3386;
lime.graphics.opengl.GL.SUBPIXEL_BITS = 3408;
lime.graphics.opengl.GL.RED_BITS = 3410;
lime.graphics.opengl.GL.GREEN_BITS = 3411;
lime.graphics.opengl.GL.BLUE_BITS = 3412;
lime.graphics.opengl.GL.ALPHA_BITS = 3413;
lime.graphics.opengl.GL.DEPTH_BITS = 3414;
lime.graphics.opengl.GL.STENCIL_BITS = 3415;
lime.graphics.opengl.GL.POLYGON_OFFSET_UNITS = 10752;
lime.graphics.opengl.GL.POLYGON_OFFSET_FACTOR = 32824;
lime.graphics.opengl.GL.TEXTURE_BINDING_2D = 32873;
lime.graphics.opengl.GL.SAMPLE_BUFFERS = 32936;
lime.graphics.opengl.GL.SAMPLES = 32937;
lime.graphics.opengl.GL.SAMPLE_COVERAGE_VALUE = 32938;
lime.graphics.opengl.GL.SAMPLE_COVERAGE_INVERT = 32939;
lime.graphics.opengl.GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime.graphics.opengl.GL.DONT_CARE = 4352;
lime.graphics.opengl.GL.FASTEST = 4353;
lime.graphics.opengl.GL.NICEST = 4354;
lime.graphics.opengl.GL.GENERATE_MIPMAP_HINT = 33170;
lime.graphics.opengl.GL.BYTE = 5120;
lime.graphics.opengl.GL.UNSIGNED_BYTE = 5121;
lime.graphics.opengl.GL.SHORT = 5122;
lime.graphics.opengl.GL.UNSIGNED_SHORT = 5123;
lime.graphics.opengl.GL.INT = 5124;
lime.graphics.opengl.GL.UNSIGNED_INT = 5125;
lime.graphics.opengl.GL.FLOAT = 5126;
lime.graphics.opengl.GL.DEPTH_COMPONENT = 6402;
lime.graphics.opengl.GL.ALPHA = 6406;
lime.graphics.opengl.GL.RGB = 6407;
lime.graphics.opengl.GL.RGBA = 6408;
lime.graphics.opengl.GL.LUMINANCE = 6409;
lime.graphics.opengl.GL.LUMINANCE_ALPHA = 6410;
lime.graphics.opengl.GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime.graphics.opengl.GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime.graphics.opengl.GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime.graphics.opengl.GL.FRAGMENT_SHADER = 35632;
lime.graphics.opengl.GL.VERTEX_SHADER = 35633;
lime.graphics.opengl.GL.MAX_VERTEX_ATTRIBS = 34921;
lime.graphics.opengl.GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime.graphics.opengl.GL.MAX_VARYING_VECTORS = 36348;
lime.graphics.opengl.GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime.graphics.opengl.GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime.graphics.opengl.GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime.graphics.opengl.GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime.graphics.opengl.GL.SHADER_TYPE = 35663;
lime.graphics.opengl.GL.DELETE_STATUS = 35712;
lime.graphics.opengl.GL.LINK_STATUS = 35714;
lime.graphics.opengl.GL.VALIDATE_STATUS = 35715;
lime.graphics.opengl.GL.ATTACHED_SHADERS = 35717;
lime.graphics.opengl.GL.ACTIVE_UNIFORMS = 35718;
lime.graphics.opengl.GL.ACTIVE_ATTRIBUTES = 35721;
lime.graphics.opengl.GL.SHADING_LANGUAGE_VERSION = 35724;
lime.graphics.opengl.GL.CURRENT_PROGRAM = 35725;
lime.graphics.opengl.GL.NEVER = 512;
lime.graphics.opengl.GL.LESS = 513;
lime.graphics.opengl.GL.EQUAL = 514;
lime.graphics.opengl.GL.LEQUAL = 515;
lime.graphics.opengl.GL.GREATER = 516;
lime.graphics.opengl.GL.NOTEQUAL = 517;
lime.graphics.opengl.GL.GEQUAL = 518;
lime.graphics.opengl.GL.ALWAYS = 519;
lime.graphics.opengl.GL.KEEP = 7680;
lime.graphics.opengl.GL.REPLACE = 7681;
lime.graphics.opengl.GL.INCR = 7682;
lime.graphics.opengl.GL.DECR = 7683;
lime.graphics.opengl.GL.INVERT = 5386;
lime.graphics.opengl.GL.INCR_WRAP = 34055;
lime.graphics.opengl.GL.DECR_WRAP = 34056;
lime.graphics.opengl.GL.VENDOR = 7936;
lime.graphics.opengl.GL.RENDERER = 7937;
lime.graphics.opengl.GL.VERSION = 7938;
lime.graphics.opengl.GL.NEAREST = 9728;
lime.graphics.opengl.GL.LINEAR = 9729;
lime.graphics.opengl.GL.NEAREST_MIPMAP_NEAREST = 9984;
lime.graphics.opengl.GL.LINEAR_MIPMAP_NEAREST = 9985;
lime.graphics.opengl.GL.NEAREST_MIPMAP_LINEAR = 9986;
lime.graphics.opengl.GL.LINEAR_MIPMAP_LINEAR = 9987;
lime.graphics.opengl.GL.TEXTURE_MAG_FILTER = 10240;
lime.graphics.opengl.GL.TEXTURE_MIN_FILTER = 10241;
lime.graphics.opengl.GL.TEXTURE_WRAP_S = 10242;
lime.graphics.opengl.GL.TEXTURE_WRAP_T = 10243;
lime.graphics.opengl.GL.TEXTURE_2D = 3553;
lime.graphics.opengl.GL.TEXTURE = 5890;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP = 34067;
lime.graphics.opengl.GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime.graphics.opengl.GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime.graphics.opengl.GL.TEXTURE0 = 33984;
lime.graphics.opengl.GL.TEXTURE1 = 33985;
lime.graphics.opengl.GL.TEXTURE2 = 33986;
lime.graphics.opengl.GL.TEXTURE3 = 33987;
lime.graphics.opengl.GL.TEXTURE4 = 33988;
lime.graphics.opengl.GL.TEXTURE5 = 33989;
lime.graphics.opengl.GL.TEXTURE6 = 33990;
lime.graphics.opengl.GL.TEXTURE7 = 33991;
lime.graphics.opengl.GL.TEXTURE8 = 33992;
lime.graphics.opengl.GL.TEXTURE9 = 33993;
lime.graphics.opengl.GL.TEXTURE10 = 33994;
lime.graphics.opengl.GL.TEXTURE11 = 33995;
lime.graphics.opengl.GL.TEXTURE12 = 33996;
lime.graphics.opengl.GL.TEXTURE13 = 33997;
lime.graphics.opengl.GL.TEXTURE14 = 33998;
lime.graphics.opengl.GL.TEXTURE15 = 33999;
lime.graphics.opengl.GL.TEXTURE16 = 34000;
lime.graphics.opengl.GL.TEXTURE17 = 34001;
lime.graphics.opengl.GL.TEXTURE18 = 34002;
lime.graphics.opengl.GL.TEXTURE19 = 34003;
lime.graphics.opengl.GL.TEXTURE20 = 34004;
lime.graphics.opengl.GL.TEXTURE21 = 34005;
lime.graphics.opengl.GL.TEXTURE22 = 34006;
lime.graphics.opengl.GL.TEXTURE23 = 34007;
lime.graphics.opengl.GL.TEXTURE24 = 34008;
lime.graphics.opengl.GL.TEXTURE25 = 34009;
lime.graphics.opengl.GL.TEXTURE26 = 34010;
lime.graphics.opengl.GL.TEXTURE27 = 34011;
lime.graphics.opengl.GL.TEXTURE28 = 34012;
lime.graphics.opengl.GL.TEXTURE29 = 34013;
lime.graphics.opengl.GL.TEXTURE30 = 34014;
lime.graphics.opengl.GL.TEXTURE31 = 34015;
lime.graphics.opengl.GL.ACTIVE_TEXTURE = 34016;
lime.graphics.opengl.GL.REPEAT = 10497;
lime.graphics.opengl.GL.CLAMP_TO_EDGE = 33071;
lime.graphics.opengl.GL.MIRRORED_REPEAT = 33648;
lime.graphics.opengl.GL.FLOAT_VEC2 = 35664;
lime.graphics.opengl.GL.FLOAT_VEC3 = 35665;
lime.graphics.opengl.GL.FLOAT_VEC4 = 35666;
lime.graphics.opengl.GL.INT_VEC2 = 35667;
lime.graphics.opengl.GL.INT_VEC3 = 35668;
lime.graphics.opengl.GL.INT_VEC4 = 35669;
lime.graphics.opengl.GL.BOOL = 35670;
lime.graphics.opengl.GL.BOOL_VEC2 = 35671;
lime.graphics.opengl.GL.BOOL_VEC3 = 35672;
lime.graphics.opengl.GL.BOOL_VEC4 = 35673;
lime.graphics.opengl.GL.FLOAT_MAT2 = 35674;
lime.graphics.opengl.GL.FLOAT_MAT3 = 35675;
lime.graphics.opengl.GL.FLOAT_MAT4 = 35676;
lime.graphics.opengl.GL.SAMPLER_2D = 35678;
lime.graphics.opengl.GL.SAMPLER_CUBE = 35680;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime.graphics.opengl.GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime.graphics.opengl.GL.POINT_SPRITE = 34913;
lime.graphics.opengl.GL.COMPILE_STATUS = 35713;
lime.graphics.opengl.GL.LOW_FLOAT = 36336;
lime.graphics.opengl.GL.MEDIUM_FLOAT = 36337;
lime.graphics.opengl.GL.HIGH_FLOAT = 36338;
lime.graphics.opengl.GL.LOW_INT = 36339;
lime.graphics.opengl.GL.MEDIUM_INT = 36340;
lime.graphics.opengl.GL.HIGH_INT = 36341;
lime.graphics.opengl.GL.FRAMEBUFFER = 36160;
lime.graphics.opengl.GL.RENDERBUFFER = 36161;
lime.graphics.opengl.GL.RGBA4 = 32854;
lime.graphics.opengl.GL.RGB5_A1 = 32855;
lime.graphics.opengl.GL.RGB565 = 36194;
lime.graphics.opengl.GL.DEPTH_COMPONENT16 = 33189;
lime.graphics.opengl.GL.STENCIL_INDEX = 6401;
lime.graphics.opengl.GL.STENCIL_INDEX8 = 36168;
lime.graphics.opengl.GL.DEPTH_STENCIL = 34041;
lime.graphics.opengl.GL.RENDERBUFFER_WIDTH = 36162;
lime.graphics.opengl.GL.RENDERBUFFER_HEIGHT = 36163;
lime.graphics.opengl.GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime.graphics.opengl.GL.RENDERBUFFER_RED_SIZE = 36176;
lime.graphics.opengl.GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime.graphics.opengl.GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime.graphics.opengl.GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime.graphics.opengl.GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime.graphics.opengl.GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime.graphics.opengl.GL.COLOR_ATTACHMENT0 = 36064;
lime.graphics.opengl.GL.DEPTH_ATTACHMENT = 36096;
lime.graphics.opengl.GL.STENCIL_ATTACHMENT = 36128;
lime.graphics.opengl.GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime.graphics.opengl.GL.NONE = 0;
lime.graphics.opengl.GL.FRAMEBUFFER_COMPLETE = 36053;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime.graphics.opengl.GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime.graphics.opengl.GL.FRAMEBUFFER_BINDING = 36006;
lime.graphics.opengl.GL.RENDERBUFFER_BINDING = 36007;
lime.graphics.opengl.GL.MAX_RENDERBUFFER_SIZE = 34024;
lime.graphics.opengl.GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime.graphics.opengl.GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime.graphics.opengl.GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime.graphics.opengl.GL.CONTEXT_LOST_WEBGL = 37442;
lime.graphics.opengl.GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime.graphics.opengl.GL.BROWSER_DEFAULT_WEBGL = 37444;
lime.math._ColorMatrix.ColorMatrix_Impl_.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime.math.Matrix3.__identity = new lime.math.Matrix3();
lime.math._Matrix4.Matrix4_Impl_.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime.net._URLRequestMethod.URLRequestMethod_Impl_.DELETE = "DELETE";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.GET = "GET";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.HEAD = "HEAD";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.OPTIONS = "OPTIONS";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.POST = "POST";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.PUT = "PUT";
lime.system._System.SystemDirectory_Impl_.APPLICATION = 0;
lime.system._System.SystemDirectory_Impl_.APPLICATION_STORAGE = 1;
lime.system._System.SystemDirectory_Impl_.DESKTOP = 2;
lime.system._System.SystemDirectory_Impl_.DOCUMENTS = 3;
lime.system._System.SystemDirectory_Impl_.FONTS = 4;
lime.system._System.SystemDirectory_Impl_.USER = 5;
lime.text._TextDirection.TextDirection_Impl_.INVALID = 0;
lime.text._TextDirection.TextDirection_Impl_.LEFT_TO_RIGHT = 4;
lime.text._TextDirection.TextDirection_Impl_.RIGHT_TO_LEFT = 5;
lime.text._TextDirection.TextDirection_Impl_.TOP_TO_BOTTOM = 6;
lime.text._TextDirection.TextDirection_Impl_.BOTTOM_TO_TOP = 7;
lime.text._TextScript.TextScript_Impl_.COMMON = "Zyyy";
lime.text._TextScript.TextScript_Impl_.INHERITED = "Zinh";
lime.text._TextScript.TextScript_Impl_.UNKNOWN = "Zzzz";
lime.text._TextScript.TextScript_Impl_.ARABIC = "Arab";
lime.text._TextScript.TextScript_Impl_.ARMENIAN = "Armn";
lime.text._TextScript.TextScript_Impl_.BENGALI = "Beng";
lime.text._TextScript.TextScript_Impl_.CYRILLIC = "Cyrl";
lime.text._TextScript.TextScript_Impl_.DEVANAGARI = "Deva";
lime.text._TextScript.TextScript_Impl_.GEORGIAN = "Geor";
lime.text._TextScript.TextScript_Impl_.GREEK = "Grek";
lime.text._TextScript.TextScript_Impl_.GUJARATI = "Gujr";
lime.text._TextScript.TextScript_Impl_.GURMUKHI = "Guru";
lime.text._TextScript.TextScript_Impl_.HANGUL = "Hang";
lime.text._TextScript.TextScript_Impl_.HAN = "Hani";
lime.text._TextScript.TextScript_Impl_.HEBREW = "Hebr";
lime.text._TextScript.TextScript_Impl_.HIRAGANA = "Hira";
lime.text._TextScript.TextScript_Impl_.KANNADA = "Knda";
lime.text._TextScript.TextScript_Impl_.KATAKANA = "Kana";
lime.text._TextScript.TextScript_Impl_.LAO = "Laoo";
lime.text._TextScript.TextScript_Impl_.LATIN = "Latn";
lime.text._TextScript.TextScript_Impl_.MALAYALAM = "Mlym";
lime.text._TextScript.TextScript_Impl_.ORIYA = "Orya";
lime.text._TextScript.TextScript_Impl_.TAMIL = "Taml";
lime.text._TextScript.TextScript_Impl_.TELUGA = "Telu";
lime.text._TextScript.TextScript_Impl_.THAI = "Thai";
lime.text._TextScript.TextScript_Impl_.TIBETAN = "Tibt";
lime.text._TextScript.TextScript_Impl_.BOPOMOFO = "Bopo";
lime.text._TextScript.TextScript_Impl_.BRAILLE = "Brai";
lime.text._TextScript.TextScript_Impl_.CANADIAN_SYLLABICS = "Cans";
lime.text._TextScript.TextScript_Impl_.CHEROKEE = "Cher";
lime.text._TextScript.TextScript_Impl_.ETHIOPIC = "Ethi";
lime.text._TextScript.TextScript_Impl_.KHMER = "Khmr";
lime.text._TextScript.TextScript_Impl_.MONGOLIAN = "Mong";
lime.text._TextScript.TextScript_Impl_.MYANMAR = "Mymr";
lime.text._TextScript.TextScript_Impl_.OGHAM = "Ogam";
lime.text._TextScript.TextScript_Impl_.RUNIC = "Runr";
lime.text._TextScript.TextScript_Impl_.SINHALA = "Sinh";
lime.text._TextScript.TextScript_Impl_.SYRIAC = "Syrc";
lime.text._TextScript.TextScript_Impl_.THAANA = "Thaa";
lime.text._TextScript.TextScript_Impl_.YI = "Yiii";
lime.text._TextScript.TextScript_Impl_.DESERET = "Dsrt";
lime.text._TextScript.TextScript_Impl_.GOTHIC = "Goth";
lime.text._TextScript.TextScript_Impl_.OLD_ITALIC = "Ital";
lime.text._TextScript.TextScript_Impl_.BUHID = "Buhd";
lime.text._TextScript.TextScript_Impl_.HANUNOO = "Hano";
lime.text._TextScript.TextScript_Impl_.TAGALOG = "Tglg";
lime.text._TextScript.TextScript_Impl_.TAGBANWA = "Tagb";
lime.text._TextScript.TextScript_Impl_.CYPRIOT = "Cprt";
lime.text._TextScript.TextScript_Impl_.LIMBU = "Limb";
lime.text._TextScript.TextScript_Impl_.LINEAR_B = "Linb";
lime.text._TextScript.TextScript_Impl_.OSMANYA = "Osma";
lime.text._TextScript.TextScript_Impl_.SHAVIAN = "Shaw";
lime.text._TextScript.TextScript_Impl_.TAI_LE = "Tale";
lime.text._TextScript.TextScript_Impl_.UGARITIC = "Ugar";
lime.text._TextScript.TextScript_Impl_.BUGINESE = "Bugi";
lime.text._TextScript.TextScript_Impl_.COPTIC = "Copt";
lime.text._TextScript.TextScript_Impl_.GLAGOLITIC = "Glag";
lime.text._TextScript.TextScript_Impl_.KHAROSHTHI = "Khar";
lime.text._TextScript.TextScript_Impl_.NEW_TAI_LUE = "Talu";
lime.text._TextScript.TextScript_Impl_.OLD_PERSIAN = "Xpeo";
lime.text._TextScript.TextScript_Impl_.SYLOTI_NAGRI = "Sylo";
lime.text._TextScript.TextScript_Impl_.TIFINAGH = "Tfng";
lime.text._TextScript.TextScript_Impl_.BALINESE = "Bali";
lime.text._TextScript.TextScript_Impl_.CUNEIFORM = "Xsux";
lime.text._TextScript.TextScript_Impl_.NKO = "Nkoo";
lime.text._TextScript.TextScript_Impl_.PHAGS_PA = "Phag";
lime.text._TextScript.TextScript_Impl_.PHOENICIAN = "Phnx";
lime.text._TextScript.TextScript_Impl_.CARIAN = "Cari";
lime.text._TextScript.TextScript_Impl_.CHAM = "Cham";
lime.text._TextScript.TextScript_Impl_.KAYAH_LI = "Kali";
lime.text._TextScript.TextScript_Impl_.LEPCHA = "Lepc";
lime.text._TextScript.TextScript_Impl_.LYCIAN = "Lyci";
lime.text._TextScript.TextScript_Impl_.LYDIAN = "Lydi";
lime.text._TextScript.TextScript_Impl_.OL_CHIKI = "Olck";
lime.text._TextScript.TextScript_Impl_.REJANG = "Rjng";
lime.text._TextScript.TextScript_Impl_.SAURASHTRA = "Saur";
lime.text._TextScript.TextScript_Impl_.SUNDANESE = "Sund";
lime.text._TextScript.TextScript_Impl_.VAI = "Vaii";
lime.text._TextScript.TextScript_Impl_.AVESTAN = "Avst";
lime.text._TextScript.TextScript_Impl_.BAMUM = "Bamu";
lime.text._TextScript.TextScript_Impl_.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime.text._TextScript.TextScript_Impl_.IMPERIAL_ARAMAIC = "Armi";
lime.text._TextScript.TextScript_Impl_.INSCRIPTIONAL_PAHLAVI = "Phli";
lime.text._TextScript.TextScript_Impl_.INSCRIPTIONAL_PARTHIAN = "Prti";
lime.text._TextScript.TextScript_Impl_.JAVANESE = "Java";
lime.text._TextScript.TextScript_Impl_.KAITHI = "Kthi";
lime.text._TextScript.TextScript_Impl_.LISU = "Lisu";
lime.text._TextScript.TextScript_Impl_.MEETEI_MAYEK = "Mtei";
lime.text._TextScript.TextScript_Impl_.OLD_SOUTH_ARABIAN = "Sarb";
lime.text._TextScript.TextScript_Impl_.OLD_TURKIC = "Orkh";
lime.text._TextScript.TextScript_Impl_.SAMARITAN = "Samr";
lime.text._TextScript.TextScript_Impl_.TAI_THAM = "Lana";
lime.text._TextScript.TextScript_Impl_.TAI_VIET = "Tavt";
lime.text._TextScript.TextScript_Impl_.BATAK = "Batk";
lime.text._TextScript.TextScript_Impl_.BRAHMI = "Brah";
lime.text._TextScript.TextScript_Impl_.MANDAIC = "Mand";
lime.text._TextScript.TextScript_Impl_.CHAKMA = "Cakm";
lime.text._TextScript.TextScript_Impl_.MEROITIC_CURSIVE = "Merc";
lime.text._TextScript.TextScript_Impl_.MEROITIC_HIEROGLYPHS = "Mero";
lime.text._TextScript.TextScript_Impl_.MIAO = "Plrd";
lime.text._TextScript.TextScript_Impl_.SHARADA = "Shrd";
lime.text._TextScript.TextScript_Impl_.SORA_SOMPENG = "Sora";
lime.text._TextScript.TextScript_Impl_.TAKRI = "Takr";
lime.text._TextScript.TextScript_Impl_.BASSA_VAH = "Bass";
lime.text._TextScript.TextScript_Impl_.CAUCASIAN_ALBANIAN = "Aghb";
lime.text._TextScript.TextScript_Impl_.DUPLOYAN = "Dupl";
lime.text._TextScript.TextScript_Impl_.ELBASAN = "Elba";
lime.text._TextScript.TextScript_Impl_.GRANTHA = "Gran";
lime.text._TextScript.TextScript_Impl_.KHOJKI = "Khoj";
lime.text._TextScript.TextScript_Impl_.KHUDAWADI = "Sind";
lime.text._TextScript.TextScript_Impl_.LINEAR_A = "Lina";
lime.text._TextScript.TextScript_Impl_.MAHAJANI = "Mahj";
lime.text._TextScript.TextScript_Impl_.MANICHAEAN = "Mani";
lime.text._TextScript.TextScript_Impl_.MENDE_KIKAKUI = "Mend";
lime.text._TextScript.TextScript_Impl_.MODI = "Modi";
lime.text._TextScript.TextScript_Impl_.MRO = "Mroo";
lime.text._TextScript.TextScript_Impl_.NABATAEAN = "Nbat";
lime.text._TextScript.TextScript_Impl_.OLD_NORTH_ARABIAN = "Narb";
lime.text._TextScript.TextScript_Impl_.OLD_PERMIC = "Perm";
lime.text._TextScript.TextScript_Impl_.PAHAWH_HMONG = "Hmng";
lime.text._TextScript.TextScript_Impl_.PALMYRENE = "Palm";
lime.text._TextScript.TextScript_Impl_.PAU_CIN_HAU = "Pauc";
lime.text._TextScript.TextScript_Impl_.PSALTER_PAHLAVI = "Phlp";
lime.text._TextScript.TextScript_Impl_.SIDDHAM = "Sidd";
lime.text._TextScript.TextScript_Impl_.TIRHUTA = "Tirh";
lime.text._TextScript.TextScript_Impl_.WARANG_CITI = "Wara";
lime.ui.Gamepad.devices = new haxe.ds.IntMap();
lime.ui._GamepadAxis.GamepadAxis_Impl_.LEFT_X = 0;
lime.ui._GamepadAxis.GamepadAxis_Impl_.LEFT_Y = 1;
lime.ui._GamepadAxis.GamepadAxis_Impl_.RIGHT_X = 2;
lime.ui._GamepadAxis.GamepadAxis_Impl_.RIGHT_Y = 3;
lime.ui._GamepadAxis.GamepadAxis_Impl_.TRIGGER_LEFT = 4;
lime.ui._GamepadAxis.GamepadAxis_Impl_.TRIGGER_RIGHT = 5;
lime.ui._GamepadButton.GamepadButton_Impl_.A = 0;
lime.ui._GamepadButton.GamepadButton_Impl_.B = 1;
lime.ui._GamepadButton.GamepadButton_Impl_.X = 2;
lime.ui._GamepadButton.GamepadButton_Impl_.Y = 3;
lime.ui._GamepadButton.GamepadButton_Impl_.BACK = 4;
lime.ui._GamepadButton.GamepadButton_Impl_.GUIDE = 5;
lime.ui._GamepadButton.GamepadButton_Impl_.START = 6;
lime.ui._GamepadButton.GamepadButton_Impl_.LEFT_STICK = 7;
lime.ui._GamepadButton.GamepadButton_Impl_.RIGHT_STICK = 8;
lime.ui._GamepadButton.GamepadButton_Impl_.LEFT_SHOULDER = 9;
lime.ui._GamepadButton.GamepadButton_Impl_.RIGHT_SHOULDER = 10;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_UP = 11;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_DOWN = 12;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_LEFT = 13;
lime.ui._GamepadButton.GamepadButton_Impl_.DPAD_RIGHT = 14;
lime.ui._KeyCode.KeyCode_Impl_.UNKNOWN = 0;
lime.ui._KeyCode.KeyCode_Impl_.BACKSPACE = 8;
lime.ui._KeyCode.KeyCode_Impl_.TAB = 9;
lime.ui._KeyCode.KeyCode_Impl_.RETURN = 13;
lime.ui._KeyCode.KeyCode_Impl_.ESCAPE = 27;
lime.ui._KeyCode.KeyCode_Impl_.SPACE = 32;
lime.ui._KeyCode.KeyCode_Impl_.EXCLAMATION = 33;
lime.ui._KeyCode.KeyCode_Impl_.QUOTE = 34;
lime.ui._KeyCode.KeyCode_Impl_.HASH = 35;
lime.ui._KeyCode.KeyCode_Impl_.DOLLAR = 36;
lime.ui._KeyCode.KeyCode_Impl_.PERCENT = 37;
lime.ui._KeyCode.KeyCode_Impl_.AMPERSAND = 38;
lime.ui._KeyCode.KeyCode_Impl_.SINGLE_QUOTE = 39;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_PARENTHESIS = 40;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_PARENTHESIS = 41;
lime.ui._KeyCode.KeyCode_Impl_.ASTERISK = 42;
lime.ui._KeyCode.KeyCode_Impl_.PLUS = 43;
lime.ui._KeyCode.KeyCode_Impl_.COMMA = 44;
lime.ui._KeyCode.KeyCode_Impl_.MINUS = 45;
lime.ui._KeyCode.KeyCode_Impl_.PERIOD = 46;
lime.ui._KeyCode.KeyCode_Impl_.SLASH = 47;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_0 = 48;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_1 = 49;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_2 = 50;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_3 = 51;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_4 = 52;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_5 = 53;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_6 = 54;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_7 = 55;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_8 = 56;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_9 = 57;
lime.ui._KeyCode.KeyCode_Impl_.COLON = 58;
lime.ui._KeyCode.KeyCode_Impl_.SEMICOLON = 59;
lime.ui._KeyCode.KeyCode_Impl_.LESS_THAN = 60;
lime.ui._KeyCode.KeyCode_Impl_.EQUALS = 61;
lime.ui._KeyCode.KeyCode_Impl_.GREATER_THAN = 62;
lime.ui._KeyCode.KeyCode_Impl_.QUESTION = 63;
lime.ui._KeyCode.KeyCode_Impl_.AT = 64;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_BRACKET = 91;
lime.ui._KeyCode.KeyCode_Impl_.BACKSLASH = 92;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_BRACKET = 93;
lime.ui._KeyCode.KeyCode_Impl_.CARET = 94;
lime.ui._KeyCode.KeyCode_Impl_.UNDERSCORE = 95;
lime.ui._KeyCode.KeyCode_Impl_.GRAVE = 96;
lime.ui._KeyCode.KeyCode_Impl_.A = 97;
lime.ui._KeyCode.KeyCode_Impl_.B = 98;
lime.ui._KeyCode.KeyCode_Impl_.C = 99;
lime.ui._KeyCode.KeyCode_Impl_.D = 100;
lime.ui._KeyCode.KeyCode_Impl_.E = 101;
lime.ui._KeyCode.KeyCode_Impl_.F = 102;
lime.ui._KeyCode.KeyCode_Impl_.G = 103;
lime.ui._KeyCode.KeyCode_Impl_.H = 104;
lime.ui._KeyCode.KeyCode_Impl_.I = 105;
lime.ui._KeyCode.KeyCode_Impl_.J = 106;
lime.ui._KeyCode.KeyCode_Impl_.K = 107;
lime.ui._KeyCode.KeyCode_Impl_.L = 108;
lime.ui._KeyCode.KeyCode_Impl_.M = 109;
lime.ui._KeyCode.KeyCode_Impl_.N = 110;
lime.ui._KeyCode.KeyCode_Impl_.O = 111;
lime.ui._KeyCode.KeyCode_Impl_.P = 112;
lime.ui._KeyCode.KeyCode_Impl_.Q = 113;
lime.ui._KeyCode.KeyCode_Impl_.R = 114;
lime.ui._KeyCode.KeyCode_Impl_.S = 115;
lime.ui._KeyCode.KeyCode_Impl_.T = 116;
lime.ui._KeyCode.KeyCode_Impl_.U = 117;
lime.ui._KeyCode.KeyCode_Impl_.V = 118;
lime.ui._KeyCode.KeyCode_Impl_.W = 119;
lime.ui._KeyCode.KeyCode_Impl_.X = 120;
lime.ui._KeyCode.KeyCode_Impl_.Y = 121;
lime.ui._KeyCode.KeyCode_Impl_.Z = 122;
lime.ui._KeyCode.KeyCode_Impl_.DELETE = 127;
lime.ui._KeyCode.KeyCode_Impl_.CAPS_LOCK = 1073741881;
lime.ui._KeyCode.KeyCode_Impl_.F1 = 1073741882;
lime.ui._KeyCode.KeyCode_Impl_.F2 = 1073741883;
lime.ui._KeyCode.KeyCode_Impl_.F3 = 1073741884;
lime.ui._KeyCode.KeyCode_Impl_.F4 = 1073741885;
lime.ui._KeyCode.KeyCode_Impl_.F5 = 1073741886;
lime.ui._KeyCode.KeyCode_Impl_.F6 = 1073741887;
lime.ui._KeyCode.KeyCode_Impl_.F7 = 1073741888;
lime.ui._KeyCode.KeyCode_Impl_.F8 = 1073741889;
lime.ui._KeyCode.KeyCode_Impl_.F9 = 1073741890;
lime.ui._KeyCode.KeyCode_Impl_.F10 = 1073741891;
lime.ui._KeyCode.KeyCode_Impl_.F11 = 1073741892;
lime.ui._KeyCode.KeyCode_Impl_.F12 = 1073741893;
lime.ui._KeyCode.KeyCode_Impl_.PRINT_SCREEN = 1073741894;
lime.ui._KeyCode.KeyCode_Impl_.SCROLL_LOCK = 1073741895;
lime.ui._KeyCode.KeyCode_Impl_.PAUSE = 1073741896;
lime.ui._KeyCode.KeyCode_Impl_.INSERT = 1073741897;
lime.ui._KeyCode.KeyCode_Impl_.HOME = 1073741898;
lime.ui._KeyCode.KeyCode_Impl_.PAGE_UP = 1073741899;
lime.ui._KeyCode.KeyCode_Impl_.END = 1073741901;
lime.ui._KeyCode.KeyCode_Impl_.PAGE_DOWN = 1073741902;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT = 1073741903;
lime.ui._KeyCode.KeyCode_Impl_.LEFT = 1073741904;
lime.ui._KeyCode.KeyCode_Impl_.DOWN = 1073741905;
lime.ui._KeyCode.KeyCode_Impl_.UP = 1073741906;
lime.ui._KeyCode.KeyCode_Impl_.NUM_LOCK = 1073741907;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DIVIDE = 1073741908;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MULTIPLY = 1073741909;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MINUS = 1073741910;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PLUS = 1073741911;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_ENTER = 1073741912;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_1 = 1073741913;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_2 = 1073741914;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_3 = 1073741915;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_4 = 1073741916;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_5 = 1073741917;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_6 = 1073741918;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_7 = 1073741919;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_8 = 1073741920;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_9 = 1073741921;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_0 = 1073741922;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PERIOD = 1073741923;
lime.ui._KeyCode.KeyCode_Impl_.APPLICATION = 1073741925;
lime.ui._KeyCode.KeyCode_Impl_.POWER = 1073741926;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_EQUALS = 1073741927;
lime.ui._KeyCode.KeyCode_Impl_.F13 = 1073741928;
lime.ui._KeyCode.KeyCode_Impl_.F14 = 1073741929;
lime.ui._KeyCode.KeyCode_Impl_.F15 = 1073741930;
lime.ui._KeyCode.KeyCode_Impl_.F16 = 1073741931;
lime.ui._KeyCode.KeyCode_Impl_.F17 = 1073741932;
lime.ui._KeyCode.KeyCode_Impl_.F18 = 1073741933;
lime.ui._KeyCode.KeyCode_Impl_.F19 = 1073741934;
lime.ui._KeyCode.KeyCode_Impl_.F20 = 1073741935;
lime.ui._KeyCode.KeyCode_Impl_.F21 = 1073741936;
lime.ui._KeyCode.KeyCode_Impl_.F22 = 1073741937;
lime.ui._KeyCode.KeyCode_Impl_.F23 = 1073741938;
lime.ui._KeyCode.KeyCode_Impl_.F24 = 1073741939;
lime.ui._KeyCode.KeyCode_Impl_.EXECUTE = 1073741940;
lime.ui._KeyCode.KeyCode_Impl_.HELP = 1073741941;
lime.ui._KeyCode.KeyCode_Impl_.MENU = 1073741942;
lime.ui._KeyCode.KeyCode_Impl_.SELECT = 1073741943;
lime.ui._KeyCode.KeyCode_Impl_.STOP = 1073741944;
lime.ui._KeyCode.KeyCode_Impl_.AGAIN = 1073741945;
lime.ui._KeyCode.KeyCode_Impl_.UNDO = 1073741946;
lime.ui._KeyCode.KeyCode_Impl_.CUT = 1073741947;
lime.ui._KeyCode.KeyCode_Impl_.COPY = 1073741948;
lime.ui._KeyCode.KeyCode_Impl_.PASTE = 1073741949;
lime.ui._KeyCode.KeyCode_Impl_.FIND = 1073741950;
lime.ui._KeyCode.KeyCode_Impl_.MUTE = 1073741951;
lime.ui._KeyCode.KeyCode_Impl_.VOLUME_UP = 1073741952;
lime.ui._KeyCode.KeyCode_Impl_.VOLUME_DOWN = 1073741953;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_COMMA = 1073741957;
lime.ui._KeyCode.KeyCode_Impl_.ALT_ERASE = 1073741977;
lime.ui._KeyCode.KeyCode_Impl_.SYSTEM_REQUEST = 1073741978;
lime.ui._KeyCode.KeyCode_Impl_.CANCEL = 1073741979;
lime.ui._KeyCode.KeyCode_Impl_.CLEAR = 1073741980;
lime.ui._KeyCode.KeyCode_Impl_.PRIOR = 1073741981;
lime.ui._KeyCode.KeyCode_Impl_.RETURN2 = 1073741982;
lime.ui._KeyCode.KeyCode_Impl_.SEPARATOR = 1073741983;
lime.ui._KeyCode.KeyCode_Impl_.OUT = 1073741984;
lime.ui._KeyCode.KeyCode_Impl_.OPER = 1073741985;
lime.ui._KeyCode.KeyCode_Impl_.CLEAR_AGAIN = 1073741986;
lime.ui._KeyCode.KeyCode_Impl_.CRSEL = 1073741987;
lime.ui._KeyCode.KeyCode_Impl_.EXSEL = 1073741988;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_00 = 1073742000;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_000 = 1073742001;
lime.ui._KeyCode.KeyCode_Impl_.THOUSAND_SEPARATOR = 1073742002;
lime.ui._KeyCode.KeyCode_Impl_.DECIMAL_SEPARATOR = 1073742003;
lime.ui._KeyCode.KeyCode_Impl_.CURRENCY_UNIT = 1073742004;
lime.ui._KeyCode.KeyCode_Impl_.CURRENCY_SUBUNIT = 1073742005;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LEFT_BRACE = 1073742008;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_RIGHT_BRACE = 1073742009;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_TAB = 1073742010;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_BACKSPACE = 1073742011;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_A = 1073742012;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_B = 1073742013;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_C = 1073742014;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_D = 1073742015;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_E = 1073742016;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_F = 1073742017;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_XOR = 1073742018;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_POWER = 1073742019;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PERCENT = 1073742020;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LESS_THAN = 1073742021;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_GREATER_THAN = 1073742022;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_AMPERSAND = 1073742023;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_VERTICAL_BAR = 1073742025;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_COLON = 1073742027;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_HASH = 1073742028;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_SPACE = 1073742029;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_AT = 1073742030;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_EXCLAMATION = 1073742031;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_STORE = 1073742032;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_RECALL = 1073742033;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_CLEAR = 1073742034;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_ADD = 1073742035;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_SUBTRACT = 1073742036;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_MULTIPLY = 1073742037;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_DIVIDE = 1073742038;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PLUS_MINUS = 1073742039;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_CLEAR = 1073742040;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_CLEAR_ENTRY = 1073742041;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_BINARY = 1073742042;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_OCTAL = 1073742043;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DECIMAL = 1073742044;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_HEXADECIMAL = 1073742045;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_CTRL = 1073742048;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_SHIFT = 1073742049;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_ALT = 1073742050;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_META = 1073742051;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_CTRL = 1073742052;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_SHIFT = 1073742053;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_ALT = 1073742054;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_META = 1073742055;
lime.ui._KeyCode.KeyCode_Impl_.MODE = 1073742081;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_NEXT = 1073742082;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_PREVIOUS = 1073742083;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_STOP = 1073742084;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_PLAY = 1073742085;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_MUTE = 1073742086;
lime.ui._KeyCode.KeyCode_Impl_.MEDIA_SELECT = 1073742087;
lime.ui._KeyCode.KeyCode_Impl_.WWW = 1073742088;
lime.ui._KeyCode.KeyCode_Impl_.MAIL = 1073742089;
lime.ui._KeyCode.KeyCode_Impl_.CALCULATOR = 1073742090;
lime.ui._KeyCode.KeyCode_Impl_.COMPUTER = 1073742091;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_SEARCH = 1073742092;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_HOME = 1073742093;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_BACK = 1073742094;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_FORWARD = 1073742095;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_STOP = 1073742096;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_REFRESH = 1073742097;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_BOOKMARKS = 1073742098;
lime.ui._KeyCode.KeyCode_Impl_.BRIGHTNESS_DOWN = 1073742099;
lime.ui._KeyCode.KeyCode_Impl_.BRIGHTNESS_UP = 1073742100;
lime.ui._KeyCode.KeyCode_Impl_.DISPLAY_SWITCH = 1073742101;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_TOGGLE = 1073742102;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_DOWN = 1073742103;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_UP = 1073742104;
lime.ui._KeyCode.KeyCode_Impl_.EJECT = 1073742105;
lime.ui._KeyCode.KeyCode_Impl_.SLEEP = 1073742106;
lime.ui._KeyModifier.KeyModifier_Impl_.NONE = 0;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_SHIFT = 1;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_SHIFT = 2;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_CTRL = 64;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_CTRL = 128;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_ALT = 256;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_ALT = 512;
lime.ui._KeyModifier.KeyModifier_Impl_.LEFT_META = 1024;
lime.ui._KeyModifier.KeyModifier_Impl_.RIGHT_META = 2048;
lime.ui._KeyModifier.KeyModifier_Impl_.NUM_LOCK = 4096;
lime.ui._KeyModifier.KeyModifier_Impl_.CAPS_LOCK = 8192;
lime.ui._KeyModifier.KeyModifier_Impl_.MODE = 16384;
lime.ui._KeyModifier.KeyModifier_Impl_.CTRL = 192;
lime.ui._KeyModifier.KeyModifier_Impl_.SHIFT = 3;
lime.ui._KeyModifier.KeyModifier_Impl_.ALT = 768;
lime.ui._KeyModifier.KeyModifier_Impl_.META = 3072;
lime.utils.ByteArray.lime_byte_array_get_native_pointer = lime.system.System.load("lime","lime_byte_array_get_native_pointer",1);
lime.utils.ByteArray.lime_byte_array_overwrite_file = lime.system.System.load("lime","lime_byte_array_overwrite_file",2);
lime.utils.ByteArray.lime_byte_array_read_file = lime.system.System.load("lime","lime_byte_array_read_file",1);
lime.utils.ByteArray.lime_lzma_decode = lime.system.System.load("lime","lime_lzma_decode",1);
lime.utils.ByteArray.lime_lzma_encode = lime.system.System.load("lime","lime_lzma_encode",1);
motion.actuators.SimpleActuator.actuators = new Array();
motion.actuators.SimpleActuator.actuatorsLength = 0;
motion.actuators.SimpleActuator.addedEvent = false;
motion.Actuate.defaultActuator = motion.actuators.SimpleActuator;
motion.Actuate.defaultEase = motion.easing.Expo.get_easeOut();
motion.Actuate.targetLibraries = new haxe.ds.ObjectMap();
openfl.Assets.cache = new openfl.AssetCache();
openfl.Assets.dispatcher = new openfl.events.EventDispatcher();
openfl._Assets.AssetType_Impl_.BINARY = "BINARY";
openfl._Assets.AssetType_Impl_.FONT = "FONT";
openfl._Assets.AssetType_Impl_.IMAGE = "IMAGE";
openfl._Assets.AssetType_Impl_.MOVIE_CLIP = "MOVIE_CLIP";
openfl._Assets.AssetType_Impl_.MUSIC = "MUSIC";
openfl._Assets.AssetType_Impl_.SOUND = "SOUND";
openfl._Assets.AssetType_Impl_.TEMPLATE = "TEMPLATE";
openfl._Assets.AssetType_Impl_.TEXT = "TEXT";
openfl._internal.aglsl.Context3D.defaultsampler = new openfl._internal.aglsl.Sampler();
openfl._internal.aglsl.Context3D.driverInfo = "Call getter function instead";
openfl._internal.aglsl.Context3D.enableErrorChecking = false;
openfl._internal.aglsl.Context3D.maxfragconstants = 28;
openfl._internal.aglsl.Context3D.maxstreams = 8;
openfl._internal.aglsl.Context3D.maxtemp = 8;
openfl._internal.aglsl.Context3D.maxtextures = 8;
openfl._internal.aglsl.Context3D.maxvertexconstants = 128;
openfl._internal.aglsl.Context3D.resources = [];
openfl._internal.renderer.TextFieldGraphics.bitmapData = new haxe.ds.ObjectMap();
openfl._internal.renderer.TextFieldGraphics.glyphs = new haxe.ds.ObjectMap();
openfl._internal.renderer.TextFieldGraphics.tilesheets = new haxe.ds.ObjectMap();
openfl._internal.renderer.TextFieldGraphics.tileIDs = new haxe.ds.ObjectMap();
openfl._internal.renderer.cairo.CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl._internal.renderer.cairo.CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl._internal.renderer.canvas.CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl._internal.renderer.canvas.CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL = null;
openfl._internal.renderer.opengl.GLRenderer.glContextId = 0;
openfl._internal.renderer.opengl.GLRenderer.glContexts = [];
openfl._internal.renderer.opengl.shaders2.Shader.UID = 0;
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.TexCoord = "aTexCoord0";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Attrib_Impl_.Color = "aColor";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.Sampler = "uSampler0";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.ProjectionMatrix = "uProjectionMatrix";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._DefaultShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.TexCoord = "aTexCoord0";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Attrib_Impl_.Color = "aColor";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.UseTexture = "uUseTexture";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.Sampler = "uSampler0";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.ProjectionMatrix = "uProjectionMatrix";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._DrawTrianglesShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._FillShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.TranslationMatrix = "uTranslationMatrix";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.ProjectionMatrix = "uProjectionMatrix";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._FillShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.TranslationMatrix = "uTranslationMatrix";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.PatternMatrix = "uPatternMatrix";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.PatternTL = "uPatternTL";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.PatternBR = "uPatternBR";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.Sampler = "uSampler0";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.ProjectionMatrix = "uProjectionMatrix";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.Color = "uColor";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._PatternFillShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_.Position = "aPosition";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Attrib_Impl_.Color = "aColor";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.TranslationMatrix = "uTranslationMatrix";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.ProjectionMatrix = "uProjectionMatrix";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.Alpha = "uAlpha";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.ColorMultiplier = "uColorMultiplier";
openfl._internal.renderer.opengl.shaders2._PrimitiveShader.Uniform_Impl_.ColorOffset = "uColorOffset";
openfl._internal.renderer.opengl.utils.PathBuiler.__currentWinding = 0;
openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex = 0;
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_.EVEN_ODD = 0;
openfl._internal.renderer.opengl.utils._DrawPath.WindingRule_Impl_.NON_ZERO = 1;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.fillVertexAttributes = [new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition")];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition"),new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aTexCoord0"),new openfl._internal.renderer.opengl.utils.VertexAttribute(4,5121,true,"aColor")];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.primitiveVertexAttributes = [new openfl._internal.renderer.opengl.utils.VertexAttribute(2,5126,false,"aPosition"),new openfl._internal.renderer.opengl.utils.VertexAttribute(4,5126,false,"aColor")];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.graphicsDataPool = [];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool = [];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition = new openfl.geom.Point();
openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds = new openfl.geom.Rectangle();
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.DEFAULT = 0;
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.STENCIL = 1;
openfl._internal.renderer.opengl.utils.SpriteBatch.VERTS_PER_SPRITE = 4;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.BYTE = 5120;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.UNSIGNED_BYTE = 5121;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.SHORT = 5122;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.UNSIGNED_SHORT = 5123;
openfl._internal.renderer.opengl.utils._VertexAttribute.ElementType_Impl_.FLOAT = 5126;
openfl.display.Graphics.TILE_SCALE = 1;
openfl.display.Graphics.TILE_ROTATION = 2;
openfl.display.Graphics.TILE_RGB = 4;
openfl.display.Graphics.TILE_ALPHA = 8;
openfl.display.Graphics.TILE_TRANS_2x2 = 16;
openfl.display.Graphics.TILE_RECT = 32;
openfl.display.Graphics.TILE_ORIGIN = 64;
openfl.display.Graphics.TILE_BLEND_NORMAL = 0;
openfl.display.Graphics.TILE_BLEND_ADD = 65536;
openfl.display.GraphicsPathCommand.LINE_TO = 2;
openfl.display.GraphicsPathCommand.MOVE_TO = 1;
openfl.display.GraphicsPathCommand.CURVE_TO = 3;
openfl.display.GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl.display.GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl.display.GraphicsPathCommand.NO_OP = 0;
openfl.display.GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl.display.OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl.display.OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl.display.Tilesheet.TILE_SCALE = 1;
openfl.display.Tilesheet.TILE_ROTATION = 2;
openfl.display.Tilesheet.TILE_RGB = 4;
openfl.display.Tilesheet.TILE_ALPHA = 8;
openfl.display.Tilesheet.TILE_TRANS_2x2 = 16;
openfl.display.Tilesheet.TILE_RECT = 32;
openfl.display.Tilesheet.TILE_ORIGIN = 64;
openfl.display.Tilesheet.TILE_BLEND_NORMAL = 0;
openfl.display.Tilesheet.TILE_BLEND_ADD = 65536;
openfl.display.Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl.display.Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl.display.Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl.display.Tilesheet.__defaultPoint = new openfl.geom.Point(0,0);
openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl.display3D.Context3D.MAX_SAMPLERS = 8;
openfl.display3D.Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl.display3D.Context3D.anisotropySupportTested = false;
openfl.display3D.Context3D.supportsAnisotropy = false;
openfl.display3D.Context3D.maxSupportedAnisotropy = 256;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.DESTINATION_ALPHA = 772;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.DESTINATION_COLOR = 774;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE = 1;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_DESTINATION_ALPHA = 773;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_DESTINATION_COLOR = 775;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_SOURCE_ALPHA = 771;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ONE_MINUS_SOURCE_COLOR = 769;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.SOURCE_ALPHA = 770;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.SOURCE_COLOR = 768;
openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_.ZERO = 0;
openfl.display3D.Context3DClearMask.ALL = 17664;
openfl.display3D.Context3DClearMask.COLOR = 16384;
openfl.display3D.Context3DClearMask.DEPTH = 256;
openfl.display3D.Context3DClearMask.STENCIL = 1024;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.ALWAYS = 519;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.EQUAL = 514;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.GREATER = 516;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.GREATER_EQUAL = 518;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.LESS = 513;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.LESS_EQUAL = 515;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.NEVER = 512;
openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_.NOT_EQUAL = 517;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.BACK = 1028;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT = 1029;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT_AND_BACK = 1032;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.NONE = 0;
openfl.events.TextEvent.LINK = "link";
openfl.events.TextEvent.TEXT_INPUT = "textInput";
openfl.events.ErrorEvent.ERROR = "error";
openfl.events.FocusEvent.FOCUS_IN = "focusIn";
openfl.events.FocusEvent.FOCUS_OUT = "focusOut";
openfl.events.FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl.events.FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl.events.HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl.events.IOErrorEvent.IO_ERROR = "ioError";
openfl.events.KeyboardEvent.KEY_DOWN = "keyDown";
openfl.events.KeyboardEvent.KEY_UP = "keyUp";
openfl.events.MouseEvent.CLICK = "click";
openfl.events.MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl.events.MouseEvent.MIDDLE_CLICK = "middleClick";
openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl.events.MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl.events.MouseEvent.MOUSE_DOWN = "mouseDown";
openfl.events.MouseEvent.MOUSE_MOVE = "mouseMove";
openfl.events.MouseEvent.MOUSE_OUT = "mouseOut";
openfl.events.MouseEvent.MOUSE_OVER = "mouseOver";
openfl.events.MouseEvent.MOUSE_UP = "mouseUp";
openfl.events.MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl.events.MouseEvent.RIGHT_CLICK = "rightClick";
openfl.events.MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl.events.MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl.events.MouseEvent.ROLL_OUT = "rollOut";
openfl.events.MouseEvent.ROLL_OVER = "rollOver";
openfl.events.MouseEvent.__buttonDown = [false,false,false];
openfl.events.ProgressEvent.PROGRESS = "progress";
openfl.events.ProgressEvent.SOCKET_DATA = "socketData";
openfl.events.SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl.events.TimerEvent.TIMER = "timer";
openfl.events.TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl.events.TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl.events.TouchEvent.TOUCH_END = "touchEnd";
openfl.events.TouchEvent.TOUCH_MOVE = "touchMove";
openfl.events.TouchEvent.TOUCH_OUT = "touchOut";
openfl.events.TouchEvent.TOUCH_OVER = "touchOver";
openfl.events.TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl.events.TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl.events.TouchEvent.TOUCH_TAP = "touchTap";
openfl.filters.BitmapFilterQuality.HIGH = 3;
openfl.filters.BitmapFilterQuality.MEDIUM = 2;
openfl.filters.BitmapFilterQuality.LOW = 1;
openfl.media.Sound.__registeredSounds = new haxe.ds.StringMap();
openfl.net.URLRequestMethod.DELETE = "DELETE";
openfl.net.URLRequestMethod.GET = "GET";
openfl.net.URLRequestMethod.HEAD = "HEAD";
openfl.net.URLRequestMethod.OPTIONS = "OPTIONS";
openfl.net.URLRequestMethod.POST = "POST";
openfl.net.URLRequestMethod.PUT = "PUT";
openfl.system.Capabilities.avHardwareDisable = true;
openfl.system.Capabilities.cpuArchitecture = "";
openfl.system.Capabilities.hasAccessibility = false;
openfl.system.Capabilities.hasAudio = true;
openfl.system.Capabilities.hasAudioEncoder = false;
openfl.system.Capabilities.hasEmbeddedVideo = false;
openfl.system.Capabilities.hasIME = false;
openfl.system.Capabilities.hasMP3 = false;
openfl.system.Capabilities.hasPrinting = false;
openfl.system.Capabilities.hasScreenBroadcast = false;
openfl.system.Capabilities.hasScreenPlayback = false;
openfl.system.Capabilities.hasStreamingAudio = false;
openfl.system.Capabilities.hasStreamingVideo = false;
openfl.system.Capabilities.hasTLS = true;
openfl.system.Capabilities.hasVideoEncoder = false;
openfl.system.Capabilities.isDebugger = false;
openfl.system.Capabilities.isEmbeddedInAcrobat = false;
openfl.system.Capabilities.localFileReadDisable = true;
openfl.system.Capabilities.manufacturer = "OpenFL Contributors";
openfl.system.Capabilities.maxLevelIDC = 0;
openfl.system.Capabilities.playerType = "OpenFL";
openfl.system.Capabilities.screenColor = "color";
openfl.system.Capabilities.serverString = "";
openfl.system.Capabilities.supports32BitProcesses = false;
openfl.system.Capabilities.supports64BitProcesses = false;
openfl.system.Capabilities.touchscreenType = openfl.system.TouchscreenType.FINGER;
openfl.system.SecurityDomain.currentDomain = new openfl.system.SecurityDomain();
openfl.text.Font.__registeredFonts = new Array();
openfl.ui._KeyLocation.KeyLocation_Impl_.STANDARD = 0;
openfl.ui._KeyLocation.KeyLocation_Impl_.LEFT = 1;
openfl.ui._KeyLocation.KeyLocation_Impl_.RIGHT = 2;
openfl.ui._KeyLocation.KeyLocation_Impl_.NUM_PAD = 3;
openfl.ui.Keyboard.NUMBER_0 = 48;
openfl.ui.Keyboard.NUMBER_1 = 49;
openfl.ui.Keyboard.NUMBER_2 = 50;
openfl.ui.Keyboard.NUMBER_3 = 51;
openfl.ui.Keyboard.NUMBER_4 = 52;
openfl.ui.Keyboard.NUMBER_5 = 53;
openfl.ui.Keyboard.NUMBER_6 = 54;
openfl.ui.Keyboard.NUMBER_7 = 55;
openfl.ui.Keyboard.NUMBER_8 = 56;
openfl.ui.Keyboard.NUMBER_9 = 57;
openfl.ui.Keyboard.A = 65;
openfl.ui.Keyboard.B = 66;
openfl.ui.Keyboard.C = 67;
openfl.ui.Keyboard.D = 68;
openfl.ui.Keyboard.E = 69;
openfl.ui.Keyboard.F = 70;
openfl.ui.Keyboard.G = 71;
openfl.ui.Keyboard.H = 72;
openfl.ui.Keyboard.I = 73;
openfl.ui.Keyboard.J = 74;
openfl.ui.Keyboard.K = 75;
openfl.ui.Keyboard.L = 76;
openfl.ui.Keyboard.M = 77;
openfl.ui.Keyboard.N = 78;
openfl.ui.Keyboard.O = 79;
openfl.ui.Keyboard.P = 80;
openfl.ui.Keyboard.Q = 81;
openfl.ui.Keyboard.R = 82;
openfl.ui.Keyboard.S = 83;
openfl.ui.Keyboard.T = 84;
openfl.ui.Keyboard.U = 85;
openfl.ui.Keyboard.V = 86;
openfl.ui.Keyboard.W = 87;
openfl.ui.Keyboard.X = 88;
openfl.ui.Keyboard.Y = 89;
openfl.ui.Keyboard.Z = 90;
openfl.ui.Keyboard.NUMPAD_0 = 96;
openfl.ui.Keyboard.NUMPAD_1 = 97;
openfl.ui.Keyboard.NUMPAD_2 = 98;
openfl.ui.Keyboard.NUMPAD_3 = 99;
openfl.ui.Keyboard.NUMPAD_4 = 100;
openfl.ui.Keyboard.NUMPAD_5 = 101;
openfl.ui.Keyboard.NUMPAD_6 = 102;
openfl.ui.Keyboard.NUMPAD_7 = 103;
openfl.ui.Keyboard.NUMPAD_8 = 104;
openfl.ui.Keyboard.NUMPAD_9 = 105;
openfl.ui.Keyboard.NUMPAD_MULTIPLY = 106;
openfl.ui.Keyboard.NUMPAD_ADD = 107;
openfl.ui.Keyboard.NUMPAD_ENTER = 108;
openfl.ui.Keyboard.NUMPAD_SUBTRACT = 109;
openfl.ui.Keyboard.NUMPAD_DECIMAL = 110;
openfl.ui.Keyboard.NUMPAD_DIVIDE = 111;
openfl.ui.Keyboard.F1 = 112;
openfl.ui.Keyboard.F2 = 113;
openfl.ui.Keyboard.F3 = 114;
openfl.ui.Keyboard.F4 = 115;
openfl.ui.Keyboard.F5 = 116;
openfl.ui.Keyboard.F6 = 117;
openfl.ui.Keyboard.F7 = 118;
openfl.ui.Keyboard.F8 = 119;
openfl.ui.Keyboard.F9 = 120;
openfl.ui.Keyboard.F10 = 121;
openfl.ui.Keyboard.F11 = 122;
openfl.ui.Keyboard.F12 = 123;
openfl.ui.Keyboard.F13 = 124;
openfl.ui.Keyboard.F14 = 125;
openfl.ui.Keyboard.F15 = 126;
openfl.ui.Keyboard.BACKSPACE = 8;
openfl.ui.Keyboard.TAB = 9;
openfl.ui.Keyboard.ALTERNATE = 18;
openfl.ui.Keyboard.ENTER = 13;
openfl.ui.Keyboard.COMMAND = 15;
openfl.ui.Keyboard.SHIFT = 16;
openfl.ui.Keyboard.CONTROL = 17;
openfl.ui.Keyboard.BREAK = 19;
openfl.ui.Keyboard.CAPS_LOCK = 20;
openfl.ui.Keyboard.NUMPAD = 21;
openfl.ui.Keyboard.ESCAPE = 27;
openfl.ui.Keyboard.SPACE = 32;
openfl.ui.Keyboard.PAGE_UP = 33;
openfl.ui.Keyboard.PAGE_DOWN = 34;
openfl.ui.Keyboard.END = 35;
openfl.ui.Keyboard.HOME = 36;
openfl.ui.Keyboard.LEFT = 37;
openfl.ui.Keyboard.RIGHT = 39;
openfl.ui.Keyboard.UP = 38;
openfl.ui.Keyboard.DOWN = 40;
openfl.ui.Keyboard.INSERT = 45;
openfl.ui.Keyboard.DELETE = 46;
openfl.ui.Keyboard.NUMLOCK = 144;
openfl.ui.Keyboard.SEMICOLON = 186;
openfl.ui.Keyboard.EQUAL = 187;
openfl.ui.Keyboard.COMMA = 188;
openfl.ui.Keyboard.MINUS = 189;
openfl.ui.Keyboard.PERIOD = 190;
openfl.ui.Keyboard.SLASH = 191;
openfl.ui.Keyboard.BACKQUOTE = 192;
openfl.ui.Keyboard.LEFTBRACKET = 219;
openfl.ui.Keyboard.BACKSLASH = 220;
openfl.ui.Keyboard.RIGHTBRACKET = 221;
openfl.ui.Keyboard.QUOTE = 222;
openfl.utils.Endian.BIG_ENDIAN = "bigEndian";
openfl.utils.Endian.LITTLE_ENDIAN = "littleEndian";
org.vic.box2d.Box2dHelper.inst = new org.vic.box2d.Box2dHelper();
ru.stablex.ui.UIBuilder.defaults = new haxe.ds.StringMap();
ru.stablex.ui.UIBuilder.dispatcher = new openfl.events.EventDispatcher();
ru.stablex.ui.UIBuilder._objects = new haxe.ds.StringMap();
ru.stablex.ui.UIBuilder.skins = new haxe.ds.StringMap();
ru.stablex.ui.UIBuilder._nextId = 0;
ru.stablex.ui.UIBuilder._skinQueue = new List();
ru.stablex.ui.UIBuilder.frameTime = 0;
ru.stablex.ui.events.WidgetEvent.CREATE = "widgetCreate";
ru.stablex.ui.events.WidgetEvent.FREE = "widgetFree";
ru.stablex.ui.events.WidgetEvent.RESIZE = "widgetResize";
ru.stablex.ui.events.WidgetEvent.INITIAL_RESIZE = "widgetInitialResize";
ru.stablex.ui.events.WidgetEvent.CHANGE = "widgetChange";
ru.stablex.ui.events.WidgetEvent.SCROLL_START = "widgetScrollStart";
ru.stablex.ui.events.WidgetEvent.SCROLL_STOP = "widgetScrollStop";
ru.stablex.ui.events.WidgetEvent.ADDED = "widgetAdded";
ru.stablex.ui.events.WidgetEvent.REMOVED = "widgetRemoved";
ru.stablex.ui.widgets.Widget._X_USE_LEFT = 1;
ru.stablex.ui.widgets.Widget._X_USE_LEFT_PERCENT = 2;
ru.stablex.ui.widgets.Widget._X_USE_RIGHT = 3;
ru.stablex.ui.widgets.Widget._X_USE_RIGHT_PERCENT = 4;
ru.stablex.ui.widgets.Widget._Y_USE_TOP = 5;
ru.stablex.ui.widgets.Widget._Y_USE_TOP_PERCENT = 6;
ru.stablex.ui.widgets.Widget._Y_USE_BOTTOM = 7;
ru.stablex.ui.widgets.Widget._Y_USE_BOTTOM_PERCENT = 8;
ApplicationMain.main();
})(typeof window != "undefined" ? window : exports);
